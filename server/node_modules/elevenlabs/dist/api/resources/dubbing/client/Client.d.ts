/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as fs from "fs";
import * as ElevenLabs from "../../../index";
import * as stream from "stream";
export declare namespace Dubbing {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Dubbing {
    protected readonly _options: Dubbing.Options;
    constructor(_options?: Dubbing.Options);
    /**
     * Dubs provided audio or video file into given language.
     *
     * @param {File | fs.ReadStream | undefined} file
     * @param {File | fs.ReadStream | undefined} csvFile
     * @param {File | fs.ReadStream | undefined} foregroundAudioFile
     * @param {File | fs.ReadStream | undefined} backgroundAudioFile
     * @param {ElevenLabs.BodyDubAVideoOrAnAudioFileV1DubbingPost} request
     * @param {Dubbing.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.dubbing.dubAVideoOrAnAudioFile(fs.createReadStream("/path/to/your/file"), fs.createReadStream("/path/to/your/file"), fs.createReadStream("/path/to/your/file"), fs.createReadStream("/path/to/your/file"), {
     *         target_lang: "target_lang"
     *     })
     */
    dubAVideoOrAnAudioFile(file: File | fs.ReadStream | undefined, csvFile: File | fs.ReadStream | undefined, foregroundAudioFile: File | fs.ReadStream | undefined, backgroundAudioFile: File | fs.ReadStream | undefined, request: ElevenLabs.BodyDubAVideoOrAnAudioFileV1DubbingPost, requestOptions?: Dubbing.RequestOptions): Promise<ElevenLabs.DoDubbingResponse>;
    /**
     * Returns metadata about a dubbing project, including whether it's still in progress or not
     *
     * @param {string} dubbingId - ID of the dubbing project.
     * @param {Dubbing.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.dubbing.getDubbingProjectMetadata("dubbing_id")
     */
    getDubbingProjectMetadata(dubbingId: string, requestOptions?: Dubbing.RequestOptions): Promise<ElevenLabs.DubbingMetadataResponse>;
    /**
     * Deletes a dubbing project.
     *
     * @param {string} dubbingId - ID of the dubbing project.
     * @param {Dubbing.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await elevenLabs.dubbing.deleteDubbingProject("dubbing_id")
     */
    deleteDubbingProject(dubbingId: string, requestOptions?: Dubbing.RequestOptions): Promise<unknown>;
    /**
     * Returns dubbed file as a streamed file. Videos will be returned in MP4 format and audio only dubs will be returned in MP3.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     */
    getDubbedFile(dubbingId: string, languageCode: string, requestOptions?: Dubbing.RequestOptions): Promise<stream.Readable>;
}
