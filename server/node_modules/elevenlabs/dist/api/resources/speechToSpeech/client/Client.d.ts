/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as fs from "fs";
import * as ElevenLabs from "../../../index";
import * as stream from "stream";
export declare namespace SpeechToSpeech {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class SpeechToSpeech {
    protected readonly _options: SpeechToSpeech.Options;
    constructor(_options?: SpeechToSpeech.Options);
    /**
     * Create speech by combining the content and emotion of the uploaded audio with a voice of your choice.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     */
    convert(audio: File | fs.ReadStream, voiceId: string, request: ElevenLabs.BodySpeechToSpeechV1SpeechToSpeechVoiceIdPost, requestOptions?: SpeechToSpeech.RequestOptions): Promise<stream.Readable>;
    /**
     * Create speech by combining the content and emotion of the uploaded audio with a voice of your choice and returns an audio stream.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     */
    convertAsStream(audio: File | fs.ReadStream, voiceId: string, request: ElevenLabs.BodySpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPost, requestOptions?: SpeechToSpeech.RequestOptions): Promise<stream.Readable>;
}
