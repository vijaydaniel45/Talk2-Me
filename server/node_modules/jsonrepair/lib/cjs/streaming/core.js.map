{"version":3,"file":"core.js","names":["_InputBuffer","require","_OutputBuffer","_JSONRepairError","_stack","_stringUtils","controlCharacters","escapeCharacters","b","f","n","r","t","jsonrepairCore","_ref","onData","bufferSize","chunkSize","input","createInputBuffer","output","createOutputBuffer","write","i","iFlushed","stack","createStack","flushInputBuffer","flush","transform","chunk","push","currentLength","parse","close","parseWhitespaceAndSkipComments","type","StackType","object","caret","Caret","beforeKey","parseObjectKey","parseUnexpectedColon","parseRepairTrailingComma","parseRepairObjectEndOrComma","beforeValue","parseValue","parseRepairMissingObjectValue","afterValue","parseObjectComma","parseObjectEnd","array","parseRepairArrayEnd","parseArrayComma","parseArrayEnd","parseRepairMissingComma","ndJson","parseRepairNdJsonEnd","functionCall","parseFunctionCallEnd","root","parseUnexpectedEnd","parseRootEnd","parseObjectStart","parseArrayStart","parseString","parseNumber","parseKeywords","parseRepairUnquotedString","parseCharacter","codeOpeningBrace","codeClosingBrace","update","codeOpeningBracket","codeClosingBracket","unquotedStringEnd","findNextDelimiter","symbol","substring","skipCharacter","codeOpenParenthesis","JSON","stringify","charCodeAt","codeDoubleQuote","endsWithIgnoringWhitespace","stripLastOccurrence","codeColon","throwObjectKeyExpected","isEnd","throwUnexpectedEnd","throwUnexpectedCharacter","parsedKey","parseUnquotedKey","truncatedText","isStartOfValue","charAt","insertBeforeLastWhitespace","throwColonExpected","codeComma","pop","codeCloseParenthesis","codeSemicolon","parsedComma","unshift","start","changed","parseWhitespace","parseComment","whitespace","normal","isWhitespace","isSpecialWhitespace","length","codeSlash","codeAsterisk","atEndOfBlockComment","codeNewline","code","skipEscapeCharacter","codeBackslash","stopAtDelimiter","arguments","undefined","skipEscapeChars","isQuote","isEndQuote","isDoubleQuote","isSingleQuote","isSingleQuoteLike","isDoubleQuoteLike","iBefore","oBefore","iPrev","prevNonWhitespaceIndex","isDelimiter","remove","iQuote","oQuote","isDigit","parseConcatenatedString","insertAt","char","escapeChar","j","isHex","throwInvalidUnicodeCharacter","isControlCharacter","isValidStringCharacter","throwInvalidCharacter","parsed","codePlus","parsedStr","codeMinus","atEndOfNumber","repairNumberEndingWithNumericSymbol","codeDot","codeLowercaseE","codeUppercaseE","num","hasInvalidLeadingZero","test","concat","parseKeyword","name","value","end","isDelimiterExceptSlash","prev","JSONRepairError","chars"],"sources":["../../../src/streaming/core.ts"],"sourcesContent":["import { createInputBuffer } from './buffer/InputBuffer.js'\nimport { createOutputBuffer } from './buffer/OutputBuffer.js'\nimport { JSONRepairError } from '../utils/JSONRepairError.js'\nimport { Caret, createStack, StackType } from './stack.js'\nimport {\n  codeAsterisk,\n  codeBackslash,\n  codeCloseParenthesis,\n  codeClosingBrace,\n  codeClosingBracket,\n  codeColon,\n  codeComma,\n  codeDot,\n  codeDoubleQuote,\n  codeLowercaseE,\n  codeMinus,\n  codeNewline,\n  codeOpeningBrace,\n  codeOpeningBracket,\n  codeOpenParenthesis,\n  codePlus,\n  codeSemicolon,\n  codeSlash,\n  codeUppercaseE,\n  isControlCharacter,\n  isDelimiter,\n  isDelimiterExceptSlash,\n  isDigit,\n  isDoubleQuote,\n  isDoubleQuoteLike,\n  isHex,\n  isQuote,\n  isSingleQuote,\n  isSingleQuoteLike,\n  isSpecialWhitespace,\n  isStartOfValue,\n  isValidStringCharacter,\n  isWhitespace\n} from '../utils/stringUtils.js'\n\nconst controlCharacters: { [key: string]: string } = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n}\n\n// map with all escape characters\nconst escapeCharacters: { [key: string]: string } = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\nexport interface JsonRepairCoreOptions {\n  onData: (chunk: string) => void\n  chunkSize?: number\n  bufferSize?: number\n}\n\nexport interface JsonRepairCore {\n  transform: (chunk: string) => void\n  flush: () => void\n}\n\nexport function jsonrepairCore({\n  onData,\n  bufferSize = 65536,\n  chunkSize = 65536\n}: JsonRepairCoreOptions): JsonRepairCore {\n  const input = createInputBuffer()\n\n  const output = createOutputBuffer({\n    write: onData,\n    bufferSize,\n    chunkSize\n  })\n\n  let i = 0\n  let iFlushed = 0\n  const stack = createStack()\n\n  function flushInputBuffer() {\n    while (iFlushed < i - bufferSize - chunkSize) {\n      iFlushed += chunkSize\n      input.flush(iFlushed)\n    }\n  }\n\n  function transform(chunk: string) {\n    input.push(chunk)\n\n    while (i < input.currentLength() - bufferSize && parse()) {\n      // loop until there is nothing more to process\n    }\n\n    flushInputBuffer()\n  }\n\n  function flush() {\n    input.close()\n\n    while (parse()) {\n      // loop until there is nothing more to process\n    }\n\n    output.flush()\n  }\n\n  function parse(): boolean {\n    parseWhitespaceAndSkipComments()\n\n    switch (stack.type) {\n      case StackType.object: {\n        switch (stack.caret) {\n          case Caret.beforeKey:\n            return (\n              parseObjectKey() ||\n              parseUnexpectedColon() ||\n              parseRepairTrailingComma() ||\n              parseRepairObjectEndOrComma()\n            )\n          case Caret.beforeValue:\n            return parseValue() || parseRepairMissingObjectValue()\n          case Caret.afterValue:\n            return parseObjectComma() || parseObjectEnd() || parseRepairObjectEndOrComma()\n          default:\n            return false\n        }\n      }\n\n      case StackType.array: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue() || parseRepairTrailingComma() || parseRepairArrayEnd()\n          case Caret.afterValue:\n            return (\n              parseArrayComma() ||\n              parseArrayEnd() ||\n              parseRepairMissingComma() ||\n              parseRepairArrayEnd()\n            )\n          default:\n            return false\n        }\n      }\n\n      case StackType.ndJson: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue() || parseRepairTrailingComma()\n          case Caret.afterValue:\n            return parseArrayComma() || parseRepairMissingComma() || parseRepairNdJsonEnd()\n          default:\n            return false\n        }\n      }\n\n      case StackType.functionCall: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue()\n          case Caret.afterValue:\n            return parseFunctionCallEnd()\n          default:\n            return false\n        }\n      }\n\n      case StackType.root: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue() || parseUnexpectedEnd()\n          case Caret.afterValue:\n            return parseRootEnd()\n          default:\n            return false\n        }\n      }\n\n      default:\n        return false\n    }\n  }\n\n  function parseValue(): boolean {\n    return (\n      parseObjectStart() ||\n      parseArrayStart() ||\n      parseString() ||\n      parseNumber() ||\n      parseKeywords() ||\n      parseRepairUnquotedString()\n    )\n  }\n\n  function parseObjectStart(): boolean {\n    if (parseCharacter(codeOpeningBrace)) {\n      parseWhitespaceAndSkipComments()\n      if (parseCharacter(codeClosingBrace)) {\n        return stack.update(Caret.afterValue)\n      }\n\n      return stack.push(StackType.object, Caret.beforeKey)\n    }\n\n    return false\n  }\n\n  function parseArrayStart(): boolean {\n    if (parseCharacter(codeOpeningBracket)) {\n      parseWhitespaceAndSkipComments()\n      if (parseCharacter(codeClosingBracket)) {\n        return stack.update(Caret.afterValue)\n      }\n\n      return stack.push(StackType.array, Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseRepairUnquotedString(): boolean {\n    const unquotedStringEnd = findNextDelimiter()\n    if (unquotedStringEnd !== null) {\n      const symbol = input.substring(i, unquotedStringEnd)\n      i = unquotedStringEnd\n\n      if (skipCharacter(codeOpenParenthesis)) {\n        // A MongoDB function call like NumberLong(\"2\")\n        // Or a JSONP function call like callback({...});\n        // we strip the function call\n\n        return stack.push(StackType.functionCall, Caret.beforeValue)\n      }\n\n      output.push(symbol === 'undefined' ? 'null' : JSON.stringify(symbol))\n\n      if (input.charCodeAt(i) === codeDoubleQuote) {\n        // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n        i++\n      }\n\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseRepairMissingObjectValue(): boolean {\n    // repair missing object value\n    output.push('null')\n    return stack.update(Caret.afterValue)\n  }\n\n  function parseRepairTrailingComma(): boolean {\n    // repair trailing comma\n    if (output.endsWithIgnoringWhitespace(',')) {\n      output.stripLastOccurrence(',')\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseUnexpectedColon(): boolean {\n    if (input.charCodeAt(i) === codeColon) {\n      throwObjectKeyExpected()\n    }\n\n    return false\n  }\n\n  function parseUnexpectedEnd(): boolean {\n    if (input.isEnd(i)) {\n      throwUnexpectedEnd()\n    } else {\n      throwUnexpectedCharacter()\n    }\n\n    return false\n  }\n\n  function parseObjectKey(): boolean {\n    const parsedKey = parseString() || parseUnquotedKey()\n    if (parsedKey) {\n      parseWhitespaceAndSkipComments()\n\n      if (parseCharacter(codeColon)) {\n        // expect a value after the :\n        return stack.update(Caret.beforeValue)\n      }\n\n      const truncatedText = input.isEnd(i)\n      if (isStartOfValue(input.charAt(i)) || truncatedText) {\n        // repair missing colon\n        output.insertBeforeLastWhitespace(':')\n        return stack.update(Caret.beforeValue)\n      }\n\n      throwColonExpected()\n    }\n\n    return false\n  }\n\n  function parseObjectComma(): boolean {\n    if (parseCharacter(codeComma)) {\n      return stack.update(Caret.beforeKey)\n    }\n\n    return false\n  }\n\n  function parseObjectEnd(): boolean {\n    if (parseCharacter(codeClosingBrace)) {\n      return stack.pop()\n    }\n\n    return false\n  }\n\n  function parseRepairObjectEndOrComma(): true {\n    // repair missing object end and trailing comma\n    if (input.charAt(i) === '{') {\n      output.stripLastOccurrence(',')\n      output.insertBeforeLastWhitespace('}')\n      return stack.pop()\n    }\n\n    // repair missing comma\n    if (!input.isEnd(i) && isStartOfValue(input.charAt(i))) {\n      output.insertBeforeLastWhitespace(',')\n      return stack.update(Caret.beforeKey)\n    }\n\n    // repair missing closing brace\n    output.insertBeforeLastWhitespace('}')\n    return stack.pop()\n  }\n\n  function parseArrayComma(): boolean {\n    if (parseCharacter(codeComma)) {\n      return stack.update(Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseArrayEnd(): boolean {\n    if (parseCharacter(codeClosingBracket)) {\n      return stack.pop()\n    }\n\n    return false\n  }\n\n  function parseRepairMissingComma(): boolean {\n    // repair missing comma\n    if (!input.isEnd(i) && isStartOfValue(input.charAt(i))) {\n      output.insertBeforeLastWhitespace(',')\n      return stack.update(Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseRepairArrayEnd(): true {\n    // repair missing closing bracket\n    output.insertBeforeLastWhitespace(']')\n    return stack.pop()\n  }\n\n  function parseRepairNdJsonEnd(): boolean {\n    if (input.isEnd(i)) {\n      output.push('\\n]')\n      return stack.pop()\n    } else {\n      throwUnexpectedEnd()\n      return false // just to make TS happy\n    }\n  }\n\n  function parseFunctionCallEnd(): true {\n    if (skipCharacter(codeCloseParenthesis)) {\n      skipCharacter(codeSemicolon)\n    }\n\n    return stack.pop()\n  }\n\n  function parseRootEnd(): boolean {\n    const parsedComma = parseCharacter(codeComma)\n    parseWhitespaceAndSkipComments()\n\n    if (\n      isStartOfValue(input.charAt(i)) &&\n      (output.endsWithIgnoringWhitespace(',') || output.endsWithIgnoringWhitespace('\\n'))\n    ) {\n      // start of a new value after end of the root level object: looks like\n      // newline delimited JSON -> turn into a root level array\n      if (!parsedComma) {\n        // repair missing comma\n        output.insertBeforeLastWhitespace(',')\n      }\n\n      output.unshift('[\\n')\n\n      return stack.push(StackType.ndJson, Caret.beforeValue)\n    }\n\n    if (parsedComma) {\n      // repair: remove trailing comma\n      output.stripLastOccurrence(',')\n\n      return stack.update(Caret.afterValue)\n    }\n\n    // repair redundant end braces and brackets\n    while (input.charCodeAt(i) === codeClosingBrace || input.charCodeAt(i) === codeClosingBracket) {\n      i++\n      parseWhitespaceAndSkipComments()\n    }\n\n    if (!input.isEnd(i)) {\n      throwUnexpectedCharacter()\n    }\n\n    return false\n  }\n\n  function parseWhitespaceAndSkipComments(): boolean {\n    const start = i\n\n    let changed = parseWhitespace()\n    do {\n      changed = parseComment()\n      if (changed) {\n        changed = parseWhitespace()\n      }\n    } while (changed)\n\n    return i > start\n  }\n\n  function parseWhitespace(): boolean {\n    let whitespace = ''\n    let normal: boolean\n    while (\n      (normal = isWhitespace(input.charCodeAt(i))) ||\n      isSpecialWhitespace(input.charCodeAt(i))\n    ) {\n      if (normal) {\n        whitespace += input.charAt(i)\n      } else {\n        // repair special whitespace\n        whitespace += ' '\n      }\n\n      i++\n    }\n\n    if (whitespace.length > 0) {\n      output.push(whitespace)\n      return true\n    }\n\n    return false\n  }\n\n  function parseComment(): boolean {\n    // find a block comment '/* ... */'\n    if (input.charCodeAt(i) === codeSlash && input.charCodeAt(i + 1) === codeAsterisk) {\n      // repair block comment by skipping it\n      while (!input.isEnd(i) && !atEndOfBlockComment(i)) {\n        i++\n      }\n      i += 2\n\n      return true\n    }\n\n    // find a line comment '// ...'\n    if (input.charCodeAt(i) === codeSlash && input.charCodeAt(i + 1) === codeSlash) {\n      // repair line comment by skipping it\n      while (!input.isEnd(i) && input.charCodeAt(i) !== codeNewline) {\n        i++\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  function parseCharacter(code: number): boolean {\n    if (input.charCodeAt(i) === code) {\n      output.push(input.charAt(i))\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipCharacter(code: number): boolean {\n    if (input.charCodeAt(i) === code) {\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipEscapeCharacter(): boolean {\n    return skipCharacter(codeBackslash)\n  }\n\n  /**\n   * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\n   * Repair strings enclosed in single quotes or special quotes\n   * Repair an escaped string\n   *\n   * The function can run in two stages:\n   * - First, it assumes the string has a valid end quote\n   * - If it turns out that the string does not have a valid end quote followed\n   *   by a delimiter (which should be the case), the function runs again in a\n   *   more conservative way, stopping the string at the first next delimiter\n   *   and fixing the string by inserting a quote there.\n   */\n  function parseString(stopAtDelimiter = false): boolean {\n    let skipEscapeChars = input.charCodeAt(i) === codeBackslash\n    if (skipEscapeChars) {\n      // repair: remove the first escape character\n      i++\n      skipEscapeChars = true\n    }\n\n    if (isQuote(input.charCodeAt(i))) {\n      // double quotes are correct JSON,\n      // single quotes come from JavaScript for example, we assume it will have a correct single end quote too\n      // otherwise, we will match any double-quote-like start with a double-quote-like end,\n      // or any single-quote-like start with a single-quote-like end\n      const isEndQuote = isDoubleQuote(input.charCodeAt(i))\n        ? isDoubleQuote\n        : isSingleQuote(input.charCodeAt(i))\n          ? isSingleQuote\n          : isSingleQuoteLike(input.charCodeAt(i))\n            ? isSingleQuoteLike\n            : isDoubleQuoteLike\n\n      const iBefore = i\n      const oBefore = output.length()\n\n      output.push('\"')\n      i++\n\n      while (true) {\n        if (input.isEnd(i)) {\n          // end of text, we have a missing quote somewhere\n\n          const iPrev = prevNonWhitespaceIndex(i - 1)\n          if (!stopAtDelimiter && isDelimiter(input.charAt(iPrev))) {\n            // if the text ends with a delimiter, like [\"hello],\n            // so the missing end quote should be inserted before this delimiter\n            // retry parsing the string, stopping at the first next delimiter\n            i = iBefore\n            output.remove(oBefore)\n\n            return parseString(true)\n          }\n\n          // repair missing quote\n          output.insertBeforeLastWhitespace('\"')\n\n          return stack.update(Caret.afterValue)\n        } else if (isEndQuote(input.charCodeAt(i))) {\n          // end quote\n          // let us check what is before and after the quote to verify whether this is a legit end quote\n          const iQuote = i\n          const oQuote = output.length()\n          output.push('\"')\n          i++\n\n          parseWhitespaceAndSkipComments()\n\n          if (\n            stopAtDelimiter ||\n            input.isEnd(i) ||\n            isDelimiter(input.charAt(i)) ||\n            isQuote(input.charCodeAt(i)) ||\n            isDigit(input.charCodeAt(i))\n          ) {\n            // The quote is followed by the end of the text, a delimiter, or a next value\n            // so the quote is indeed the end of the string\n            parseConcatenatedString()\n\n            return stack.update(Caret.afterValue)\n          }\n\n          if (isDelimiter(input.charAt(prevNonWhitespaceIndex(iQuote - 1)))) {\n            // This is not the right end quote: it is preceded by a delimiter,\n            // and NOT followed by a delimiter. So, there is an end quote missing\n            // parse the string again and then stop at the first next delimiter\n            i = iBefore\n            output.remove(oBefore)\n\n            return parseString(true)\n          }\n\n          // revert to right after the quote but before any whitespace, and continue parsing the string\n          output.remove(oQuote + 1)\n          i = iQuote + 1\n\n          // repair unescaped quote\n          output.insertAt(oQuote, '\\\\')\n        } else if (stopAtDelimiter && isDelimiter(input.charAt(i))) {\n          // we're in the mode to stop the string at the first delimiter\n          // because there is an end quote missing\n\n          // repair missing quote\n          output.insertBeforeLastWhitespace('\"')\n\n          parseConcatenatedString()\n\n          return stack.update(Caret.afterValue)\n        } else if (input.charCodeAt(i) === codeBackslash) {\n          // handle escaped content like \\n or \\u2605\n          const char = input.charAt(i + 1)\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            output.push(input.substring(i, i + 2))\n            i += 2\n          } else if (char === 'u') {\n            let j = 2\n            while (j < 6 && isHex(input.charCodeAt(i + j))) {\n              j++\n            }\n\n            if (j === 6) {\n              output.push(input.substring(i, i + 6))\n              i += 6\n            } else if (input.isEnd(i + j)) {\n              // repair invalid or truncated unicode char at the end of the text\n              // by removing the unicode char and ending the string here\n              i += j\n            } else {\n              throwInvalidUnicodeCharacter()\n            }\n          } else {\n            // repair invalid escape character: remove it\n            output.push(char)\n            i += 2\n          }\n        } else {\n          // handle regular characters\n          const char = input.charAt(i)\n          const code = char.charCodeAt(0)\n\n          if (code === codeDoubleQuote && input.charCodeAt(i - 1) !== codeBackslash) {\n            // repair unescaped double quote\n            output.push('\\\\' + char)\n            i++\n          } else if (isControlCharacter(code)) {\n            // unescaped control character\n            output.push(controlCharacters[char])\n            i++\n          } else {\n            if (!isValidStringCharacter(code)) {\n              throwInvalidCharacter(char)\n            }\n            output.push(char)\n            i++\n          }\n        }\n\n        if (skipEscapeChars) {\n          // repair: skipped escape character (nothing to do)\n          skipEscapeCharacter()\n        }\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Repair concatenated strings like \"hello\" + \"world\", change this into \"helloworld\"\n   */\n  function parseConcatenatedString(): boolean {\n    let parsed = false\n\n    parseWhitespaceAndSkipComments()\n    while (input.charCodeAt(i) === codePlus) {\n      parsed = true\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: remove the end quote of the first string\n      output.stripLastOccurrence('\"', true)\n      const start = output.length()\n      const parsedStr = parseString()\n      if (parsedStr) {\n        // repair: remove the start quote of the second string\n        output.remove(start, start + 1)\n      } else {\n        // repair: remove the + because it is not followed by a string\n        output.insertBeforeLastWhitespace('\"')\n      }\n    }\n\n    return parsed\n  }\n\n  /**\n   * Parse a number like 2.4 or 2.4e6\n   */\n  function parseNumber(): boolean {\n    const start = i\n    if (input.charCodeAt(i) === codeMinus) {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return stack.update(Caret.afterValue)\n      }\n      if (!isDigit(input.charCodeAt(i))) {\n        i = start\n        return false\n      }\n    }\n\n    // Note that in JSON leading zeros like \"00789\" are not allowed.\n    // We will allow all leading zeros here though and at the end of parseNumber\n    // check against trailing zeros and repair that if needed.\n    // Leading zeros can have meaning, so we should not clear them.\n    while (isDigit(input.charCodeAt(i))) {\n      i++\n    }\n\n    if (input.charCodeAt(i) === codeDot) {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return stack.update(Caret.afterValue)\n      }\n      if (!isDigit(input.charCodeAt(i))) {\n        i = start\n        return false\n      }\n      while (isDigit(input.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (input.charCodeAt(i) === codeLowercaseE || input.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (input.charCodeAt(i) === codeMinus || input.charCodeAt(i) === codePlus) {\n        i++\n      }\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return stack.update(Caret.afterValue)\n      }\n      if (!isDigit(input.charCodeAt(i))) {\n        i = start\n        return false\n      }\n      while (isDigit(input.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    // if we're not at the end of the number by this point, allow this to be parsed as another type\n    if (!atEndOfNumber()) {\n      i = start\n      return false\n    }\n\n    if (i > start) {\n      // repair a number with leading zeros like \"00789\"\n      const num = input.substring(start, i)\n      const hasInvalidLeadingZero = /^0\\d/.test(num)\n\n      output.push(hasInvalidLeadingZero ? `\"${num}\"` : num)\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  /**\n   * Parse keywords true, false, null\n   * Repair Python keywords True, False, None\n   */\n  function parseKeywords(): boolean {\n    return (\n      parseKeyword('true', 'true') ||\n      parseKeyword('false', 'false') ||\n      parseKeyword('null', 'null') ||\n      // repair Python keywords True, False, None\n      parseKeyword('True', 'true') ||\n      parseKeyword('False', 'false') ||\n      parseKeyword('None', 'null')\n    )\n  }\n\n  function parseKeyword(name: string, value: string): boolean {\n    if (input.substring(i, i + name.length) === name) {\n      output.push(value)\n      i += name.length\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseUnquotedKey(): boolean {\n    let end = findNextDelimiter()\n\n    if (end !== null) {\n      // first, go back to prevent getting trailing whitespaces in the string\n      while (isWhitespace(input.charCodeAt(end - 1)) && end > i) {\n        end--\n      }\n\n      const symbol = input.substring(i, end)\n      output.push(JSON.stringify(symbol))\n      i = end\n\n      if (input.charCodeAt(i) === codeDoubleQuote) {\n        // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n        i++\n      }\n\n      return stack.update(Caret.afterValue) // we do not have a state Caret.afterKey, therefore we use afterValue here\n    }\n\n    return false\n  }\n\n  function findNextDelimiter(): number | null {\n    // note that the symbol can end with whitespaces: we stop at the next delimiter\n    // also, note that we allow strings to contain a slash / in order to support repairing regular expressions\n    let j = i\n    while (!input.isEnd(j) && !isDelimiterExceptSlash(input.charAt(j)) && !isQuote(input.charCodeAt(j))) {\n      j++\n    }\n\n    return j > i ? j : null\n  }\n\n  function prevNonWhitespaceIndex(start: number) : number {\n    let prev = start\n\n    while (prev > 0 && isWhitespace(input.charCodeAt(prev))) {\n      prev--\n    }\n\n    return prev\n  }\n\n  function atEndOfNumber() {\n    return input.isEnd(i) || isDelimiter(input.charAt(i)) || isWhitespace(input.charCodeAt(i))\n  }\n\n  function repairNumberEndingWithNumericSymbol(start: number) {\n    // repair numbers cut off at the end\n    // this will only be called when we end after a '.', '-', or 'e' and does not\n    // change the number more than it needs to make it valid JSON\n    output.push(input.substring(start, i) + '0')\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new JSONRepairError('Invalid character ' + JSON.stringify(char), i)\n  }\n\n  function throwUnexpectedCharacter() {\n    throw new JSONRepairError('Unexpected character ' + JSON.stringify(input.charAt(i)), i)\n  }\n\n  function throwUnexpectedEnd() {\n    throw new JSONRepairError('Unexpected end of json string', i)\n  }\n\n  function throwObjectKeyExpected() {\n    throw new JSONRepairError('Object key expected', i)\n  }\n\n  function throwColonExpected() {\n    throw new JSONRepairError('Colon expected', i)\n  }\n\n  function throwInvalidUnicodeCharacter() {\n    const chars = input.substring(i, i + 6)\n    throw new JSONRepairError(`Invalid unicode character \"${chars}\"`, i)\n  }\n\n  function atEndOfBlockComment(i: number) {\n    return input.charAt(i) === '*' && input.charAt(i + 1) === '/'\n  }\n\n  return {\n    transform,\n    flush\n  }\n}\n"],"mappings":"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","ignoreList":[]}