{"version":3,"sources":["../../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.587.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.587.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.587.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js"],"sourcesContent":["export const fromWebToken = (init) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity - fromWebToken\");\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;\n    let { roleAssumerWithWebIdentity } = init;\n    if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await import(\"@aws-sdk/client-sts\");\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: init.parentClientConfig,\n        }, init.clientPlugins);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { readFileSync } from \"fs\";\nimport { fromWebToken } from \"./fromWebToken\";\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nexport const fromTokenFile = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity - fromTokenFile\");\n    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\n    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\n    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\n    if (!webIdentityTokenFile || !roleArn) {\n        throw new CredentialsProviderError(\"Web identity configuration not specified\", {\n            logger: init.logger,\n        });\n    }\n    return fromWebToken({\n        ...init,\n        webIdentityToken: readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\n        roleArn,\n        roleSessionName,\n    })();\n};\n","export * from \"./fromTokenFile\";\nexport * from \"./fromWebToken\";\n"],"mappings":";;;;;;;;;AAAA,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,eAAe,CAAC,SAAS,YAAY;AAC9C,WAAK,QAAQ,MAAM,0DAA0D;AAC7E,YAAM,EAAE,SAAS,iBAAiB,kBAAkB,YAAY,YAAY,QAAQ,gBAAgB,IAAI;AACxG,UAAI,EAAE,2BAA2B,IAAI;AACrC,UAAI,CAAC,4BAA4B;AAC7B,cAAM,EAAE,qCAAqC,IAAI,MAAM,OAAO,wBAAqB;AACnF,qCAA6B,qCAAqC;AAAA,UAC9D,GAAG,KAAK;AAAA,UACR,0BAA0B,KAAK;AAAA,UAC/B,oBAAoB,KAAK;AAAA,QAC7B,GAAG,KAAK,aAAa;AAAA,MACzB;AACA,aAAO,2BAA2B;AAAA,QAC9B,SAAS;AAAA,QACT,iBAAiB,mBAAmB,sBAAsB,KAAK,IAAI,CAAC;AAAA,QACpE,kBAAkB;AAAA,QAClB,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,QAAQ;AAAA,QACR,iBAAiB;AAAA,MACrB,CAAC;AAAA,IACL;AAAA;AAAA;;;ACpBA,SAAS,oBAAoB;AAD7B,IAGM,gBACA,cACA,uBACO;AANb;AAAA;AAAA;AAAA;AAEA;AACA,IAAM,iBAAiB;AACvB,IAAM,eAAe;AACrB,IAAM,wBAAwB;AACvB,IAAM,gBAAgB,CAAC,OAAO,CAAC,MAAM,YAAY;AACpD,WAAK,QAAQ,MAAM,2DAA2D;AAC9E,YAAM,uBAAuB,MAAM,wBAAwB,QAAQ,IAAI,cAAc;AACrF,YAAM,UAAU,MAAM,WAAW,QAAQ,IAAI,YAAY;AACzD,YAAM,kBAAkB,MAAM,mBAAmB,QAAQ,IAAI,qBAAqB;AAClF,UAAI,CAAC,wBAAwB,CAAC,SAAS;AACnC,cAAM,IAAI,yBAAyB,4CAA4C;AAAA,UAC3E,QAAQ,KAAK;AAAA,QACjB,CAAC;AAAA,MACL;AACA,aAAO,aAAa;AAAA,QAChB,GAAG;AAAA,QACH,kBAAkB,aAAa,sBAAsB,EAAE,UAAU,QAAQ,CAAC;AAAA,QAC1E;AAAA,QACA;AAAA,MACJ,CAAC,EAAE;AAAA,IACP;AAAA;AAAA;;;ACtBA,IAAAA,gBAAA;AAAA;AAAA;AACA;AAAA;AAAA;","names":["init_dist_es"]}