{"version":3,"sources":["../../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/index.js"],"sourcesContent":["import { chain, CredentialsProviderError } from \"@smithy/property-provider\";\nexport const ENV_IMDS_DISABLED = \"AWS_EC2_METADATA_DISABLED\";\nexport const remoteProvider = async (init) => {\n    const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } = await import(\"@smithy/credential-provider-imds\");\n    if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {\n        init.logger?.debug(\"@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata\");\n        const { fromHttp } = await import(\"@aws-sdk/credential-provider-http\");\n        return chain(fromHttp(init), fromContainerMetadata(init));\n    }\n    if (process.env[ENV_IMDS_DISABLED]) {\n        return async () => {\n            throw new CredentialsProviderError(\"EC2 Instance Metadata Service access disabled\", { logger: init.logger });\n        };\n    }\n    init.logger?.debug(\"@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata\");\n    return fromInstanceMetadata(init);\n};\n","import { fromEnv } from \"@aws-sdk/credential-provider-env\";\nimport { chain, CredentialsProviderError, memoize } from \"@smithy/property-provider\";\nimport { ENV_PROFILE } from \"@smithy/shared-ini-file-loader\";\nimport { remoteProvider } from \"./remoteProvider\";\nexport const defaultProvider = (init = {}) => memoize(chain(...(init.profile || process.env[ENV_PROFILE]\n    ? []\n    : [\n        async () => {\n            init.logger?.debug(\"@aws-sdk/credential-provider-node - defaultProvider::fromEnv\");\n            return fromEnv(init)();\n        },\n    ]), async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-node - defaultProvider::fromSSO\");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        throw new CredentialsProviderError(\"Skipping SSO provider in default chain (inputs do not include SSO fields).\", { logger: init.logger });\n    }\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO(init)();\n}, async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-node - defaultProvider::fromIni\");\n    const { fromIni } = await import(\"@aws-sdk/credential-provider-ini\");\n    return fromIni(init)();\n}, async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-node - defaultProvider::fromProcess\");\n    const { fromProcess } = await import(\"@aws-sdk/credential-provider-process\");\n    return fromProcess(init)();\n}, async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile\");\n    const { fromTokenFile } = await import(\"@aws-sdk/credential-provider-web-identity\");\n    return fromTokenFile(init)();\n}, async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-node - defaultProvider::remoteProvider\");\n    return (await remoteProvider(init))();\n}, async () => {\n    throw new CredentialsProviderError(\"Could not load credentials from any providers\", {\n        tryNextLink: false,\n        logger: init.logger,\n    });\n}), credentialsTreatedAsExpired, credentialsWillNeedRefresh);\nexport const credentialsWillNeedRefresh = (credentials) => credentials?.expiration !== undefined;\nexport const credentialsTreatedAsExpired = (credentials) => credentials?.expiration !== undefined && credentials.expiration.getTime() - Date.now() < 300000;\n","export * from \"./defaultProvider\";\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IACa,mBACA;AAFb;AAAA;AAAA;AAAA;AACO,IAAM,oBAAoB;AAC1B,IAAM,iBAAiB,OAAO,SAAS;AAC1C,YAAM,EAAE,mBAAmB,uBAAuB,uBAAuB,qBAAqB,IAAI,MAAM,OAAO,wBAAkC;AACjJ,UAAI,QAAQ,IAAI,qBAAqB,KAAK,QAAQ,IAAI,iBAAiB,GAAG;AACtE,aAAK,QAAQ,MAAM,oFAAoF;AACvG,cAAM,EAAE,SAAS,IAAI,MAAM,OAAO,wBAAmC;AACrE,eAAO,MAAM,SAAS,IAAI,GAAG,sBAAsB,IAAI,CAAC;AAAA,MAC5D;AACA,UAAI,QAAQ,IAAI,iBAAiB,GAAG;AAChC,eAAO,YAAY;AACf,gBAAM,IAAI,yBAAyB,iDAAiD,EAAE,QAAQ,KAAK,OAAO,CAAC;AAAA,QAC/G;AAAA,MACJ;AACA,WAAK,QAAQ,MAAM,0EAA0E;AAC7F,aAAO,qBAAqB,IAAI;AAAA,IACpC;AAAA;AAAA;;;AChBA,IAIa,iBAoCA,4BACA;AAzCb;AAAA;AAAA;AAAA,IAAAA;AACA;AACA,IAAAA;AACA;AACO,IAAM,kBAAkB,CAAC,OAAO,CAAC,MAAM,QAAQ,MAAM,GAAI,KAAK,WAAW,QAAQ,IAAI,WAAW,IACjG,CAAC,IACD;AAAA,MACE,YAAY;AACR,aAAK,QAAQ,MAAM,8DAA8D;AACjF,eAAO,QAAQ,IAAI,EAAE;AAAA,MACzB;AAAA,IACJ,GAAI,YAAY;AAChB,WAAK,QAAQ,MAAM,8DAA8D;AACjF,YAAM,EAAE,aAAa,cAAc,WAAW,aAAa,WAAW,IAAI;AAC1E,UAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,aAAa,CAAC,eAAe,CAAC,YAAY;AAC5E,cAAM,IAAI,yBAAyB,8EAA8E,EAAE,QAAQ,KAAK,OAAO,CAAC;AAAA,MAC5I;AACA,YAAM,EAAE,QAAQ,IAAI,MAAM,OAAO,wBAAkC;AACnE,aAAO,QAAQ,IAAI,EAAE;AAAA,IACzB,GAAG,YAAY;AACX,WAAK,QAAQ,MAAM,8DAA8D;AACjF,YAAM,EAAE,QAAQ,IAAI,MAAM,OAAO,wBAAkC;AACnE,aAAO,QAAQ,IAAI,EAAE;AAAA,IACzB,GAAG,YAAY;AACX,WAAK,QAAQ,MAAM,kEAAkE;AACrF,YAAM,EAAE,YAAY,IAAI,MAAM,OAAO,wBAAsC;AAC3E,aAAO,YAAY,IAAI,EAAE;AAAA,IAC7B,GAAG,YAAY;AACX,WAAK,QAAQ,MAAM,oEAAoE;AACvF,YAAM,EAAE,cAAc,IAAI,MAAM,OAAO,wBAA2C;AAClF,aAAO,cAAc,IAAI,EAAE;AAAA,IAC/B,GAAG,YAAY;AACX,WAAK,QAAQ,MAAM,qEAAqE;AACxF,cAAQ,MAAM,eAAe,IAAI,GAAG;AAAA,IACxC,GAAG,YAAY;AACX,YAAM,IAAI,yBAAyB,iDAAiD;AAAA,QAChF,aAAa;AAAA,QACb,QAAQ,KAAK;AAAA,MACjB,CAAC;AAAA,IACL,CAAC,GAAG,6BAA6B,0BAA0B;AACpD,IAAM,6BAA6B,CAAC,gBAAgB,aAAa,eAAe;AAChF,IAAM,8BAA8B,CAAC,gBAAgB,aAAa,eAAe,UAAa,YAAY,WAAW,QAAQ,IAAI,KAAK,IAAI,IAAI;AAAA;AAAA;;;ACzCrJ,IAAAC,gBAAA;AAAA;AAAA;AAAA;AAAA;AAAA;","names":["init_dist_es","init_dist_es"]}