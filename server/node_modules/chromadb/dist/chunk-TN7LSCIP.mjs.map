{"version":3,"sources":["../../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/index.js"],"sourcesContent":["export const getValidatedProcessCredentials = (profileName, data) => {\n    if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n    }\n    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n    }\n    if (data.Expiration) {\n        const currentTime = new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n    }\n    return {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n        ...(data.CredentialScope && { credentialScope: data.CredentialScope }),\n    };\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles, logger) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            const execPromise = promisify(exec);\n            try {\n                const { stdout } = await execPromise(credentialProcess);\n                let data;\n                try {\n                    data = JSON.parse(stdout.trim());\n                }\n                catch {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                return getValidatedProcessCredentials(profileName, data);\n            }\n            catch (error) {\n                throw new CredentialsProviderError(error.message, { logger });\n            }\n        }\n        else {\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger });\n        }\n    }\n    else {\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {\n            logger,\n        });\n    }\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProcessCredentials } from \"./resolveProcessCredentials\";\nexport const fromProcess = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-process - fromProcess\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProcessCredentials(getProfileName(init), profiles, init.logger);\n};\n","export * from \"./fromProcess\";\n"],"mappings":";;;;;;;;;;;;;;AAAA,IAAa;AAAb;AAAA;AAAA;AAAO,IAAM,iCAAiC,CAAC,aAAa,SAAS;AACjE,UAAI,KAAK,YAAY,GAAG;AACpB,cAAM,MAAM,WAAW,WAAW,+CAA+C;AAAA,MACrF;AACA,UAAI,KAAK,gBAAgB,UAAa,KAAK,oBAAoB,QAAW;AACtE,cAAM,MAAM,WAAW,WAAW,mDAAmD;AAAA,MACzF;AACA,UAAI,KAAK,YAAY;AACjB,cAAM,cAAc,oBAAI,KAAK;AAC7B,cAAM,aAAa,IAAI,KAAK,KAAK,UAAU;AAC3C,YAAI,aAAa,aAAa;AAC1B,gBAAM,MAAM,WAAW,WAAW,mDAAmD;AAAA,QACzF;AAAA,MACJ;AACA,aAAO;AAAA,QACH,aAAa,KAAK;AAAA,QAClB,iBAAiB,KAAK;AAAA,QACtB,GAAI,KAAK,gBAAgB,EAAE,cAAc,KAAK,aAAa;AAAA,QAC3D,GAAI,KAAK,cAAc,EAAE,YAAY,IAAI,KAAK,KAAK,UAAU,EAAE;AAAA,QAC/D,GAAI,KAAK,mBAAmB,EAAE,iBAAiB,KAAK,gBAAgB;AAAA,MACxE;AAAA,IACJ;AAAA;AAAA;;;ACpBA,SAAS,YAAY;AACrB,SAAS,iBAAiB;AAF1B,IAIa;AAJb;AAAA;AAAA;AAAA;AAGA;AACO,IAAM,4BAA4B,OAAO,aAAa,UAAU,WAAW;AAC9E,YAAM,UAAU,SAAS,WAAW;AACpC,UAAI,SAAS,WAAW,GAAG;AACvB,cAAM,oBAAoB,QAAQ,oBAAoB;AACtD,YAAI,sBAAsB,QAAW;AACjC,gBAAM,cAAc,UAAU,IAAI;AAClC,cAAI;AACA,kBAAM,EAAE,OAAO,IAAI,MAAM,YAAY,iBAAiB;AACtD,gBAAI;AACJ,gBAAI;AACA,qBAAO,KAAK,MAAM,OAAO,KAAK,CAAC;AAAA,YACnC,QACM;AACF,oBAAM,MAAM,WAAW,WAAW,4CAA4C;AAAA,YAClF;AACA,mBAAO,+BAA+B,aAAa,IAAI;AAAA,UAC3D,SACO,OAAO;AACV,kBAAM,IAAI,yBAAyB,MAAM,SAAS,EAAE,OAAO,CAAC;AAAA,UAChE;AAAA,QACJ,OACK;AACD,gBAAM,IAAI,yBAAyB,WAAW,WAAW,wCAAwC,EAAE,OAAO,CAAC;AAAA,QAC/G;AAAA,MACJ,OACK;AACD,cAAM,IAAI,yBAAyB,WAAW,WAAW,mDAAmD;AAAA,UACxG;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAAA;AAAA;;;AClCA,IAEa;AAFb;AAAA;AAAA;AAAA,IAAAA;AACA;AACO,IAAM,cAAc,CAAC,OAAO,CAAC,MAAM,YAAY;AAClD,WAAK,QAAQ,MAAM,oDAAoD;AACvE,YAAM,WAAW,MAAM,gBAAgB,IAAI;AAC3C,aAAO,0BAA0B,eAAe,IAAI,GAAG,UAAU,KAAK,MAAM;AAAA,IAChF;AAAA;AAAA;;;ACNA,IAAAC,gBAAA;AAAA;AAAA;AAAA;AAAA;","names":["init_dist_es","init_dist_es"]}