"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/.pnpm/webidl-conversions@7.0.0/node_modules/webidl-conversions/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/.pnpm/webidl-conversions@7.0.0/node_modules/webidl-conversions/lib/index.js"(exports2) {
    "use strict";
    function makeException(ErrorType, message, options) {
      if (options.globals) {
        ErrorType = options.globals[ErrorType.name];
      }
      return new ErrorType(`${options.context ? options.context : "Value"} ${message}.`);
    }
    function toNumber(value, options) {
      if (typeof value === "bigint") {
        throw makeException(TypeError, "is a BigInt which cannot be converted to a number", options);
      }
      if (!options.globals) {
        return Number(value);
      }
      return options.globals.Number(value);
    }
    function evenRound(x5) {
      if (x5 > 0 && x5 % 1 === 0.5 && (x5 & 1) === 0 || x5 < 0 && x5 % 1 === -0.5 && (x5 & 1) === 1) {
        return censorNegativeZero(Math.floor(x5));
      }
      return censorNegativeZero(Math.round(x5));
    }
    function integerPart(n6) {
      return censorNegativeZero(Math.trunc(n6));
    }
    function sign(x5) {
      return x5 < 0 ? -1 : 1;
    }
    function modulo(x5, y3) {
      const signMightNotMatch = x5 % y3;
      if (sign(y3) !== sign(signMightNotMatch)) {
        return signMightNotMatch + y3;
      }
      return signMightNotMatch;
    }
    function censorNegativeZero(x5) {
      return x5 === 0 ? 0 : x5;
    }
    function createIntegerConversion(bitLength, { unsigned }) {
      let lowerBound, upperBound;
      if (unsigned) {
        lowerBound = 0;
        upperBound = 2 ** bitLength - 1;
      } else {
        lowerBound = -(2 ** (bitLength - 1));
        upperBound = 2 ** (bitLength - 1) - 1;
      }
      const twoToTheBitLength = 2 ** bitLength;
      const twoToOneLessThanTheBitLength = 2 ** (bitLength - 1);
      return (value, options = {}) => {
        let x5 = toNumber(value, options);
        x5 = censorNegativeZero(x5);
        if (options.enforceRange) {
          if (!Number.isFinite(x5)) {
            throw makeException(TypeError, "is not a finite number", options);
          }
          x5 = integerPart(x5);
          if (x5 < lowerBound || x5 > upperBound) {
            throw makeException(
              TypeError,
              `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`,
              options
            );
          }
          return x5;
        }
        if (!Number.isNaN(x5) && options.clamp) {
          x5 = Math.min(Math.max(x5, lowerBound), upperBound);
          x5 = evenRound(x5);
          return x5;
        }
        if (!Number.isFinite(x5) || x5 === 0) {
          return 0;
        }
        x5 = integerPart(x5);
        if (x5 >= lowerBound && x5 <= upperBound) {
          return x5;
        }
        x5 = modulo(x5, twoToTheBitLength);
        if (!unsigned && x5 >= twoToOneLessThanTheBitLength) {
          return x5 - twoToTheBitLength;
        }
        return x5;
      };
    }
    function createLongLongConversion(bitLength, { unsigned }) {
      const upperBound = Number.MAX_SAFE_INTEGER;
      const lowerBound = unsigned ? 0 : Number.MIN_SAFE_INTEGER;
      const asBigIntN = unsigned ? BigInt.asUintN : BigInt.asIntN;
      return (value, options = {}) => {
        let x5 = toNumber(value, options);
        x5 = censorNegativeZero(x5);
        if (options.enforceRange) {
          if (!Number.isFinite(x5)) {
            throw makeException(TypeError, "is not a finite number", options);
          }
          x5 = integerPart(x5);
          if (x5 < lowerBound || x5 > upperBound) {
            throw makeException(
              TypeError,
              `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`,
              options
            );
          }
          return x5;
        }
        if (!Number.isNaN(x5) && options.clamp) {
          x5 = Math.min(Math.max(x5, lowerBound), upperBound);
          x5 = evenRound(x5);
          return x5;
        }
        if (!Number.isFinite(x5) || x5 === 0) {
          return 0;
        }
        let xBigInt = BigInt(integerPart(x5));
        xBigInt = asBigIntN(bitLength, xBigInt);
        return Number(xBigInt);
      };
    }
    exports2.any = (value) => {
      return value;
    };
    exports2.undefined = () => {
      return void 0;
    };
    exports2.boolean = (value) => {
      return Boolean(value);
    };
    exports2.byte = createIntegerConversion(8, { unsigned: false });
    exports2.octet = createIntegerConversion(8, { unsigned: true });
    exports2.short = createIntegerConversion(16, { unsigned: false });
    exports2["unsigned short"] = createIntegerConversion(16, { unsigned: true });
    exports2.long = createIntegerConversion(32, { unsigned: false });
    exports2["unsigned long"] = createIntegerConversion(32, { unsigned: true });
    exports2["long long"] = createLongLongConversion(64, { unsigned: false });
    exports2["unsigned long long"] = createLongLongConversion(64, { unsigned: true });
    exports2.double = (value, options = {}) => {
      const x5 = toNumber(value, options);
      if (!Number.isFinite(x5)) {
        throw makeException(TypeError, "is not a finite floating-point value", options);
      }
      return x5;
    };
    exports2["unrestricted double"] = (value, options = {}) => {
      const x5 = toNumber(value, options);
      return x5;
    };
    exports2.float = (value, options = {}) => {
      const x5 = toNumber(value, options);
      if (!Number.isFinite(x5)) {
        throw makeException(TypeError, "is not a finite floating-point value", options);
      }
      if (Object.is(x5, -0)) {
        return x5;
      }
      const y3 = Math.fround(x5);
      if (!Number.isFinite(y3)) {
        throw makeException(TypeError, "is outside the range of a single-precision floating-point value", options);
      }
      return y3;
    };
    exports2["unrestricted float"] = (value, options = {}) => {
      const x5 = toNumber(value, options);
      if (isNaN(x5)) {
        return x5;
      }
      if (Object.is(x5, -0)) {
        return x5;
      }
      return Math.fround(x5);
    };
    exports2.DOMString = (value, options = {}) => {
      if (options.treatNullAsEmptyString && value === null) {
        return "";
      }
      if (typeof value === "symbol") {
        throw makeException(TypeError, "is a symbol, which cannot be converted to a string", options);
      }
      const StringCtor = options.globals ? options.globals.String : String;
      return StringCtor(value);
    };
    exports2.ByteString = (value, options = {}) => {
      const x5 = exports2.DOMString(value, options);
      let c6;
      for (let i6 = 0; (c6 = x5.codePointAt(i6)) !== void 0; ++i6) {
        if (c6 > 255) {
          throw makeException(TypeError, "is not a valid ByteString", options);
        }
      }
      return x5;
    };
    exports2.USVString = (value, options = {}) => {
      const S2 = exports2.DOMString(value, options);
      const n6 = S2.length;
      const U2 = [];
      for (let i6 = 0; i6 < n6; ++i6) {
        const c6 = S2.charCodeAt(i6);
        if (c6 < 55296 || c6 > 57343) {
          U2.push(String.fromCodePoint(c6));
        } else if (56320 <= c6 && c6 <= 57343) {
          U2.push(String.fromCodePoint(65533));
        } else if (i6 === n6 - 1) {
          U2.push(String.fromCodePoint(65533));
        } else {
          const d6 = S2.charCodeAt(i6 + 1);
          if (56320 <= d6 && d6 <= 57343) {
            const a6 = c6 & 1023;
            const b6 = d6 & 1023;
            U2.push(String.fromCodePoint((2 << 15) + (2 << 9) * a6 + b6));
            ++i6;
          } else {
            U2.push(String.fromCodePoint(65533));
          }
        }
      }
      return U2.join("");
    };
    exports2.object = (value, options = {}) => {
      if (value === null || typeof value !== "object" && typeof value !== "function") {
        throw makeException(TypeError, "is not an object", options);
      }
      return value;
    };
    var abByteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
    var sabByteLengthGetter = typeof SharedArrayBuffer === "function" ? Object.getOwnPropertyDescriptor(SharedArrayBuffer.prototype, "byteLength").get : null;
    function isNonSharedArrayBuffer(value) {
      try {
        abByteLengthGetter.call(value);
        return true;
      } catch {
        return false;
      }
    }
    function isSharedArrayBuffer(value) {
      try {
        sabByteLengthGetter.call(value);
        return true;
      } catch {
        return false;
      }
    }
    function isArrayBufferDetached(value) {
      try {
        new Uint8Array(value);
        return false;
      } catch {
        return true;
      }
    }
    exports2.ArrayBuffer = (value, options = {}) => {
      if (!isNonSharedArrayBuffer(value)) {
        if (options.allowShared && !isSharedArrayBuffer(value)) {
          throw makeException(TypeError, "is not an ArrayBuffer or SharedArrayBuffer", options);
        }
        throw makeException(TypeError, "is not an ArrayBuffer", options);
      }
      if (isArrayBufferDetached(value)) {
        throw makeException(TypeError, "is a detached ArrayBuffer", options);
      }
      return value;
    };
    var dvByteLengthGetter = Object.getOwnPropertyDescriptor(DataView.prototype, "byteLength").get;
    exports2.DataView = (value, options = {}) => {
      try {
        dvByteLengthGetter.call(value);
      } catch (e6) {
        throw makeException(TypeError, "is not a DataView", options);
      }
      if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {
        throw makeException(TypeError, "is backed by a SharedArrayBuffer, which is not allowed", options);
      }
      if (isArrayBufferDetached(value.buffer)) {
        throw makeException(TypeError, "is backed by a detached ArrayBuffer", options);
      }
      return value;
    };
    var typedArrayNameGetter = Object.getOwnPropertyDescriptor(
      Object.getPrototypeOf(Uint8Array).prototype,
      Symbol.toStringTag
    ).get;
    [
      Int8Array,
      Int16Array,
      Int32Array,
      Uint8Array,
      Uint16Array,
      Uint32Array,
      Uint8ClampedArray,
      Float32Array,
      Float64Array
    ].forEach((func) => {
      const { name } = func;
      const article = /^[AEIOU]/u.test(name) ? "an" : "a";
      exports2[name] = (value, options = {}) => {
        if (!ArrayBuffer.isView(value) || typedArrayNameGetter.call(value) !== name) {
          throw makeException(TypeError, `is not ${article} ${name} object`, options);
        }
        if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {
          throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", options);
        }
        if (isArrayBufferDetached(value.buffer)) {
          throw makeException(TypeError, "is a view on a detached ArrayBuffer", options);
        }
        return value;
      };
    });
    exports2.ArrayBufferView = (value, options = {}) => {
      if (!ArrayBuffer.isView(value)) {
        throw makeException(TypeError, "is not a view on an ArrayBuffer or SharedArrayBuffer", options);
      }
      if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {
        throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", options);
      }
      if (isArrayBufferDetached(value.buffer)) {
        throw makeException(TypeError, "is a view on a detached ArrayBuffer", options);
      }
      return value;
    };
    exports2.BufferSource = (value, options = {}) => {
      if (ArrayBuffer.isView(value)) {
        if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {
          throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", options);
        }
        if (isArrayBufferDetached(value.buffer)) {
          throw makeException(TypeError, "is a view on a detached ArrayBuffer", options);
        }
        return value;
      }
      if (!options.allowShared && !isNonSharedArrayBuffer(value)) {
        throw makeException(TypeError, "is not an ArrayBuffer or a view on one", options);
      }
      if (options.allowShared && !isSharedArrayBuffer(value) && !isNonSharedArrayBuffer(value)) {
        throw makeException(TypeError, "is not an ArrayBuffer, SharedArrayBuffer, or a view on one", options);
      }
      if (isArrayBufferDetached(value)) {
        throw makeException(TypeError, "is a detached ArrayBuffer", options);
      }
      return value;
    };
    exports2.DOMTimeStamp = exports2["unsigned long long"];
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/utils.js
var require_utils = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/utils.js"(exports2, module2) {
    "use strict";
    function isObject(value) {
      return typeof value === "object" && value !== null || typeof value === "function";
    }
    var hasOwn2 = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
    function define2(target, source) {
      for (const key of Reflect.ownKeys(source)) {
        const descriptor = Reflect.getOwnPropertyDescriptor(source, key);
        if (descriptor && !Reflect.defineProperty(target, key, descriptor)) {
          throw new TypeError(`Cannot redefine property: ${String(key)}`);
        }
      }
    }
    function newObjectInRealm(globalObject, object) {
      const ctorRegistry = initCtorRegistry(globalObject);
      return Object.defineProperties(
        Object.create(ctorRegistry["%Object.prototype%"]),
        Object.getOwnPropertyDescriptors(object)
      );
    }
    var wrapperSymbol = Symbol("wrapper");
    var implSymbol = Symbol("impl");
    var sameObjectCaches = Symbol("SameObject caches");
    var ctorRegistrySymbol = Symbol.for("[webidl2js] constructor registry");
    var AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
    }).prototype);
    function initCtorRegistry(globalObject) {
      if (hasOwn2(globalObject, ctorRegistrySymbol)) {
        return globalObject[ctorRegistrySymbol];
      }
      const ctorRegistry = /* @__PURE__ */ Object.create(null);
      ctorRegistry["%Object.prototype%"] = globalObject.Object.prototype;
      ctorRegistry["%IteratorPrototype%"] = Object.getPrototypeOf(
        Object.getPrototypeOf(new globalObject.Array()[Symbol.iterator]())
      );
      try {
        ctorRegistry["%AsyncIteratorPrototype%"] = Object.getPrototypeOf(
          Object.getPrototypeOf(
            globalObject.eval("(async function* () {})").prototype
          )
        );
      } catch {
        ctorRegistry["%AsyncIteratorPrototype%"] = AsyncIteratorPrototype;
      }
      globalObject[ctorRegistrySymbol] = ctorRegistry;
      return ctorRegistry;
    }
    function getSameObject(wrapper, prop, creator) {
      if (!wrapper[sameObjectCaches]) {
        wrapper[sameObjectCaches] = /* @__PURE__ */ Object.create(null);
      }
      if (prop in wrapper[sameObjectCaches]) {
        return wrapper[sameObjectCaches][prop];
      }
      wrapper[sameObjectCaches][prop] = creator();
      return wrapper[sameObjectCaches][prop];
    }
    function wrapperForImpl(impl) {
      return impl ? impl[wrapperSymbol] : null;
    }
    function implForWrapper(wrapper) {
      return wrapper ? wrapper[implSymbol] : null;
    }
    function tryWrapperForImpl(impl) {
      const wrapper = wrapperForImpl(impl);
      return wrapper ? wrapper : impl;
    }
    function tryImplForWrapper(wrapper) {
      const impl = implForWrapper(wrapper);
      return impl ? impl : wrapper;
    }
    var iterInternalSymbol = Symbol("internal");
    function isArrayIndexPropName(P2) {
      if (typeof P2 !== "string") {
        return false;
      }
      const i6 = P2 >>> 0;
      if (i6 === 2 ** 32 - 1) {
        return false;
      }
      const s6 = `${i6}`;
      if (P2 !== s6) {
        return false;
      }
      return true;
    }
    var byteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
    function isArrayBuffer3(value) {
      try {
        byteLengthGetter.call(value);
        return true;
      } catch (e6) {
        return false;
      }
    }
    function iteratorResult([key, value], kind2) {
      let result;
      switch (kind2) {
        case "key":
          result = key;
          break;
        case "value":
          result = value;
          break;
        case "key+value":
          result = [key, value];
          break;
      }
      return { value: result, done: false };
    }
    var supportsPropertyIndex = Symbol("supports property index");
    var supportedPropertyIndices = Symbol("supported property indices");
    var supportsPropertyName = Symbol("supports property name");
    var supportedPropertyNames = Symbol("supported property names");
    var indexedGet = Symbol("indexed property get");
    var indexedSetNew = Symbol("indexed property set new");
    var indexedSetExisting = Symbol("indexed property set existing");
    var namedGet = Symbol("named property get");
    var namedSetNew = Symbol("named property set new");
    var namedSetExisting = Symbol("named property set existing");
    var namedDelete = Symbol("named property delete");
    var asyncIteratorNext = Symbol("async iterator get the next iteration result");
    var asyncIteratorReturn = Symbol("async iterator return steps");
    var asyncIteratorInit = Symbol("async iterator initialization steps");
    var asyncIteratorEOI = Symbol("async iterator end of iteration");
    module2.exports = exports2 = {
      isObject,
      hasOwn: hasOwn2,
      define: define2,
      newObjectInRealm,
      wrapperSymbol,
      implSymbol,
      getSameObject,
      ctorRegistrySymbol,
      initCtorRegistry,
      wrapperForImpl,
      implForWrapper,
      tryWrapperForImpl,
      tryImplForWrapper,
      iterInternalSymbol,
      isArrayBuffer: isArrayBuffer3,
      isArrayIndexPropName,
      supportsPropertyIndex,
      supportedPropertyIndices,
      supportsPropertyName,
      supportedPropertyNames,
      indexedGet,
      indexedSetNew,
      indexedSetExisting,
      namedGet,
      namedSetNew,
      namedSetExisting,
      namedDelete,
      asyncIteratorNext,
      asyncIteratorReturn,
      asyncIteratorInit,
      asyncIteratorEOI,
      iteratorResult
    };
  }
});

// ../../node_modules/.pnpm/punycode@2.3.1/node_modules/punycode/punycode.es6.js
var punycode_es6_exports = {};
__export(punycode_es6_exports, {
  decode: () => decode,
  default: () => punycode_es6_default,
  encode: () => encode,
  toASCII: () => toASCII,
  toUnicode: () => toUnicode,
  ucs2decode: () => ucs2decode,
  ucs2encode: () => ucs2encode
});
function error(type) {
  throw new RangeError(errors[type]);
}
function map(array, callback) {
  const result = [];
  let length = array.length;
  while (length--) {
    result[length] = callback(array[length]);
  }
  return result;
}
function mapDomain(domain, callback) {
  const parts = domain.split("@");
  let result = "";
  if (parts.length > 1) {
    result = parts[0] + "@";
    domain = parts[1];
  }
  domain = domain.replace(regexSeparators, ".");
  const labels = domain.split(".");
  const encoded = map(labels, callback).join(".");
  return result + encoded;
}
function ucs2decode(string) {
  const output = [];
  let counter = 0;
  const length = string.length;
  while (counter < length) {
    const value = string.charCodeAt(counter++);
    if (value >= 55296 && value <= 56319 && counter < length) {
      const extra = string.charCodeAt(counter++);
      if ((extra & 64512) == 56320) {
        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
      } else {
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}
var maxInt, base, tMin, tMax, skew, damp, initialBias, initialN, delimiter, regexPunycode, regexNonASCII, regexSeparators, errors, baseMinusTMin, floor, stringFromCharCode, ucs2encode, basicToDigit, digitToBasic, adapt, decode, encode, toUnicode, toASCII, punycode, punycode_es6_default;
var init_punycode_es6 = __esm({
  "../../node_modules/.pnpm/punycode@2.3.1/node_modules/punycode/punycode.es6.js"() {
    "use strict";
    maxInt = 2147483647;
    base = 36;
    tMin = 1;
    tMax = 26;
    skew = 38;
    damp = 700;
    initialBias = 72;
    initialN = 128;
    delimiter = "-";
    regexPunycode = /^xn--/;
    regexNonASCII = /[^\0-\x7F]/;
    regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
    errors = {
      "overflow": "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    };
    baseMinusTMin = base - tMin;
    floor = Math.floor;
    stringFromCharCode = String.fromCharCode;
    ucs2encode = (codePoints) => String.fromCodePoint(...codePoints);
    basicToDigit = function(codePoint) {
      if (codePoint >= 48 && codePoint < 58) {
        return 26 + (codePoint - 48);
      }
      if (codePoint >= 65 && codePoint < 91) {
        return codePoint - 65;
      }
      if (codePoint >= 97 && codePoint < 123) {
        return codePoint - 97;
      }
      return base;
    };
    digitToBasic = function(digit, flag) {
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    adapt = function(delta, numPoints, firstTime) {
      let k6 = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (; delta > baseMinusTMin * tMax >> 1; k6 += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k6 + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    decode = function(input) {
      const output = [];
      const inputLength = input.length;
      let i6 = 0;
      let n6 = initialN;
      let bias = initialBias;
      let basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }
      for (let j6 = 0; j6 < basic; ++j6) {
        if (input.charCodeAt(j6) >= 128) {
          error("not-basic");
        }
        output.push(input.charCodeAt(j6));
      }
      for (let index2 = basic > 0 ? basic + 1 : 0; index2 < inputLength; ) {
        const oldi = i6;
        for (let w5 = 1, k6 = base; ; k6 += base) {
          if (index2 >= inputLength) {
            error("invalid-input");
          }
          const digit = basicToDigit(input.charCodeAt(index2++));
          if (digit >= base) {
            error("invalid-input");
          }
          if (digit > floor((maxInt - i6) / w5)) {
            error("overflow");
          }
          i6 += digit * w5;
          const t6 = k6 <= bias ? tMin : k6 >= bias + tMax ? tMax : k6 - bias;
          if (digit < t6) {
            break;
          }
          const baseMinusT = base - t6;
          if (w5 > floor(maxInt / baseMinusT)) {
            error("overflow");
          }
          w5 *= baseMinusT;
        }
        const out = output.length + 1;
        bias = adapt(i6 - oldi, out, oldi == 0);
        if (floor(i6 / out) > maxInt - n6) {
          error("overflow");
        }
        n6 += floor(i6 / out);
        i6 %= out;
        output.splice(i6++, 0, n6);
      }
      return String.fromCodePoint(...output);
    };
    encode = function(input) {
      const output = [];
      input = ucs2decode(input);
      const inputLength = input.length;
      let n6 = initialN;
      let delta = 0;
      let bias = initialBias;
      for (const currentValue of input) {
        if (currentValue < 128) {
          output.push(stringFromCharCode(currentValue));
        }
      }
      const basicLength = output.length;
      let handledCPCount = basicLength;
      if (basicLength) {
        output.push(delimiter);
      }
      while (handledCPCount < inputLength) {
        let m6 = maxInt;
        for (const currentValue of input) {
          if (currentValue >= n6 && currentValue < m6) {
            m6 = currentValue;
          }
        }
        const handledCPCountPlusOne = handledCPCount + 1;
        if (m6 - n6 > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error("overflow");
        }
        delta += (m6 - n6) * handledCPCountPlusOne;
        n6 = m6;
        for (const currentValue of input) {
          if (currentValue < n6 && ++delta > maxInt) {
            error("overflow");
          }
          if (currentValue === n6) {
            let q6 = delta;
            for (let k6 = base; ; k6 += base) {
              const t6 = k6 <= bias ? tMin : k6 >= bias + tMax ? tMax : k6 - bias;
              if (q6 < t6) {
                break;
              }
              const qMinusT = q6 - t6;
              const baseMinusT = base - t6;
              output.push(
                stringFromCharCode(digitToBasic(t6 + qMinusT % baseMinusT, 0))
              );
              q6 = floor(qMinusT / baseMinusT);
            }
            output.push(stringFromCharCode(digitToBasic(q6, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
        ++delta;
        ++n6;
      }
      return output.join("");
    };
    toUnicode = function(input) {
      return mapDomain(input, function(string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
      });
    };
    toASCII = function(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
      });
    };
    punycode = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      "version": "2.3.1",
      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      "ucs2": {
        "decode": ucs2decode,
        "encode": ucs2encode
      },
      "decode": decode,
      "encode": encode,
      "toASCII": toASCII,
      "toUnicode": toUnicode
    };
    punycode_es6_default = punycode;
  }
});

// ../../node_modules/.pnpm/tr46@4.1.1/node_modules/tr46/lib/regexes.js
var require_regexes = __commonJS({
  "../../node_modules/.pnpm/tr46@4.1.1/node_modules/tr46/lib/regexes.js"(exports2, module2) {
    "use strict";
    var combiningMarks = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11000}-\u{11002}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11082}\u{110B0}-\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{11134}\u{11145}\u{11146}\u{11173}\u{11180}-\u{11182}\u{111B3}-\u{111C0}\u{111C9}-\u{111CC}\u{111CE}\u{111CF}\u{1122C}-\u{11237}\u{1123E}\u{11241}\u{112DF}-\u{112EA}\u{11300}-\u{11303}\u{1133B}\u{1133C}\u{1133E}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11357}\u{11362}\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11435}-\u{11446}\u{1145E}\u{114B0}-\u{114C3}\u{115AF}-\u{115B5}\u{115B8}-\u{115C0}\u{115DC}\u{115DD}\u{11630}-\u{11640}\u{116AB}-\u{116B7}\u{1171D}-\u{1172B}\u{1182C}-\u{1183A}\u{11930}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{1193E}\u{11940}\u{11942}\u{11943}\u{119D1}-\u{119D7}\u{119DA}-\u{119E0}\u{119E4}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A39}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A5B}\u{11A8A}-\u{11A99}\u{11C2F}-\u{11C36}\u{11C38}-\u{11C3F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D8A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D97}\u{11EF3}-\u{11EF6}\u{11F00}\u{11F01}\u{11F03}\u{11F34}-\u{11F3A}\u{11F3E}-\u{11F42}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F51}-\u{16F87}\u{16F8F}-\u{16F92}\u{16FE4}\u{16FF0}\u{16FF1}\u{1BC9D}\u{1BC9E}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D165}-\u{1D169}\u{1D16D}-\u{1D172}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]/u;
    var combiningClassVirama = /[\u094D\u09CD\u0A4D\u0ACD\u0B4D\u0BCD\u0C4D\u0CCD\u0D3B\u0D3C\u0D4D\u0DCA\u0E3A\u0EBA\u0F84\u1039\u103A\u1714\u1734\u17D2\u1A60\u1B44\u1BAA\u1BAB\u1BF2\u1BF3\u2D7F\uA806\uA8C4\uA953\uA9C0\uAAF6\uABED\u{10A3F}\u{11046}\u{1107F}\u{110B9}\u{11133}\u{11134}\u{111C0}\u{11235}\u{112EA}\u{1134D}\u{11442}\u{114C2}\u{115BF}\u{1163F}\u{116B6}\u{1172B}\u{11839}\u{119E0}\u{11A34}\u{11A47}\u{11A99}\u{11C3F}\u{11D44}\u{11D45}\u{11D97}]/u;
    var validZWNJ = /[\u0620\u0626\u0628\u062A-\u062E\u0633-\u063F\u0641-\u0647\u0649\u064A\u066E\u066F\u0678-\u0687\u069A-\u06BF\u06C1\u06C2\u06CC\u06CE\u06D0\u06D1\u06FA-\u06FC\u06FF\u0712-\u0714\u071A-\u071D\u071F-\u0727\u0729\u072B\u072D\u072E\u074E-\u0758\u075C-\u076A\u076D-\u0770\u0772\u0775-\u0777\u077A-\u077F\u07CA-\u07EA\u0841-\u0845\u0848\u084A-\u0853\u0855\u0860\u0862-\u0865\u0868\u08A0-\u08A9\u08AF\u08B0\u08B3\u08B4\u08B6-\u08B8\u08BA-\u08BD\u1807\u1820-\u1878\u1887-\u18A8\u18AA\uA840-\uA872\u{10AC0}-\u{10AC4}\u{10ACD}\u{10AD3}-\u{10ADC}\u{10ADE}-\u{10AE0}\u{10AEB}-\u{10AEE}\u{10B80}\u{10B82}\u{10B86}-\u{10B88}\u{10B8A}\u{10B8B}\u{10B8D}\u{10B90}\u{10BAD}\u{10BAE}\u{10D00}-\u{10D21}\u{10D23}\u{10F30}-\u{10F32}\u{10F34}-\u{10F44}\u{10F51}-\u{10F53}\u{1E900}-\u{1E943}][\xAD\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u061C\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u070F\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200B\u200E\u200F\u202A-\u202E\u2060-\u2064\u206A-\u206F\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFEFF\uFFF9-\uFFFB\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10F46}-\u{10F50}\u{11001}\u{11038}-\u{11046}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C3F}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{13430}-\u{13438}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E130}-\u{1E136}\u{1E2EC}-\u{1E2EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94B}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*\u200C[\xAD\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u061C\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u070F\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200B\u200E\u200F\u202A-\u202E\u2060-\u2064\u206A-\u206F\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFEFF\uFFF9-\uFFFB\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10F46}-\u{10F50}\u{11001}\u{11038}-\u{11046}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C3F}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{13430}-\u{13438}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E130}-\u{1E136}\u{1E2EC}-\u{1E2EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94B}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*[\u0620\u0622-\u063F\u0641-\u064A\u066E\u066F\u0671-\u0673\u0675-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u077F\u07CA-\u07EA\u0840-\u0855\u0860\u0862-\u0865\u0867-\u086A\u08A0-\u08AC\u08AE-\u08B4\u08B6-\u08BD\u1807\u1820-\u1878\u1887-\u18A8\u18AA\uA840-\uA871\u{10AC0}-\u{10AC5}\u{10AC7}\u{10AC9}\u{10ACA}\u{10ACE}-\u{10AD6}\u{10AD8}-\u{10AE1}\u{10AE4}\u{10AEB}-\u{10AEF}\u{10B80}-\u{10B91}\u{10BA9}-\u{10BAE}\u{10D01}-\u{10D23}\u{10F30}-\u{10F44}\u{10F51}-\u{10F54}\u{1E900}-\u{1E943}]/u;
    var bidiDomain = /[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0600-\u0605\u0608\u060B\u060D\u061B-\u064A\u0660-\u0669\u066B-\u066F\u0671-\u06D5\u06DD\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u0870-\u088E\u0890\u0891\u08A0-\u08C9\u08E2\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10F70}-\u{10F81}\u{10F86}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}]/u;
    var bidiS1LTR = /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02BB-\u02C1\u02D0\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0482\u048A-\u052F\u0531-\u0556\u0559-\u0589\u0903-\u0939\u093B\u093D-\u0940\u0949-\u094C\u094E-\u0950\u0958-\u0961\u0964-\u0980\u0982\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C0\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09FA\u09FC\u09FD\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A76\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC0\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0\u0AE1\u0AE6-\u0AF0\u0AF9\u0B02\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C77\u0C7F\u0C80\u0C82-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D02-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D4F\u0D54-\u0D61\u0D66-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E4F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F17\u0F1A-\u0F34\u0F36\u0F38\u0F3E-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FDA\u1000-\u102C\u1031\u1038\u103B\u103C\u103F-\u1057\u105A-\u105D\u1061-\u1070\u1075-\u1081\u1083\u1084\u1087-\u108C\u108E-\u109C\u109E-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u167F\u1681-\u169A\u16A0-\u16F8\u1700-\u1711\u1715\u171F-\u1731\u1734-\u1736\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5\u17C7\u17C8\u17D4-\u17DA\u17DC\u17E0-\u17E9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A19\u1A1A\u1A1E-\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1B04-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B4C\u1B50-\u1B6A\u1B74-\u1B7E\u1B82-\u1BA1\u1BA6\u1BA7\u1BAA\u1BAE-\u1BE5\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1BFC-\u1C2B\u1C34\u1C35\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2188\u2336-\u237A\u2395\u249C-\u24E9\u26AC\u2800-\u28FF\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u302E\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31BF\u31F0-\u321C\u3220-\u324F\u3260-\u327B\u327F-\u32B0\u32C0-\u32CB\u32D0-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA60C\uA610-\uA62B\uA640-\uA66E\uA680-\uA69D\uA6A0-\uA6EF\uA6F2-\uA6F7\uA722-\uA787\uA789-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA824\uA827\uA830-\uA837\uA840-\uA873\uA880-\uA8C3\uA8CE-\uA8D9\uA8F2-\uA8FE\uA900-\uA925\uA92E-\uA946\uA952\uA953\uA95F-\uA97C\uA983-\uA9B2\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA2F\uAA30\uAA33\uAA34\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA7B\uAA7D-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAAEB\uAAEE-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB69\uAB70-\uABE4\uABE6\uABE7\uABE9-\uABEC\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1013F}\u{1018D}\u{1018E}\u{101D0}-\u{101FC}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}-\u{1057A}\u{1057C}-\u{1058A}\u{1058C}-\u{10592}\u{10594}\u{10595}\u{10597}-\u{105A1}\u{105A3}-\u{105B1}\u{105B3}-\u{105B9}\u{105BB}\u{105BC}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10780}-\u{10785}\u{10787}-\u{107B0}\u{107B2}-\u{107BA}\u{11000}\u{11002}-\u{11037}\u{11047}-\u{1104D}\u{11066}-\u{1106F}\u{11071}\u{11072}\u{11075}\u{11082}-\u{110B2}\u{110B7}\u{110B8}\u{110BB}-\u{110C1}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11103}-\u{11126}\u{1112C}\u{11136}-\u{11147}\u{11150}-\u{11172}\u{11174}-\u{11176}\u{11182}-\u{111B5}\u{111BF}-\u{111C8}\u{111CD}\u{111CE}\u{111D0}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{1122E}\u{11232}\u{11233}\u{11235}\u{11238}-\u{1123D}\u{1123F}\u{11240}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112DE}\u{112E0}-\u{112E2}\u{112F0}-\u{112F9}\u{11302}\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}-\u{1133F}\u{11341}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11400}-\u{11437}\u{11440}\u{11441}\u{11445}\u{11447}-\u{1145B}\u{1145D}\u{1145F}-\u{11461}\u{11480}-\u{114B2}\u{114B9}\u{114BB}-\u{114BE}\u{114C1}\u{114C4}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B1}\u{115B8}-\u{115BB}\u{115BE}\u{115C1}-\u{115DB}\u{11600}-\u{11632}\u{1163B}\u{1163C}\u{1163E}\u{11641}-\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116AA}\u{116AC}\u{116AE}\u{116AF}\u{116B6}\u{116B8}\u{116B9}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{11720}\u{11721}\u{11726}\u{11730}-\u{11746}\u{11800}-\u{1182E}\u{11838}\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193D}\u{1193F}-\u{11942}\u{11944}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D3}\u{119DC}-\u{119DF}\u{119E1}-\u{119E4}\u{11A00}\u{11A07}\u{11A08}\u{11A0B}-\u{11A32}\u{11A39}\u{11A3A}\u{11A3F}-\u{11A46}\u{11A50}\u{11A57}\u{11A58}\u{11A5C}-\u{11A89}\u{11A97}\u{11A9A}-\u{11AA2}\u{11AB0}-\u{11AF8}\u{11B00}-\u{11B09}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2F}\u{11C3E}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11CA9}\u{11CB1}\u{11CB4}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D93}\u{11D94}\u{11D96}\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF2}\u{11EF5}-\u{11EF8}\u{11F02}-\u{11F10}\u{11F12}-\u{11F35}\u{11F3E}\u{11F3F}\u{11F41}\u{11F43}-\u{11F59}\u{11FB0}\u{11FC0}-\u{11FD4}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{12F90}-\u{12FF2}\u{13000}-\u{1343F}\u{13441}-\u{13446}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}-\u{16ABE}\u{16AC0}-\u{16AC9}\u{16AD0}-\u{16AED}\u{16AF5}\u{16B00}-\u{16B2F}\u{16B37}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F50}-\u{16F87}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1AFF0}-\u{1AFF3}\u{1AFF5}-\u{1AFFB}\u{1AFFD}\u{1AFFE}\u{1B000}-\u{1B122}\u{1B132}\u{1B150}-\u{1B152}\u{1B155}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}\u{1BC9F}\u{1CF50}-\u{1CFC3}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D166}\u{1D16A}-\u{1D172}\u{1D183}\u{1D184}\u{1D18C}-\u{1D1A9}\u{1D1AE}-\u{1D1E8}\u{1D2C0}-\u{1D2D3}\u{1D2E0}-\u{1D2F3}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6DA}\u{1D6DC}-\u{1D714}\u{1D716}-\u{1D74E}\u{1D750}-\u{1D788}\u{1D78A}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D800}-\u{1D9FF}\u{1DA37}-\u{1DA3A}\u{1DA6D}-\u{1DA74}\u{1DA76}-\u{1DA83}\u{1DA85}-\u{1DA8B}\u{1DF00}-\u{1DF1E}\u{1DF25}-\u{1DF2A}\u{1E030}-\u{1E06D}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E290}-\u{1E2AD}\u{1E2C0}-\u{1E2EB}\u{1E2F0}-\u{1E2F9}\u{1E4D0}-\u{1E4EB}\u{1E4F0}-\u{1E4F9}\u{1E7E0}-\u{1E7E6}\u{1E7E8}-\u{1E7EB}\u{1E7ED}\u{1E7EE}\u{1E7F0}-\u{1E7FE}\u{1F110}-\u{1F12E}\u{1F130}-\u{1F169}\u{1F170}-\u{1F1AC}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{20000}-\u{2A6DF}\u{2A700}-\u{2B739}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{31350}-\u{323AF}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}]/u;
    var bidiS1RTL = /[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u0870-\u088E\u08A0-\u08C9\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10F70}-\u{10F81}\u{10F86}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}]/u;
    var bidiS2 = /^[\0-\x08\x0E-\x1B!-@\[-`\{-\x84\x86-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02B9\u02BA\u02C2-\u02CF\u02D2-\u02DF\u02E5-\u02ED\u02EF-\u036F\u0374\u0375\u037E\u0384\u0385\u0387\u03F6\u0483-\u0489\u058A\u058D-\u058F\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\u0600-\u070D\u070F-\u074A\u074D-\u07B1\u07C0-\u07FA\u07FD-\u082D\u0830-\u083E\u0840-\u085B\u085E\u0860-\u086A\u0870-\u088E\u0890\u0891\u0898-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09F2\u09F3\u09FB\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AF1\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0BF3-\u0BFA\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C78-\u0C7E\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E3F\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39-\u0F3D\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1390-\u1399\u1400\u169B\u169C\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DB\u17DD\u17F0-\u17F9\u1800-\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1940\u1944\u1945\u19DE-\u19FF\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u200B-\u200D\u200F-\u2027\u202F-\u205E\u2060-\u2064\u206A-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20C0\u20D0-\u20F0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u2150-\u215F\u2189-\u218B\u2190-\u2335\u237B-\u2394\u2396-\u2426\u2440-\u244A\u2460-\u249B\u24EA-\u26AB\u26AD-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2CEF-\u2CF1\u2CF9-\u2CFF\u2D7F\u2DE0-\u2E5D\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3001-\u3004\u3008-\u3020\u302A-\u302D\u3030\u3036\u3037\u303D-\u303F\u3099-\u309C\u30A0\u30FB\u31C0-\u31E3\u321D\u321E\u3250-\u325F\u327C-\u327E\u32B1-\u32BF\u32CC-\u32CF\u3377-\u337A\u33DE\u33DF\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA60D-\uA60F\uA66F-\uA67F\uA69E\uA69F\uA6F0\uA6F1\uA700-\uA721\uA788\uA802\uA806\uA80B\uA825\uA826\uA828-\uA82C\uA838\uA839\uA874-\uA877\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uAB6A\uAB6B\uABE5\uABE8\uABED\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD8F\uFD92-\uFDC7\uFDCF\uFDF0-\uFE19\uFE20-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFE70-\uFE74\uFE76-\uFEFC\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD\u{10101}\u{10140}-\u{1018C}\u{10190}-\u{1019C}\u{101A0}\u{101FD}\u{102E0}-\u{102FB}\u{10376}-\u{1037A}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{1091F}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A38}-\u{10A3A}\u{10A3F}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE6}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B39}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D27}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAB}-\u{10EAD}\u{10EB0}\u{10EB1}\u{10EFD}-\u{10F27}\u{10F30}-\u{10F59}\u{10F70}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{11001}\u{11038}-\u{11046}\u{11052}-\u{11065}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{11660}-\u{1166C}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{11FD5}-\u{11FF1}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE2}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D1E9}\u{1D1EA}\u{1D200}-\u{1D245}\u{1D300}-\u{1D356}\u{1D6DB}\u{1D715}\u{1D74F}\u{1D789}\u{1D7C3}\u{1D7CE}-\u{1D7FF}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E2FF}\u{1E4EC}-\u{1E4EF}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8D6}\u{1E900}-\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1EEF0}\u{1EEF1}\u{1F000}-\u{1F02B}\u{1F030}-\u{1F093}\u{1F0A0}-\u{1F0AE}\u{1F0B1}-\u{1F0BF}\u{1F0C1}-\u{1F0CF}\u{1F0D1}-\u{1F0F5}\u{1F100}-\u{1F10F}\u{1F12F}\u{1F16A}-\u{1F16F}\u{1F1AD}\u{1F260}-\u{1F265}\u{1F300}-\u{1F6D7}\u{1F6DC}-\u{1F6EC}\u{1F6F0}-\u{1F6FC}\u{1F700}-\u{1F776}\u{1F77B}-\u{1F7D9}\u{1F7E0}-\u{1F7EB}\u{1F7F0}\u{1F800}-\u{1F80B}\u{1F810}-\u{1F847}\u{1F850}-\u{1F859}\u{1F860}-\u{1F887}\u{1F890}-\u{1F8AD}\u{1F8B0}\u{1F8B1}\u{1F900}-\u{1FA53}\u{1FA60}-\u{1FA6D}\u{1FA70}-\u{1FA7C}\u{1FA80}-\u{1FA88}\u{1FA90}-\u{1FABD}\u{1FABF}-\u{1FAC5}\u{1FACE}-\u{1FADB}\u{1FAE0}-\u{1FAE8}\u{1FAF0}-\u{1FAF8}\u{1FB00}-\u{1FB92}\u{1FB94}-\u{1FBCA}\u{1FBF0}-\u{1FBF9}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*$/u;
    var bidiS3 = /[0-9\xB2\xB3\xB9\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0600-\u0605\u0608\u060B\u060D\u061B-\u064A\u0660-\u0669\u066B-\u066F\u0671-\u06D5\u06DD\u06E5\u06E6\u06EE-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u0870-\u088E\u0890\u0891\u08A0-\u08C9\u08E2\u200F\u2070\u2074-\u2079\u2080-\u2089\u2488-\u249B\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\u{102E1}-\u{102FB}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10F70}-\u{10F81}\u{10F86}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1D7CE}-\u{1D7FF}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1F100}-\u{1F10A}\u{1FBF0}-\u{1FBF9}][\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11001}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]*$/u;
    var bidiS4EN = /[0-9\xB2\xB3\xB9\u06F0-\u06F9\u2070\u2074-\u2079\u2080-\u2089\u2488-\u249B\uFF10-\uFF19\u{102E1}-\u{102FB}\u{1D7CE}-\u{1D7FF}\u{1F100}-\u{1F10A}\u{1FBF0}-\u{1FBF9}]/u;
    var bidiS4AN = /[\u0600-\u0605\u0660-\u0669\u066B\u066C\u06DD\u0890\u0891\u08E2\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}]/u;
    var bidiS5 = /^[\0-\x08\x0E-\x1B!-\x84\x86-\u0377\u037A-\u037F\u0384-\u038A\u038C\u038E-\u03A1\u03A3-\u052F\u0531-\u0556\u0559-\u058A\u058D-\u058F\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0606\u0607\u0609\u060A\u060C\u060E-\u061A\u064B-\u065F\u066A\u0670\u06D6-\u06DC\u06DE-\u06E4\u06E7-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07F6-\u07F9\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3C-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C66-\u0C6F\u0C77-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E3A\u0E3F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECE\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FDA\u1000-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u13A0-\u13F5\u13F8-\u13FD\u1400-\u167F\u1681-\u169C\u16A0-\u16F8\u1700-\u1715\u171F-\u1736\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u1800-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE-\u1A1B\u1A1E-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1AB0-\u1ACE\u1B00-\u1B4C\u1B50-\u1B7E\u1B80-\u1BF3\u1BFC-\u1C37\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD0-\u1CFA\u1D00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u200B-\u200E\u2010-\u2027\u202F-\u205E\u2060-\u2064\u206A-\u2071\u2074-\u208E\u2090-\u209C\u20A0-\u20C0\u20D0-\u20F0\u2100-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u2B73\u2B76-\u2B95\u2B97-\u2CF3\u2CF9-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2E5D\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3001-\u303F\u3041-\u3096\u3099-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31E3\u31F0-\u321E\u3220-\uA48C\uA490-\uA4C6\uA4D0-\uA62B\uA640-\uA6F7\uA700-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA82C\uA830-\uA839\uA840-\uA877\uA880-\uA8C5\uA8CE-\uA8D9\uA8E0-\uA953\uA95F-\uA97C\uA980-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAAC2\uAADB-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB6B\uAB70-\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1E\uFB29\uFD3E-\uFD4F\uFDCF\uFDFD-\uFE19\uFE20-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}-\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1018E}\u{10190}-\u{1019C}\u{101A0}\u{101D0}-\u{101FD}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E0}-\u{102FB}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{1037A}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}-\u{1057A}\u{1057C}-\u{1058A}\u{1058C}-\u{10592}\u{10594}\u{10595}\u{10597}-\u{105A1}\u{105A3}-\u{105B1}\u{105B3}-\u{105B9}\u{105BB}\u{105BC}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10780}-\u{10785}\u{10787}-\u{107B0}\u{107B2}-\u{107BA}\u{1091F}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10B39}-\u{10B3F}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11000}-\u{1104D}\u{11052}-\u{11075}\u{1107F}-\u{110C2}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11100}-\u{11134}\u{11136}-\u{11147}\u{11150}-\u{11176}\u{11180}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{11241}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112EA}\u{112F0}-\u{112F9}\u{11300}-\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133B}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11400}-\u{1145B}\u{1145D}-\u{11461}\u{11480}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B5}\u{115B8}-\u{115DD}\u{11600}-\u{11644}\u{11650}-\u{11659}\u{11660}-\u{1166C}\u{11680}-\u{116B9}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{1171D}-\u{1172B}\u{11730}-\u{11746}\u{11800}-\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D7}\u{119DA}-\u{119E4}\u{11A00}-\u{11A47}\u{11A50}-\u{11AA2}\u{11AB0}-\u{11AF8}\u{11B00}-\u{11B09}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C36}\u{11C38}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D47}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF8}\u{11F00}-\u{11F10}\u{11F12}-\u{11F3A}\u{11F3E}-\u{11F59}\u{11FB0}\u{11FC0}-\u{11FF1}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{12F90}-\u{12FF2}\u{13000}-\u{13455}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}-\u{16ABE}\u{16AC0}-\u{16AC9}\u{16AD0}-\u{16AED}\u{16AF0}-\u{16AF5}\u{16B00}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F4F}-\u{16F87}\u{16F8F}-\u{16F9F}\u{16FE0}-\u{16FE4}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1AFF0}-\u{1AFF3}\u{1AFF5}-\u{1AFFB}\u{1AFFD}\u{1AFFE}\u{1B000}-\u{1B122}\u{1B132}\u{1B150}-\u{1B152}\u{1B155}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}-\u{1BCA3}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1CF50}-\u{1CFC3}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D1EA}\u{1D200}-\u{1D245}\u{1D2C0}-\u{1D2D3}\u{1D2E0}-\u{1D2F3}\u{1D300}-\u{1D356}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D7CB}\u{1D7CE}-\u{1DA8B}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1DF00}-\u{1DF1E}\u{1DF25}-\u{1DF2A}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E030}-\u{1E06D}\u{1E08F}\u{1E100}-\u{1E12C}\u{1E130}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E290}-\u{1E2AE}\u{1E2C0}-\u{1E2F9}\u{1E2FF}\u{1E4D0}-\u{1E4F9}\u{1E7E0}-\u{1E7E6}\u{1E7E8}-\u{1E7EB}\u{1E7ED}\u{1E7EE}\u{1E7F0}-\u{1E7FE}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{1EEF0}\u{1EEF1}\u{1F000}-\u{1F02B}\u{1F030}-\u{1F093}\u{1F0A0}-\u{1F0AE}\u{1F0B1}-\u{1F0BF}\u{1F0C1}-\u{1F0CF}\u{1F0D1}-\u{1F0F5}\u{1F100}-\u{1F1AD}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{1F260}-\u{1F265}\u{1F300}-\u{1F6D7}\u{1F6DC}-\u{1F6EC}\u{1F6F0}-\u{1F6FC}\u{1F700}-\u{1F776}\u{1F77B}-\u{1F7D9}\u{1F7E0}-\u{1F7EB}\u{1F7F0}\u{1F800}-\u{1F80B}\u{1F810}-\u{1F847}\u{1F850}-\u{1F859}\u{1F860}-\u{1F887}\u{1F890}-\u{1F8AD}\u{1F8B0}\u{1F8B1}\u{1F900}-\u{1FA53}\u{1FA60}-\u{1FA6D}\u{1FA70}-\u{1FA7C}\u{1FA80}-\u{1FA88}\u{1FA90}-\u{1FABD}\u{1FABF}-\u{1FAC5}\u{1FACE}-\u{1FADB}\u{1FAE0}-\u{1FAE8}\u{1FAF0}-\u{1FAF8}\u{1FB00}-\u{1FB92}\u{1FB94}-\u{1FBCA}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DF}\u{2A700}-\u{2B739}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{31350}-\u{323AF}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}]*$/u;
    var bidiS6 = /[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02BB-\u02C1\u02D0\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0482\u048A-\u052F\u0531-\u0556\u0559-\u0589\u06F0-\u06F9\u0903-\u0939\u093B\u093D-\u0940\u0949-\u094C\u094E-\u0950\u0958-\u0961\u0964-\u0980\u0982\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C0\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09FA\u09FC\u09FD\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A76\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC0\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0\u0AE1\u0AE6-\u0AF0\u0AF9\u0B02\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C77\u0C7F\u0C80\u0C82-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D02-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D4F\u0D54-\u0D61\u0D66-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E4F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F17\u0F1A-\u0F34\u0F36\u0F38\u0F3E-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FDA\u1000-\u102C\u1031\u1038\u103B\u103C\u103F-\u1057\u105A-\u105D\u1061-\u1070\u1075-\u1081\u1083\u1084\u1087-\u108C\u108E-\u109C\u109E-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u167F\u1681-\u169A\u16A0-\u16F8\u1700-\u1711\u1715\u171F-\u1731\u1734-\u1736\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5\u17C7\u17C8\u17D4-\u17DA\u17DC\u17E0-\u17E9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A19\u1A1A\u1A1E-\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1B04-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B4C\u1B50-\u1B6A\u1B74-\u1B7E\u1B82-\u1BA1\u1BA6\u1BA7\u1BAA\u1BAE-\u1BE5\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1BFC-\u1C2B\u1C34\u1C35\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2188\u2336-\u237A\u2395\u2488-\u24E9\u26AC\u2800-\u28FF\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u302E\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31BF\u31F0-\u321C\u3220-\u324F\u3260-\u327B\u327F-\u32B0\u32C0-\u32CB\u32D0-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA60C\uA610-\uA62B\uA640-\uA66E\uA680-\uA69D\uA6A0-\uA6EF\uA6F2-\uA6F7\uA722-\uA787\uA789-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA824\uA827\uA830-\uA837\uA840-\uA873\uA880-\uA8C3\uA8CE-\uA8D9\uA8F2-\uA8FE\uA900-\uA925\uA92E-\uA946\uA952\uA953\uA95F-\uA97C\uA983-\uA9B2\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA2F\uAA30\uAA33\uAA34\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA7B\uAA7D-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAAEB\uAAEE-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB69\uAB70-\uABE4\uABE6\uABE7\uABE9-\uABEC\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1013F}\u{1018D}\u{1018E}\u{101D0}-\u{101FC}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E1}-\u{102FB}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}-\u{1057A}\u{1057C}-\u{1058A}\u{1058C}-\u{10592}\u{10594}\u{10595}\u{10597}-\u{105A1}\u{105A3}-\u{105B1}\u{105B3}-\u{105B9}\u{105BB}\u{105BC}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10780}-\u{10785}\u{10787}-\u{107B0}\u{107B2}-\u{107BA}\u{11000}\u{11002}-\u{11037}\u{11047}-\u{1104D}\u{11066}-\u{1106F}\u{11071}\u{11072}\u{11075}\u{11082}-\u{110B2}\u{110B7}\u{110B8}\u{110BB}-\u{110C1}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11103}-\u{11126}\u{1112C}\u{11136}-\u{11147}\u{11150}-\u{11172}\u{11174}-\u{11176}\u{11182}-\u{111B5}\u{111BF}-\u{111C8}\u{111CD}\u{111CE}\u{111D0}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{1122E}\u{11232}\u{11233}\u{11235}\u{11238}-\u{1123D}\u{1123F}\u{11240}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112DE}\u{112E0}-\u{112E2}\u{112F0}-\u{112F9}\u{11302}\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}-\u{1133F}\u{11341}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11400}-\u{11437}\u{11440}\u{11441}\u{11445}\u{11447}-\u{1145B}\u{1145D}\u{1145F}-\u{11461}\u{11480}-\u{114B2}\u{114B9}\u{114BB}-\u{114BE}\u{114C1}\u{114C4}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B1}\u{115B8}-\u{115BB}\u{115BE}\u{115C1}-\u{115DB}\u{11600}-\u{11632}\u{1163B}\u{1163C}\u{1163E}\u{11641}-\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116AA}\u{116AC}\u{116AE}\u{116AF}\u{116B6}\u{116B8}\u{116B9}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{11720}\u{11721}\u{11726}\u{11730}-\u{11746}\u{11800}-\u{1182E}\u{11838}\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193D}\u{1193F}-\u{11942}\u{11944}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D3}\u{119DC}-\u{119DF}\u{119E1}-\u{119E4}\u{11A00}\u{11A07}\u{11A08}\u{11A0B}-\u{11A32}\u{11A39}\u{11A3A}\u{11A3F}-\u{11A46}\u{11A50}\u{11A57}\u{11A58}\u{11A5C}-\u{11A89}\u{11A97}\u{11A9A}-\u{11AA2}\u{11AB0}-\u{11AF8}\u{11B00}-\u{11B09}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2F}\u{11C3E}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11CA9}\u{11CB1}\u{11CB4}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D93}\u{11D94}\u{11D96}\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF2}\u{11EF5}-\u{11EF8}\u{11F02}-\u{11F10}\u{11F12}-\u{11F35}\u{11F3E}\u{11F3F}\u{11F41}\u{11F43}-\u{11F59}\u{11FB0}\u{11FC0}-\u{11FD4}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{12F90}-\u{12FF2}\u{13000}-\u{1343F}\u{13441}-\u{13446}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}-\u{16ABE}\u{16AC0}-\u{16AC9}\u{16AD0}-\u{16AED}\u{16AF5}\u{16B00}-\u{16B2F}\u{16B37}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F50}-\u{16F87}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1AFF0}-\u{1AFF3}\u{1AFF5}-\u{1AFFB}\u{1AFFD}\u{1AFFE}\u{1B000}-\u{1B122}\u{1B132}\u{1B150}-\u{1B152}\u{1B155}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}\u{1BC9F}\u{1CF50}-\u{1CFC3}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D166}\u{1D16A}-\u{1D172}\u{1D183}\u{1D184}\u{1D18C}-\u{1D1A9}\u{1D1AE}-\u{1D1E8}\u{1D2C0}-\u{1D2D3}\u{1D2E0}-\u{1D2F3}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6DA}\u{1D6DC}-\u{1D714}\u{1D716}-\u{1D74E}\u{1D750}-\u{1D788}\u{1D78A}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D7CE}-\u{1D9FF}\u{1DA37}-\u{1DA3A}\u{1DA6D}-\u{1DA74}\u{1DA76}-\u{1DA83}\u{1DA85}-\u{1DA8B}\u{1DF00}-\u{1DF1E}\u{1DF25}-\u{1DF2A}\u{1E030}-\u{1E06D}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E290}-\u{1E2AD}\u{1E2C0}-\u{1E2EB}\u{1E2F0}-\u{1E2F9}\u{1E4D0}-\u{1E4EB}\u{1E4F0}-\u{1E4F9}\u{1E7E0}-\u{1E7E6}\u{1E7E8}-\u{1E7EB}\u{1E7ED}\u{1E7EE}\u{1E7F0}-\u{1E7FE}\u{1F100}-\u{1F10A}\u{1F110}-\u{1F12E}\u{1F130}-\u{1F169}\u{1F170}-\u{1F1AC}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DF}\u{2A700}-\u{2B739}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{31350}-\u{323AF}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}][\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11001}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]*$/u;
    module2.exports = {
      combiningMarks,
      combiningClassVirama,
      validZWNJ,
      bidiDomain,
      bidiS1LTR,
      bidiS1RTL,
      bidiS2,
      bidiS3,
      bidiS4EN,
      bidiS4AN,
      bidiS5,
      bidiS6
    };
  }
});

// ../../node_modules/.pnpm/tr46@4.1.1/node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS({
  "../../node_modules/.pnpm/tr46@4.1.1/node_modules/tr46/lib/mappingTable.json"(exports2, module2) {
    module2.exports = [[[0, 44], 4], [[45, 46], 2], [47, 4], [[48, 57], 2], [[58, 64], 4], [65, 1, "a"], [66, 1, "b"], [67, 1, "c"], [68, 1, "d"], [69, 1, "e"], [70, 1, "f"], [71, 1, "g"], [72, 1, "h"], [73, 1, "i"], [74, 1, "j"], [75, 1, "k"], [76, 1, "l"], [77, 1, "m"], [78, 1, "n"], [79, 1, "o"], [80, 1, "p"], [81, 1, "q"], [82, 1, "r"], [83, 1, "s"], [84, 1, "t"], [85, 1, "u"], [86, 1, "v"], [87, 1, "w"], [88, 1, "x"], [89, 1, "y"], [90, 1, "z"], [[91, 96], 4], [[97, 122], 2], [[123, 127], 4], [[128, 159], 3], [160, 5, " "], [[161, 167], 2], [168, 5, " \u0308"], [169, 2], [170, 1, "a"], [[171, 172], 2], [173, 7], [174, 2], [175, 5, " \u0304"], [[176, 177], 2], [178, 1, "2"], [179, 1, "3"], [180, 5, " \u0301"], [181, 1, "\u03BC"], [182, 2], [183, 2], [184, 5, " \u0327"], [185, 1, "1"], [186, 1, "o"], [187, 2], [188, 1, "1\u20444"], [189, 1, "1\u20442"], [190, 1, "3\u20444"], [191, 2], [192, 1, "\xE0"], [193, 1, "\xE1"], [194, 1, "\xE2"], [195, 1, "\xE3"], [196, 1, "\xE4"], [197, 1, "\xE5"], [198, 1, "\xE6"], [199, 1, "\xE7"], [200, 1, "\xE8"], [201, 1, "\xE9"], [202, 1, "\xEA"], [203, 1, "\xEB"], [204, 1, "\xEC"], [205, 1, "\xED"], [206, 1, "\xEE"], [207, 1, "\xEF"], [208, 1, "\xF0"], [209, 1, "\xF1"], [210, 1, "\xF2"], [211, 1, "\xF3"], [212, 1, "\xF4"], [213, 1, "\xF5"], [214, 1, "\xF6"], [215, 2], [216, 1, "\xF8"], [217, 1, "\xF9"], [218, 1, "\xFA"], [219, 1, "\xFB"], [220, 1, "\xFC"], [221, 1, "\xFD"], [222, 1, "\xFE"], [223, 6, "ss"], [[224, 246], 2], [247, 2], [[248, 255], 2], [256, 1, "\u0101"], [257, 2], [258, 1, "\u0103"], [259, 2], [260, 1, "\u0105"], [261, 2], [262, 1, "\u0107"], [263, 2], [264, 1, "\u0109"], [265, 2], [266, 1, "\u010B"], [267, 2], [268, 1, "\u010D"], [269, 2], [270, 1, "\u010F"], [271, 2], [272, 1, "\u0111"], [273, 2], [274, 1, "\u0113"], [275, 2], [276, 1, "\u0115"], [277, 2], [278, 1, "\u0117"], [279, 2], [280, 1, "\u0119"], [281, 2], [282, 1, "\u011B"], [283, 2], [284, 1, "\u011D"], [285, 2], [286, 1, "\u011F"], [287, 2], [288, 1, "\u0121"], [289, 2], [290, 1, "\u0123"], [291, 2], [292, 1, "\u0125"], [293, 2], [294, 1, "\u0127"], [295, 2], [296, 1, "\u0129"], [297, 2], [298, 1, "\u012B"], [299, 2], [300, 1, "\u012D"], [301, 2], [302, 1, "\u012F"], [303, 2], [304, 1, "i\u0307"], [305, 2], [[306, 307], 1, "ij"], [308, 1, "\u0135"], [309, 2], [310, 1, "\u0137"], [[311, 312], 2], [313, 1, "\u013A"], [314, 2], [315, 1, "\u013C"], [316, 2], [317, 1, "\u013E"], [318, 2], [[319, 320], 1, "l\xB7"], [321, 1, "\u0142"], [322, 2], [323, 1, "\u0144"], [324, 2], [325, 1, "\u0146"], [326, 2], [327, 1, "\u0148"], [328, 2], [329, 1, "\u02BCn"], [330, 1, "\u014B"], [331, 2], [332, 1, "\u014D"], [333, 2], [334, 1, "\u014F"], [335, 2], [336, 1, "\u0151"], [337, 2], [338, 1, "\u0153"], [339, 2], [340, 1, "\u0155"], [341, 2], [342, 1, "\u0157"], [343, 2], [344, 1, "\u0159"], [345, 2], [346, 1, "\u015B"], [347, 2], [348, 1, "\u015D"], [349, 2], [350, 1, "\u015F"], [351, 2], [352, 1, "\u0161"], [353, 2], [354, 1, "\u0163"], [355, 2], [356, 1, "\u0165"], [357, 2], [358, 1, "\u0167"], [359, 2], [360, 1, "\u0169"], [361, 2], [362, 1, "\u016B"], [363, 2], [364, 1, "\u016D"], [365, 2], [366, 1, "\u016F"], [367, 2], [368, 1, "\u0171"], [369, 2], [370, 1, "\u0173"], [371, 2], [372, 1, "\u0175"], [373, 2], [374, 1, "\u0177"], [375, 2], [376, 1, "\xFF"], [377, 1, "\u017A"], [378, 2], [379, 1, "\u017C"], [380, 2], [381, 1, "\u017E"], [382, 2], [383, 1, "s"], [384, 2], [385, 1, "\u0253"], [386, 1, "\u0183"], [387, 2], [388, 1, "\u0185"], [389, 2], [390, 1, "\u0254"], [391, 1, "\u0188"], [392, 2], [393, 1, "\u0256"], [394, 1, "\u0257"], [395, 1, "\u018C"], [[396, 397], 2], [398, 1, "\u01DD"], [399, 1, "\u0259"], [400, 1, "\u025B"], [401, 1, "\u0192"], [402, 2], [403, 1, "\u0260"], [404, 1, "\u0263"], [405, 2], [406, 1, "\u0269"], [407, 1, "\u0268"], [408, 1, "\u0199"], [[409, 411], 2], [412, 1, "\u026F"], [413, 1, "\u0272"], [414, 2], [415, 1, "\u0275"], [416, 1, "\u01A1"], [417, 2], [418, 1, "\u01A3"], [419, 2], [420, 1, "\u01A5"], [421, 2], [422, 1, "\u0280"], [423, 1, "\u01A8"], [424, 2], [425, 1, "\u0283"], [[426, 427], 2], [428, 1, "\u01AD"], [429, 2], [430, 1, "\u0288"], [431, 1, "\u01B0"], [432, 2], [433, 1, "\u028A"], [434, 1, "\u028B"], [435, 1, "\u01B4"], [436, 2], [437, 1, "\u01B6"], [438, 2], [439, 1, "\u0292"], [440, 1, "\u01B9"], [[441, 443], 2], [444, 1, "\u01BD"], [[445, 451], 2], [[452, 454], 1, "d\u017E"], [[455, 457], 1, "lj"], [[458, 460], 1, "nj"], [461, 1, "\u01CE"], [462, 2], [463, 1, "\u01D0"], [464, 2], [465, 1, "\u01D2"], [466, 2], [467, 1, "\u01D4"], [468, 2], [469, 1, "\u01D6"], [470, 2], [471, 1, "\u01D8"], [472, 2], [473, 1, "\u01DA"], [474, 2], [475, 1, "\u01DC"], [[476, 477], 2], [478, 1, "\u01DF"], [479, 2], [480, 1, "\u01E1"], [481, 2], [482, 1, "\u01E3"], [483, 2], [484, 1, "\u01E5"], [485, 2], [486, 1, "\u01E7"], [487, 2], [488, 1, "\u01E9"], [489, 2], [490, 1, "\u01EB"], [491, 2], [492, 1, "\u01ED"], [493, 2], [494, 1, "\u01EF"], [[495, 496], 2], [[497, 499], 1, "dz"], [500, 1, "\u01F5"], [501, 2], [502, 1, "\u0195"], [503, 1, "\u01BF"], [504, 1, "\u01F9"], [505, 2], [506, 1, "\u01FB"], [507, 2], [508, 1, "\u01FD"], [509, 2], [510, 1, "\u01FF"], [511, 2], [512, 1, "\u0201"], [513, 2], [514, 1, "\u0203"], [515, 2], [516, 1, "\u0205"], [517, 2], [518, 1, "\u0207"], [519, 2], [520, 1, "\u0209"], [521, 2], [522, 1, "\u020B"], [523, 2], [524, 1, "\u020D"], [525, 2], [526, 1, "\u020F"], [527, 2], [528, 1, "\u0211"], [529, 2], [530, 1, "\u0213"], [531, 2], [532, 1, "\u0215"], [533, 2], [534, 1, "\u0217"], [535, 2], [536, 1, "\u0219"], [537, 2], [538, 1, "\u021B"], [539, 2], [540, 1, "\u021D"], [541, 2], [542, 1, "\u021F"], [543, 2], [544, 1, "\u019E"], [545, 2], [546, 1, "\u0223"], [547, 2], [548, 1, "\u0225"], [549, 2], [550, 1, "\u0227"], [551, 2], [552, 1, "\u0229"], [553, 2], [554, 1, "\u022B"], [555, 2], [556, 1, "\u022D"], [557, 2], [558, 1, "\u022F"], [559, 2], [560, 1, "\u0231"], [561, 2], [562, 1, "\u0233"], [563, 2], [[564, 566], 2], [[567, 569], 2], [570, 1, "\u2C65"], [571, 1, "\u023C"], [572, 2], [573, 1, "\u019A"], [574, 1, "\u2C66"], [[575, 576], 2], [577, 1, "\u0242"], [578, 2], [579, 1, "\u0180"], [580, 1, "\u0289"], [581, 1, "\u028C"], [582, 1, "\u0247"], [583, 2], [584, 1, "\u0249"], [585, 2], [586, 1, "\u024B"], [587, 2], [588, 1, "\u024D"], [589, 2], [590, 1, "\u024F"], [591, 2], [[592, 680], 2], [[681, 685], 2], [[686, 687], 2], [688, 1, "h"], [689, 1, "\u0266"], [690, 1, "j"], [691, 1, "r"], [692, 1, "\u0279"], [693, 1, "\u027B"], [694, 1, "\u0281"], [695, 1, "w"], [696, 1, "y"], [[697, 705], 2], [[706, 709], 2], [[710, 721], 2], [[722, 727], 2], [728, 5, " \u0306"], [729, 5, " \u0307"], [730, 5, " \u030A"], [731, 5, " \u0328"], [732, 5, " \u0303"], [733, 5, " \u030B"], [734, 2], [735, 2], [736, 1, "\u0263"], [737, 1, "l"], [738, 1, "s"], [739, 1, "x"], [740, 1, "\u0295"], [[741, 745], 2], [[746, 747], 2], [748, 2], [749, 2], [750, 2], [[751, 767], 2], [[768, 831], 2], [832, 1, "\u0300"], [833, 1, "\u0301"], [834, 2], [835, 1, "\u0313"], [836, 1, "\u0308\u0301"], [837, 1, "\u03B9"], [[838, 846], 2], [847, 7], [[848, 855], 2], [[856, 860], 2], [[861, 863], 2], [[864, 865], 2], [866, 2], [[867, 879], 2], [880, 1, "\u0371"], [881, 2], [882, 1, "\u0373"], [883, 2], [884, 1, "\u02B9"], [885, 2], [886, 1, "\u0377"], [887, 2], [[888, 889], 3], [890, 5, " \u03B9"], [[891, 893], 2], [894, 5, ";"], [895, 1, "\u03F3"], [[896, 899], 3], [900, 5, " \u0301"], [901, 5, " \u0308\u0301"], [902, 1, "\u03AC"], [903, 1, "\xB7"], [904, 1, "\u03AD"], [905, 1, "\u03AE"], [906, 1, "\u03AF"], [907, 3], [908, 1, "\u03CC"], [909, 3], [910, 1, "\u03CD"], [911, 1, "\u03CE"], [912, 2], [913, 1, "\u03B1"], [914, 1, "\u03B2"], [915, 1, "\u03B3"], [916, 1, "\u03B4"], [917, 1, "\u03B5"], [918, 1, "\u03B6"], [919, 1, "\u03B7"], [920, 1, "\u03B8"], [921, 1, "\u03B9"], [922, 1, "\u03BA"], [923, 1, "\u03BB"], [924, 1, "\u03BC"], [925, 1, "\u03BD"], [926, 1, "\u03BE"], [927, 1, "\u03BF"], [928, 1, "\u03C0"], [929, 1, "\u03C1"], [930, 3], [931, 1, "\u03C3"], [932, 1, "\u03C4"], [933, 1, "\u03C5"], [934, 1, "\u03C6"], [935, 1, "\u03C7"], [936, 1, "\u03C8"], [937, 1, "\u03C9"], [938, 1, "\u03CA"], [939, 1, "\u03CB"], [[940, 961], 2], [962, 6, "\u03C3"], [[963, 974], 2], [975, 1, "\u03D7"], [976, 1, "\u03B2"], [977, 1, "\u03B8"], [978, 1, "\u03C5"], [979, 1, "\u03CD"], [980, 1, "\u03CB"], [981, 1, "\u03C6"], [982, 1, "\u03C0"], [983, 2], [984, 1, "\u03D9"], [985, 2], [986, 1, "\u03DB"], [987, 2], [988, 1, "\u03DD"], [989, 2], [990, 1, "\u03DF"], [991, 2], [992, 1, "\u03E1"], [993, 2], [994, 1, "\u03E3"], [995, 2], [996, 1, "\u03E5"], [997, 2], [998, 1, "\u03E7"], [999, 2], [1e3, 1, "\u03E9"], [1001, 2], [1002, 1, "\u03EB"], [1003, 2], [1004, 1, "\u03ED"], [1005, 2], [1006, 1, "\u03EF"], [1007, 2], [1008, 1, "\u03BA"], [1009, 1, "\u03C1"], [1010, 1, "\u03C3"], [1011, 2], [1012, 1, "\u03B8"], [1013, 1, "\u03B5"], [1014, 2], [1015, 1, "\u03F8"], [1016, 2], [1017, 1, "\u03C3"], [1018, 1, "\u03FB"], [1019, 2], [1020, 2], [1021, 1, "\u037B"], [1022, 1, "\u037C"], [1023, 1, "\u037D"], [1024, 1, "\u0450"], [1025, 1, "\u0451"], [1026, 1, "\u0452"], [1027, 1, "\u0453"], [1028, 1, "\u0454"], [1029, 1, "\u0455"], [1030, 1, "\u0456"], [1031, 1, "\u0457"], [1032, 1, "\u0458"], [1033, 1, "\u0459"], [1034, 1, "\u045A"], [1035, 1, "\u045B"], [1036, 1, "\u045C"], [1037, 1, "\u045D"], [1038, 1, "\u045E"], [1039, 1, "\u045F"], [1040, 1, "\u0430"], [1041, 1, "\u0431"], [1042, 1, "\u0432"], [1043, 1, "\u0433"], [1044, 1, "\u0434"], [1045, 1, "\u0435"], [1046, 1, "\u0436"], [1047, 1, "\u0437"], [1048, 1, "\u0438"], [1049, 1, "\u0439"], [1050, 1, "\u043A"], [1051, 1, "\u043B"], [1052, 1, "\u043C"], [1053, 1, "\u043D"], [1054, 1, "\u043E"], [1055, 1, "\u043F"], [1056, 1, "\u0440"], [1057, 1, "\u0441"], [1058, 1, "\u0442"], [1059, 1, "\u0443"], [1060, 1, "\u0444"], [1061, 1, "\u0445"], [1062, 1, "\u0446"], [1063, 1, "\u0447"], [1064, 1, "\u0448"], [1065, 1, "\u0449"], [1066, 1, "\u044A"], [1067, 1, "\u044B"], [1068, 1, "\u044C"], [1069, 1, "\u044D"], [1070, 1, "\u044E"], [1071, 1, "\u044F"], [[1072, 1103], 2], [1104, 2], [[1105, 1116], 2], [1117, 2], [[1118, 1119], 2], [1120, 1, "\u0461"], [1121, 2], [1122, 1, "\u0463"], [1123, 2], [1124, 1, "\u0465"], [1125, 2], [1126, 1, "\u0467"], [1127, 2], [1128, 1, "\u0469"], [1129, 2], [1130, 1, "\u046B"], [1131, 2], [1132, 1, "\u046D"], [1133, 2], [1134, 1, "\u046F"], [1135, 2], [1136, 1, "\u0471"], [1137, 2], [1138, 1, "\u0473"], [1139, 2], [1140, 1, "\u0475"], [1141, 2], [1142, 1, "\u0477"], [1143, 2], [1144, 1, "\u0479"], [1145, 2], [1146, 1, "\u047B"], [1147, 2], [1148, 1, "\u047D"], [1149, 2], [1150, 1, "\u047F"], [1151, 2], [1152, 1, "\u0481"], [1153, 2], [1154, 2], [[1155, 1158], 2], [1159, 2], [[1160, 1161], 2], [1162, 1, "\u048B"], [1163, 2], [1164, 1, "\u048D"], [1165, 2], [1166, 1, "\u048F"], [1167, 2], [1168, 1, "\u0491"], [1169, 2], [1170, 1, "\u0493"], [1171, 2], [1172, 1, "\u0495"], [1173, 2], [1174, 1, "\u0497"], [1175, 2], [1176, 1, "\u0499"], [1177, 2], [1178, 1, "\u049B"], [1179, 2], [1180, 1, "\u049D"], [1181, 2], [1182, 1, "\u049F"], [1183, 2], [1184, 1, "\u04A1"], [1185, 2], [1186, 1, "\u04A3"], [1187, 2], [1188, 1, "\u04A5"], [1189, 2], [1190, 1, "\u04A7"], [1191, 2], [1192, 1, "\u04A9"], [1193, 2], [1194, 1, "\u04AB"], [1195, 2], [1196, 1, "\u04AD"], [1197, 2], [1198, 1, "\u04AF"], [1199, 2], [1200, 1, "\u04B1"], [1201, 2], [1202, 1, "\u04B3"], [1203, 2], [1204, 1, "\u04B5"], [1205, 2], [1206, 1, "\u04B7"], [1207, 2], [1208, 1, "\u04B9"], [1209, 2], [1210, 1, "\u04BB"], [1211, 2], [1212, 1, "\u04BD"], [1213, 2], [1214, 1, "\u04BF"], [1215, 2], [1216, 3], [1217, 1, "\u04C2"], [1218, 2], [1219, 1, "\u04C4"], [1220, 2], [1221, 1, "\u04C6"], [1222, 2], [1223, 1, "\u04C8"], [1224, 2], [1225, 1, "\u04CA"], [1226, 2], [1227, 1, "\u04CC"], [1228, 2], [1229, 1, "\u04CE"], [1230, 2], [1231, 2], [1232, 1, "\u04D1"], [1233, 2], [1234, 1, "\u04D3"], [1235, 2], [1236, 1, "\u04D5"], [1237, 2], [1238, 1, "\u04D7"], [1239, 2], [1240, 1, "\u04D9"], [1241, 2], [1242, 1, "\u04DB"], [1243, 2], [1244, 1, "\u04DD"], [1245, 2], [1246, 1, "\u04DF"], [1247, 2], [1248, 1, "\u04E1"], [1249, 2], [1250, 1, "\u04E3"], [1251, 2], [1252, 1, "\u04E5"], [1253, 2], [1254, 1, "\u04E7"], [1255, 2], [1256, 1, "\u04E9"], [1257, 2], [1258, 1, "\u04EB"], [1259, 2], [1260, 1, "\u04ED"], [1261, 2], [1262, 1, "\u04EF"], [1263, 2], [1264, 1, "\u04F1"], [1265, 2], [1266, 1, "\u04F3"], [1267, 2], [1268, 1, "\u04F5"], [1269, 2], [1270, 1, "\u04F7"], [1271, 2], [1272, 1, "\u04F9"], [1273, 2], [1274, 1, "\u04FB"], [1275, 2], [1276, 1, "\u04FD"], [1277, 2], [1278, 1, "\u04FF"], [1279, 2], [1280, 1, "\u0501"], [1281, 2], [1282, 1, "\u0503"], [1283, 2], [1284, 1, "\u0505"], [1285, 2], [1286, 1, "\u0507"], [1287, 2], [1288, 1, "\u0509"], [1289, 2], [1290, 1, "\u050B"], [1291, 2], [1292, 1, "\u050D"], [1293, 2], [1294, 1, "\u050F"], [1295, 2], [1296, 1, "\u0511"], [1297, 2], [1298, 1, "\u0513"], [1299, 2], [1300, 1, "\u0515"], [1301, 2], [1302, 1, "\u0517"], [1303, 2], [1304, 1, "\u0519"], [1305, 2], [1306, 1, "\u051B"], [1307, 2], [1308, 1, "\u051D"], [1309, 2], [1310, 1, "\u051F"], [1311, 2], [1312, 1, "\u0521"], [1313, 2], [1314, 1, "\u0523"], [1315, 2], [1316, 1, "\u0525"], [1317, 2], [1318, 1, "\u0527"], [1319, 2], [1320, 1, "\u0529"], [1321, 2], [1322, 1, "\u052B"], [1323, 2], [1324, 1, "\u052D"], [1325, 2], [1326, 1, "\u052F"], [1327, 2], [1328, 3], [1329, 1, "\u0561"], [1330, 1, "\u0562"], [1331, 1, "\u0563"], [1332, 1, "\u0564"], [1333, 1, "\u0565"], [1334, 1, "\u0566"], [1335, 1, "\u0567"], [1336, 1, "\u0568"], [1337, 1, "\u0569"], [1338, 1, "\u056A"], [1339, 1, "\u056B"], [1340, 1, "\u056C"], [1341, 1, "\u056D"], [1342, 1, "\u056E"], [1343, 1, "\u056F"], [1344, 1, "\u0570"], [1345, 1, "\u0571"], [1346, 1, "\u0572"], [1347, 1, "\u0573"], [1348, 1, "\u0574"], [1349, 1, "\u0575"], [1350, 1, "\u0576"], [1351, 1, "\u0577"], [1352, 1, "\u0578"], [1353, 1, "\u0579"], [1354, 1, "\u057A"], [1355, 1, "\u057B"], [1356, 1, "\u057C"], [1357, 1, "\u057D"], [1358, 1, "\u057E"], [1359, 1, "\u057F"], [1360, 1, "\u0580"], [1361, 1, "\u0581"], [1362, 1, "\u0582"], [1363, 1, "\u0583"], [1364, 1, "\u0584"], [1365, 1, "\u0585"], [1366, 1, "\u0586"], [[1367, 1368], 3], [1369, 2], [[1370, 1375], 2], [1376, 2], [[1377, 1414], 2], [1415, 1, "\u0565\u0582"], [1416, 2], [1417, 2], [1418, 2], [[1419, 1420], 3], [[1421, 1422], 2], [1423, 2], [1424, 3], [[1425, 1441], 2], [1442, 2], [[1443, 1455], 2], [[1456, 1465], 2], [1466, 2], [[1467, 1469], 2], [1470, 2], [1471, 2], [1472, 2], [[1473, 1474], 2], [1475, 2], [1476, 2], [1477, 2], [1478, 2], [1479, 2], [[1480, 1487], 3], [[1488, 1514], 2], [[1515, 1518], 3], [1519, 2], [[1520, 1524], 2], [[1525, 1535], 3], [[1536, 1539], 3], [1540, 3], [1541, 3], [[1542, 1546], 2], [1547, 2], [1548, 2], [[1549, 1551], 2], [[1552, 1557], 2], [[1558, 1562], 2], [1563, 2], [1564, 3], [1565, 2], [1566, 2], [1567, 2], [1568, 2], [[1569, 1594], 2], [[1595, 1599], 2], [1600, 2], [[1601, 1618], 2], [[1619, 1621], 2], [[1622, 1624], 2], [[1625, 1630], 2], [1631, 2], [[1632, 1641], 2], [[1642, 1645], 2], [[1646, 1647], 2], [[1648, 1652], 2], [1653, 1, "\u0627\u0674"], [1654, 1, "\u0648\u0674"], [1655, 1, "\u06C7\u0674"], [1656, 1, "\u064A\u0674"], [[1657, 1719], 2], [[1720, 1721], 2], [[1722, 1726], 2], [1727, 2], [[1728, 1742], 2], [1743, 2], [[1744, 1747], 2], [1748, 2], [[1749, 1756], 2], [1757, 3], [1758, 2], [[1759, 1768], 2], [1769, 2], [[1770, 1773], 2], [[1774, 1775], 2], [[1776, 1785], 2], [[1786, 1790], 2], [1791, 2], [[1792, 1805], 2], [1806, 3], [1807, 3], [[1808, 1836], 2], [[1837, 1839], 2], [[1840, 1866], 2], [[1867, 1868], 3], [[1869, 1871], 2], [[1872, 1901], 2], [[1902, 1919], 2], [[1920, 1968], 2], [1969, 2], [[1970, 1983], 3], [[1984, 2037], 2], [[2038, 2042], 2], [[2043, 2044], 3], [2045, 2], [[2046, 2047], 2], [[2048, 2093], 2], [[2094, 2095], 3], [[2096, 2110], 2], [2111, 3], [[2112, 2139], 2], [[2140, 2141], 3], [2142, 2], [2143, 3], [[2144, 2154], 2], [[2155, 2159], 3], [[2160, 2183], 2], [2184, 2], [[2185, 2190], 2], [2191, 3], [[2192, 2193], 3], [[2194, 2199], 3], [[2200, 2207], 2], [2208, 2], [2209, 2], [[2210, 2220], 2], [[2221, 2226], 2], [[2227, 2228], 2], [2229, 2], [[2230, 2237], 2], [[2238, 2247], 2], [[2248, 2258], 2], [2259, 2], [[2260, 2273], 2], [2274, 3], [2275, 2], [[2276, 2302], 2], [2303, 2], [2304, 2], [[2305, 2307], 2], [2308, 2], [[2309, 2361], 2], [[2362, 2363], 2], [[2364, 2381], 2], [2382, 2], [2383, 2], [[2384, 2388], 2], [2389, 2], [[2390, 2391], 2], [2392, 1, "\u0915\u093C"], [2393, 1, "\u0916\u093C"], [2394, 1, "\u0917\u093C"], [2395, 1, "\u091C\u093C"], [2396, 1, "\u0921\u093C"], [2397, 1, "\u0922\u093C"], [2398, 1, "\u092B\u093C"], [2399, 1, "\u092F\u093C"], [[2400, 2403], 2], [[2404, 2405], 2], [[2406, 2415], 2], [2416, 2], [[2417, 2418], 2], [[2419, 2423], 2], [2424, 2], [[2425, 2426], 2], [[2427, 2428], 2], [2429, 2], [[2430, 2431], 2], [2432, 2], [[2433, 2435], 2], [2436, 3], [[2437, 2444], 2], [[2445, 2446], 3], [[2447, 2448], 2], [[2449, 2450], 3], [[2451, 2472], 2], [2473, 3], [[2474, 2480], 2], [2481, 3], [2482, 2], [[2483, 2485], 3], [[2486, 2489], 2], [[2490, 2491], 3], [2492, 2], [2493, 2], [[2494, 2500], 2], [[2501, 2502], 3], [[2503, 2504], 2], [[2505, 2506], 3], [[2507, 2509], 2], [2510, 2], [[2511, 2518], 3], [2519, 2], [[2520, 2523], 3], [2524, 1, "\u09A1\u09BC"], [2525, 1, "\u09A2\u09BC"], [2526, 3], [2527, 1, "\u09AF\u09BC"], [[2528, 2531], 2], [[2532, 2533], 3], [[2534, 2545], 2], [[2546, 2554], 2], [2555, 2], [2556, 2], [2557, 2], [2558, 2], [[2559, 2560], 3], [2561, 2], [2562, 2], [2563, 2], [2564, 3], [[2565, 2570], 2], [[2571, 2574], 3], [[2575, 2576], 2], [[2577, 2578], 3], [[2579, 2600], 2], [2601, 3], [[2602, 2608], 2], [2609, 3], [2610, 2], [2611, 1, "\u0A32\u0A3C"], [2612, 3], [2613, 2], [2614, 1, "\u0A38\u0A3C"], [2615, 3], [[2616, 2617], 2], [[2618, 2619], 3], [2620, 2], [2621, 3], [[2622, 2626], 2], [[2627, 2630], 3], [[2631, 2632], 2], [[2633, 2634], 3], [[2635, 2637], 2], [[2638, 2640], 3], [2641, 2], [[2642, 2648], 3], [2649, 1, "\u0A16\u0A3C"], [2650, 1, "\u0A17\u0A3C"], [2651, 1, "\u0A1C\u0A3C"], [2652, 2], [2653, 3], [2654, 1, "\u0A2B\u0A3C"], [[2655, 2661], 3], [[2662, 2676], 2], [2677, 2], [2678, 2], [[2679, 2688], 3], [[2689, 2691], 2], [2692, 3], [[2693, 2699], 2], [2700, 2], [2701, 2], [2702, 3], [[2703, 2705], 2], [2706, 3], [[2707, 2728], 2], [2729, 3], [[2730, 2736], 2], [2737, 3], [[2738, 2739], 2], [2740, 3], [[2741, 2745], 2], [[2746, 2747], 3], [[2748, 2757], 2], [2758, 3], [[2759, 2761], 2], [2762, 3], [[2763, 2765], 2], [[2766, 2767], 3], [2768, 2], [[2769, 2783], 3], [2784, 2], [[2785, 2787], 2], [[2788, 2789], 3], [[2790, 2799], 2], [2800, 2], [2801, 2], [[2802, 2808], 3], [2809, 2], [[2810, 2815], 2], [2816, 3], [[2817, 2819], 2], [2820, 3], [[2821, 2828], 2], [[2829, 2830], 3], [[2831, 2832], 2], [[2833, 2834], 3], [[2835, 2856], 2], [2857, 3], [[2858, 2864], 2], [2865, 3], [[2866, 2867], 2], [2868, 3], [2869, 2], [[2870, 2873], 2], [[2874, 2875], 3], [[2876, 2883], 2], [2884, 2], [[2885, 2886], 3], [[2887, 2888], 2], [[2889, 2890], 3], [[2891, 2893], 2], [[2894, 2900], 3], [2901, 2], [[2902, 2903], 2], [[2904, 2907], 3], [2908, 1, "\u0B21\u0B3C"], [2909, 1, "\u0B22\u0B3C"], [2910, 3], [[2911, 2913], 2], [[2914, 2915], 2], [[2916, 2917], 3], [[2918, 2927], 2], [2928, 2], [2929, 2], [[2930, 2935], 2], [[2936, 2945], 3], [[2946, 2947], 2], [2948, 3], [[2949, 2954], 2], [[2955, 2957], 3], [[2958, 2960], 2], [2961, 3], [[2962, 2965], 2], [[2966, 2968], 3], [[2969, 2970], 2], [2971, 3], [2972, 2], [2973, 3], [[2974, 2975], 2], [[2976, 2978], 3], [[2979, 2980], 2], [[2981, 2983], 3], [[2984, 2986], 2], [[2987, 2989], 3], [[2990, 2997], 2], [2998, 2], [[2999, 3001], 2], [[3002, 3005], 3], [[3006, 3010], 2], [[3011, 3013], 3], [[3014, 3016], 2], [3017, 3], [[3018, 3021], 2], [[3022, 3023], 3], [3024, 2], [[3025, 3030], 3], [3031, 2], [[3032, 3045], 3], [3046, 2], [[3047, 3055], 2], [[3056, 3058], 2], [[3059, 3066], 2], [[3067, 3071], 3], [3072, 2], [[3073, 3075], 2], [3076, 2], [[3077, 3084], 2], [3085, 3], [[3086, 3088], 2], [3089, 3], [[3090, 3112], 2], [3113, 3], [[3114, 3123], 2], [3124, 2], [[3125, 3129], 2], [[3130, 3131], 3], [3132, 2], [3133, 2], [[3134, 3140], 2], [3141, 3], [[3142, 3144], 2], [3145, 3], [[3146, 3149], 2], [[3150, 3156], 3], [[3157, 3158], 2], [3159, 3], [[3160, 3161], 2], [3162, 2], [[3163, 3164], 3], [3165, 2], [[3166, 3167], 3], [[3168, 3169], 2], [[3170, 3171], 2], [[3172, 3173], 3], [[3174, 3183], 2], [[3184, 3190], 3], [3191, 2], [[3192, 3199], 2], [3200, 2], [3201, 2], [[3202, 3203], 2], [3204, 2], [[3205, 3212], 2], [3213, 3], [[3214, 3216], 2], [3217, 3], [[3218, 3240], 2], [3241, 3], [[3242, 3251], 2], [3252, 3], [[3253, 3257], 2], [[3258, 3259], 3], [[3260, 3261], 2], [[3262, 3268], 2], [3269, 3], [[3270, 3272], 2], [3273, 3], [[3274, 3277], 2], [[3278, 3284], 3], [[3285, 3286], 2], [[3287, 3292], 3], [3293, 2], [3294, 2], [3295, 3], [[3296, 3297], 2], [[3298, 3299], 2], [[3300, 3301], 3], [[3302, 3311], 2], [3312, 3], [[3313, 3314], 2], [3315, 2], [[3316, 3327], 3], [3328, 2], [3329, 2], [[3330, 3331], 2], [3332, 2], [[3333, 3340], 2], [3341, 3], [[3342, 3344], 2], [3345, 3], [[3346, 3368], 2], [3369, 2], [[3370, 3385], 2], [3386, 2], [[3387, 3388], 2], [3389, 2], [[3390, 3395], 2], [3396, 2], [3397, 3], [[3398, 3400], 2], [3401, 3], [[3402, 3405], 2], [3406, 2], [3407, 2], [[3408, 3411], 3], [[3412, 3414], 2], [3415, 2], [[3416, 3422], 2], [3423, 2], [[3424, 3425], 2], [[3426, 3427], 2], [[3428, 3429], 3], [[3430, 3439], 2], [[3440, 3445], 2], [[3446, 3448], 2], [3449, 2], [[3450, 3455], 2], [3456, 3], [3457, 2], [[3458, 3459], 2], [3460, 3], [[3461, 3478], 2], [[3479, 3481], 3], [[3482, 3505], 2], [3506, 3], [[3507, 3515], 2], [3516, 3], [3517, 2], [[3518, 3519], 3], [[3520, 3526], 2], [[3527, 3529], 3], [3530, 2], [[3531, 3534], 3], [[3535, 3540], 2], [3541, 3], [3542, 2], [3543, 3], [[3544, 3551], 2], [[3552, 3557], 3], [[3558, 3567], 2], [[3568, 3569], 3], [[3570, 3571], 2], [3572, 2], [[3573, 3584], 3], [[3585, 3634], 2], [3635, 1, "\u0E4D\u0E32"], [[3636, 3642], 2], [[3643, 3646], 3], [3647, 2], [[3648, 3662], 2], [3663, 2], [[3664, 3673], 2], [[3674, 3675], 2], [[3676, 3712], 3], [[3713, 3714], 2], [3715, 3], [3716, 2], [3717, 3], [3718, 2], [[3719, 3720], 2], [3721, 2], [3722, 2], [3723, 3], [3724, 2], [3725, 2], [[3726, 3731], 2], [[3732, 3735], 2], [3736, 2], [[3737, 3743], 2], [3744, 2], [[3745, 3747], 2], [3748, 3], [3749, 2], [3750, 3], [3751, 2], [[3752, 3753], 2], [[3754, 3755], 2], [3756, 2], [[3757, 3762], 2], [3763, 1, "\u0ECD\u0EB2"], [[3764, 3769], 2], [3770, 2], [[3771, 3773], 2], [[3774, 3775], 3], [[3776, 3780], 2], [3781, 3], [3782, 2], [3783, 3], [[3784, 3789], 2], [3790, 2], [3791, 3], [[3792, 3801], 2], [[3802, 3803], 3], [3804, 1, "\u0EAB\u0E99"], [3805, 1, "\u0EAB\u0EA1"], [[3806, 3807], 2], [[3808, 3839], 3], [3840, 2], [[3841, 3850], 2], [3851, 2], [3852, 1, "\u0F0B"], [[3853, 3863], 2], [[3864, 3865], 2], [[3866, 3871], 2], [[3872, 3881], 2], [[3882, 3892], 2], [3893, 2], [3894, 2], [3895, 2], [3896, 2], [3897, 2], [[3898, 3901], 2], [[3902, 3906], 2], [3907, 1, "\u0F42\u0FB7"], [[3908, 3911], 2], [3912, 3], [[3913, 3916], 2], [3917, 1, "\u0F4C\u0FB7"], [[3918, 3921], 2], [3922, 1, "\u0F51\u0FB7"], [[3923, 3926], 2], [3927, 1, "\u0F56\u0FB7"], [[3928, 3931], 2], [3932, 1, "\u0F5B\u0FB7"], [[3933, 3944], 2], [3945, 1, "\u0F40\u0FB5"], [3946, 2], [[3947, 3948], 2], [[3949, 3952], 3], [[3953, 3954], 2], [3955, 1, "\u0F71\u0F72"], [3956, 2], [3957, 1, "\u0F71\u0F74"], [3958, 1, "\u0FB2\u0F80"], [3959, 1, "\u0FB2\u0F71\u0F80"], [3960, 1, "\u0FB3\u0F80"], [3961, 1, "\u0FB3\u0F71\u0F80"], [[3962, 3968], 2], [3969, 1, "\u0F71\u0F80"], [[3970, 3972], 2], [3973, 2], [[3974, 3979], 2], [[3980, 3983], 2], [[3984, 3986], 2], [3987, 1, "\u0F92\u0FB7"], [[3988, 3989], 2], [3990, 2], [3991, 2], [3992, 3], [[3993, 3996], 2], [3997, 1, "\u0F9C\u0FB7"], [[3998, 4001], 2], [4002, 1, "\u0FA1\u0FB7"], [[4003, 4006], 2], [4007, 1, "\u0FA6\u0FB7"], [[4008, 4011], 2], [4012, 1, "\u0FAB\u0FB7"], [4013, 2], [[4014, 4016], 2], [[4017, 4023], 2], [4024, 2], [4025, 1, "\u0F90\u0FB5"], [[4026, 4028], 2], [4029, 3], [[4030, 4037], 2], [4038, 2], [[4039, 4044], 2], [4045, 3], [4046, 2], [4047, 2], [[4048, 4049], 2], [[4050, 4052], 2], [[4053, 4056], 2], [[4057, 4058], 2], [[4059, 4095], 3], [[4096, 4129], 2], [4130, 2], [[4131, 4135], 2], [4136, 2], [[4137, 4138], 2], [4139, 2], [[4140, 4146], 2], [[4147, 4149], 2], [[4150, 4153], 2], [[4154, 4159], 2], [[4160, 4169], 2], [[4170, 4175], 2], [[4176, 4185], 2], [[4186, 4249], 2], [[4250, 4253], 2], [[4254, 4255], 2], [[4256, 4293], 3], [4294, 3], [4295, 1, "\u2D27"], [[4296, 4300], 3], [4301, 1, "\u2D2D"], [[4302, 4303], 3], [[4304, 4342], 2], [[4343, 4344], 2], [[4345, 4346], 2], [4347, 2], [4348, 1, "\u10DC"], [[4349, 4351], 2], [[4352, 4441], 2], [[4442, 4446], 2], [[4447, 4448], 3], [[4449, 4514], 2], [[4515, 4519], 2], [[4520, 4601], 2], [[4602, 4607], 2], [[4608, 4614], 2], [4615, 2], [[4616, 4678], 2], [4679, 2], [4680, 2], [4681, 3], [[4682, 4685], 2], [[4686, 4687], 3], [[4688, 4694], 2], [4695, 3], [4696, 2], [4697, 3], [[4698, 4701], 2], [[4702, 4703], 3], [[4704, 4742], 2], [4743, 2], [4744, 2], [4745, 3], [[4746, 4749], 2], [[4750, 4751], 3], [[4752, 4782], 2], [4783, 2], [4784, 2], [4785, 3], [[4786, 4789], 2], [[4790, 4791], 3], [[4792, 4798], 2], [4799, 3], [4800, 2], [4801, 3], [[4802, 4805], 2], [[4806, 4807], 3], [[4808, 4814], 2], [4815, 2], [[4816, 4822], 2], [4823, 3], [[4824, 4846], 2], [4847, 2], [[4848, 4878], 2], [4879, 2], [4880, 2], [4881, 3], [[4882, 4885], 2], [[4886, 4887], 3], [[4888, 4894], 2], [4895, 2], [[4896, 4934], 2], [4935, 2], [[4936, 4954], 2], [[4955, 4956], 3], [[4957, 4958], 2], [4959, 2], [4960, 2], [[4961, 4988], 2], [[4989, 4991], 3], [[4992, 5007], 2], [[5008, 5017], 2], [[5018, 5023], 3], [[5024, 5108], 2], [5109, 2], [[5110, 5111], 3], [5112, 1, "\u13F0"], [5113, 1, "\u13F1"], [5114, 1, "\u13F2"], [5115, 1, "\u13F3"], [5116, 1, "\u13F4"], [5117, 1, "\u13F5"], [[5118, 5119], 3], [5120, 2], [[5121, 5740], 2], [[5741, 5742], 2], [[5743, 5750], 2], [[5751, 5759], 2], [5760, 3], [[5761, 5786], 2], [[5787, 5788], 2], [[5789, 5791], 3], [[5792, 5866], 2], [[5867, 5872], 2], [[5873, 5880], 2], [[5881, 5887], 3], [[5888, 5900], 2], [5901, 2], [[5902, 5908], 2], [5909, 2], [[5910, 5918], 3], [5919, 2], [[5920, 5940], 2], [[5941, 5942], 2], [[5943, 5951], 3], [[5952, 5971], 2], [[5972, 5983], 3], [[5984, 5996], 2], [5997, 3], [[5998, 6e3], 2], [6001, 3], [[6002, 6003], 2], [[6004, 6015], 3], [[6016, 6067], 2], [[6068, 6069], 3], [[6070, 6099], 2], [[6100, 6102], 2], [6103, 2], [[6104, 6107], 2], [6108, 2], [6109, 2], [[6110, 6111], 3], [[6112, 6121], 2], [[6122, 6127], 3], [[6128, 6137], 2], [[6138, 6143], 3], [[6144, 6149], 2], [6150, 3], [[6151, 6154], 2], [[6155, 6157], 7], [6158, 3], [6159, 7], [[6160, 6169], 2], [[6170, 6175], 3], [[6176, 6263], 2], [6264, 2], [[6265, 6271], 3], [[6272, 6313], 2], [6314, 2], [[6315, 6319], 3], [[6320, 6389], 2], [[6390, 6399], 3], [[6400, 6428], 2], [[6429, 6430], 2], [6431, 3], [[6432, 6443], 2], [[6444, 6447], 3], [[6448, 6459], 2], [[6460, 6463], 3], [6464, 2], [[6465, 6467], 3], [[6468, 6469], 2], [[6470, 6509], 2], [[6510, 6511], 3], [[6512, 6516], 2], [[6517, 6527], 3], [[6528, 6569], 2], [[6570, 6571], 2], [[6572, 6575], 3], [[6576, 6601], 2], [[6602, 6607], 3], [[6608, 6617], 2], [6618, 2], [[6619, 6621], 3], [[6622, 6623], 2], [[6624, 6655], 2], [[6656, 6683], 2], [[6684, 6685], 3], [[6686, 6687], 2], [[6688, 6750], 2], [6751, 3], [[6752, 6780], 2], [[6781, 6782], 3], [[6783, 6793], 2], [[6794, 6799], 3], [[6800, 6809], 2], [[6810, 6815], 3], [[6816, 6822], 2], [6823, 2], [[6824, 6829], 2], [[6830, 6831], 3], [[6832, 6845], 2], [6846, 2], [[6847, 6848], 2], [[6849, 6862], 2], [[6863, 6911], 3], [[6912, 6987], 2], [6988, 2], [[6989, 6991], 3], [[6992, 7001], 2], [[7002, 7018], 2], [[7019, 7027], 2], [[7028, 7036], 2], [[7037, 7038], 2], [7039, 3], [[7040, 7082], 2], [[7083, 7085], 2], [[7086, 7097], 2], [[7098, 7103], 2], [[7104, 7155], 2], [[7156, 7163], 3], [[7164, 7167], 2], [[7168, 7223], 2], [[7224, 7226], 3], [[7227, 7231], 2], [[7232, 7241], 2], [[7242, 7244], 3], [[7245, 7293], 2], [[7294, 7295], 2], [7296, 1, "\u0432"], [7297, 1, "\u0434"], [7298, 1, "\u043E"], [7299, 1, "\u0441"], [[7300, 7301], 1, "\u0442"], [7302, 1, "\u044A"], [7303, 1, "\u0463"], [7304, 1, "\uA64B"], [[7305, 7311], 3], [7312, 1, "\u10D0"], [7313, 1, "\u10D1"], [7314, 1, "\u10D2"], [7315, 1, "\u10D3"], [7316, 1, "\u10D4"], [7317, 1, "\u10D5"], [7318, 1, "\u10D6"], [7319, 1, "\u10D7"], [7320, 1, "\u10D8"], [7321, 1, "\u10D9"], [7322, 1, "\u10DA"], [7323, 1, "\u10DB"], [7324, 1, "\u10DC"], [7325, 1, "\u10DD"], [7326, 1, "\u10DE"], [7327, 1, "\u10DF"], [7328, 1, "\u10E0"], [7329, 1, "\u10E1"], [7330, 1, "\u10E2"], [7331, 1, "\u10E3"], [7332, 1, "\u10E4"], [7333, 1, "\u10E5"], [7334, 1, "\u10E6"], [7335, 1, "\u10E7"], [7336, 1, "\u10E8"], [7337, 1, "\u10E9"], [7338, 1, "\u10EA"], [7339, 1, "\u10EB"], [7340, 1, "\u10EC"], [7341, 1, "\u10ED"], [7342, 1, "\u10EE"], [7343, 1, "\u10EF"], [7344, 1, "\u10F0"], [7345, 1, "\u10F1"], [7346, 1, "\u10F2"], [7347, 1, "\u10F3"], [7348, 1, "\u10F4"], [7349, 1, "\u10F5"], [7350, 1, "\u10F6"], [7351, 1, "\u10F7"], [7352, 1, "\u10F8"], [7353, 1, "\u10F9"], [7354, 1, "\u10FA"], [[7355, 7356], 3], [7357, 1, "\u10FD"], [7358, 1, "\u10FE"], [7359, 1, "\u10FF"], [[7360, 7367], 2], [[7368, 7375], 3], [[7376, 7378], 2], [7379, 2], [[7380, 7410], 2], [[7411, 7414], 2], [7415, 2], [[7416, 7417], 2], [7418, 2], [[7419, 7423], 3], [[7424, 7467], 2], [7468, 1, "a"], [7469, 1, "\xE6"], [7470, 1, "b"], [7471, 2], [7472, 1, "d"], [7473, 1, "e"], [7474, 1, "\u01DD"], [7475, 1, "g"], [7476, 1, "h"], [7477, 1, "i"], [7478, 1, "j"], [7479, 1, "k"], [7480, 1, "l"], [7481, 1, "m"], [7482, 1, "n"], [7483, 2], [7484, 1, "o"], [7485, 1, "\u0223"], [7486, 1, "p"], [7487, 1, "r"], [7488, 1, "t"], [7489, 1, "u"], [7490, 1, "w"], [7491, 1, "a"], [7492, 1, "\u0250"], [7493, 1, "\u0251"], [7494, 1, "\u1D02"], [7495, 1, "b"], [7496, 1, "d"], [7497, 1, "e"], [7498, 1, "\u0259"], [7499, 1, "\u025B"], [7500, 1, "\u025C"], [7501, 1, "g"], [7502, 2], [7503, 1, "k"], [7504, 1, "m"], [7505, 1, "\u014B"], [7506, 1, "o"], [7507, 1, "\u0254"], [7508, 1, "\u1D16"], [7509, 1, "\u1D17"], [7510, 1, "p"], [7511, 1, "t"], [7512, 1, "u"], [7513, 1, "\u1D1D"], [7514, 1, "\u026F"], [7515, 1, "v"], [7516, 1, "\u1D25"], [7517, 1, "\u03B2"], [7518, 1, "\u03B3"], [7519, 1, "\u03B4"], [7520, 1, "\u03C6"], [7521, 1, "\u03C7"], [7522, 1, "i"], [7523, 1, "r"], [7524, 1, "u"], [7525, 1, "v"], [7526, 1, "\u03B2"], [7527, 1, "\u03B3"], [7528, 1, "\u03C1"], [7529, 1, "\u03C6"], [7530, 1, "\u03C7"], [7531, 2], [[7532, 7543], 2], [7544, 1, "\u043D"], [[7545, 7578], 2], [7579, 1, "\u0252"], [7580, 1, "c"], [7581, 1, "\u0255"], [7582, 1, "\xF0"], [7583, 1, "\u025C"], [7584, 1, "f"], [7585, 1, "\u025F"], [7586, 1, "\u0261"], [7587, 1, "\u0265"], [7588, 1, "\u0268"], [7589, 1, "\u0269"], [7590, 1, "\u026A"], [7591, 1, "\u1D7B"], [7592, 1, "\u029D"], [7593, 1, "\u026D"], [7594, 1, "\u1D85"], [7595, 1, "\u029F"], [7596, 1, "\u0271"], [7597, 1, "\u0270"], [7598, 1, "\u0272"], [7599, 1, "\u0273"], [7600, 1, "\u0274"], [7601, 1, "\u0275"], [7602, 1, "\u0278"], [7603, 1, "\u0282"], [7604, 1, "\u0283"], [7605, 1, "\u01AB"], [7606, 1, "\u0289"], [7607, 1, "\u028A"], [7608, 1, "\u1D1C"], [7609, 1, "\u028B"], [7610, 1, "\u028C"], [7611, 1, "z"], [7612, 1, "\u0290"], [7613, 1, "\u0291"], [7614, 1, "\u0292"], [7615, 1, "\u03B8"], [[7616, 7619], 2], [[7620, 7626], 2], [[7627, 7654], 2], [[7655, 7669], 2], [[7670, 7673], 2], [7674, 2], [7675, 2], [7676, 2], [7677, 2], [[7678, 7679], 2], [7680, 1, "\u1E01"], [7681, 2], [7682, 1, "\u1E03"], [7683, 2], [7684, 1, "\u1E05"], [7685, 2], [7686, 1, "\u1E07"], [7687, 2], [7688, 1, "\u1E09"], [7689, 2], [7690, 1, "\u1E0B"], [7691, 2], [7692, 1, "\u1E0D"], [7693, 2], [7694, 1, "\u1E0F"], [7695, 2], [7696, 1, "\u1E11"], [7697, 2], [7698, 1, "\u1E13"], [7699, 2], [7700, 1, "\u1E15"], [7701, 2], [7702, 1, "\u1E17"], [7703, 2], [7704, 1, "\u1E19"], [7705, 2], [7706, 1, "\u1E1B"], [7707, 2], [7708, 1, "\u1E1D"], [7709, 2], [7710, 1, "\u1E1F"], [7711, 2], [7712, 1, "\u1E21"], [7713, 2], [7714, 1, "\u1E23"], [7715, 2], [7716, 1, "\u1E25"], [7717, 2], [7718, 1, "\u1E27"], [7719, 2], [7720, 1, "\u1E29"], [7721, 2], [7722, 1, "\u1E2B"], [7723, 2], [7724, 1, "\u1E2D"], [7725, 2], [7726, 1, "\u1E2F"], [7727, 2], [7728, 1, "\u1E31"], [7729, 2], [7730, 1, "\u1E33"], [7731, 2], [7732, 1, "\u1E35"], [7733, 2], [7734, 1, "\u1E37"], [7735, 2], [7736, 1, "\u1E39"], [7737, 2], [7738, 1, "\u1E3B"], [7739, 2], [7740, 1, "\u1E3D"], [7741, 2], [7742, 1, "\u1E3F"], [7743, 2], [7744, 1, "\u1E41"], [7745, 2], [7746, 1, "\u1E43"], [7747, 2], [7748, 1, "\u1E45"], [7749, 2], [7750, 1, "\u1E47"], [7751, 2], [7752, 1, "\u1E49"], [7753, 2], [7754, 1, "\u1E4B"], [7755, 2], [7756, 1, "\u1E4D"], [7757, 2], [7758, 1, "\u1E4F"], [7759, 2], [7760, 1, "\u1E51"], [7761, 2], [7762, 1, "\u1E53"], [7763, 2], [7764, 1, "\u1E55"], [7765, 2], [7766, 1, "\u1E57"], [7767, 2], [7768, 1, "\u1E59"], [7769, 2], [7770, 1, "\u1E5B"], [7771, 2], [7772, 1, "\u1E5D"], [7773, 2], [7774, 1, "\u1E5F"], [7775, 2], [7776, 1, "\u1E61"], [7777, 2], [7778, 1, "\u1E63"], [7779, 2], [7780, 1, "\u1E65"], [7781, 2], [7782, 1, "\u1E67"], [7783, 2], [7784, 1, "\u1E69"], [7785, 2], [7786, 1, "\u1E6B"], [7787, 2], [7788, 1, "\u1E6D"], [7789, 2], [7790, 1, "\u1E6F"], [7791, 2], [7792, 1, "\u1E71"], [7793, 2], [7794, 1, "\u1E73"], [7795, 2], [7796, 1, "\u1E75"], [7797, 2], [7798, 1, "\u1E77"], [7799, 2], [7800, 1, "\u1E79"], [7801, 2], [7802, 1, "\u1E7B"], [7803, 2], [7804, 1, "\u1E7D"], [7805, 2], [7806, 1, "\u1E7F"], [7807, 2], [7808, 1, "\u1E81"], [7809, 2], [7810, 1, "\u1E83"], [7811, 2], [7812, 1, "\u1E85"], [7813, 2], [7814, 1, "\u1E87"], [7815, 2], [7816, 1, "\u1E89"], [7817, 2], [7818, 1, "\u1E8B"], [7819, 2], [7820, 1, "\u1E8D"], [7821, 2], [7822, 1, "\u1E8F"], [7823, 2], [7824, 1, "\u1E91"], [7825, 2], [7826, 1, "\u1E93"], [7827, 2], [7828, 1, "\u1E95"], [[7829, 7833], 2], [7834, 1, "a\u02BE"], [7835, 1, "\u1E61"], [[7836, 7837], 2], [7838, 1, "ss"], [7839, 2], [7840, 1, "\u1EA1"], [7841, 2], [7842, 1, "\u1EA3"], [7843, 2], [7844, 1, "\u1EA5"], [7845, 2], [7846, 1, "\u1EA7"], [7847, 2], [7848, 1, "\u1EA9"], [7849, 2], [7850, 1, "\u1EAB"], [7851, 2], [7852, 1, "\u1EAD"], [7853, 2], [7854, 1, "\u1EAF"], [7855, 2], [7856, 1, "\u1EB1"], [7857, 2], [7858, 1, "\u1EB3"], [7859, 2], [7860, 1, "\u1EB5"], [7861, 2], [7862, 1, "\u1EB7"], [7863, 2], [7864, 1, "\u1EB9"], [7865, 2], [7866, 1, "\u1EBB"], [7867, 2], [7868, 1, "\u1EBD"], [7869, 2], [7870, 1, "\u1EBF"], [7871, 2], [7872, 1, "\u1EC1"], [7873, 2], [7874, 1, "\u1EC3"], [7875, 2], [7876, 1, "\u1EC5"], [7877, 2], [7878, 1, "\u1EC7"], [7879, 2], [7880, 1, "\u1EC9"], [7881, 2], [7882, 1, "\u1ECB"], [7883, 2], [7884, 1, "\u1ECD"], [7885, 2], [7886, 1, "\u1ECF"], [7887, 2], [7888, 1, "\u1ED1"], [7889, 2], [7890, 1, "\u1ED3"], [7891, 2], [7892, 1, "\u1ED5"], [7893, 2], [7894, 1, "\u1ED7"], [7895, 2], [7896, 1, "\u1ED9"], [7897, 2], [7898, 1, "\u1EDB"], [7899, 2], [7900, 1, "\u1EDD"], [7901, 2], [7902, 1, "\u1EDF"], [7903, 2], [7904, 1, "\u1EE1"], [7905, 2], [7906, 1, "\u1EE3"], [7907, 2], [7908, 1, "\u1EE5"], [7909, 2], [7910, 1, "\u1EE7"], [7911, 2], [7912, 1, "\u1EE9"], [7913, 2], [7914, 1, "\u1EEB"], [7915, 2], [7916, 1, "\u1EED"], [7917, 2], [7918, 1, "\u1EEF"], [7919, 2], [7920, 1, "\u1EF1"], [7921, 2], [7922, 1, "\u1EF3"], [7923, 2], [7924, 1, "\u1EF5"], [7925, 2], [7926, 1, "\u1EF7"], [7927, 2], [7928, 1, "\u1EF9"], [7929, 2], [7930, 1, "\u1EFB"], [7931, 2], [7932, 1, "\u1EFD"], [7933, 2], [7934, 1, "\u1EFF"], [7935, 2], [[7936, 7943], 2], [7944, 1, "\u1F00"], [7945, 1, "\u1F01"], [7946, 1, "\u1F02"], [7947, 1, "\u1F03"], [7948, 1, "\u1F04"], [7949, 1, "\u1F05"], [7950, 1, "\u1F06"], [7951, 1, "\u1F07"], [[7952, 7957], 2], [[7958, 7959], 3], [7960, 1, "\u1F10"], [7961, 1, "\u1F11"], [7962, 1, "\u1F12"], [7963, 1, "\u1F13"], [7964, 1, "\u1F14"], [7965, 1, "\u1F15"], [[7966, 7967], 3], [[7968, 7975], 2], [7976, 1, "\u1F20"], [7977, 1, "\u1F21"], [7978, 1, "\u1F22"], [7979, 1, "\u1F23"], [7980, 1, "\u1F24"], [7981, 1, "\u1F25"], [7982, 1, "\u1F26"], [7983, 1, "\u1F27"], [[7984, 7991], 2], [7992, 1, "\u1F30"], [7993, 1, "\u1F31"], [7994, 1, "\u1F32"], [7995, 1, "\u1F33"], [7996, 1, "\u1F34"], [7997, 1, "\u1F35"], [7998, 1, "\u1F36"], [7999, 1, "\u1F37"], [[8e3, 8005], 2], [[8006, 8007], 3], [8008, 1, "\u1F40"], [8009, 1, "\u1F41"], [8010, 1, "\u1F42"], [8011, 1, "\u1F43"], [8012, 1, "\u1F44"], [8013, 1, "\u1F45"], [[8014, 8015], 3], [[8016, 8023], 2], [8024, 3], [8025, 1, "\u1F51"], [8026, 3], [8027, 1, "\u1F53"], [8028, 3], [8029, 1, "\u1F55"], [8030, 3], [8031, 1, "\u1F57"], [[8032, 8039], 2], [8040, 1, "\u1F60"], [8041, 1, "\u1F61"], [8042, 1, "\u1F62"], [8043, 1, "\u1F63"], [8044, 1, "\u1F64"], [8045, 1, "\u1F65"], [8046, 1, "\u1F66"], [8047, 1, "\u1F67"], [8048, 2], [8049, 1, "\u03AC"], [8050, 2], [8051, 1, "\u03AD"], [8052, 2], [8053, 1, "\u03AE"], [8054, 2], [8055, 1, "\u03AF"], [8056, 2], [8057, 1, "\u03CC"], [8058, 2], [8059, 1, "\u03CD"], [8060, 2], [8061, 1, "\u03CE"], [[8062, 8063], 3], [8064, 1, "\u1F00\u03B9"], [8065, 1, "\u1F01\u03B9"], [8066, 1, "\u1F02\u03B9"], [8067, 1, "\u1F03\u03B9"], [8068, 1, "\u1F04\u03B9"], [8069, 1, "\u1F05\u03B9"], [8070, 1, "\u1F06\u03B9"], [8071, 1, "\u1F07\u03B9"], [8072, 1, "\u1F00\u03B9"], [8073, 1, "\u1F01\u03B9"], [8074, 1, "\u1F02\u03B9"], [8075, 1, "\u1F03\u03B9"], [8076, 1, "\u1F04\u03B9"], [8077, 1, "\u1F05\u03B9"], [8078, 1, "\u1F06\u03B9"], [8079, 1, "\u1F07\u03B9"], [8080, 1, "\u1F20\u03B9"], [8081, 1, "\u1F21\u03B9"], [8082, 1, "\u1F22\u03B9"], [8083, 1, "\u1F23\u03B9"], [8084, 1, "\u1F24\u03B9"], [8085, 1, "\u1F25\u03B9"], [8086, 1, "\u1F26\u03B9"], [8087, 1, "\u1F27\u03B9"], [8088, 1, "\u1F20\u03B9"], [8089, 1, "\u1F21\u03B9"], [8090, 1, "\u1F22\u03B9"], [8091, 1, "\u1F23\u03B9"], [8092, 1, "\u1F24\u03B9"], [8093, 1, "\u1F25\u03B9"], [8094, 1, "\u1F26\u03B9"], [8095, 1, "\u1F27\u03B9"], [8096, 1, "\u1F60\u03B9"], [8097, 1, "\u1F61\u03B9"], [8098, 1, "\u1F62\u03B9"], [8099, 1, "\u1F63\u03B9"], [8100, 1, "\u1F64\u03B9"], [8101, 1, "\u1F65\u03B9"], [8102, 1, "\u1F66\u03B9"], [8103, 1, "\u1F67\u03B9"], [8104, 1, "\u1F60\u03B9"], [8105, 1, "\u1F61\u03B9"], [8106, 1, "\u1F62\u03B9"], [8107, 1, "\u1F63\u03B9"], [8108, 1, "\u1F64\u03B9"], [8109, 1, "\u1F65\u03B9"], [8110, 1, "\u1F66\u03B9"], [8111, 1, "\u1F67\u03B9"], [[8112, 8113], 2], [8114, 1, "\u1F70\u03B9"], [8115, 1, "\u03B1\u03B9"], [8116, 1, "\u03AC\u03B9"], [8117, 3], [8118, 2], [8119, 1, "\u1FB6\u03B9"], [8120, 1, "\u1FB0"], [8121, 1, "\u1FB1"], [8122, 1, "\u1F70"], [8123, 1, "\u03AC"], [8124, 1, "\u03B1\u03B9"], [8125, 5, " \u0313"], [8126, 1, "\u03B9"], [8127, 5, " \u0313"], [8128, 5, " \u0342"], [8129, 5, " \u0308\u0342"], [8130, 1, "\u1F74\u03B9"], [8131, 1, "\u03B7\u03B9"], [8132, 1, "\u03AE\u03B9"], [8133, 3], [8134, 2], [8135, 1, "\u1FC6\u03B9"], [8136, 1, "\u1F72"], [8137, 1, "\u03AD"], [8138, 1, "\u1F74"], [8139, 1, "\u03AE"], [8140, 1, "\u03B7\u03B9"], [8141, 5, " \u0313\u0300"], [8142, 5, " \u0313\u0301"], [8143, 5, " \u0313\u0342"], [[8144, 8146], 2], [8147, 1, "\u0390"], [[8148, 8149], 3], [[8150, 8151], 2], [8152, 1, "\u1FD0"], [8153, 1, "\u1FD1"], [8154, 1, "\u1F76"], [8155, 1, "\u03AF"], [8156, 3], [8157, 5, " \u0314\u0300"], [8158, 5, " \u0314\u0301"], [8159, 5, " \u0314\u0342"], [[8160, 8162], 2], [8163, 1, "\u03B0"], [[8164, 8167], 2], [8168, 1, "\u1FE0"], [8169, 1, "\u1FE1"], [8170, 1, "\u1F7A"], [8171, 1, "\u03CD"], [8172, 1, "\u1FE5"], [8173, 5, " \u0308\u0300"], [8174, 5, " \u0308\u0301"], [8175, 5, "`"], [[8176, 8177], 3], [8178, 1, "\u1F7C\u03B9"], [8179, 1, "\u03C9\u03B9"], [8180, 1, "\u03CE\u03B9"], [8181, 3], [8182, 2], [8183, 1, "\u1FF6\u03B9"], [8184, 1, "\u1F78"], [8185, 1, "\u03CC"], [8186, 1, "\u1F7C"], [8187, 1, "\u03CE"], [8188, 1, "\u03C9\u03B9"], [8189, 5, " \u0301"], [8190, 5, " \u0314"], [8191, 3], [[8192, 8202], 5, " "], [8203, 7], [[8204, 8205], 6, ""], [[8206, 8207], 3], [8208, 2], [8209, 1, "\u2010"], [[8210, 8214], 2], [8215, 5, " \u0333"], [[8216, 8227], 2], [[8228, 8230], 3], [8231, 2], [[8232, 8238], 3], [8239, 5, " "], [[8240, 8242], 2], [8243, 1, "\u2032\u2032"], [8244, 1, "\u2032\u2032\u2032"], [8245, 2], [8246, 1, "\u2035\u2035"], [8247, 1, "\u2035\u2035\u2035"], [[8248, 8251], 2], [8252, 5, "!!"], [8253, 2], [8254, 5, " \u0305"], [[8255, 8262], 2], [8263, 5, "??"], [8264, 5, "?!"], [8265, 5, "!?"], [[8266, 8269], 2], [[8270, 8274], 2], [[8275, 8276], 2], [[8277, 8278], 2], [8279, 1, "\u2032\u2032\u2032\u2032"], [[8280, 8286], 2], [8287, 5, " "], [8288, 7], [[8289, 8291], 3], [8292, 7], [8293, 3], [[8294, 8297], 3], [[8298, 8303], 3], [8304, 1, "0"], [8305, 1, "i"], [[8306, 8307], 3], [8308, 1, "4"], [8309, 1, "5"], [8310, 1, "6"], [8311, 1, "7"], [8312, 1, "8"], [8313, 1, "9"], [8314, 5, "+"], [8315, 1, "\u2212"], [8316, 5, "="], [8317, 5, "("], [8318, 5, ")"], [8319, 1, "n"], [8320, 1, "0"], [8321, 1, "1"], [8322, 1, "2"], [8323, 1, "3"], [8324, 1, "4"], [8325, 1, "5"], [8326, 1, "6"], [8327, 1, "7"], [8328, 1, "8"], [8329, 1, "9"], [8330, 5, "+"], [8331, 1, "\u2212"], [8332, 5, "="], [8333, 5, "("], [8334, 5, ")"], [8335, 3], [8336, 1, "a"], [8337, 1, "e"], [8338, 1, "o"], [8339, 1, "x"], [8340, 1, "\u0259"], [8341, 1, "h"], [8342, 1, "k"], [8343, 1, "l"], [8344, 1, "m"], [8345, 1, "n"], [8346, 1, "p"], [8347, 1, "s"], [8348, 1, "t"], [[8349, 8351], 3], [[8352, 8359], 2], [8360, 1, "rs"], [[8361, 8362], 2], [8363, 2], [8364, 2], [[8365, 8367], 2], [[8368, 8369], 2], [[8370, 8373], 2], [[8374, 8376], 2], [8377, 2], [8378, 2], [[8379, 8381], 2], [8382, 2], [8383, 2], [8384, 2], [[8385, 8399], 3], [[8400, 8417], 2], [[8418, 8419], 2], [[8420, 8426], 2], [8427, 2], [[8428, 8431], 2], [8432, 2], [[8433, 8447], 3], [8448, 5, "a/c"], [8449, 5, "a/s"], [8450, 1, "c"], [8451, 1, "\xB0c"], [8452, 2], [8453, 5, "c/o"], [8454, 5, "c/u"], [8455, 1, "\u025B"], [8456, 2], [8457, 1, "\xB0f"], [8458, 1, "g"], [[8459, 8462], 1, "h"], [8463, 1, "\u0127"], [[8464, 8465], 1, "i"], [[8466, 8467], 1, "l"], [8468, 2], [8469, 1, "n"], [8470, 1, "no"], [[8471, 8472], 2], [8473, 1, "p"], [8474, 1, "q"], [[8475, 8477], 1, "r"], [[8478, 8479], 2], [8480, 1, "sm"], [8481, 1, "tel"], [8482, 1, "tm"], [8483, 2], [8484, 1, "z"], [8485, 2], [8486, 1, "\u03C9"], [8487, 2], [8488, 1, "z"], [8489, 2], [8490, 1, "k"], [8491, 1, "\xE5"], [8492, 1, "b"], [8493, 1, "c"], [8494, 2], [[8495, 8496], 1, "e"], [8497, 1, "f"], [8498, 3], [8499, 1, "m"], [8500, 1, "o"], [8501, 1, "\u05D0"], [8502, 1, "\u05D1"], [8503, 1, "\u05D2"], [8504, 1, "\u05D3"], [8505, 1, "i"], [8506, 2], [8507, 1, "fax"], [8508, 1, "\u03C0"], [[8509, 8510], 1, "\u03B3"], [8511, 1, "\u03C0"], [8512, 1, "\u2211"], [[8513, 8516], 2], [[8517, 8518], 1, "d"], [8519, 1, "e"], [8520, 1, "i"], [8521, 1, "j"], [[8522, 8523], 2], [8524, 2], [8525, 2], [8526, 2], [8527, 2], [8528, 1, "1\u20447"], [8529, 1, "1\u20449"], [8530, 1, "1\u204410"], [8531, 1, "1\u20443"], [8532, 1, "2\u20443"], [8533, 1, "1\u20445"], [8534, 1, "2\u20445"], [8535, 1, "3\u20445"], [8536, 1, "4\u20445"], [8537, 1, "1\u20446"], [8538, 1, "5\u20446"], [8539, 1, "1\u20448"], [8540, 1, "3\u20448"], [8541, 1, "5\u20448"], [8542, 1, "7\u20448"], [8543, 1, "1\u2044"], [8544, 1, "i"], [8545, 1, "ii"], [8546, 1, "iii"], [8547, 1, "iv"], [8548, 1, "v"], [8549, 1, "vi"], [8550, 1, "vii"], [8551, 1, "viii"], [8552, 1, "ix"], [8553, 1, "x"], [8554, 1, "xi"], [8555, 1, "xii"], [8556, 1, "l"], [8557, 1, "c"], [8558, 1, "d"], [8559, 1, "m"], [8560, 1, "i"], [8561, 1, "ii"], [8562, 1, "iii"], [8563, 1, "iv"], [8564, 1, "v"], [8565, 1, "vi"], [8566, 1, "vii"], [8567, 1, "viii"], [8568, 1, "ix"], [8569, 1, "x"], [8570, 1, "xi"], [8571, 1, "xii"], [8572, 1, "l"], [8573, 1, "c"], [8574, 1, "d"], [8575, 1, "m"], [[8576, 8578], 2], [8579, 3], [8580, 2], [[8581, 8584], 2], [8585, 1, "0\u20443"], [[8586, 8587], 2], [[8588, 8591], 3], [[8592, 8682], 2], [[8683, 8691], 2], [[8692, 8703], 2], [[8704, 8747], 2], [8748, 1, "\u222B\u222B"], [8749, 1, "\u222B\u222B\u222B"], [8750, 2], [8751, 1, "\u222E\u222E"], [8752, 1, "\u222E\u222E\u222E"], [[8753, 8799], 2], [8800, 4], [[8801, 8813], 2], [[8814, 8815], 4], [[8816, 8945], 2], [[8946, 8959], 2], [8960, 2], [8961, 2], [[8962, 9e3], 2], [9001, 1, "\u3008"], [9002, 1, "\u3009"], [[9003, 9082], 2], [9083, 2], [9084, 2], [[9085, 9114], 2], [[9115, 9166], 2], [[9167, 9168], 2], [[9169, 9179], 2], [[9180, 9191], 2], [9192, 2], [[9193, 9203], 2], [[9204, 9210], 2], [[9211, 9214], 2], [9215, 2], [[9216, 9252], 2], [[9253, 9254], 2], [[9255, 9279], 3], [[9280, 9290], 2], [[9291, 9311], 3], [9312, 1, "1"], [9313, 1, "2"], [9314, 1, "3"], [9315, 1, "4"], [9316, 1, "5"], [9317, 1, "6"], [9318, 1, "7"], [9319, 1, "8"], [9320, 1, "9"], [9321, 1, "10"], [9322, 1, "11"], [9323, 1, "12"], [9324, 1, "13"], [9325, 1, "14"], [9326, 1, "15"], [9327, 1, "16"], [9328, 1, "17"], [9329, 1, "18"], [9330, 1, "19"], [9331, 1, "20"], [9332, 5, "(1)"], [9333, 5, "(2)"], [9334, 5, "(3)"], [9335, 5, "(4)"], [9336, 5, "(5)"], [9337, 5, "(6)"], [9338, 5, "(7)"], [9339, 5, "(8)"], [9340, 5, "(9)"], [9341, 5, "(10)"], [9342, 5, "(11)"], [9343, 5, "(12)"], [9344, 5, "(13)"], [9345, 5, "(14)"], [9346, 5, "(15)"], [9347, 5, "(16)"], [9348, 5, "(17)"], [9349, 5, "(18)"], [9350, 5, "(19)"], [9351, 5, "(20)"], [[9352, 9371], 3], [9372, 5, "(a)"], [9373, 5, "(b)"], [9374, 5, "(c)"], [9375, 5, "(d)"], [9376, 5, "(e)"], [9377, 5, "(f)"], [9378, 5, "(g)"], [9379, 5, "(h)"], [9380, 5, "(i)"], [9381, 5, "(j)"], [9382, 5, "(k)"], [9383, 5, "(l)"], [9384, 5, "(m)"], [9385, 5, "(n)"], [9386, 5, "(o)"], [9387, 5, "(p)"], [9388, 5, "(q)"], [9389, 5, "(r)"], [9390, 5, "(s)"], [9391, 5, "(t)"], [9392, 5, "(u)"], [9393, 5, "(v)"], [9394, 5, "(w)"], [9395, 5, "(x)"], [9396, 5, "(y)"], [9397, 5, "(z)"], [9398, 1, "a"], [9399, 1, "b"], [9400, 1, "c"], [9401, 1, "d"], [9402, 1, "e"], [9403, 1, "f"], [9404, 1, "g"], [9405, 1, "h"], [9406, 1, "i"], [9407, 1, "j"], [9408, 1, "k"], [9409, 1, "l"], [9410, 1, "m"], [9411, 1, "n"], [9412, 1, "o"], [9413, 1, "p"], [9414, 1, "q"], [9415, 1, "r"], [9416, 1, "s"], [9417, 1, "t"], [9418, 1, "u"], [9419, 1, "v"], [9420, 1, "w"], [9421, 1, "x"], [9422, 1, "y"], [9423, 1, "z"], [9424, 1, "a"], [9425, 1, "b"], [9426, 1, "c"], [9427, 1, "d"], [9428, 1, "e"], [9429, 1, "f"], [9430, 1, "g"], [9431, 1, "h"], [9432, 1, "i"], [9433, 1, "j"], [9434, 1, "k"], [9435, 1, "l"], [9436, 1, "m"], [9437, 1, "n"], [9438, 1, "o"], [9439, 1, "p"], [9440, 1, "q"], [9441, 1, "r"], [9442, 1, "s"], [9443, 1, "t"], [9444, 1, "u"], [9445, 1, "v"], [9446, 1, "w"], [9447, 1, "x"], [9448, 1, "y"], [9449, 1, "z"], [9450, 1, "0"], [[9451, 9470], 2], [9471, 2], [[9472, 9621], 2], [[9622, 9631], 2], [[9632, 9711], 2], [[9712, 9719], 2], [[9720, 9727], 2], [[9728, 9747], 2], [[9748, 9749], 2], [[9750, 9751], 2], [9752, 2], [9753, 2], [[9754, 9839], 2], [[9840, 9841], 2], [[9842, 9853], 2], [[9854, 9855], 2], [[9856, 9865], 2], [[9866, 9873], 2], [[9874, 9884], 2], [9885, 2], [[9886, 9887], 2], [[9888, 9889], 2], [[9890, 9905], 2], [9906, 2], [[9907, 9916], 2], [[9917, 9919], 2], [[9920, 9923], 2], [[9924, 9933], 2], [9934, 2], [[9935, 9953], 2], [9954, 2], [9955, 2], [[9956, 9959], 2], [[9960, 9983], 2], [9984, 2], [[9985, 9988], 2], [9989, 2], [[9990, 9993], 2], [[9994, 9995], 2], [[9996, 10023], 2], [10024, 2], [[10025, 10059], 2], [10060, 2], [10061, 2], [10062, 2], [[10063, 10066], 2], [[10067, 10069], 2], [10070, 2], [10071, 2], [[10072, 10078], 2], [[10079, 10080], 2], [[10081, 10087], 2], [[10088, 10101], 2], [[10102, 10132], 2], [[10133, 10135], 2], [[10136, 10159], 2], [10160, 2], [[10161, 10174], 2], [10175, 2], [[10176, 10182], 2], [[10183, 10186], 2], [10187, 2], [10188, 2], [10189, 2], [[10190, 10191], 2], [[10192, 10219], 2], [[10220, 10223], 2], [[10224, 10239], 2], [[10240, 10495], 2], [[10496, 10763], 2], [10764, 1, "\u222B\u222B\u222B\u222B"], [[10765, 10867], 2], [10868, 5, "::="], [10869, 5, "=="], [10870, 5, "==="], [[10871, 10971], 2], [10972, 1, "\u2ADD\u0338"], [[10973, 11007], 2], [[11008, 11021], 2], [[11022, 11027], 2], [[11028, 11034], 2], [[11035, 11039], 2], [[11040, 11043], 2], [[11044, 11084], 2], [[11085, 11087], 2], [[11088, 11092], 2], [[11093, 11097], 2], [[11098, 11123], 2], [[11124, 11125], 3], [[11126, 11157], 2], [11158, 3], [11159, 2], [[11160, 11193], 2], [[11194, 11196], 2], [[11197, 11208], 2], [11209, 2], [[11210, 11217], 2], [11218, 2], [[11219, 11243], 2], [[11244, 11247], 2], [[11248, 11262], 2], [11263, 2], [11264, 1, "\u2C30"], [11265, 1, "\u2C31"], [11266, 1, "\u2C32"], [11267, 1, "\u2C33"], [11268, 1, "\u2C34"], [11269, 1, "\u2C35"], [11270, 1, "\u2C36"], [11271, 1, "\u2C37"], [11272, 1, "\u2C38"], [11273, 1, "\u2C39"], [11274, 1, "\u2C3A"], [11275, 1, "\u2C3B"], [11276, 1, "\u2C3C"], [11277, 1, "\u2C3D"], [11278, 1, "\u2C3E"], [11279, 1, "\u2C3F"], [11280, 1, "\u2C40"], [11281, 1, "\u2C41"], [11282, 1, "\u2C42"], [11283, 1, "\u2C43"], [11284, 1, "\u2C44"], [11285, 1, "\u2C45"], [11286, 1, "\u2C46"], [11287, 1, "\u2C47"], [11288, 1, "\u2C48"], [11289, 1, "\u2C49"], [11290, 1, "\u2C4A"], [11291, 1, "\u2C4B"], [11292, 1, "\u2C4C"], [11293, 1, "\u2C4D"], [11294, 1, "\u2C4E"], [11295, 1, "\u2C4F"], [11296, 1, "\u2C50"], [11297, 1, "\u2C51"], [11298, 1, "\u2C52"], [11299, 1, "\u2C53"], [11300, 1, "\u2C54"], [11301, 1, "\u2C55"], [11302, 1, "\u2C56"], [11303, 1, "\u2C57"], [11304, 1, "\u2C58"], [11305, 1, "\u2C59"], [11306, 1, "\u2C5A"], [11307, 1, "\u2C5B"], [11308, 1, "\u2C5C"], [11309, 1, "\u2C5D"], [11310, 1, "\u2C5E"], [11311, 1, "\u2C5F"], [[11312, 11358], 2], [11359, 2], [11360, 1, "\u2C61"], [11361, 2], [11362, 1, "\u026B"], [11363, 1, "\u1D7D"], [11364, 1, "\u027D"], [[11365, 11366], 2], [11367, 1, "\u2C68"], [11368, 2], [11369, 1, "\u2C6A"], [11370, 2], [11371, 1, "\u2C6C"], [11372, 2], [11373, 1, "\u0251"], [11374, 1, "\u0271"], [11375, 1, "\u0250"], [11376, 1, "\u0252"], [11377, 2], [11378, 1, "\u2C73"], [11379, 2], [11380, 2], [11381, 1, "\u2C76"], [[11382, 11383], 2], [[11384, 11387], 2], [11388, 1, "j"], [11389, 1, "v"], [11390, 1, "\u023F"], [11391, 1, "\u0240"], [11392, 1, "\u2C81"], [11393, 2], [11394, 1, "\u2C83"], [11395, 2], [11396, 1, "\u2C85"], [11397, 2], [11398, 1, "\u2C87"], [11399, 2], [11400, 1, "\u2C89"], [11401, 2], [11402, 1, "\u2C8B"], [11403, 2], [11404, 1, "\u2C8D"], [11405, 2], [11406, 1, "\u2C8F"], [11407, 2], [11408, 1, "\u2C91"], [11409, 2], [11410, 1, "\u2C93"], [11411, 2], [11412, 1, "\u2C95"], [11413, 2], [11414, 1, "\u2C97"], [11415, 2], [11416, 1, "\u2C99"], [11417, 2], [11418, 1, "\u2C9B"], [11419, 2], [11420, 1, "\u2C9D"], [11421, 2], [11422, 1, "\u2C9F"], [11423, 2], [11424, 1, "\u2CA1"], [11425, 2], [11426, 1, "\u2CA3"], [11427, 2], [11428, 1, "\u2CA5"], [11429, 2], [11430, 1, "\u2CA7"], [11431, 2], [11432, 1, "\u2CA9"], [11433, 2], [11434, 1, "\u2CAB"], [11435, 2], [11436, 1, "\u2CAD"], [11437, 2], [11438, 1, "\u2CAF"], [11439, 2], [11440, 1, "\u2CB1"], [11441, 2], [11442, 1, "\u2CB3"], [11443, 2], [11444, 1, "\u2CB5"], [11445, 2], [11446, 1, "\u2CB7"], [11447, 2], [11448, 1, "\u2CB9"], [11449, 2], [11450, 1, "\u2CBB"], [11451, 2], [11452, 1, "\u2CBD"], [11453, 2], [11454, 1, "\u2CBF"], [11455, 2], [11456, 1, "\u2CC1"], [11457, 2], [11458, 1, "\u2CC3"], [11459, 2], [11460, 1, "\u2CC5"], [11461, 2], [11462, 1, "\u2CC7"], [11463, 2], [11464, 1, "\u2CC9"], [11465, 2], [11466, 1, "\u2CCB"], [11467, 2], [11468, 1, "\u2CCD"], [11469, 2], [11470, 1, "\u2CCF"], [11471, 2], [11472, 1, "\u2CD1"], [11473, 2], [11474, 1, "\u2CD3"], [11475, 2], [11476, 1, "\u2CD5"], [11477, 2], [11478, 1, "\u2CD7"], [11479, 2], [11480, 1, "\u2CD9"], [11481, 2], [11482, 1, "\u2CDB"], [11483, 2], [11484, 1, "\u2CDD"], [11485, 2], [11486, 1, "\u2CDF"], [11487, 2], [11488, 1, "\u2CE1"], [11489, 2], [11490, 1, "\u2CE3"], [[11491, 11492], 2], [[11493, 11498], 2], [11499, 1, "\u2CEC"], [11500, 2], [11501, 1, "\u2CEE"], [[11502, 11505], 2], [11506, 1, "\u2CF3"], [11507, 2], [[11508, 11512], 3], [[11513, 11519], 2], [[11520, 11557], 2], [11558, 3], [11559, 2], [[11560, 11564], 3], [11565, 2], [[11566, 11567], 3], [[11568, 11621], 2], [[11622, 11623], 2], [[11624, 11630], 3], [11631, 1, "\u2D61"], [11632, 2], [[11633, 11646], 3], [11647, 2], [[11648, 11670], 2], [[11671, 11679], 3], [[11680, 11686], 2], [11687, 3], [[11688, 11694], 2], [11695, 3], [[11696, 11702], 2], [11703, 3], [[11704, 11710], 2], [11711, 3], [[11712, 11718], 2], [11719, 3], [[11720, 11726], 2], [11727, 3], [[11728, 11734], 2], [11735, 3], [[11736, 11742], 2], [11743, 3], [[11744, 11775], 2], [[11776, 11799], 2], [[11800, 11803], 2], [[11804, 11805], 2], [[11806, 11822], 2], [11823, 2], [11824, 2], [11825, 2], [[11826, 11835], 2], [[11836, 11842], 2], [[11843, 11844], 2], [[11845, 11849], 2], [[11850, 11854], 2], [11855, 2], [[11856, 11858], 2], [[11859, 11869], 2], [[11870, 11903], 3], [[11904, 11929], 2], [11930, 3], [[11931, 11934], 2], [11935, 1, "\u6BCD"], [[11936, 12018], 2], [12019, 1, "\u9F9F"], [[12020, 12031], 3], [12032, 1, "\u4E00"], [12033, 1, "\u4E28"], [12034, 1, "\u4E36"], [12035, 1, "\u4E3F"], [12036, 1, "\u4E59"], [12037, 1, "\u4E85"], [12038, 1, "\u4E8C"], [12039, 1, "\u4EA0"], [12040, 1, "\u4EBA"], [12041, 1, "\u513F"], [12042, 1, "\u5165"], [12043, 1, "\u516B"], [12044, 1, "\u5182"], [12045, 1, "\u5196"], [12046, 1, "\u51AB"], [12047, 1, "\u51E0"], [12048, 1, "\u51F5"], [12049, 1, "\u5200"], [12050, 1, "\u529B"], [12051, 1, "\u52F9"], [12052, 1, "\u5315"], [12053, 1, "\u531A"], [12054, 1, "\u5338"], [12055, 1, "\u5341"], [12056, 1, "\u535C"], [12057, 1, "\u5369"], [12058, 1, "\u5382"], [12059, 1, "\u53B6"], [12060, 1, "\u53C8"], [12061, 1, "\u53E3"], [12062, 1, "\u56D7"], [12063, 1, "\u571F"], [12064, 1, "\u58EB"], [12065, 1, "\u5902"], [12066, 1, "\u590A"], [12067, 1, "\u5915"], [12068, 1, "\u5927"], [12069, 1, "\u5973"], [12070, 1, "\u5B50"], [12071, 1, "\u5B80"], [12072, 1, "\u5BF8"], [12073, 1, "\u5C0F"], [12074, 1, "\u5C22"], [12075, 1, "\u5C38"], [12076, 1, "\u5C6E"], [12077, 1, "\u5C71"], [12078, 1, "\u5DDB"], [12079, 1, "\u5DE5"], [12080, 1, "\u5DF1"], [12081, 1, "\u5DFE"], [12082, 1, "\u5E72"], [12083, 1, "\u5E7A"], [12084, 1, "\u5E7F"], [12085, 1, "\u5EF4"], [12086, 1, "\u5EFE"], [12087, 1, "\u5F0B"], [12088, 1, "\u5F13"], [12089, 1, "\u5F50"], [12090, 1, "\u5F61"], [12091, 1, "\u5F73"], [12092, 1, "\u5FC3"], [12093, 1, "\u6208"], [12094, 1, "\u6236"], [12095, 1, "\u624B"], [12096, 1, "\u652F"], [12097, 1, "\u6534"], [12098, 1, "\u6587"], [12099, 1, "\u6597"], [12100, 1, "\u65A4"], [12101, 1, "\u65B9"], [12102, 1, "\u65E0"], [12103, 1, "\u65E5"], [12104, 1, "\u66F0"], [12105, 1, "\u6708"], [12106, 1, "\u6728"], [12107, 1, "\u6B20"], [12108, 1, "\u6B62"], [12109, 1, "\u6B79"], [12110, 1, "\u6BB3"], [12111, 1, "\u6BCB"], [12112, 1, "\u6BD4"], [12113, 1, "\u6BDB"], [12114, 1, "\u6C0F"], [12115, 1, "\u6C14"], [12116, 1, "\u6C34"], [12117, 1, "\u706B"], [12118, 1, "\u722A"], [12119, 1, "\u7236"], [12120, 1, "\u723B"], [12121, 1, "\u723F"], [12122, 1, "\u7247"], [12123, 1, "\u7259"], [12124, 1, "\u725B"], [12125, 1, "\u72AC"], [12126, 1, "\u7384"], [12127, 1, "\u7389"], [12128, 1, "\u74DC"], [12129, 1, "\u74E6"], [12130, 1, "\u7518"], [12131, 1, "\u751F"], [12132, 1, "\u7528"], [12133, 1, "\u7530"], [12134, 1, "\u758B"], [12135, 1, "\u7592"], [12136, 1, "\u7676"], [12137, 1, "\u767D"], [12138, 1, "\u76AE"], [12139, 1, "\u76BF"], [12140, 1, "\u76EE"], [12141, 1, "\u77DB"], [12142, 1, "\u77E2"], [12143, 1, "\u77F3"], [12144, 1, "\u793A"], [12145, 1, "\u79B8"], [12146, 1, "\u79BE"], [12147, 1, "\u7A74"], [12148, 1, "\u7ACB"], [12149, 1, "\u7AF9"], [12150, 1, "\u7C73"], [12151, 1, "\u7CF8"], [12152, 1, "\u7F36"], [12153, 1, "\u7F51"], [12154, 1, "\u7F8A"], [12155, 1, "\u7FBD"], [12156, 1, "\u8001"], [12157, 1, "\u800C"], [12158, 1, "\u8012"], [12159, 1, "\u8033"], [12160, 1, "\u807F"], [12161, 1, "\u8089"], [12162, 1, "\u81E3"], [12163, 1, "\u81EA"], [12164, 1, "\u81F3"], [12165, 1, "\u81FC"], [12166, 1, "\u820C"], [12167, 1, "\u821B"], [12168, 1, "\u821F"], [12169, 1, "\u826E"], [12170, 1, "\u8272"], [12171, 1, "\u8278"], [12172, 1, "\u864D"], [12173, 1, "\u866B"], [12174, 1, "\u8840"], [12175, 1, "\u884C"], [12176, 1, "\u8863"], [12177, 1, "\u897E"], [12178, 1, "\u898B"], [12179, 1, "\u89D2"], [12180, 1, "\u8A00"], [12181, 1, "\u8C37"], [12182, 1, "\u8C46"], [12183, 1, "\u8C55"], [12184, 1, "\u8C78"], [12185, 1, "\u8C9D"], [12186, 1, "\u8D64"], [12187, 1, "\u8D70"], [12188, 1, "\u8DB3"], [12189, 1, "\u8EAB"], [12190, 1, "\u8ECA"], [12191, 1, "\u8F9B"], [12192, 1, "\u8FB0"], [12193, 1, "\u8FB5"], [12194, 1, "\u9091"], [12195, 1, "\u9149"], [12196, 1, "\u91C6"], [12197, 1, "\u91CC"], [12198, 1, "\u91D1"], [12199, 1, "\u9577"], [12200, 1, "\u9580"], [12201, 1, "\u961C"], [12202, 1, "\u96B6"], [12203, 1, "\u96B9"], [12204, 1, "\u96E8"], [12205, 1, "\u9751"], [12206, 1, "\u975E"], [12207, 1, "\u9762"], [12208, 1, "\u9769"], [12209, 1, "\u97CB"], [12210, 1, "\u97ED"], [12211, 1, "\u97F3"], [12212, 1, "\u9801"], [12213, 1, "\u98A8"], [12214, 1, "\u98DB"], [12215, 1, "\u98DF"], [12216, 1, "\u9996"], [12217, 1, "\u9999"], [12218, 1, "\u99AC"], [12219, 1, "\u9AA8"], [12220, 1, "\u9AD8"], [12221, 1, "\u9ADF"], [12222, 1, "\u9B25"], [12223, 1, "\u9B2F"], [12224, 1, "\u9B32"], [12225, 1, "\u9B3C"], [12226, 1, "\u9B5A"], [12227, 1, "\u9CE5"], [12228, 1, "\u9E75"], [12229, 1, "\u9E7F"], [12230, 1, "\u9EA5"], [12231, 1, "\u9EBB"], [12232, 1, "\u9EC3"], [12233, 1, "\u9ECD"], [12234, 1, "\u9ED1"], [12235, 1, "\u9EF9"], [12236, 1, "\u9EFD"], [12237, 1, "\u9F0E"], [12238, 1, "\u9F13"], [12239, 1, "\u9F20"], [12240, 1, "\u9F3B"], [12241, 1, "\u9F4A"], [12242, 1, "\u9F52"], [12243, 1, "\u9F8D"], [12244, 1, "\u9F9C"], [12245, 1, "\u9FA0"], [[12246, 12271], 3], [[12272, 12283], 3], [[12284, 12287], 3], [12288, 5, " "], [12289, 2], [12290, 1, "."], [[12291, 12292], 2], [[12293, 12295], 2], [[12296, 12329], 2], [[12330, 12333], 2], [[12334, 12341], 2], [12342, 1, "\u3012"], [12343, 2], [12344, 1, "\u5341"], [12345, 1, "\u5344"], [12346, 1, "\u5345"], [12347, 2], [12348, 2], [12349, 2], [12350, 2], [12351, 2], [12352, 3], [[12353, 12436], 2], [[12437, 12438], 2], [[12439, 12440], 3], [[12441, 12442], 2], [12443, 5, " \u3099"], [12444, 5, " \u309A"], [[12445, 12446], 2], [12447, 1, "\u3088\u308A"], [12448, 2], [[12449, 12542], 2], [12543, 1, "\u30B3\u30C8"], [[12544, 12548], 3], [[12549, 12588], 2], [12589, 2], [12590, 2], [12591, 2], [12592, 3], [12593, 1, "\u1100"], [12594, 1, "\u1101"], [12595, 1, "\u11AA"], [12596, 1, "\u1102"], [12597, 1, "\u11AC"], [12598, 1, "\u11AD"], [12599, 1, "\u1103"], [12600, 1, "\u1104"], [12601, 1, "\u1105"], [12602, 1, "\u11B0"], [12603, 1, "\u11B1"], [12604, 1, "\u11B2"], [12605, 1, "\u11B3"], [12606, 1, "\u11B4"], [12607, 1, "\u11B5"], [12608, 1, "\u111A"], [12609, 1, "\u1106"], [12610, 1, "\u1107"], [12611, 1, "\u1108"], [12612, 1, "\u1121"], [12613, 1, "\u1109"], [12614, 1, "\u110A"], [12615, 1, "\u110B"], [12616, 1, "\u110C"], [12617, 1, "\u110D"], [12618, 1, "\u110E"], [12619, 1, "\u110F"], [12620, 1, "\u1110"], [12621, 1, "\u1111"], [12622, 1, "\u1112"], [12623, 1, "\u1161"], [12624, 1, "\u1162"], [12625, 1, "\u1163"], [12626, 1, "\u1164"], [12627, 1, "\u1165"], [12628, 1, "\u1166"], [12629, 1, "\u1167"], [12630, 1, "\u1168"], [12631, 1, "\u1169"], [12632, 1, "\u116A"], [12633, 1, "\u116B"], [12634, 1, "\u116C"], [12635, 1, "\u116D"], [12636, 1, "\u116E"], [12637, 1, "\u116F"], [12638, 1, "\u1170"], [12639, 1, "\u1171"], [12640, 1, "\u1172"], [12641, 1, "\u1173"], [12642, 1, "\u1174"], [12643, 1, "\u1175"], [12644, 3], [12645, 1, "\u1114"], [12646, 1, "\u1115"], [12647, 1, "\u11C7"], [12648, 1, "\u11C8"], [12649, 1, "\u11CC"], [12650, 1, "\u11CE"], [12651, 1, "\u11D3"], [12652, 1, "\u11D7"], [12653, 1, "\u11D9"], [12654, 1, "\u111C"], [12655, 1, "\u11DD"], [12656, 1, "\u11DF"], [12657, 1, "\u111D"], [12658, 1, "\u111E"], [12659, 1, "\u1120"], [12660, 1, "\u1122"], [12661, 1, "\u1123"], [12662, 1, "\u1127"], [12663, 1, "\u1129"], [12664, 1, "\u112B"], [12665, 1, "\u112C"], [12666, 1, "\u112D"], [12667, 1, "\u112E"], [12668, 1, "\u112F"], [12669, 1, "\u1132"], [12670, 1, "\u1136"], [12671, 1, "\u1140"], [12672, 1, "\u1147"], [12673, 1, "\u114C"], [12674, 1, "\u11F1"], [12675, 1, "\u11F2"], [12676, 1, "\u1157"], [12677, 1, "\u1158"], [12678, 1, "\u1159"], [12679, 1, "\u1184"], [12680, 1, "\u1185"], [12681, 1, "\u1188"], [12682, 1, "\u1191"], [12683, 1, "\u1192"], [12684, 1, "\u1194"], [12685, 1, "\u119E"], [12686, 1, "\u11A1"], [12687, 3], [[12688, 12689], 2], [12690, 1, "\u4E00"], [12691, 1, "\u4E8C"], [12692, 1, "\u4E09"], [12693, 1, "\u56DB"], [12694, 1, "\u4E0A"], [12695, 1, "\u4E2D"], [12696, 1, "\u4E0B"], [12697, 1, "\u7532"], [12698, 1, "\u4E59"], [12699, 1, "\u4E19"], [12700, 1, "\u4E01"], [12701, 1, "\u5929"], [12702, 1, "\u5730"], [12703, 1, "\u4EBA"], [[12704, 12727], 2], [[12728, 12730], 2], [[12731, 12735], 2], [[12736, 12751], 2], [[12752, 12771], 2], [[12772, 12783], 3], [[12784, 12799], 2], [12800, 5, "(\u1100)"], [12801, 5, "(\u1102)"], [12802, 5, "(\u1103)"], [12803, 5, "(\u1105)"], [12804, 5, "(\u1106)"], [12805, 5, "(\u1107)"], [12806, 5, "(\u1109)"], [12807, 5, "(\u110B)"], [12808, 5, "(\u110C)"], [12809, 5, "(\u110E)"], [12810, 5, "(\u110F)"], [12811, 5, "(\u1110)"], [12812, 5, "(\u1111)"], [12813, 5, "(\u1112)"], [12814, 5, "(\uAC00)"], [12815, 5, "(\uB098)"], [12816, 5, "(\uB2E4)"], [12817, 5, "(\uB77C)"], [12818, 5, "(\uB9C8)"], [12819, 5, "(\uBC14)"], [12820, 5, "(\uC0AC)"], [12821, 5, "(\uC544)"], [12822, 5, "(\uC790)"], [12823, 5, "(\uCC28)"], [12824, 5, "(\uCE74)"], [12825, 5, "(\uD0C0)"], [12826, 5, "(\uD30C)"], [12827, 5, "(\uD558)"], [12828, 5, "(\uC8FC)"], [12829, 5, "(\uC624\uC804)"], [12830, 5, "(\uC624\uD6C4)"], [12831, 3], [12832, 5, "(\u4E00)"], [12833, 5, "(\u4E8C)"], [12834, 5, "(\u4E09)"], [12835, 5, "(\u56DB)"], [12836, 5, "(\u4E94)"], [12837, 5, "(\u516D)"], [12838, 5, "(\u4E03)"], [12839, 5, "(\u516B)"], [12840, 5, "(\u4E5D)"], [12841, 5, "(\u5341)"], [12842, 5, "(\u6708)"], [12843, 5, "(\u706B)"], [12844, 5, "(\u6C34)"], [12845, 5, "(\u6728)"], [12846, 5, "(\u91D1)"], [12847, 5, "(\u571F)"], [12848, 5, "(\u65E5)"], [12849, 5, "(\u682A)"], [12850, 5, "(\u6709)"], [12851, 5, "(\u793E)"], [12852, 5, "(\u540D)"], [12853, 5, "(\u7279)"], [12854, 5, "(\u8CA1)"], [12855, 5, "(\u795D)"], [12856, 5, "(\u52B4)"], [12857, 5, "(\u4EE3)"], [12858, 5, "(\u547C)"], [12859, 5, "(\u5B66)"], [12860, 5, "(\u76E3)"], [12861, 5, "(\u4F01)"], [12862, 5, "(\u8CC7)"], [12863, 5, "(\u5354)"], [12864, 5, "(\u796D)"], [12865, 5, "(\u4F11)"], [12866, 5, "(\u81EA)"], [12867, 5, "(\u81F3)"], [12868, 1, "\u554F"], [12869, 1, "\u5E7C"], [12870, 1, "\u6587"], [12871, 1, "\u7B8F"], [[12872, 12879], 2], [12880, 1, "pte"], [12881, 1, "21"], [12882, 1, "22"], [12883, 1, "23"], [12884, 1, "24"], [12885, 1, "25"], [12886, 1, "26"], [12887, 1, "27"], [12888, 1, "28"], [12889, 1, "29"], [12890, 1, "30"], [12891, 1, "31"], [12892, 1, "32"], [12893, 1, "33"], [12894, 1, "34"], [12895, 1, "35"], [12896, 1, "\u1100"], [12897, 1, "\u1102"], [12898, 1, "\u1103"], [12899, 1, "\u1105"], [12900, 1, "\u1106"], [12901, 1, "\u1107"], [12902, 1, "\u1109"], [12903, 1, "\u110B"], [12904, 1, "\u110C"], [12905, 1, "\u110E"], [12906, 1, "\u110F"], [12907, 1, "\u1110"], [12908, 1, "\u1111"], [12909, 1, "\u1112"], [12910, 1, "\uAC00"], [12911, 1, "\uB098"], [12912, 1, "\uB2E4"], [12913, 1, "\uB77C"], [12914, 1, "\uB9C8"], [12915, 1, "\uBC14"], [12916, 1, "\uC0AC"], [12917, 1, "\uC544"], [12918, 1, "\uC790"], [12919, 1, "\uCC28"], [12920, 1, "\uCE74"], [12921, 1, "\uD0C0"], [12922, 1, "\uD30C"], [12923, 1, "\uD558"], [12924, 1, "\uCC38\uACE0"], [12925, 1, "\uC8FC\uC758"], [12926, 1, "\uC6B0"], [12927, 2], [12928, 1, "\u4E00"], [12929, 1, "\u4E8C"], [12930, 1, "\u4E09"], [12931, 1, "\u56DB"], [12932, 1, "\u4E94"], [12933, 1, "\u516D"], [12934, 1, "\u4E03"], [12935, 1, "\u516B"], [12936, 1, "\u4E5D"], [12937, 1, "\u5341"], [12938, 1, "\u6708"], [12939, 1, "\u706B"], [12940, 1, "\u6C34"], [12941, 1, "\u6728"], [12942, 1, "\u91D1"], [12943, 1, "\u571F"], [12944, 1, "\u65E5"], [12945, 1, "\u682A"], [12946, 1, "\u6709"], [12947, 1, "\u793E"], [12948, 1, "\u540D"], [12949, 1, "\u7279"], [12950, 1, "\u8CA1"], [12951, 1, "\u795D"], [12952, 1, "\u52B4"], [12953, 1, "\u79D8"], [12954, 1, "\u7537"], [12955, 1, "\u5973"], [12956, 1, "\u9069"], [12957, 1, "\u512A"], [12958, 1, "\u5370"], [12959, 1, "\u6CE8"], [12960, 1, "\u9805"], [12961, 1, "\u4F11"], [12962, 1, "\u5199"], [12963, 1, "\u6B63"], [12964, 1, "\u4E0A"], [12965, 1, "\u4E2D"], [12966, 1, "\u4E0B"], [12967, 1, "\u5DE6"], [12968, 1, "\u53F3"], [12969, 1, "\u533B"], [12970, 1, "\u5B97"], [12971, 1, "\u5B66"], [12972, 1, "\u76E3"], [12973, 1, "\u4F01"], [12974, 1, "\u8CC7"], [12975, 1, "\u5354"], [12976, 1, "\u591C"], [12977, 1, "36"], [12978, 1, "37"], [12979, 1, "38"], [12980, 1, "39"], [12981, 1, "40"], [12982, 1, "41"], [12983, 1, "42"], [12984, 1, "43"], [12985, 1, "44"], [12986, 1, "45"], [12987, 1, "46"], [12988, 1, "47"], [12989, 1, "48"], [12990, 1, "49"], [12991, 1, "50"], [12992, 1, "1\u6708"], [12993, 1, "2\u6708"], [12994, 1, "3\u6708"], [12995, 1, "4\u6708"], [12996, 1, "5\u6708"], [12997, 1, "6\u6708"], [12998, 1, "7\u6708"], [12999, 1, "8\u6708"], [13e3, 1, "9\u6708"], [13001, 1, "10\u6708"], [13002, 1, "11\u6708"], [13003, 1, "12\u6708"], [13004, 1, "hg"], [13005, 1, "erg"], [13006, 1, "ev"], [13007, 1, "ltd"], [13008, 1, "\u30A2"], [13009, 1, "\u30A4"], [13010, 1, "\u30A6"], [13011, 1, "\u30A8"], [13012, 1, "\u30AA"], [13013, 1, "\u30AB"], [13014, 1, "\u30AD"], [13015, 1, "\u30AF"], [13016, 1, "\u30B1"], [13017, 1, "\u30B3"], [13018, 1, "\u30B5"], [13019, 1, "\u30B7"], [13020, 1, "\u30B9"], [13021, 1, "\u30BB"], [13022, 1, "\u30BD"], [13023, 1, "\u30BF"], [13024, 1, "\u30C1"], [13025, 1, "\u30C4"], [13026, 1, "\u30C6"], [13027, 1, "\u30C8"], [13028, 1, "\u30CA"], [13029, 1, "\u30CB"], [13030, 1, "\u30CC"], [13031, 1, "\u30CD"], [13032, 1, "\u30CE"], [13033, 1, "\u30CF"], [13034, 1, "\u30D2"], [13035, 1, "\u30D5"], [13036, 1, "\u30D8"], [13037, 1, "\u30DB"], [13038, 1, "\u30DE"], [13039, 1, "\u30DF"], [13040, 1, "\u30E0"], [13041, 1, "\u30E1"], [13042, 1, "\u30E2"], [13043, 1, "\u30E4"], [13044, 1, "\u30E6"], [13045, 1, "\u30E8"], [13046, 1, "\u30E9"], [13047, 1, "\u30EA"], [13048, 1, "\u30EB"], [13049, 1, "\u30EC"], [13050, 1, "\u30ED"], [13051, 1, "\u30EF"], [13052, 1, "\u30F0"], [13053, 1, "\u30F1"], [13054, 1, "\u30F2"], [13055, 1, "\u4EE4\u548C"], [13056, 1, "\u30A2\u30D1\u30FC\u30C8"], [13057, 1, "\u30A2\u30EB\u30D5\u30A1"], [13058, 1, "\u30A2\u30F3\u30DA\u30A2"], [13059, 1, "\u30A2\u30FC\u30EB"], [13060, 1, "\u30A4\u30CB\u30F3\u30B0"], [13061, 1, "\u30A4\u30F3\u30C1"], [13062, 1, "\u30A6\u30A9\u30F3"], [13063, 1, "\u30A8\u30B9\u30AF\u30FC\u30C9"], [13064, 1, "\u30A8\u30FC\u30AB\u30FC"], [13065, 1, "\u30AA\u30F3\u30B9"], [13066, 1, "\u30AA\u30FC\u30E0"], [13067, 1, "\u30AB\u30A4\u30EA"], [13068, 1, "\u30AB\u30E9\u30C3\u30C8"], [13069, 1, "\u30AB\u30ED\u30EA\u30FC"], [13070, 1, "\u30AC\u30ED\u30F3"], [13071, 1, "\u30AC\u30F3\u30DE"], [13072, 1, "\u30AE\u30AC"], [13073, 1, "\u30AE\u30CB\u30FC"], [13074, 1, "\u30AD\u30E5\u30EA\u30FC"], [13075, 1, "\u30AE\u30EB\u30C0\u30FC"], [13076, 1, "\u30AD\u30ED"], [13077, 1, "\u30AD\u30ED\u30B0\u30E9\u30E0"], [13078, 1, "\u30AD\u30ED\u30E1\u30FC\u30C8\u30EB"], [13079, 1, "\u30AD\u30ED\u30EF\u30C3\u30C8"], [13080, 1, "\u30B0\u30E9\u30E0"], [13081, 1, "\u30B0\u30E9\u30E0\u30C8\u30F3"], [13082, 1, "\u30AF\u30EB\u30BC\u30A4\u30ED"], [13083, 1, "\u30AF\u30ED\u30FC\u30CD"], [13084, 1, "\u30B1\u30FC\u30B9"], [13085, 1, "\u30B3\u30EB\u30CA"], [13086, 1, "\u30B3\u30FC\u30DD"], [13087, 1, "\u30B5\u30A4\u30AF\u30EB"], [13088, 1, "\u30B5\u30F3\u30C1\u30FC\u30E0"], [13089, 1, "\u30B7\u30EA\u30F3\u30B0"], [13090, 1, "\u30BB\u30F3\u30C1"], [13091, 1, "\u30BB\u30F3\u30C8"], [13092, 1, "\u30C0\u30FC\u30B9"], [13093, 1, "\u30C7\u30B7"], [13094, 1, "\u30C9\u30EB"], [13095, 1, "\u30C8\u30F3"], [13096, 1, "\u30CA\u30CE"], [13097, 1, "\u30CE\u30C3\u30C8"], [13098, 1, "\u30CF\u30A4\u30C4"], [13099, 1, "\u30D1\u30FC\u30BB\u30F3\u30C8"], [13100, 1, "\u30D1\u30FC\u30C4"], [13101, 1, "\u30D0\u30FC\u30EC\u30EB"], [13102, 1, "\u30D4\u30A2\u30B9\u30C8\u30EB"], [13103, 1, "\u30D4\u30AF\u30EB"], [13104, 1, "\u30D4\u30B3"], [13105, 1, "\u30D3\u30EB"], [13106, 1, "\u30D5\u30A1\u30E9\u30C3\u30C9"], [13107, 1, "\u30D5\u30A3\u30FC\u30C8"], [13108, 1, "\u30D6\u30C3\u30B7\u30A7\u30EB"], [13109, 1, "\u30D5\u30E9\u30F3"], [13110, 1, "\u30D8\u30AF\u30BF\u30FC\u30EB"], [13111, 1, "\u30DA\u30BD"], [13112, 1, "\u30DA\u30CB\u30D2"], [13113, 1, "\u30D8\u30EB\u30C4"], [13114, 1, "\u30DA\u30F3\u30B9"], [13115, 1, "\u30DA\u30FC\u30B8"], [13116, 1, "\u30D9\u30FC\u30BF"], [13117, 1, "\u30DD\u30A4\u30F3\u30C8"], [13118, 1, "\u30DC\u30EB\u30C8"], [13119, 1, "\u30DB\u30F3"], [13120, 1, "\u30DD\u30F3\u30C9"], [13121, 1, "\u30DB\u30FC\u30EB"], [13122, 1, "\u30DB\u30FC\u30F3"], [13123, 1, "\u30DE\u30A4\u30AF\u30ED"], [13124, 1, "\u30DE\u30A4\u30EB"], [13125, 1, "\u30DE\u30C3\u30CF"], [13126, 1, "\u30DE\u30EB\u30AF"], [13127, 1, "\u30DE\u30F3\u30B7\u30E7\u30F3"], [13128, 1, "\u30DF\u30AF\u30ED\u30F3"], [13129, 1, "\u30DF\u30EA"], [13130, 1, "\u30DF\u30EA\u30D0\u30FC\u30EB"], [13131, 1, "\u30E1\u30AC"], [13132, 1, "\u30E1\u30AC\u30C8\u30F3"], [13133, 1, "\u30E1\u30FC\u30C8\u30EB"], [13134, 1, "\u30E4\u30FC\u30C9"], [13135, 1, "\u30E4\u30FC\u30EB"], [13136, 1, "\u30E6\u30A2\u30F3"], [13137, 1, "\u30EA\u30C3\u30C8\u30EB"], [13138, 1, "\u30EA\u30E9"], [13139, 1, "\u30EB\u30D4\u30FC"], [13140, 1, "\u30EB\u30FC\u30D6\u30EB"], [13141, 1, "\u30EC\u30E0"], [13142, 1, "\u30EC\u30F3\u30C8\u30B2\u30F3"], [13143, 1, "\u30EF\u30C3\u30C8"], [13144, 1, "0\u70B9"], [13145, 1, "1\u70B9"], [13146, 1, "2\u70B9"], [13147, 1, "3\u70B9"], [13148, 1, "4\u70B9"], [13149, 1, "5\u70B9"], [13150, 1, "6\u70B9"], [13151, 1, "7\u70B9"], [13152, 1, "8\u70B9"], [13153, 1, "9\u70B9"], [13154, 1, "10\u70B9"], [13155, 1, "11\u70B9"], [13156, 1, "12\u70B9"], [13157, 1, "13\u70B9"], [13158, 1, "14\u70B9"], [13159, 1, "15\u70B9"], [13160, 1, "16\u70B9"], [13161, 1, "17\u70B9"], [13162, 1, "18\u70B9"], [13163, 1, "19\u70B9"], [13164, 1, "20\u70B9"], [13165, 1, "21\u70B9"], [13166, 1, "22\u70B9"], [13167, 1, "23\u70B9"], [13168, 1, "24\u70B9"], [13169, 1, "hpa"], [13170, 1, "da"], [13171, 1, "au"], [13172, 1, "bar"], [13173, 1, "ov"], [13174, 1, "pc"], [13175, 1, "dm"], [13176, 1, "dm2"], [13177, 1, "dm3"], [13178, 1, "iu"], [13179, 1, "\u5E73\u6210"], [13180, 1, "\u662D\u548C"], [13181, 1, "\u5927\u6B63"], [13182, 1, "\u660E\u6CBB"], [13183, 1, "\u682A\u5F0F\u4F1A\u793E"], [13184, 1, "pa"], [13185, 1, "na"], [13186, 1, "\u03BCa"], [13187, 1, "ma"], [13188, 1, "ka"], [13189, 1, "kb"], [13190, 1, "mb"], [13191, 1, "gb"], [13192, 1, "cal"], [13193, 1, "kcal"], [13194, 1, "pf"], [13195, 1, "nf"], [13196, 1, "\u03BCf"], [13197, 1, "\u03BCg"], [13198, 1, "mg"], [13199, 1, "kg"], [13200, 1, "hz"], [13201, 1, "khz"], [13202, 1, "mhz"], [13203, 1, "ghz"], [13204, 1, "thz"], [13205, 1, "\u03BCl"], [13206, 1, "ml"], [13207, 1, "dl"], [13208, 1, "kl"], [13209, 1, "fm"], [13210, 1, "nm"], [13211, 1, "\u03BCm"], [13212, 1, "mm"], [13213, 1, "cm"], [13214, 1, "km"], [13215, 1, "mm2"], [13216, 1, "cm2"], [13217, 1, "m2"], [13218, 1, "km2"], [13219, 1, "mm3"], [13220, 1, "cm3"], [13221, 1, "m3"], [13222, 1, "km3"], [13223, 1, "m\u2215s"], [13224, 1, "m\u2215s2"], [13225, 1, "pa"], [13226, 1, "kpa"], [13227, 1, "mpa"], [13228, 1, "gpa"], [13229, 1, "rad"], [13230, 1, "rad\u2215s"], [13231, 1, "rad\u2215s2"], [13232, 1, "ps"], [13233, 1, "ns"], [13234, 1, "\u03BCs"], [13235, 1, "ms"], [13236, 1, "pv"], [13237, 1, "nv"], [13238, 1, "\u03BCv"], [13239, 1, "mv"], [13240, 1, "kv"], [13241, 1, "mv"], [13242, 1, "pw"], [13243, 1, "nw"], [13244, 1, "\u03BCw"], [13245, 1, "mw"], [13246, 1, "kw"], [13247, 1, "mw"], [13248, 1, "k\u03C9"], [13249, 1, "m\u03C9"], [13250, 3], [13251, 1, "bq"], [13252, 1, "cc"], [13253, 1, "cd"], [13254, 1, "c\u2215kg"], [13255, 3], [13256, 1, "db"], [13257, 1, "gy"], [13258, 1, "ha"], [13259, 1, "hp"], [13260, 1, "in"], [13261, 1, "kk"], [13262, 1, "km"], [13263, 1, "kt"], [13264, 1, "lm"], [13265, 1, "ln"], [13266, 1, "log"], [13267, 1, "lx"], [13268, 1, "mb"], [13269, 1, "mil"], [13270, 1, "mol"], [13271, 1, "ph"], [13272, 3], [13273, 1, "ppm"], [13274, 1, "pr"], [13275, 1, "sr"], [13276, 1, "sv"], [13277, 1, "wb"], [13278, 1, "v\u2215m"], [13279, 1, "a\u2215m"], [13280, 1, "1\u65E5"], [13281, 1, "2\u65E5"], [13282, 1, "3\u65E5"], [13283, 1, "4\u65E5"], [13284, 1, "5\u65E5"], [13285, 1, "6\u65E5"], [13286, 1, "7\u65E5"], [13287, 1, "8\u65E5"], [13288, 1, "9\u65E5"], [13289, 1, "10\u65E5"], [13290, 1, "11\u65E5"], [13291, 1, "12\u65E5"], [13292, 1, "13\u65E5"], [13293, 1, "14\u65E5"], [13294, 1, "15\u65E5"], [13295, 1, "16\u65E5"], [13296, 1, "17\u65E5"], [13297, 1, "18\u65E5"], [13298, 1, "19\u65E5"], [13299, 1, "20\u65E5"], [13300, 1, "21\u65E5"], [13301, 1, "22\u65E5"], [13302, 1, "23\u65E5"], [13303, 1, "24\u65E5"], [13304, 1, "25\u65E5"], [13305, 1, "26\u65E5"], [13306, 1, "27\u65E5"], [13307, 1, "28\u65E5"], [13308, 1, "29\u65E5"], [13309, 1, "30\u65E5"], [13310, 1, "31\u65E5"], [13311, 1, "gal"], [[13312, 19893], 2], [[19894, 19903], 2], [[19904, 19967], 2], [[19968, 40869], 2], [[40870, 40891], 2], [[40892, 40899], 2], [[40900, 40907], 2], [40908, 2], [[40909, 40917], 2], [[40918, 40938], 2], [[40939, 40943], 2], [[40944, 40956], 2], [[40957, 40959], 2], [[40960, 42124], 2], [[42125, 42127], 3], [[42128, 42145], 2], [[42146, 42147], 2], [[42148, 42163], 2], [42164, 2], [[42165, 42176], 2], [42177, 2], [[42178, 42180], 2], [42181, 2], [42182, 2], [[42183, 42191], 3], [[42192, 42237], 2], [[42238, 42239], 2], [[42240, 42508], 2], [[42509, 42511], 2], [[42512, 42539], 2], [[42540, 42559], 3], [42560, 1, "\uA641"], [42561, 2], [42562, 1, "\uA643"], [42563, 2], [42564, 1, "\uA645"], [42565, 2], [42566, 1, "\uA647"], [42567, 2], [42568, 1, "\uA649"], [42569, 2], [42570, 1, "\uA64B"], [42571, 2], [42572, 1, "\uA64D"], [42573, 2], [42574, 1, "\uA64F"], [42575, 2], [42576, 1, "\uA651"], [42577, 2], [42578, 1, "\uA653"], [42579, 2], [42580, 1, "\uA655"], [42581, 2], [42582, 1, "\uA657"], [42583, 2], [42584, 1, "\uA659"], [42585, 2], [42586, 1, "\uA65B"], [42587, 2], [42588, 1, "\uA65D"], [42589, 2], [42590, 1, "\uA65F"], [42591, 2], [42592, 1, "\uA661"], [42593, 2], [42594, 1, "\uA663"], [42595, 2], [42596, 1, "\uA665"], [42597, 2], [42598, 1, "\uA667"], [42599, 2], [42600, 1, "\uA669"], [42601, 2], [42602, 1, "\uA66B"], [42603, 2], [42604, 1, "\uA66D"], [[42605, 42607], 2], [[42608, 42611], 2], [[42612, 42619], 2], [[42620, 42621], 2], [42622, 2], [42623, 2], [42624, 1, "\uA681"], [42625, 2], [42626, 1, "\uA683"], [42627, 2], [42628, 1, "\uA685"], [42629, 2], [42630, 1, "\uA687"], [42631, 2], [42632, 1, "\uA689"], [42633, 2], [42634, 1, "\uA68B"], [42635, 2], [42636, 1, "\uA68D"], [42637, 2], [42638, 1, "\uA68F"], [42639, 2], [42640, 1, "\uA691"], [42641, 2], [42642, 1, "\uA693"], [42643, 2], [42644, 1, "\uA695"], [42645, 2], [42646, 1, "\uA697"], [42647, 2], [42648, 1, "\uA699"], [42649, 2], [42650, 1, "\uA69B"], [42651, 2], [42652, 1, "\u044A"], [42653, 1, "\u044C"], [42654, 2], [42655, 2], [[42656, 42725], 2], [[42726, 42735], 2], [[42736, 42737], 2], [[42738, 42743], 2], [[42744, 42751], 3], [[42752, 42774], 2], [[42775, 42778], 2], [[42779, 42783], 2], [[42784, 42785], 2], [42786, 1, "\uA723"], [42787, 2], [42788, 1, "\uA725"], [42789, 2], [42790, 1, "\uA727"], [42791, 2], [42792, 1, "\uA729"], [42793, 2], [42794, 1, "\uA72B"], [42795, 2], [42796, 1, "\uA72D"], [42797, 2], [42798, 1, "\uA72F"], [[42799, 42801], 2], [42802, 1, "\uA733"], [42803, 2], [42804, 1, "\uA735"], [42805, 2], [42806, 1, "\uA737"], [42807, 2], [42808, 1, "\uA739"], [42809, 2], [42810, 1, "\uA73B"], [42811, 2], [42812, 1, "\uA73D"], [42813, 2], [42814, 1, "\uA73F"], [42815, 2], [42816, 1, "\uA741"], [42817, 2], [42818, 1, "\uA743"], [42819, 2], [42820, 1, "\uA745"], [42821, 2], [42822, 1, "\uA747"], [42823, 2], [42824, 1, "\uA749"], [42825, 2], [42826, 1, "\uA74B"], [42827, 2], [42828, 1, "\uA74D"], [42829, 2], [42830, 1, "\uA74F"], [42831, 2], [42832, 1, "\uA751"], [42833, 2], [42834, 1, "\uA753"], [42835, 2], [42836, 1, "\uA755"], [42837, 2], [42838, 1, "\uA757"], [42839, 2], [42840, 1, "\uA759"], [42841, 2], [42842, 1, "\uA75B"], [42843, 2], [42844, 1, "\uA75D"], [42845, 2], [42846, 1, "\uA75F"], [42847, 2], [42848, 1, "\uA761"], [42849, 2], [42850, 1, "\uA763"], [42851, 2], [42852, 1, "\uA765"], [42853, 2], [42854, 1, "\uA767"], [42855, 2], [42856, 1, "\uA769"], [42857, 2], [42858, 1, "\uA76B"], [42859, 2], [42860, 1, "\uA76D"], [42861, 2], [42862, 1, "\uA76F"], [42863, 2], [42864, 1, "\uA76F"], [[42865, 42872], 2], [42873, 1, "\uA77A"], [42874, 2], [42875, 1, "\uA77C"], [42876, 2], [42877, 1, "\u1D79"], [42878, 1, "\uA77F"], [42879, 2], [42880, 1, "\uA781"], [42881, 2], [42882, 1, "\uA783"], [42883, 2], [42884, 1, "\uA785"], [42885, 2], [42886, 1, "\uA787"], [[42887, 42888], 2], [[42889, 42890], 2], [42891, 1, "\uA78C"], [42892, 2], [42893, 1, "\u0265"], [42894, 2], [42895, 2], [42896, 1, "\uA791"], [42897, 2], [42898, 1, "\uA793"], [42899, 2], [[42900, 42901], 2], [42902, 1, "\uA797"], [42903, 2], [42904, 1, "\uA799"], [42905, 2], [42906, 1, "\uA79B"], [42907, 2], [42908, 1, "\uA79D"], [42909, 2], [42910, 1, "\uA79F"], [42911, 2], [42912, 1, "\uA7A1"], [42913, 2], [42914, 1, "\uA7A3"], [42915, 2], [42916, 1, "\uA7A5"], [42917, 2], [42918, 1, "\uA7A7"], [42919, 2], [42920, 1, "\uA7A9"], [42921, 2], [42922, 1, "\u0266"], [42923, 1, "\u025C"], [42924, 1, "\u0261"], [42925, 1, "\u026C"], [42926, 1, "\u026A"], [42927, 2], [42928, 1, "\u029E"], [42929, 1, "\u0287"], [42930, 1, "\u029D"], [42931, 1, "\uAB53"], [42932, 1, "\uA7B5"], [42933, 2], [42934, 1, "\uA7B7"], [42935, 2], [42936, 1, "\uA7B9"], [42937, 2], [42938, 1, "\uA7BB"], [42939, 2], [42940, 1, "\uA7BD"], [42941, 2], [42942, 1, "\uA7BF"], [42943, 2], [42944, 1, "\uA7C1"], [42945, 2], [42946, 1, "\uA7C3"], [42947, 2], [42948, 1, "\uA794"], [42949, 1, "\u0282"], [42950, 1, "\u1D8E"], [42951, 1, "\uA7C8"], [42952, 2], [42953, 1, "\uA7CA"], [42954, 2], [[42955, 42959], 3], [42960, 1, "\uA7D1"], [42961, 2], [42962, 3], [42963, 2], [42964, 3], [42965, 2], [42966, 1, "\uA7D7"], [42967, 2], [42968, 1, "\uA7D9"], [42969, 2], [[42970, 42993], 3], [42994, 1, "c"], [42995, 1, "f"], [42996, 1, "q"], [42997, 1, "\uA7F6"], [42998, 2], [42999, 2], [43e3, 1, "\u0127"], [43001, 1, "\u0153"], [43002, 2], [[43003, 43007], 2], [[43008, 43047], 2], [[43048, 43051], 2], [43052, 2], [[43053, 43055], 3], [[43056, 43065], 2], [[43066, 43071], 3], [[43072, 43123], 2], [[43124, 43127], 2], [[43128, 43135], 3], [[43136, 43204], 2], [43205, 2], [[43206, 43213], 3], [[43214, 43215], 2], [[43216, 43225], 2], [[43226, 43231], 3], [[43232, 43255], 2], [[43256, 43258], 2], [43259, 2], [43260, 2], [43261, 2], [[43262, 43263], 2], [[43264, 43309], 2], [[43310, 43311], 2], [[43312, 43347], 2], [[43348, 43358], 3], [43359, 2], [[43360, 43388], 2], [[43389, 43391], 3], [[43392, 43456], 2], [[43457, 43469], 2], [43470, 3], [[43471, 43481], 2], [[43482, 43485], 3], [[43486, 43487], 2], [[43488, 43518], 2], [43519, 3], [[43520, 43574], 2], [[43575, 43583], 3], [[43584, 43597], 2], [[43598, 43599], 3], [[43600, 43609], 2], [[43610, 43611], 3], [[43612, 43615], 2], [[43616, 43638], 2], [[43639, 43641], 2], [[43642, 43643], 2], [[43644, 43647], 2], [[43648, 43714], 2], [[43715, 43738], 3], [[43739, 43741], 2], [[43742, 43743], 2], [[43744, 43759], 2], [[43760, 43761], 2], [[43762, 43766], 2], [[43767, 43776], 3], [[43777, 43782], 2], [[43783, 43784], 3], [[43785, 43790], 2], [[43791, 43792], 3], [[43793, 43798], 2], [[43799, 43807], 3], [[43808, 43814], 2], [43815, 3], [[43816, 43822], 2], [43823, 3], [[43824, 43866], 2], [43867, 2], [43868, 1, "\uA727"], [43869, 1, "\uAB37"], [43870, 1, "\u026B"], [43871, 1, "\uAB52"], [[43872, 43875], 2], [[43876, 43877], 2], [[43878, 43879], 2], [43880, 2], [43881, 1, "\u028D"], [[43882, 43883], 2], [[43884, 43887], 3], [43888, 1, "\u13A0"], [43889, 1, "\u13A1"], [43890, 1, "\u13A2"], [43891, 1, "\u13A3"], [43892, 1, "\u13A4"], [43893, 1, "\u13A5"], [43894, 1, "\u13A6"], [43895, 1, "\u13A7"], [43896, 1, "\u13A8"], [43897, 1, "\u13A9"], [43898, 1, "\u13AA"], [43899, 1, "\u13AB"], [43900, 1, "\u13AC"], [43901, 1, "\u13AD"], [43902, 1, "\u13AE"], [43903, 1, "\u13AF"], [43904, 1, "\u13B0"], [43905, 1, "\u13B1"], [43906, 1, "\u13B2"], [43907, 1, "\u13B3"], [43908, 1, "\u13B4"], [43909, 1, "\u13B5"], [43910, 1, "\u13B6"], [43911, 1, "\u13B7"], [43912, 1, "\u13B8"], [43913, 1, "\u13B9"], [43914, 1, "\u13BA"], [43915, 1, "\u13BB"], [43916, 1, "\u13BC"], [43917, 1, "\u13BD"], [43918, 1, "\u13BE"], [43919, 1, "\u13BF"], [43920, 1, "\u13C0"], [43921, 1, "\u13C1"], [43922, 1, "\u13C2"], [43923, 1, "\u13C3"], [43924, 1, "\u13C4"], [43925, 1, "\u13C5"], [43926, 1, "\u13C6"], [43927, 1, "\u13C7"], [43928, 1, "\u13C8"], [43929, 1, "\u13C9"], [43930, 1, "\u13CA"], [43931, 1, "\u13CB"], [43932, 1, "\u13CC"], [43933, 1, "\u13CD"], [43934, 1, "\u13CE"], [43935, 1, "\u13CF"], [43936, 1, "\u13D0"], [43937, 1, "\u13D1"], [43938, 1, "\u13D2"], [43939, 1, "\u13D3"], [43940, 1, "\u13D4"], [43941, 1, "\u13D5"], [43942, 1, "\u13D6"], [43943, 1, "\u13D7"], [43944, 1, "\u13D8"], [43945, 1, "\u13D9"], [43946, 1, "\u13DA"], [43947, 1, "\u13DB"], [43948, 1, "\u13DC"], [43949, 1, "\u13DD"], [43950, 1, "\u13DE"], [43951, 1, "\u13DF"], [43952, 1, "\u13E0"], [43953, 1, "\u13E1"], [43954, 1, "\u13E2"], [43955, 1, "\u13E3"], [43956, 1, "\u13E4"], [43957, 1, "\u13E5"], [43958, 1, "\u13E6"], [43959, 1, "\u13E7"], [43960, 1, "\u13E8"], [43961, 1, "\u13E9"], [43962, 1, "\u13EA"], [43963, 1, "\u13EB"], [43964, 1, "\u13EC"], [43965, 1, "\u13ED"], [43966, 1, "\u13EE"], [43967, 1, "\u13EF"], [[43968, 44010], 2], [44011, 2], [[44012, 44013], 2], [[44014, 44015], 3], [[44016, 44025], 2], [[44026, 44031], 3], [[44032, 55203], 2], [[55204, 55215], 3], [[55216, 55238], 2], [[55239, 55242], 3], [[55243, 55291], 2], [[55292, 55295], 3], [[55296, 57343], 3], [[57344, 63743], 3], [63744, 1, "\u8C48"], [63745, 1, "\u66F4"], [63746, 1, "\u8ECA"], [63747, 1, "\u8CC8"], [63748, 1, "\u6ED1"], [63749, 1, "\u4E32"], [63750, 1, "\u53E5"], [[63751, 63752], 1, "\u9F9C"], [63753, 1, "\u5951"], [63754, 1, "\u91D1"], [63755, 1, "\u5587"], [63756, 1, "\u5948"], [63757, 1, "\u61F6"], [63758, 1, "\u7669"], [63759, 1, "\u7F85"], [63760, 1, "\u863F"], [63761, 1, "\u87BA"], [63762, 1, "\u88F8"], [63763, 1, "\u908F"], [63764, 1, "\u6A02"], [63765, 1, "\u6D1B"], [63766, 1, "\u70D9"], [63767, 1, "\u73DE"], [63768, 1, "\u843D"], [63769, 1, "\u916A"], [63770, 1, "\u99F1"], [63771, 1, "\u4E82"], [63772, 1, "\u5375"], [63773, 1, "\u6B04"], [63774, 1, "\u721B"], [63775, 1, "\u862D"], [63776, 1, "\u9E1E"], [63777, 1, "\u5D50"], [63778, 1, "\u6FEB"], [63779, 1, "\u85CD"], [63780, 1, "\u8964"], [63781, 1, "\u62C9"], [63782, 1, "\u81D8"], [63783, 1, "\u881F"], [63784, 1, "\u5ECA"], [63785, 1, "\u6717"], [63786, 1, "\u6D6A"], [63787, 1, "\u72FC"], [63788, 1, "\u90CE"], [63789, 1, "\u4F86"], [63790, 1, "\u51B7"], [63791, 1, "\u52DE"], [63792, 1, "\u64C4"], [63793, 1, "\u6AD3"], [63794, 1, "\u7210"], [63795, 1, "\u76E7"], [63796, 1, "\u8001"], [63797, 1, "\u8606"], [63798, 1, "\u865C"], [63799, 1, "\u8DEF"], [63800, 1, "\u9732"], [63801, 1, "\u9B6F"], [63802, 1, "\u9DFA"], [63803, 1, "\u788C"], [63804, 1, "\u797F"], [63805, 1, "\u7DA0"], [63806, 1, "\u83C9"], [63807, 1, "\u9304"], [63808, 1, "\u9E7F"], [63809, 1, "\u8AD6"], [63810, 1, "\u58DF"], [63811, 1, "\u5F04"], [63812, 1, "\u7C60"], [63813, 1, "\u807E"], [63814, 1, "\u7262"], [63815, 1, "\u78CA"], [63816, 1, "\u8CC2"], [63817, 1, "\u96F7"], [63818, 1, "\u58D8"], [63819, 1, "\u5C62"], [63820, 1, "\u6A13"], [63821, 1, "\u6DDA"], [63822, 1, "\u6F0F"], [63823, 1, "\u7D2F"], [63824, 1, "\u7E37"], [63825, 1, "\u964B"], [63826, 1, "\u52D2"], [63827, 1, "\u808B"], [63828, 1, "\u51DC"], [63829, 1, "\u51CC"], [63830, 1, "\u7A1C"], [63831, 1, "\u7DBE"], [63832, 1, "\u83F1"], [63833, 1, "\u9675"], [63834, 1, "\u8B80"], [63835, 1, "\u62CF"], [63836, 1, "\u6A02"], [63837, 1, "\u8AFE"], [63838, 1, "\u4E39"], [63839, 1, "\u5BE7"], [63840, 1, "\u6012"], [63841, 1, "\u7387"], [63842, 1, "\u7570"], [63843, 1, "\u5317"], [63844, 1, "\u78FB"], [63845, 1, "\u4FBF"], [63846, 1, "\u5FA9"], [63847, 1, "\u4E0D"], [63848, 1, "\u6CCC"], [63849, 1, "\u6578"], [63850, 1, "\u7D22"], [63851, 1, "\u53C3"], [63852, 1, "\u585E"], [63853, 1, "\u7701"], [63854, 1, "\u8449"], [63855, 1, "\u8AAA"], [63856, 1, "\u6BBA"], [63857, 1, "\u8FB0"], [63858, 1, "\u6C88"], [63859, 1, "\u62FE"], [63860, 1, "\u82E5"], [63861, 1, "\u63A0"], [63862, 1, "\u7565"], [63863, 1, "\u4EAE"], [63864, 1, "\u5169"], [63865, 1, "\u51C9"], [63866, 1, "\u6881"], [63867, 1, "\u7CE7"], [63868, 1, "\u826F"], [63869, 1, "\u8AD2"], [63870, 1, "\u91CF"], [63871, 1, "\u52F5"], [63872, 1, "\u5442"], [63873, 1, "\u5973"], [63874, 1, "\u5EEC"], [63875, 1, "\u65C5"], [63876, 1, "\u6FFE"], [63877, 1, "\u792A"], [63878, 1, "\u95AD"], [63879, 1, "\u9A6A"], [63880, 1, "\u9E97"], [63881, 1, "\u9ECE"], [63882, 1, "\u529B"], [63883, 1, "\u66C6"], [63884, 1, "\u6B77"], [63885, 1, "\u8F62"], [63886, 1, "\u5E74"], [63887, 1, "\u6190"], [63888, 1, "\u6200"], [63889, 1, "\u649A"], [63890, 1, "\u6F23"], [63891, 1, "\u7149"], [63892, 1, "\u7489"], [63893, 1, "\u79CA"], [63894, 1, "\u7DF4"], [63895, 1, "\u806F"], [63896, 1, "\u8F26"], [63897, 1, "\u84EE"], [63898, 1, "\u9023"], [63899, 1, "\u934A"], [63900, 1, "\u5217"], [63901, 1, "\u52A3"], [63902, 1, "\u54BD"], [63903, 1, "\u70C8"], [63904, 1, "\u88C2"], [63905, 1, "\u8AAA"], [63906, 1, "\u5EC9"], [63907, 1, "\u5FF5"], [63908, 1, "\u637B"], [63909, 1, "\u6BAE"], [63910, 1, "\u7C3E"], [63911, 1, "\u7375"], [63912, 1, "\u4EE4"], [63913, 1, "\u56F9"], [63914, 1, "\u5BE7"], [63915, 1, "\u5DBA"], [63916, 1, "\u601C"], [63917, 1, "\u73B2"], [63918, 1, "\u7469"], [63919, 1, "\u7F9A"], [63920, 1, "\u8046"], [63921, 1, "\u9234"], [63922, 1, "\u96F6"], [63923, 1, "\u9748"], [63924, 1, "\u9818"], [63925, 1, "\u4F8B"], [63926, 1, "\u79AE"], [63927, 1, "\u91B4"], [63928, 1, "\u96B8"], [63929, 1, "\u60E1"], [63930, 1, "\u4E86"], [63931, 1, "\u50DA"], [63932, 1, "\u5BEE"], [63933, 1, "\u5C3F"], [63934, 1, "\u6599"], [63935, 1, "\u6A02"], [63936, 1, "\u71CE"], [63937, 1, "\u7642"], [63938, 1, "\u84FC"], [63939, 1, "\u907C"], [63940, 1, "\u9F8D"], [63941, 1, "\u6688"], [63942, 1, "\u962E"], [63943, 1, "\u5289"], [63944, 1, "\u677B"], [63945, 1, "\u67F3"], [63946, 1, "\u6D41"], [63947, 1, "\u6E9C"], [63948, 1, "\u7409"], [63949, 1, "\u7559"], [63950, 1, "\u786B"], [63951, 1, "\u7D10"], [63952, 1, "\u985E"], [63953, 1, "\u516D"], [63954, 1, "\u622E"], [63955, 1, "\u9678"], [63956, 1, "\u502B"], [63957, 1, "\u5D19"], [63958, 1, "\u6DEA"], [63959, 1, "\u8F2A"], [63960, 1, "\u5F8B"], [63961, 1, "\u6144"], [63962, 1, "\u6817"], [63963, 1, "\u7387"], [63964, 1, "\u9686"], [63965, 1, "\u5229"], [63966, 1, "\u540F"], [63967, 1, "\u5C65"], [63968, 1, "\u6613"], [63969, 1, "\u674E"], [63970, 1, "\u68A8"], [63971, 1, "\u6CE5"], [63972, 1, "\u7406"], [63973, 1, "\u75E2"], [63974, 1, "\u7F79"], [63975, 1, "\u88CF"], [63976, 1, "\u88E1"], [63977, 1, "\u91CC"], [63978, 1, "\u96E2"], [63979, 1, "\u533F"], [63980, 1, "\u6EBA"], [63981, 1, "\u541D"], [63982, 1, "\u71D0"], [63983, 1, "\u7498"], [63984, 1, "\u85FA"], [63985, 1, "\u96A3"], [63986, 1, "\u9C57"], [63987, 1, "\u9E9F"], [63988, 1, "\u6797"], [63989, 1, "\u6DCB"], [63990, 1, "\u81E8"], [63991, 1, "\u7ACB"], [63992, 1, "\u7B20"], [63993, 1, "\u7C92"], [63994, 1, "\u72C0"], [63995, 1, "\u7099"], [63996, 1, "\u8B58"], [63997, 1, "\u4EC0"], [63998, 1, "\u8336"], [63999, 1, "\u523A"], [64e3, 1, "\u5207"], [64001, 1, "\u5EA6"], [64002, 1, "\u62D3"], [64003, 1, "\u7CD6"], [64004, 1, "\u5B85"], [64005, 1, "\u6D1E"], [64006, 1, "\u66B4"], [64007, 1, "\u8F3B"], [64008, 1, "\u884C"], [64009, 1, "\u964D"], [64010, 1, "\u898B"], [64011, 1, "\u5ED3"], [64012, 1, "\u5140"], [64013, 1, "\u55C0"], [[64014, 64015], 2], [64016, 1, "\u585A"], [64017, 2], [64018, 1, "\u6674"], [[64019, 64020], 2], [64021, 1, "\u51DE"], [64022, 1, "\u732A"], [64023, 1, "\u76CA"], [64024, 1, "\u793C"], [64025, 1, "\u795E"], [64026, 1, "\u7965"], [64027, 1, "\u798F"], [64028, 1, "\u9756"], [64029, 1, "\u7CBE"], [64030, 1, "\u7FBD"], [64031, 2], [64032, 1, "\u8612"], [64033, 2], [64034, 1, "\u8AF8"], [[64035, 64036], 2], [64037, 1, "\u9038"], [64038, 1, "\u90FD"], [[64039, 64041], 2], [64042, 1, "\u98EF"], [64043, 1, "\u98FC"], [64044, 1, "\u9928"], [64045, 1, "\u9DB4"], [64046, 1, "\u90DE"], [64047, 1, "\u96B7"], [64048, 1, "\u4FAE"], [64049, 1, "\u50E7"], [64050, 1, "\u514D"], [64051, 1, "\u52C9"], [64052, 1, "\u52E4"], [64053, 1, "\u5351"], [64054, 1, "\u559D"], [64055, 1, "\u5606"], [64056, 1, "\u5668"], [64057, 1, "\u5840"], [64058, 1, "\u58A8"], [64059, 1, "\u5C64"], [64060, 1, "\u5C6E"], [64061, 1, "\u6094"], [64062, 1, "\u6168"], [64063, 1, "\u618E"], [64064, 1, "\u61F2"], [64065, 1, "\u654F"], [64066, 1, "\u65E2"], [64067, 1, "\u6691"], [64068, 1, "\u6885"], [64069, 1, "\u6D77"], [64070, 1, "\u6E1A"], [64071, 1, "\u6F22"], [64072, 1, "\u716E"], [64073, 1, "\u722B"], [64074, 1, "\u7422"], [64075, 1, "\u7891"], [64076, 1, "\u793E"], [64077, 1, "\u7949"], [64078, 1, "\u7948"], [64079, 1, "\u7950"], [64080, 1, "\u7956"], [64081, 1, "\u795D"], [64082, 1, "\u798D"], [64083, 1, "\u798E"], [64084, 1, "\u7A40"], [64085, 1, "\u7A81"], [64086, 1, "\u7BC0"], [64087, 1, "\u7DF4"], [64088, 1, "\u7E09"], [64089, 1, "\u7E41"], [64090, 1, "\u7F72"], [64091, 1, "\u8005"], [64092, 1, "\u81ED"], [[64093, 64094], 1, "\u8279"], [64095, 1, "\u8457"], [64096, 1, "\u8910"], [64097, 1, "\u8996"], [64098, 1, "\u8B01"], [64099, 1, "\u8B39"], [64100, 1, "\u8CD3"], [64101, 1, "\u8D08"], [64102, 1, "\u8FB6"], [64103, 1, "\u9038"], [64104, 1, "\u96E3"], [64105, 1, "\u97FF"], [64106, 1, "\u983B"], [64107, 1, "\u6075"], [64108, 1, "\u{242EE}"], [64109, 1, "\u8218"], [[64110, 64111], 3], [64112, 1, "\u4E26"], [64113, 1, "\u51B5"], [64114, 1, "\u5168"], [64115, 1, "\u4F80"], [64116, 1, "\u5145"], [64117, 1, "\u5180"], [64118, 1, "\u52C7"], [64119, 1, "\u52FA"], [64120, 1, "\u559D"], [64121, 1, "\u5555"], [64122, 1, "\u5599"], [64123, 1, "\u55E2"], [64124, 1, "\u585A"], [64125, 1, "\u58B3"], [64126, 1, "\u5944"], [64127, 1, "\u5954"], [64128, 1, "\u5A62"], [64129, 1, "\u5B28"], [64130, 1, "\u5ED2"], [64131, 1, "\u5ED9"], [64132, 1, "\u5F69"], [64133, 1, "\u5FAD"], [64134, 1, "\u60D8"], [64135, 1, "\u614E"], [64136, 1, "\u6108"], [64137, 1, "\u618E"], [64138, 1, "\u6160"], [64139, 1, "\u61F2"], [64140, 1, "\u6234"], [64141, 1, "\u63C4"], [64142, 1, "\u641C"], [64143, 1, "\u6452"], [64144, 1, "\u6556"], [64145, 1, "\u6674"], [64146, 1, "\u6717"], [64147, 1, "\u671B"], [64148, 1, "\u6756"], [64149, 1, "\u6B79"], [64150, 1, "\u6BBA"], [64151, 1, "\u6D41"], [64152, 1, "\u6EDB"], [64153, 1, "\u6ECB"], [64154, 1, "\u6F22"], [64155, 1, "\u701E"], [64156, 1, "\u716E"], [64157, 1, "\u77A7"], [64158, 1, "\u7235"], [64159, 1, "\u72AF"], [64160, 1, "\u732A"], [64161, 1, "\u7471"], [64162, 1, "\u7506"], [64163, 1, "\u753B"], [64164, 1, "\u761D"], [64165, 1, "\u761F"], [64166, 1, "\u76CA"], [64167, 1, "\u76DB"], [64168, 1, "\u76F4"], [64169, 1, "\u774A"], [64170, 1, "\u7740"], [64171, 1, "\u78CC"], [64172, 1, "\u7AB1"], [64173, 1, "\u7BC0"], [64174, 1, "\u7C7B"], [64175, 1, "\u7D5B"], [64176, 1, "\u7DF4"], [64177, 1, "\u7F3E"], [64178, 1, "\u8005"], [64179, 1, "\u8352"], [64180, 1, "\u83EF"], [64181, 1, "\u8779"], [64182, 1, "\u8941"], [64183, 1, "\u8986"], [64184, 1, "\u8996"], [64185, 1, "\u8ABF"], [64186, 1, "\u8AF8"], [64187, 1, "\u8ACB"], [64188, 1, "\u8B01"], [64189, 1, "\u8AFE"], [64190, 1, "\u8AED"], [64191, 1, "\u8B39"], [64192, 1, "\u8B8A"], [64193, 1, "\u8D08"], [64194, 1, "\u8F38"], [64195, 1, "\u9072"], [64196, 1, "\u9199"], [64197, 1, "\u9276"], [64198, 1, "\u967C"], [64199, 1, "\u96E3"], [64200, 1, "\u9756"], [64201, 1, "\u97DB"], [64202, 1, "\u97FF"], [64203, 1, "\u980B"], [64204, 1, "\u983B"], [64205, 1, "\u9B12"], [64206, 1, "\u9F9C"], [64207, 1, "\u{2284A}"], [64208, 1, "\u{22844}"], [64209, 1, "\u{233D5}"], [64210, 1, "\u3B9D"], [64211, 1, "\u4018"], [64212, 1, "\u4039"], [64213, 1, "\u{25249}"], [64214, 1, "\u{25CD0}"], [64215, 1, "\u{27ED3}"], [64216, 1, "\u9F43"], [64217, 1, "\u9F8E"], [[64218, 64255], 3], [64256, 1, "ff"], [64257, 1, "fi"], [64258, 1, "fl"], [64259, 1, "ffi"], [64260, 1, "ffl"], [[64261, 64262], 1, "st"], [[64263, 64274], 3], [64275, 1, "\u0574\u0576"], [64276, 1, "\u0574\u0565"], [64277, 1, "\u0574\u056B"], [64278, 1, "\u057E\u0576"], [64279, 1, "\u0574\u056D"], [[64280, 64284], 3], [64285, 1, "\u05D9\u05B4"], [64286, 2], [64287, 1, "\u05F2\u05B7"], [64288, 1, "\u05E2"], [64289, 1, "\u05D0"], [64290, 1, "\u05D3"], [64291, 1, "\u05D4"], [64292, 1, "\u05DB"], [64293, 1, "\u05DC"], [64294, 1, "\u05DD"], [64295, 1, "\u05E8"], [64296, 1, "\u05EA"], [64297, 5, "+"], [64298, 1, "\u05E9\u05C1"], [64299, 1, "\u05E9\u05C2"], [64300, 1, "\u05E9\u05BC\u05C1"], [64301, 1, "\u05E9\u05BC\u05C2"], [64302, 1, "\u05D0\u05B7"], [64303, 1, "\u05D0\u05B8"], [64304, 1, "\u05D0\u05BC"], [64305, 1, "\u05D1\u05BC"], [64306, 1, "\u05D2\u05BC"], [64307, 1, "\u05D3\u05BC"], [64308, 1, "\u05D4\u05BC"], [64309, 1, "\u05D5\u05BC"], [64310, 1, "\u05D6\u05BC"], [64311, 3], [64312, 1, "\u05D8\u05BC"], [64313, 1, "\u05D9\u05BC"], [64314, 1, "\u05DA\u05BC"], [64315, 1, "\u05DB\u05BC"], [64316, 1, "\u05DC\u05BC"], [64317, 3], [64318, 1, "\u05DE\u05BC"], [64319, 3], [64320, 1, "\u05E0\u05BC"], [64321, 1, "\u05E1\u05BC"], [64322, 3], [64323, 1, "\u05E3\u05BC"], [64324, 1, "\u05E4\u05BC"], [64325, 3], [64326, 1, "\u05E6\u05BC"], [64327, 1, "\u05E7\u05BC"], [64328, 1, "\u05E8\u05BC"], [64329, 1, "\u05E9\u05BC"], [64330, 1, "\u05EA\u05BC"], [64331, 1, "\u05D5\u05B9"], [64332, 1, "\u05D1\u05BF"], [64333, 1, "\u05DB\u05BF"], [64334, 1, "\u05E4\u05BF"], [64335, 1, "\u05D0\u05DC"], [[64336, 64337], 1, "\u0671"], [[64338, 64341], 1, "\u067B"], [[64342, 64345], 1, "\u067E"], [[64346, 64349], 1, "\u0680"], [[64350, 64353], 1, "\u067A"], [[64354, 64357], 1, "\u067F"], [[64358, 64361], 1, "\u0679"], [[64362, 64365], 1, "\u06A4"], [[64366, 64369], 1, "\u06A6"], [[64370, 64373], 1, "\u0684"], [[64374, 64377], 1, "\u0683"], [[64378, 64381], 1, "\u0686"], [[64382, 64385], 1, "\u0687"], [[64386, 64387], 1, "\u068D"], [[64388, 64389], 1, "\u068C"], [[64390, 64391], 1, "\u068E"], [[64392, 64393], 1, "\u0688"], [[64394, 64395], 1, "\u0698"], [[64396, 64397], 1, "\u0691"], [[64398, 64401], 1, "\u06A9"], [[64402, 64405], 1, "\u06AF"], [[64406, 64409], 1, "\u06B3"], [[64410, 64413], 1, "\u06B1"], [[64414, 64415], 1, "\u06BA"], [[64416, 64419], 1, "\u06BB"], [[64420, 64421], 1, "\u06C0"], [[64422, 64425], 1, "\u06C1"], [[64426, 64429], 1, "\u06BE"], [[64430, 64431], 1, "\u06D2"], [[64432, 64433], 1, "\u06D3"], [[64434, 64449], 2], [64450, 2], [[64451, 64466], 3], [[64467, 64470], 1, "\u06AD"], [[64471, 64472], 1, "\u06C7"], [[64473, 64474], 1, "\u06C6"], [[64475, 64476], 1, "\u06C8"], [64477, 1, "\u06C7\u0674"], [[64478, 64479], 1, "\u06CB"], [[64480, 64481], 1, "\u06C5"], [[64482, 64483], 1, "\u06C9"], [[64484, 64487], 1, "\u06D0"], [[64488, 64489], 1, "\u0649"], [[64490, 64491], 1, "\u0626\u0627"], [[64492, 64493], 1, "\u0626\u06D5"], [[64494, 64495], 1, "\u0626\u0648"], [[64496, 64497], 1, "\u0626\u06C7"], [[64498, 64499], 1, "\u0626\u06C6"], [[64500, 64501], 1, "\u0626\u06C8"], [[64502, 64504], 1, "\u0626\u06D0"], [[64505, 64507], 1, "\u0626\u0649"], [[64508, 64511], 1, "\u06CC"], [64512, 1, "\u0626\u062C"], [64513, 1, "\u0626\u062D"], [64514, 1, "\u0626\u0645"], [64515, 1, "\u0626\u0649"], [64516, 1, "\u0626\u064A"], [64517, 1, "\u0628\u062C"], [64518, 1, "\u0628\u062D"], [64519, 1, "\u0628\u062E"], [64520, 1, "\u0628\u0645"], [64521, 1, "\u0628\u0649"], [64522, 1, "\u0628\u064A"], [64523, 1, "\u062A\u062C"], [64524, 1, "\u062A\u062D"], [64525, 1, "\u062A\u062E"], [64526, 1, "\u062A\u0645"], [64527, 1, "\u062A\u0649"], [64528, 1, "\u062A\u064A"], [64529, 1, "\u062B\u062C"], [64530, 1, "\u062B\u0645"], [64531, 1, "\u062B\u0649"], [64532, 1, "\u062B\u064A"], [64533, 1, "\u062C\u062D"], [64534, 1, "\u062C\u0645"], [64535, 1, "\u062D\u062C"], [64536, 1, "\u062D\u0645"], [64537, 1, "\u062E\u062C"], [64538, 1, "\u062E\u062D"], [64539, 1, "\u062E\u0645"], [64540, 1, "\u0633\u062C"], [64541, 1, "\u0633\u062D"], [64542, 1, "\u0633\u062E"], [64543, 1, "\u0633\u0645"], [64544, 1, "\u0635\u062D"], [64545, 1, "\u0635\u0645"], [64546, 1, "\u0636\u062C"], [64547, 1, "\u0636\u062D"], [64548, 1, "\u0636\u062E"], [64549, 1, "\u0636\u0645"], [64550, 1, "\u0637\u062D"], [64551, 1, "\u0637\u0645"], [64552, 1, "\u0638\u0645"], [64553, 1, "\u0639\u062C"], [64554, 1, "\u0639\u0645"], [64555, 1, "\u063A\u062C"], [64556, 1, "\u063A\u0645"], [64557, 1, "\u0641\u062C"], [64558, 1, "\u0641\u062D"], [64559, 1, "\u0641\u062E"], [64560, 1, "\u0641\u0645"], [64561, 1, "\u0641\u0649"], [64562, 1, "\u0641\u064A"], [64563, 1, "\u0642\u062D"], [64564, 1, "\u0642\u0645"], [64565, 1, "\u0642\u0649"], [64566, 1, "\u0642\u064A"], [64567, 1, "\u0643\u0627"], [64568, 1, "\u0643\u062C"], [64569, 1, "\u0643\u062D"], [64570, 1, "\u0643\u062E"], [64571, 1, "\u0643\u0644"], [64572, 1, "\u0643\u0645"], [64573, 1, "\u0643\u0649"], [64574, 1, "\u0643\u064A"], [64575, 1, "\u0644\u062C"], [64576, 1, "\u0644\u062D"], [64577, 1, "\u0644\u062E"], [64578, 1, "\u0644\u0645"], [64579, 1, "\u0644\u0649"], [64580, 1, "\u0644\u064A"], [64581, 1, "\u0645\u062C"], [64582, 1, "\u0645\u062D"], [64583, 1, "\u0645\u062E"], [64584, 1, "\u0645\u0645"], [64585, 1, "\u0645\u0649"], [64586, 1, "\u0645\u064A"], [64587, 1, "\u0646\u062C"], [64588, 1, "\u0646\u062D"], [64589, 1, "\u0646\u062E"], [64590, 1, "\u0646\u0645"], [64591, 1, "\u0646\u0649"], [64592, 1, "\u0646\u064A"], [64593, 1, "\u0647\u062C"], [64594, 1, "\u0647\u0645"], [64595, 1, "\u0647\u0649"], [64596, 1, "\u0647\u064A"], [64597, 1, "\u064A\u062C"], [64598, 1, "\u064A\u062D"], [64599, 1, "\u064A\u062E"], [64600, 1, "\u064A\u0645"], [64601, 1, "\u064A\u0649"], [64602, 1, "\u064A\u064A"], [64603, 1, "\u0630\u0670"], [64604, 1, "\u0631\u0670"], [64605, 1, "\u0649\u0670"], [64606, 5, " \u064C\u0651"], [64607, 5, " \u064D\u0651"], [64608, 5, " \u064E\u0651"], [64609, 5, " \u064F\u0651"], [64610, 5, " \u0650\u0651"], [64611, 5, " \u0651\u0670"], [64612, 1, "\u0626\u0631"], [64613, 1, "\u0626\u0632"], [64614, 1, "\u0626\u0645"], [64615, 1, "\u0626\u0646"], [64616, 1, "\u0626\u0649"], [64617, 1, "\u0626\u064A"], [64618, 1, "\u0628\u0631"], [64619, 1, "\u0628\u0632"], [64620, 1, "\u0628\u0645"], [64621, 1, "\u0628\u0646"], [64622, 1, "\u0628\u0649"], [64623, 1, "\u0628\u064A"], [64624, 1, "\u062A\u0631"], [64625, 1, "\u062A\u0632"], [64626, 1, "\u062A\u0645"], [64627, 1, "\u062A\u0646"], [64628, 1, "\u062A\u0649"], [64629, 1, "\u062A\u064A"], [64630, 1, "\u062B\u0631"], [64631, 1, "\u062B\u0632"], [64632, 1, "\u062B\u0645"], [64633, 1, "\u062B\u0646"], [64634, 1, "\u062B\u0649"], [64635, 1, "\u062B\u064A"], [64636, 1, "\u0641\u0649"], [64637, 1, "\u0641\u064A"], [64638, 1, "\u0642\u0649"], [64639, 1, "\u0642\u064A"], [64640, 1, "\u0643\u0627"], [64641, 1, "\u0643\u0644"], [64642, 1, "\u0643\u0645"], [64643, 1, "\u0643\u0649"], [64644, 1, "\u0643\u064A"], [64645, 1, "\u0644\u0645"], [64646, 1, "\u0644\u0649"], [64647, 1, "\u0644\u064A"], [64648, 1, "\u0645\u0627"], [64649, 1, "\u0645\u0645"], [64650, 1, "\u0646\u0631"], [64651, 1, "\u0646\u0632"], [64652, 1, "\u0646\u0645"], [64653, 1, "\u0646\u0646"], [64654, 1, "\u0646\u0649"], [64655, 1, "\u0646\u064A"], [64656, 1, "\u0649\u0670"], [64657, 1, "\u064A\u0631"], [64658, 1, "\u064A\u0632"], [64659, 1, "\u064A\u0645"], [64660, 1, "\u064A\u0646"], [64661, 1, "\u064A\u0649"], [64662, 1, "\u064A\u064A"], [64663, 1, "\u0626\u062C"], [64664, 1, "\u0626\u062D"], [64665, 1, "\u0626\u062E"], [64666, 1, "\u0626\u0645"], [64667, 1, "\u0626\u0647"], [64668, 1, "\u0628\u062C"], [64669, 1, "\u0628\u062D"], [64670, 1, "\u0628\u062E"], [64671, 1, "\u0628\u0645"], [64672, 1, "\u0628\u0647"], [64673, 1, "\u062A\u062C"], [64674, 1, "\u062A\u062D"], [64675, 1, "\u062A\u062E"], [64676, 1, "\u062A\u0645"], [64677, 1, "\u062A\u0647"], [64678, 1, "\u062B\u0645"], [64679, 1, "\u062C\u062D"], [64680, 1, "\u062C\u0645"], [64681, 1, "\u062D\u062C"], [64682, 1, "\u062D\u0645"], [64683, 1, "\u062E\u062C"], [64684, 1, "\u062E\u0645"], [64685, 1, "\u0633\u062C"], [64686, 1, "\u0633\u062D"], [64687, 1, "\u0633\u062E"], [64688, 1, "\u0633\u0645"], [64689, 1, "\u0635\u062D"], [64690, 1, "\u0635\u062E"], [64691, 1, "\u0635\u0645"], [64692, 1, "\u0636\u062C"], [64693, 1, "\u0636\u062D"], [64694, 1, "\u0636\u062E"], [64695, 1, "\u0636\u0645"], [64696, 1, "\u0637\u062D"], [64697, 1, "\u0638\u0645"], [64698, 1, "\u0639\u062C"], [64699, 1, "\u0639\u0645"], [64700, 1, "\u063A\u062C"], [64701, 1, "\u063A\u0645"], [64702, 1, "\u0641\u062C"], [64703, 1, "\u0641\u062D"], [64704, 1, "\u0641\u062E"], [64705, 1, "\u0641\u0645"], [64706, 1, "\u0642\u062D"], [64707, 1, "\u0642\u0645"], [64708, 1, "\u0643\u062C"], [64709, 1, "\u0643\u062D"], [64710, 1, "\u0643\u062E"], [64711, 1, "\u0643\u0644"], [64712, 1, "\u0643\u0645"], [64713, 1, "\u0644\u062C"], [64714, 1, "\u0644\u062D"], [64715, 1, "\u0644\u062E"], [64716, 1, "\u0644\u0645"], [64717, 1, "\u0644\u0647"], [64718, 1, "\u0645\u062C"], [64719, 1, "\u0645\u062D"], [64720, 1, "\u0645\u062E"], [64721, 1, "\u0645\u0645"], [64722, 1, "\u0646\u062C"], [64723, 1, "\u0646\u062D"], [64724, 1, "\u0646\u062E"], [64725, 1, "\u0646\u0645"], [64726, 1, "\u0646\u0647"], [64727, 1, "\u0647\u062C"], [64728, 1, "\u0647\u0645"], [64729, 1, "\u0647\u0670"], [64730, 1, "\u064A\u062C"], [64731, 1, "\u064A\u062D"], [64732, 1, "\u064A\u062E"], [64733, 1, "\u064A\u0645"], [64734, 1, "\u064A\u0647"], [64735, 1, "\u0626\u0645"], [64736, 1, "\u0626\u0647"], [64737, 1, "\u0628\u0645"], [64738, 1, "\u0628\u0647"], [64739, 1, "\u062A\u0645"], [64740, 1, "\u062A\u0647"], [64741, 1, "\u062B\u0645"], [64742, 1, "\u062B\u0647"], [64743, 1, "\u0633\u0645"], [64744, 1, "\u0633\u0647"], [64745, 1, "\u0634\u0645"], [64746, 1, "\u0634\u0647"], [64747, 1, "\u0643\u0644"], [64748, 1, "\u0643\u0645"], [64749, 1, "\u0644\u0645"], [64750, 1, "\u0646\u0645"], [64751, 1, "\u0646\u0647"], [64752, 1, "\u064A\u0645"], [64753, 1, "\u064A\u0647"], [64754, 1, "\u0640\u064E\u0651"], [64755, 1, "\u0640\u064F\u0651"], [64756, 1, "\u0640\u0650\u0651"], [64757, 1, "\u0637\u0649"], [64758, 1, "\u0637\u064A"], [64759, 1, "\u0639\u0649"], [64760, 1, "\u0639\u064A"], [64761, 1, "\u063A\u0649"], [64762, 1, "\u063A\u064A"], [64763, 1, "\u0633\u0649"], [64764, 1, "\u0633\u064A"], [64765, 1, "\u0634\u0649"], [64766, 1, "\u0634\u064A"], [64767, 1, "\u062D\u0649"], [64768, 1, "\u062D\u064A"], [64769, 1, "\u062C\u0649"], [64770, 1, "\u062C\u064A"], [64771, 1, "\u062E\u0649"], [64772, 1, "\u062E\u064A"], [64773, 1, "\u0635\u0649"], [64774, 1, "\u0635\u064A"], [64775, 1, "\u0636\u0649"], [64776, 1, "\u0636\u064A"], [64777, 1, "\u0634\u062C"], [64778, 1, "\u0634\u062D"], [64779, 1, "\u0634\u062E"], [64780, 1, "\u0634\u0645"], [64781, 1, "\u0634\u0631"], [64782, 1, "\u0633\u0631"], [64783, 1, "\u0635\u0631"], [64784, 1, "\u0636\u0631"], [64785, 1, "\u0637\u0649"], [64786, 1, "\u0637\u064A"], [64787, 1, "\u0639\u0649"], [64788, 1, "\u0639\u064A"], [64789, 1, "\u063A\u0649"], [64790, 1, "\u063A\u064A"], [64791, 1, "\u0633\u0649"], [64792, 1, "\u0633\u064A"], [64793, 1, "\u0634\u0649"], [64794, 1, "\u0634\u064A"], [64795, 1, "\u062D\u0649"], [64796, 1, "\u062D\u064A"], [64797, 1, "\u062C\u0649"], [64798, 1, "\u062C\u064A"], [64799, 1, "\u062E\u0649"], [64800, 1, "\u062E\u064A"], [64801, 1, "\u0635\u0649"], [64802, 1, "\u0635\u064A"], [64803, 1, "\u0636\u0649"], [64804, 1, "\u0636\u064A"], [64805, 1, "\u0634\u062C"], [64806, 1, "\u0634\u062D"], [64807, 1, "\u0634\u062E"], [64808, 1, "\u0634\u0645"], [64809, 1, "\u0634\u0631"], [64810, 1, "\u0633\u0631"], [64811, 1, "\u0635\u0631"], [64812, 1, "\u0636\u0631"], [64813, 1, "\u0634\u062C"], [64814, 1, "\u0634\u062D"], [64815, 1, "\u0634\u062E"], [64816, 1, "\u0634\u0645"], [64817, 1, "\u0633\u0647"], [64818, 1, "\u0634\u0647"], [64819, 1, "\u0637\u0645"], [64820, 1, "\u0633\u062C"], [64821, 1, "\u0633\u062D"], [64822, 1, "\u0633\u062E"], [64823, 1, "\u0634\u062C"], [64824, 1, "\u0634\u062D"], [64825, 1, "\u0634\u062E"], [64826, 1, "\u0637\u0645"], [64827, 1, "\u0638\u0645"], [[64828, 64829], 1, "\u0627\u064B"], [[64830, 64831], 2], [[64832, 64847], 2], [64848, 1, "\u062A\u062C\u0645"], [[64849, 64850], 1, "\u062A\u062D\u062C"], [64851, 1, "\u062A\u062D\u0645"], [64852, 1, "\u062A\u062E\u0645"], [64853, 1, "\u062A\u0645\u062C"], [64854, 1, "\u062A\u0645\u062D"], [64855, 1, "\u062A\u0645\u062E"], [[64856, 64857], 1, "\u062C\u0645\u062D"], [64858, 1, "\u062D\u0645\u064A"], [64859, 1, "\u062D\u0645\u0649"], [64860, 1, "\u0633\u062D\u062C"], [64861, 1, "\u0633\u062C\u062D"], [64862, 1, "\u0633\u062C\u0649"], [[64863, 64864], 1, "\u0633\u0645\u062D"], [64865, 1, "\u0633\u0645\u062C"], [[64866, 64867], 1, "\u0633\u0645\u0645"], [[64868, 64869], 1, "\u0635\u062D\u062D"], [64870, 1, "\u0635\u0645\u0645"], [[64871, 64872], 1, "\u0634\u062D\u0645"], [64873, 1, "\u0634\u062C\u064A"], [[64874, 64875], 1, "\u0634\u0645\u062E"], [[64876, 64877], 1, "\u0634\u0645\u0645"], [64878, 1, "\u0636\u062D\u0649"], [[64879, 64880], 1, "\u0636\u062E\u0645"], [[64881, 64882], 1, "\u0637\u0645\u062D"], [64883, 1, "\u0637\u0645\u0645"], [64884, 1, "\u0637\u0645\u064A"], [64885, 1, "\u0639\u062C\u0645"], [[64886, 64887], 1, "\u0639\u0645\u0645"], [64888, 1, "\u0639\u0645\u0649"], [64889, 1, "\u063A\u0645\u0645"], [64890, 1, "\u063A\u0645\u064A"], [64891, 1, "\u063A\u0645\u0649"], [[64892, 64893], 1, "\u0641\u062E\u0645"], [64894, 1, "\u0642\u0645\u062D"], [64895, 1, "\u0642\u0645\u0645"], [64896, 1, "\u0644\u062D\u0645"], [64897, 1, "\u0644\u062D\u064A"], [64898, 1, "\u0644\u062D\u0649"], [[64899, 64900], 1, "\u0644\u062C\u062C"], [[64901, 64902], 1, "\u0644\u062E\u0645"], [[64903, 64904], 1, "\u0644\u0645\u062D"], [64905, 1, "\u0645\u062D\u062C"], [64906, 1, "\u0645\u062D\u0645"], [64907, 1, "\u0645\u062D\u064A"], [64908, 1, "\u0645\u062C\u062D"], [64909, 1, "\u0645\u062C\u0645"], [64910, 1, "\u0645\u062E\u062C"], [64911, 1, "\u0645\u062E\u0645"], [[64912, 64913], 3], [64914, 1, "\u0645\u062C\u062E"], [64915, 1, "\u0647\u0645\u062C"], [64916, 1, "\u0647\u0645\u0645"], [64917, 1, "\u0646\u062D\u0645"], [64918, 1, "\u0646\u062D\u0649"], [[64919, 64920], 1, "\u0646\u062C\u0645"], [64921, 1, "\u0646\u062C\u0649"], [64922, 1, "\u0646\u0645\u064A"], [64923, 1, "\u0646\u0645\u0649"], [[64924, 64925], 1, "\u064A\u0645\u0645"], [64926, 1, "\u0628\u062E\u064A"], [64927, 1, "\u062A\u062C\u064A"], [64928, 1, "\u062A\u062C\u0649"], [64929, 1, "\u062A\u062E\u064A"], [64930, 1, "\u062A\u062E\u0649"], [64931, 1, "\u062A\u0645\u064A"], [64932, 1, "\u062A\u0645\u0649"], [64933, 1, "\u062C\u0645\u064A"], [64934, 1, "\u062C\u062D\u0649"], [64935, 1, "\u062C\u0645\u0649"], [64936, 1, "\u0633\u062E\u0649"], [64937, 1, "\u0635\u062D\u064A"], [64938, 1, "\u0634\u062D\u064A"], [64939, 1, "\u0636\u062D\u064A"], [64940, 1, "\u0644\u062C\u064A"], [64941, 1, "\u0644\u0645\u064A"], [64942, 1, "\u064A\u062D\u064A"], [64943, 1, "\u064A\u062C\u064A"], [64944, 1, "\u064A\u0645\u064A"], [64945, 1, "\u0645\u0645\u064A"], [64946, 1, "\u0642\u0645\u064A"], [64947, 1, "\u0646\u062D\u064A"], [64948, 1, "\u0642\u0645\u062D"], [64949, 1, "\u0644\u062D\u0645"], [64950, 1, "\u0639\u0645\u064A"], [64951, 1, "\u0643\u0645\u064A"], [64952, 1, "\u0646\u062C\u062D"], [64953, 1, "\u0645\u062E\u064A"], [64954, 1, "\u0644\u062C\u0645"], [64955, 1, "\u0643\u0645\u0645"], [64956, 1, "\u0644\u062C\u0645"], [64957, 1, "\u0646\u062C\u062D"], [64958, 1, "\u062C\u062D\u064A"], [64959, 1, "\u062D\u062C\u064A"], [64960, 1, "\u0645\u062C\u064A"], [64961, 1, "\u0641\u0645\u064A"], [64962, 1, "\u0628\u062D\u064A"], [64963, 1, "\u0643\u0645\u0645"], [64964, 1, "\u0639\u062C\u0645"], [64965, 1, "\u0635\u0645\u0645"], [64966, 1, "\u0633\u062E\u064A"], [64967, 1, "\u0646\u062C\u064A"], [[64968, 64974], 3], [64975, 2], [[64976, 65007], 3], [65008, 1, "\u0635\u0644\u06D2"], [65009, 1, "\u0642\u0644\u06D2"], [65010, 1, "\u0627\u0644\u0644\u0647"], [65011, 1, "\u0627\u0643\u0628\u0631"], [65012, 1, "\u0645\u062D\u0645\u062F"], [65013, 1, "\u0635\u0644\u0639\u0645"], [65014, 1, "\u0631\u0633\u0648\u0644"], [65015, 1, "\u0639\u0644\u064A\u0647"], [65016, 1, "\u0648\u0633\u0644\u0645"], [65017, 1, "\u0635\u0644\u0649"], [65018, 5, "\u0635\u0644\u0649 \u0627\u0644\u0644\u0647 \u0639\u0644\u064A\u0647 \u0648\u0633\u0644\u0645"], [65019, 5, "\u062C\u0644 \u062C\u0644\u0627\u0644\u0647"], [65020, 1, "\u0631\u06CC\u0627\u0644"], [65021, 2], [[65022, 65023], 2], [[65024, 65039], 7], [65040, 5, ","], [65041, 1, "\u3001"], [65042, 3], [65043, 5, ":"], [65044, 5, ";"], [65045, 5, "!"], [65046, 5, "?"], [65047, 1, "\u3016"], [65048, 1, "\u3017"], [65049, 3], [[65050, 65055], 3], [[65056, 65059], 2], [[65060, 65062], 2], [[65063, 65069], 2], [[65070, 65071], 2], [65072, 3], [65073, 1, "\u2014"], [65074, 1, "\u2013"], [[65075, 65076], 5, "_"], [65077, 5, "("], [65078, 5, ")"], [65079, 5, "{"], [65080, 5, "}"], [65081, 1, "\u3014"], [65082, 1, "\u3015"], [65083, 1, "\u3010"], [65084, 1, "\u3011"], [65085, 1, "\u300A"], [65086, 1, "\u300B"], [65087, 1, "\u3008"], [65088, 1, "\u3009"], [65089, 1, "\u300C"], [65090, 1, "\u300D"], [65091, 1, "\u300E"], [65092, 1, "\u300F"], [[65093, 65094], 2], [65095, 5, "["], [65096, 5, "]"], [[65097, 65100], 5, " \u0305"], [[65101, 65103], 5, "_"], [65104, 5, ","], [65105, 1, "\u3001"], [65106, 3], [65107, 3], [65108, 5, ";"], [65109, 5, ":"], [65110, 5, "?"], [65111, 5, "!"], [65112, 1, "\u2014"], [65113, 5, "("], [65114, 5, ")"], [65115, 5, "{"], [65116, 5, "}"], [65117, 1, "\u3014"], [65118, 1, "\u3015"], [65119, 5, "#"], [65120, 5, "&"], [65121, 5, "*"], [65122, 5, "+"], [65123, 1, "-"], [65124, 5, "<"], [65125, 5, ">"], [65126, 5, "="], [65127, 3], [65128, 5, "\\"], [65129, 5, "$"], [65130, 5, "%"], [65131, 5, "@"], [[65132, 65135], 3], [65136, 5, " \u064B"], [65137, 1, "\u0640\u064B"], [65138, 5, " \u064C"], [65139, 2], [65140, 5, " \u064D"], [65141, 3], [65142, 5, " \u064E"], [65143, 1, "\u0640\u064E"], [65144, 5, " \u064F"], [65145, 1, "\u0640\u064F"], [65146, 5, " \u0650"], [65147, 1, "\u0640\u0650"], [65148, 5, " \u0651"], [65149, 1, "\u0640\u0651"], [65150, 5, " \u0652"], [65151, 1, "\u0640\u0652"], [65152, 1, "\u0621"], [[65153, 65154], 1, "\u0622"], [[65155, 65156], 1, "\u0623"], [[65157, 65158], 1, "\u0624"], [[65159, 65160], 1, "\u0625"], [[65161, 65164], 1, "\u0626"], [[65165, 65166], 1, "\u0627"], [[65167, 65170], 1, "\u0628"], [[65171, 65172], 1, "\u0629"], [[65173, 65176], 1, "\u062A"], [[65177, 65180], 1, "\u062B"], [[65181, 65184], 1, "\u062C"], [[65185, 65188], 1, "\u062D"], [[65189, 65192], 1, "\u062E"], [[65193, 65194], 1, "\u062F"], [[65195, 65196], 1, "\u0630"], [[65197, 65198], 1, "\u0631"], [[65199, 65200], 1, "\u0632"], [[65201, 65204], 1, "\u0633"], [[65205, 65208], 1, "\u0634"], [[65209, 65212], 1, "\u0635"], [[65213, 65216], 1, "\u0636"], [[65217, 65220], 1, "\u0637"], [[65221, 65224], 1, "\u0638"], [[65225, 65228], 1, "\u0639"], [[65229, 65232], 1, "\u063A"], [[65233, 65236], 1, "\u0641"], [[65237, 65240], 1, "\u0642"], [[65241, 65244], 1, "\u0643"], [[65245, 65248], 1, "\u0644"], [[65249, 65252], 1, "\u0645"], [[65253, 65256], 1, "\u0646"], [[65257, 65260], 1, "\u0647"], [[65261, 65262], 1, "\u0648"], [[65263, 65264], 1, "\u0649"], [[65265, 65268], 1, "\u064A"], [[65269, 65270], 1, "\u0644\u0622"], [[65271, 65272], 1, "\u0644\u0623"], [[65273, 65274], 1, "\u0644\u0625"], [[65275, 65276], 1, "\u0644\ua"], [65314, 1, "b"], [65315, 1, "c"], [65316, 1, "d"], [65317, 1, "e"], [65318, 1, "f"], [65319, 1, "g"], [65320, 1, "h"], [65321, 1, "i"], [65322, 1, "j"], [65323, 1, "k"], [65324, 1, "l"], [65325, 1, "m"], [65326, 1, "n"], [65327, 1, "o"], [65328, 1, "p"], [65329, 1, "q"], [65330, 1, "r"], [65331, 1, "s"], [65332, 1, "t"], [65333, 1, "u"], [65334, 1, "v"], [65335, 1, "w"], [65336, 1, "x"], [65337, 1, "y"], [65338, 1, "z"], [65339, 5, "["], [65340, 5, "\\"], [65341, 5, "]"], [65342, 5, "^"], [65343, 5, "_"], [65344, 5, "`"], [65345, 1, "a"], [65346, 1, "b"], [65347, 1, "c"], [65348, 1, "d"], [65349, 1, "e"], [65350, 1, "f"], [65351, 1, "g"], [65352, 1, "h"], [65353, 1, "i"], [65354, 1, "j"], [65355, 1, "k"], [65356, 1, "l"], [65357, 1, "m"], [65358, 1, "n"], [65359, 1, "o"], [65360, 1, "p"], [65361, 1, "q"], [65362, 1, "r"], [65363, 1, "s"], [65364, 1, "t"], [65365, 1, "u"], [65366, 1, "v"], [65367, 1, "w"], [65368, 1, "x"], [65369, 1, "y"], [65370, 1, "z"], [65371, 5, "{"], [65372, 5, "|"], [65373, 5, "}"], [65374, 5, "~"], [65375, 1, "\u2985"], [65376, 1, "\u2986"], [65377, 1, "."], [65378, 1, "\u300C"], [65379, 1, "\u300D"], [65380, 1, "\u3001"], [65381, 1, "\u30FB"], [65382, 1, "\u30F2"], [65383, 1, "\u30A1"], [65384, 1, "\u30A3"], [65385, 1, "\u30A5"], [65386, 1, "\u30A7"], [65387, 1, "\u30A9"], [65388, 1, "\u30E3"], [65389, 1, "\u30E5"], [65390, 1, "\u30E7"], [65391, 1, "\u30C3"], [65392, 1, "\u30FC"], [65393, 1, "\u30A2"], [65394, 1, "\u30A4"], [65395, 1, "\u30A6"], [65396, 1, "\u30A8"], [65397, 1, "\u30AA"], [65398, 1, "\u30AB"], [65399, 1, "\u30AD"], [65400, 1, "\u30AF"], [65401, 1, "\u30B1"], [65402, 1, "\u30B3"], [65403, 1, "\u30B5"], [65404, 1, "\u30B7"], [65405, 1, "\u30B9"], [65406, 1, "\u30BB"], [65407, 1, "\u30BD"], [65408, 1, "\u30BF"], [65409, 1, "\u30C1"], [65410, 1, "\u30C4"], [65411, 1, "\u30C6"], [65412, 1, "\u30C8"], [65413, 1, "\u30CA"], [65414, 1, "\u30CB"], [65415, 1, "\u30CC"], [65416, 1, "\u30CD"], [65417, 1, "\u30CE"], [65418, 1, "\u30CF"], [65419, 1, "\u30D2"], [65420, 1, "\u30D5"], [65421, 1, "\u30D8"], [65422, 1, "\u30DB"], [65423, 1, "\u30DE"], [65424, 1, "\u30DF"], [65425, 1, "\u30E0"], [65426, 1, "\u30E1"], [65427, 1, "\u30E2"], [65428, 1, "\u30E4"], [65429, 1, "\u30E6"], [65430, 1, "\u30E8"], [65431, 1, "\u30E9"], [65432, 1, "\u30EA"], [65433, 1, "\u30EB"], [65434, 1, "\u30EC"], [65435, 1, "\u30ED"], [65436, 1, "\u30EF"], [65437, 1, "\u30F3"], [65438, 1, "\u3099"], [65439, 1, "\u309A"], [65440, 3], [65441, 1, "\u1100"], [65442, 1, "\u1101"], [65443, 1, "\u11AA"], [65444, 1, "\u1102"], [65445, 1, "\u11AC"], [65446, 1, "\u11AD"], [65447, 1, "\u1103"], [65448, 1, "\u1104"], [65449, 1, "\u1105"], [65450, 1, "\u11B0"], [65451, 1, "\u11B1"], [65452, 1, "\u11B2"], [65453, 1, "\u11B3"], [65454, 1, "\u11B4"], [65455, 1, "\u11B5"], [65456, 1, "\u111A"], [65457, 1, "\u1106"], [65458, 1, "\u1107"], [65459, 1, "\u1108"], [65460, 1, "\u1121"], [65461, 1, "\u1109"], [65462, 1, "\u110A"], [65463, 1, "\u110B"], [65464, 1, "\u110C"], [65465, 1, "\u110D"], [65466, 1, "\u110E"], [65467, 1, "\u110F"], [65468, 1, "\u1110"], [65469, 1, "\u1111"], [65470, 1, "\u1112"], [[65471, 65473], 3], [65474, 1, "\u1161"], [65475, 1, "\u1162"], [65476, 1, "\u1163"], [65477, 1, "\u1164"], [65478, 1, "\u1165"], [65479, 1, "\u1166"], [[65480, 65481], 3], [65482, 1, "\u1167"], [65483, 1, "\u1168"], [65484, 1, "\u1169"], [65485, 1, "\u116A"], [65486, 1, "\u116B"], [65487, 1, "\u116C"], [[65488, 65489], 3], [65490, 1, "\u116D"], [65491, 1, "\u116E"], [65492, 1, "\u116F"], [65493, 1, "\u1170"], [65494, 1, "\u1171"], [65495, 1, "\u1172"], [[65496, 65497], 3], [65498, 1, "\u1173"], [65499, 1, "\u1174"], [65500, 1, "\u1175"], [[65501, 65503], 3], [65504, 1, "\xA2"], [65505, 1, "\xA3"], [65506, 1, "\xAC"], [65507, 5, " \u0304"], [65508, 1, "\xA6"], [65509, 1, "\xA5"], [65510, 1, "\u20A9"], [65511, 3], [65512, 1, "\u2502"], [65513, 1, "\u2190"], [65514, 1, "\u2191"], [65515, 1, "\u2192"], [65516, 1, "\u2193"], [65517, 1, "\u25A0"], [65518, 1, "\u25CB"], [[65519, 65528], 3], [[65529, 65531], 3], [65532, 3], [65533, 3], [[65534, 65535], 3], [[65536, 65547], 2], [65548, 3], [[65549, 65574], 2], [65575, 3], [[65576, 65594], 2], [65595, 3], [[65596, 65597], 2], [65598, 3], [[65599, 65613], 2], [[65614, 65615], 3], [[65616, 65629], 2], [[65630, 65663], 3], [[65664, 65786], 2], [[65787, 65791], 3], [[65792, 65794], 2], [[65795, 65798], 3], [[65799, 65843], 2], [[65844, 65846], 3], [[65847, 65855], 2], [[65856, 65930], 2], [[65931, 65932], 2], [[65933, 65934], 2], [65935, 3], [[65936, 65947], 2], [65948, 2], [[65949, 65951], 3], [65952, 2], [[65953, 65999], 3], [[66e3, 66044], 2], [66045, 2], [[66046, 66175], 3], [[66176, 66204], 2], [[66205, 66207], 3], [[66208, 66256], 2], [[66257, 66271], 3], [66272, 2], [[66273, 66299], 2], [[66300, 66303], 3], [[66304, 66334], 2], [66335, 2], [[66336, 66339], 2], [[66340, 66348], 3], [[66349, 66351], 2], [[66352, 66368], 2], [66369, 2], [[66370, 66377], 2], [66378, 2], [[66379, 66383], 3], [[66384, 66426], 2], [[66427, 66431], 3], [[66432, 66461], 2], [66462, 3], [66463, 2], [[66464, 66499], 2], [[66500, 66503], 3], [[66504, 66511], 2], [[66512, 66517], 2], [[66518, 66559], 3], [66560, 1, "\u{10428}"], [66561, 1, "\u{10429}"], [66562, 1, "\u{1042A}"], [66563, 1, "\u{1042B}"], [66564, 1, "\u{1042C}"], [66565, 1, "\u{1042D}"], [66566, 1, "\u{1042E}"], [66567, 1, "\u{1042F}"], [66568, 1, "\u{10430}"], [66569, 1, "\u{10431}"], [66570, 1, "\u{10432}"], [66571, 1, "\u{10433}"], [66572, 1, "\u{10434}"], [66573, 1, "\u{10435}"], [66574, 1, "\u{10436}"], [66575, 1, "\u{10437}"], [66576, 1, "\u{10438}"], [66577, 1, "\u{10439}"], [66578, 1, "\u{1043A}"], [66579, 1, "\u{1043B}"], [66580, 1, "\u{1043C}"], [66581, 1, "\u{1043D}"], [66582, 1, "\u{1043E}"], [66583, 1, "\u{1043F}"], [66584, 1, "\u{10440}"], [66585, 1, "\u{10441}"], [66586, 1, "\u{10442}"], [66587, 1, "\u{10443}"], [66588, 1, "\u{10444}"], [66589, 1, "\u{10445}"], [66590, 1, "\u{10446}"], [66591, 1, "\u{10447}"], [66592, 1, "\u{10448}"], [66593, 1, "\u{10449}"], [66594, 1, "\u{1044A}"], [66595, 1, "\u{1044B}"], [66596, 1, "\u{1044C}"], [66597, 1, "\u{1044D}"], [66598, 1, "\u{1044E}"], [66599, 1, "\u{1044F}"], [[66600, 66637], 2], [[66638, 66717], 2], [[66718, 66719], 3], [[66720, 66729], 2], [[66730, 66735], 3], [66736, 1, "\u{104D8}"], [66737, 1, "\u{104D9}"], [66738, 1, "\u{104DA}"], [66739, 1, "\u{104DB}"], [66740, 1, "\u{104DC}"], [66741, 1, "\u{104DD}"], [66742, 1, "\u{104DE}"], [66743, 1, "\u{104DF}"], [66744, 1, "\u{104E0}"], [66745, 1, "\u{104E1}"], [66746, 1, "\u{104E2}"], [66747, 1, "\u{104E3}"], [66748, 1, "\u{104E4}"], [66749, 1, "\u{104E5}"], [66750, 1, "\u{104E6}"], [66751, 1, "\u{104E7}"], [66752, 1, "\u{104E8}"], [66753, 1, "\u{104E9}"], [66754, 1, "\u{104EA}"], [66755, 1, "\u{104EB}"], [66756, 1, "\u{104EC}"], [66757, 1, "\u{104ED}"], [66758, 1, "\u{104EE}"], [66759, 1, "\u{104EF}"], [66760, 1, "\u{104F0}"], [66761, 1, "\u{104F1}"], [66762, 1, "\u{104F2}"], [66763, 1, "\u{104F3}"], [66764, 1, "\u{104F4}"], [66765, 1, "\u{104F5}"], [66766, 1, "\u{104F6}"], [66767, 1, "\u{104F7}"], [66768, 1, "\u{104F8}"], [66769, 1, "\u{104F9}"], [66770, 1, "\u{104FA}"], [66771, 1, "\u{104FB}"], [[66772, 66775], 3], [[66776, 66811], 2], [[66812, 66815], 3], [[66816, 66855], 2], [[66856, 66863], 3], [[66864, 66915], 2], [[66916, 66926], 3], [66927, 2], [66928, 1, "\u{10597}"], [66929, 1, "\u{10598}"], [66930, 1, "\u{10599}"], [66931, 1, "\u{1059A}"], [66932, 1, "\u{1059B}"], [66933, 1, "\u{1059C}"], [66934, 1, "\u{1059D}"], [66935, 1, "\u{1059E}"], [66936, 1, "\u{1059F}"], [66937, 1, "\u{105A0}"], [66938, 1, "\u{105A1}"], [66939, 3], [66940, 1, "\u{105A3}"], [66941, 1, "\u{105A4}"], [66942, 1, "\u{105A5}"], [66943, 1, "\u{105A6}"], [66944, 1, "\u{105A7}"], [66945, 1, "\u{105A8}"], [66946, 1, "\u{105A9}"], [66947, 1, "\u{105AA}"], [66948, 1, "\u{105AB}"], [66949, 1, "\u{105AC}"], [66950, 1, "\u{105AD}"], [66951, 1, "\u{105AE}"], [66952, 1, "\u{105AF}"], [66953, 1, "\u{105B0}"], [66954, 1, "\u{105B1}"], [66955, 3], [66956, 1, "\u{105B3}"], [66957, 1, "\u{105B4}"], [66958, 1, "\u{105B5}"], [66959, 1, "\u{105B6}"], [66960, 1, "\u{105B7}"], [66961, 1, "\u{105B8}"], [66962, 1, "\u{105B9}"], [66963, 3], [66964, 1, "\u{105BB}"], [66965, 1, "\u{105BC}"], [66966, 3], [[66967, 66977], 2], [66978, 3], [[66979, 66993], 2], [66994, 3], [[66995, 67001], 2], [67002, 3], [[67003, 67004], 2], [[67005, 67071], 3], [[67072, 67382], 2], [[67383, 67391], 3], [[67392, 67413], 2], [[67414, 67423], 3], [[67424, 67431], 2], [[67432, 67455], 3], [67456, 2], [67457, 1, "\u02D0"], [67458, 1, "\u02D1"], [67459, 1, "\xE6"], [67460, 1, "\u0299"], [67461, 1, "\u0253"], [67462, 3], [67463, 1, "\u02A3"], [67464, 1, "\uAB66"], [67465, 1, "\u02A5"], [67466, 1, "\u02A4"], [67467, 1, "\u0256"], [67468, 1, "\u0257"], [67469, 1, "\u1D91"], [67470, 1, "\u0258"], [67471, 1, "\u025E"], [67472, 1, "\u02A9"], [67473, 1, "\u0264"], [67474, 1, "\u0262"], [67475, 1, "\u0260"], [67476, 1, "\u029B"], [67477, 1, "\u0127"], [67478, 1, "\u029C"], [67479, 1, "\u0267"], [67480, 1, "\u0284"], [67481, 1, "\u02AA"], [67482, 1, "\u02AB"], [67483, 1, "\u026C"], [67484, 1, "\u{1DF04}"], [67485, 1, "\uA78E"], [67486, 1, "\u026E"], [67487, 1, "\u{1DF05}"], [67488, 1, "\u028E"], [67489, 1, "\u{1DF06}"], [67490, 1, "\xF8"], [67491, 1, "\u0276"], [67492, 1, "\u0277"], [67493, 1, "q"], [67494, 1, "\u027A"], [67495, 1, "\u{1DF08}"], [67496, 1, "\u027D"], [67497, 1, "\u027E"], [67498, 1, "\u0280"], [67499, 1, "\u02A8"], [67500, 1, "\u02A6"], [67501, 1, "\uAB67"], [67502, 1, "\u02A7"], [67503, 1, "\u0288"], [67504, 1, "\u2C71"], [67505, 3], [67506, 1, "\u028F"], [67507, 1, "\u02A1"], [67508, 1, "\u02A2"], [67509, 1, "\u0298"], [67510, 1, "\u01C0"], [67511, 1, "\u01C1"], [67512, 1, "\u01C2"], [67513, 1, "\u{1DF0A}"], [67514, 1, "\u{1DF1E}"], [[67515, 67583], 3], [[67584, 67589], 2], [[67590, 67591], 3], [67592, 2], [67593, 3], [[67594, 67637], 2], [67638, 3], [[67639, 67640], 2], [[67641, 67643], 3], [67644, 2], [[67645, 67646], 3], [67647, 2], [[67648, 67669], 2], [67670, 3], [[67671, 67679], 2], [[67680, 67702], 2], [[67703, 67711], 2], [[67712, 67742], 2], [[67743, 67750], 3], [[67751, 67759], 2], [[67760, 67807], 3], [[67808, 67826], 2], [67827, 3], [[67828, 67829], 2], [[67830, 67834], 3], [[67835, 67839], 2], [[67840, 67861], 2], [[67862, 67865], 2], [[67866, 67867], 2], [[67868, 67870], 3], [67871, 2], [[67872, 67897], 2], [[67898, 67902], 3], [67903, 2], [[67904, 67967], 3], [[67968, 68023], 2], [[68024, 68027], 3], [[68028, 68029], 2], [[68030, 68031], 2], [[68032, 68047], 2], [[68048, 68049], 3], [[68050, 68095], 2], [[68096, 68099], 2], [68100, 3], [[68101, 68102], 2], [[68103, 68107], 3], [[68108, 68115], 2], [68116, 3], [[68117, 68119], 2], [68120, 3], [[68121, 68147], 2], [[68148, 68149], 2], [[68150, 68151], 3], [[68152, 68154], 2], [[68155, 68158], 3], [68159, 2], [[68160, 68167], 2], [68168, 2], [[68169, 68175], 3], [[68176, 68184], 2], [[68185, 68191], 3], [[68192, 68220], 2], [[68221, 68223], 2], [[68224, 68252], 2], [[68253, 68255], 2], [[68256, 68287], 3], [[68288, 68295], 2], [68296, 2], [[68297, 68326], 2], [[68327, 68330], 3], [[68331, 68342], 2], [[68343, 68351], 3], [[68352, 68405], 2], [[68406, 68408], 3], [[68409, 68415], 2], [[68416, 68437], 2], [[68438, 68439], 3], [[68440, 68447], 2], [[68448, 68466], 2], [[68467, 68471], 3], [[68472, 68479], 2], [[68480, 68497], 2], [[68498, 68504], 3], [[68505, 68508], 2], [[68509, 68520], 3], [[68521, 68527], 2], [[68528, 68607], 3], [[68608, 68680], 2], [[68681, 68735], 3], [68736, 1, "\u{10CC0}"], [68737, 1, "\u{10CC1}"], [68738, 1, "\u{10CC2}"], [68739, 1, "\u{10CC3}"], [68740, 1, "\u{10CC4}"], [68741, 1, "\u{10CC5}"], [68742, 1, "\u{10CC6}"], [68743, 1, "\u{10CC7}"], [68744, 1, "\u{10CC8}"], [68745, 1, "\u{10CC9}"], [68746, 1, "\u{10CCA}"], [68747, 1, "\u{10CCB}"], [68748, 1, "\u{10CCC}"], [68749, 1, "\u{10CCD}"], [68750, 1, "\u{10CCE}"], [68751, 1, "\u{10CCF}"], [68752, 1, "\u{10CD0}"], [68753, 1, "\u{10CD1}"], [68754, 1, "\u{10CD2}"], [68755, 1, "\u{10CD3}"], [68756, 1, "\u{10CD4}"], [68757, 1, "\u{10CD5}"], [68758, 1, "\u{10CD6}"], [68759, 1, "\u{10CD7}"], [68760, 1, "\u{10CD8}"], [68761, 1, "\u{10CD9}"], [68762, 1, "\u{10CDA}"], [68763, 1, "\u{10CDB}"], [68764, 1, "\u{10CDC}"], [68765, 1, "\u{10CDD}"], [68766, 1, "\u{10CDE}"], [68767, 1, "\u{10CDF}"], [68768, 1, "\u{10CE0}"], [68769, 1, "\u{10CE1}"], [68770, 1, "\u{10CE2}"], [68771, 1, "\u{10CE3}"], [68772, 1, "\u{10CE4}"], [68773, 1, "\u{10CE5}"], [68774, 1, "\u{10CE6}"], [68775, 1, "\u{10CE7}"], [68776, 1, "\u{10CE8}"], [68777, 1, "\u{10CE9}"], [68778, 1, "\u{10CEA}"], [68779, 1, "\u{10CEB}"], [68780, 1, "\u{10CEC}"], [68781, 1, "\u{10CED}"], [68782, 1, "\u{10CEE}"], [68783, 1, "\u{10CEF}"], [68784, 1, "\u{10CF0}"], [68785, 1, "\u{10CF1}"], [68786, 1, "\u{10CF2}"], [[68787, 68799], 3], [[68800, 68850], 2], [[68851, 68857], 3], [[68858, 68863], 2], [[68864, 68903], 2], [[68904, 68911], 3], [[68912, 68921], 2], [[68922, 69215], 3], [[69216, 69246], 2], [69247, 3], [[69248, 69289], 2], [69290, 3], [[69291, 69292], 2], [69293, 2], [[69294, 69295], 3], [[69296, 69297], 2], [[69298, 69372], 3], [[69373, 69375], 2], [[69376, 69404], 2], [[69405, 69414], 2], [69415, 2], [[69416, 69423], 3], [[69424, 69456], 2], [[69457, 69465], 2], [[69466, 69487], 3], [[69488, 69509], 2], [[69510, 69513], 2], [[69514, 69551], 3], [[69552, 69572], 2], [[69573, 69579], 2], [[69580, 69599], 3], [[69600, 69622], 2], [[69623, 69631], 3], [[69632, 69702], 2], [[69703, 69709], 2], [[69710, 69713], 3], [[69714, 69733], 2], [[69734, 69743], 2], [[69744, 69749], 2], [[69750, 69758], 3], [69759, 2], [[69760, 69818], 2], [[69819, 69820], 2], [69821, 3], [[69822, 69825], 2], [69826, 2], [[69827, 69836], 3], [69837, 3], [[69838, 69839], 3], [[69840, 69864], 2], [[69865, 69871], 3], [[69872, 69881], 2], [[69882, 69887], 3], [[69888, 69940], 2], [69941, 3], [[69942, 69951], 2], [[69952, 69955], 2], [[69956, 69958], 2], [69959, 2], [[69960, 69967], 3], [[69968, 70003], 2], [[70004, 70005], 2], [70006, 2], [[70007, 70015], 3], [[70016, 70084], 2], [[70085, 70088], 2], [[70089, 70092], 2], [70093, 2], [[70094, 70095], 2], [[70096, 70105], 2], [70106, 2], [70107, 2], [70108, 2], [[70109, 70111], 2], [70112, 3], [[70113, 70132], 2], [[70133, 70143], 3], [[70144, 70161], 2], [70162, 3], [[70163, 70199], 2], [[70200, 70205], 2], [70206, 2], [[70207, 70209], 2], [[70210, 70271], 3], [[70272, 70278], 2], [70279, 3], [70280, 2], [70281, 3], [[70282, 70285], 2], [70286, 3], [[70287, 70301], 2], [70302, 3], [[70303, 70312], 2], [70313, 2], [[70314, 70319], 3], [[70320, 70378], 2], [[70379, 70383], 3], [[70384, 70393], 2], [[70394, 70399], 3], [70400, 2], [[70401, 70403], 2], [70404, 3], [[70405, 70412], 2], [[70413, 70414], 3], [[70415, 70416], 2], [[70417, 70418], 3], [[70419, 70440], 2], [70441, 3], [[70442, 70448], 2], [70449, 3], [[70450, 70451], 2], [70452, 3], [[70453, 70457], 2], [70458, 3], [70459, 2], [[70460, 70468], 2], [[70469, 70470], 3], [[70471, 70472], 2], [[70473, 70474], 3], [[70475, 70477], 2], [[70478, 70479], 3], [70480, 2], [[70481, 70486], 3], [70487, 2], [[70488, 70492], 3], [[70493, 70499], 2], [[70500, 70501], 3], [[70502, 70508], 2], [[70509, 70511], 3], [[70512, 70516], 2], [[70517, 70655], 3], [[70656, 70730], 2], [[70731, 70735], 2], [[70736, 70745], 2], [70746, 2], [70747, 2], [70748, 3], [70749, 2], [70750, 2], [70751, 2], [[70752, 70753], 2], [[70754, 70783], 3], [[70784, 70853], 2], [70854, 2], [70855, 2], [[70856, 70863], 3], [[70864, 70873], 2], [[70874, 71039], 3], [[71040, 71093], 2], [[71094, 71095], 3], [[71096, 71104], 2], [[71105, 71113], 2], [[71114, 71127], 2], [[71128, 71133], 2], [[71134, 71167], 3], [[71168, 71232], 2], [[71233, 71235], 2], [71236, 2], [[71237, 71247], 3], [[71248, 71257], 2], [[71258, 71263], 3], [[71264, 71276], 2], [[71277, 71295], 3], [[71296, 71351], 2], [71352, 2], [71353, 2], [[71354, 71359], 3], [[71360, 71369], 2], [[71370, 71423], 3], [[71424, 71449], 2], [71450, 2], [[71451, 71452], 3], [[71453, 71467], 2], [[71468, 71471], 3], [[71472, 71481], 2], [[71482, 71487], 2], [[71488, 71494], 2], [[71495, 71679], 3], [[71680, 71738], 2], [71739, 2], [[71740, 71839], 3], [71840, 1, "\u{118C0}"], [71841, 1, "\u{118C1}"], [71842, 1, "\u{118C2}"], [71843, 1, "\u{118C3}"], [71844, 1, "\u{118C4}"], [71845, 1, "\u{118C5}"], [71846, 1, "\u{118C6}"], [71847, 1, "\u{118C7}"], [71848, 1, "\u{118C8}"], [71849, 1, "\u{118C9}"], [71850, 1, "\u{118CA}"], [71851, 1, "\u{118CB}"], [71852, 1, "\u{118CC}"], [71853, 1, "\u{118CD}"], [71854, 1, "\u{118CE}"], [71855, 1, "\u{118CF}"], [71856, 1, "\u{118D0}"], [71857, 1, "\u{118D1}"], [71858, 1, "\u{118D2}"], [71859, 1, "\u{118D3}"], [71860, 1, "\u{118D4}"], [71861, 1, "\u{118D5}"], [71862, 1, "\u{118D6}"], [71863, 1, "\u{118D7}"], [71864, 1, "\u{118D8}"], [71865, 1, "\u{118D9}"], [71866, 1, "\u{118DA}"], [71867, 1, "\u{118DB}"], [71868, 1, "\u{118DC}"], [71869, 1, "\u{118DD}"], [71870, 1, "\u{118DE}"], [71871, 1, "\u{118DF}"], [[71872, 71913], 2], [[71914, 71922], 2], [[71923, 71934], 3], [71935, 2], [[71936, 71942], 2], [[71943, 71944], 3], [71945, 2], [[71946, 71947], 3], [[71948, 71955], 2], [71956, 3], [[71957, 71958], 2], [71959, 3], [[71960, 71989], 2], [71990, 3], [[71991, 71992], 2], [[71993, 71994], 3], [[71995, 72003], 2], [[72004, 72006], 2], [[72007, 72015], 3], [[72016, 72025], 2], [[72026, 72095], 3], [[72096, 72103], 2], [[72104, 72105], 3], [[72106, 72151], 2], [[72152, 72153], 3], [[72154, 72161], 2], [72162, 2], [[72163, 72164], 2], [[72165, 72191], 3], [[72192, 72254], 2], [[72255, 72262], 2], [72263, 2], [[72264, 72271], 3], [[72272, 72323], 2], [[72324, 72325], 2], [[72326, 72345], 2], [[72346, 72348], 2], [72349, 2], [[72350, 72354], 2], [[72355, 72367], 3], [[72368, 72383], 2], [[72384, 72440], 2], [[72441, 72447], 3], [[72448, 72457], 2], [[72458, 72703], 3], [[72704, 72712], 2], [72713, 3], [[72714, 72758], 2], [72759, 3], [[72760, 72768], 2], [[72769, 72773], 2], [[72774, 72783], 3], [[72784, 72793], 2], [[72794, 72812], 2], [[72813, 72815], 3], [[72816, 72817], 2], [[72818, 72847], 2], [[72848, 72849], 3], [[72850, 72871], 2], [72872, 3], [[72873, 72886], 2], [[72887, 72959], 3], [[72960, 72966], 2], [72967, 3], [[72968, 72969], 2], [72970, 3], [[72971, 73014], 2], [[73015, 73017], 3], [73018, 2], [73019, 3], [[73020, 73021], 2], [73022, 3], [[73023, 73031], 2], [[73032, 73039], 3], [[73040, 73049], 2], [[73050, 73055], 3], [[73056, 73061], 2], [73062, 3], [[73063, 73064], 2], [73065, 3], [[73066, 73102], 2], [73103, 3], [[73104, 73105], 2], [73106, 3], [[73107, 73112], 2], [[73113, 73119], 3], [[73120, 73129], 2], [[73130, 73439], 3], [[73440, 73462], 2], [[73463, 73464], 2], [[73465, 73471], 3], [[73472, 73488], 2], [73489, 3], [[73490, 73530], 2], [[73531, 73533], 3], [[73534, 73538], 2], [[73539, 73551], 2], [[73552, 73561], 2], [[73562, 73647], 3], [73648, 2], [[73649, 73663], 3], [[73664, 73713], 2], [[73714, 73726], 3], [73727, 2], [[73728, 74606], 2], [[74607, 74648], 2], [74649, 2], [[74650, 74751], 3], [[74752, 74850], 2], [[74851, 74862], 2], [74863, 3], [[74864, 74867], 2], [74868, 2], [[74869, 74879], 3], [[74880, 75075], 2], [[75076, 77711], 3], [[77712, 77808], 2], [[77809, 77810], 2], [[77811, 77823], 3], [[77824, 78894], 2], [78895, 2], [[78896, 78904], 3], [[78905, 78911], 3], [[78912, 78933], 2], [[78934, 82943], 3], [[82944, 83526], 2], [[83527, 92159], 3], [[92160, 92728], 2], [[92729, 92735], 3], [[92736, 92766], 2], [92767, 3], [[92768, 92777], 2], [[92778, 92781], 3], [[92782, 92783], 2], [[92784, 92862], 2], [92863, 3], [[92864, 92873], 2], [[92874, 92879], 3], [[92880, 92909], 2], [[92910, 92911], 3], [[92912, 92916], 2], [92917, 2], [[92918, 92927], 3], [[92928, 92982], 2], [[92983, 92991], 2], [[92992, 92995], 2], [[92996, 92997], 2], [[92998, 93007], 3], [[93008, 93017], 2], [93018, 3], [[93019, 93025], 2], [93026, 3], [[93027, 93047], 2], [[93048, 93052], 3], [[93053, 93071], 2], [[93072, 93759], 3], [93760, 1, "\u{16E60}"], [93761, 1, "\u{16E61}"], [93762, 1, "\u{16E62}"], [93763, 1, "\u{16E63}"], [93764, 1, "\u{16E64}"], [93765, 1, "\u{16E65}"], [93766, 1, "\u{16E66}"], [93767, 1, "\u{16E67}"], [93768, 1, "\u{16E68}"], [93769, 1, "\u{16E69}"], [93770, 1, "\u{16E6A}"], [93771, 1, "\u{16E6B}"], [93772, 1, "\u{16E6C}"], [93773, 1, "\u{16E6D}"], [93774, 1, "\u{16E6E}"], [93775, 1, "\u{16E6F}"], [93776, 1, "\u{16E70}"], [93777, 1, "\u{16E71}"], [93778, 1, "\u{16E72}"], [93779, 1, "\u{16E73}"], [93780, 1, "\u{16E74}"], [93781, 1, "\u{16E75}"], [93782, 1, "\u{16E76}"], [93783, 1, "\u{16E77}"], [93784, 1, "\u{16E78}"], [93785, 1, "\u{16E79}"], [93786, 1, "\u{16E7A}"], [93787, 1, "\u{16E7B}"], [93788, 1, "\u{16E7C}"], [93789, 1, "\u{16E7D}"], [93790, 1, "\u{16E7E}"], [93791, 1, "\u{16E7F}"], [[93792, 93823], 2], [[93824, 93850], 2], [[93851, 93951], 3], [[93952, 94020], 2], [[94021, 94026], 2], [[94027, 94030], 3], [94031, 2], [[94032, 94078], 2], [[94079, 94087], 2], [[94088, 94094], 3], [[94095, 94111], 2], [[94112, 94175], 3], [94176, 2], [94177, 2], [94178, 2], [94179, 2], [94180, 2], [[94181, 94191], 3], [[94192, 94193], 2], [[94194, 94207], 3], [[94208, 100332], 2], [[100333, 100337], 2], [[100338, 100343], 2], [[100344, 100351], 3], [[100352, 101106], 2], [[101107, 101589], 2], [[101590, 101631], 3], [[101632, 101640], 2], [[101641, 110575], 3], [[110576, 110579], 2], [110580, 3], [[110581, 110587], 2], [110588, 3], [[110589, 110590], 2], [110591, 3], [[110592, 110593], 2], [[110594, 110878], 2], [[110879, 110882], 2], [[110883, 110897], 3], [110898, 2], [[110899, 110927], 3], [[110928, 110930], 2], [[110931, 110932], 3], [110933, 2], [[110934, 110947], 3], [[110948, 110951], 2], [[110952, 110959], 3], [[110960, 111355], 2], [[111356, 113663], 3], [[113664, 113770], 2], [[113771, 113775], 3], [[113776, 113788], 2], [[113789, 113791], 3], [[113792, 113800], 2], [[113801, 113807], 3], [[113808, 113817], 2], [[113818, 113819], 3], [113820, 2], [[113821, 113822], 2], [113823, 2], [[113824, 113827], 7], [[113828, 118527], 3], [[118528, 118573], 2], [[118574, 118575], 3], [[118576, 118598], 2], [[118599, 118607], 3], [[118608, 118723], 2], [[118724, 118783], 3], [[118784, 119029], 2], [[119030, 119039], 3], [[119040, 119078], 2], [[119079, 119080], 3], [119081, 2], [[119082, 119133], 2], [119134, 1, "\u{1D157}\u{1D165}"], [119135, 1, "\u{1D158}\u{1D165}"], [119136, 1, "\u{1D158}\u{1D165}\u{1D16E}"], [119137, 1, "\u{1D158}\u{1D165}\u{1D16F}"], [119138, 1, "\u{1D158}\u{1D165}\u{1D170}"], [119139, 1, "\u{1D158}\u{1D165}\u{1D171}"], [119140, 1, "\u{1D158}\u{1D165}\u{1D172}"], [[119141, 119154], 2], [[119155, 119162], 3], [[119163, 119226], 2], [119227, 1, "\u{1D1B9}\u{1D165}"], [119228, 1, "\u{1D1BA}\u{1D165}"], [119229, 1, "\u{1D1B9}\u{1D165}\u{1D16E}"], [119230, 1, "\u{1D1BA}\u{1D165}\u{1D16E}"], [119231, 1, "\u{1D1B9}\u{1D165}\u{1D16F}"], [119232, 1, "\u{1D1BA}\u{1D165}\u{1D16F}"], [[119233, 119261], 2], [[119262, 119272], 2], [[119273, 119274], 2], [[119275, 119295], 3], [[119296, 119365], 2], [[119366, 119487], 3], [[119488, 119507], 2], [[119508, 119519], 3], [[119520, 119539], 2], [[119540, 119551], 3], [[119552, 119638], 2], [[119639, 119647], 3], [[119648, 119665], 2], [[119666, 119672], 2], [[119673, 119807], 3], [119808, 1, "a"], [119809, 1, "b"], [119810, 1, "c"], [119811, 1, "d"], [119812, 1, "e"], [119813, 1, "f"], [119814, 1, "g"], [119815, 1, "h"], [119816, 1, "i"], [119817, 1, "j"], [119818, 1, "k"], [119819, 1, "l"], [119820, 1, "m"], [119821, 1, "n"], [119822, 1, "o"], [119823, 1, "p"], [119824, 1, "q"], [119825, 1, "r"], [119826, 1, "s"], [119827, 1, "t"], [119828, 1, "u"], [119829, 1, "v"], [119830, 1, "w"], [119831, 1, "x"], [119832, 1, "y"], [119833, 1, "z"], [119834, 1, "a"], [119835, 1, "b"], [119836, 1, "c"], [119837, 1, "d"], [119838, 1, "e"], [119839, 1, "f"], [119840, 1, "g"], [119841, 1, "h"], [119842, 1, "i"], [119843, 1, "j"], [119844, 1, "k"], [119845, 1, "l"], [119846, 1, "m"], [119847, 1, "n"], [119848, 1, "o"], [119849, 1, "p"], [119850, 1, "q"], [119851, 1, "r"], [119852, 1, "s"], [119853, 1, "t"], [119854, 1, "u"], [119855, 1, "v"], [119856, 1, "w"], [119857, 1, "x"], [119858, 1, "y"], [119859, 1, "z"], [119860, 1, "a"], [119861, 1, "b"], [119862, 1, "c"], [119863, 1, "d"], [119864, 1, "e"], [119865, 1, "f"], [119866, 1, "g"], [119867, 1, "h"], [119868, 1, "i"], [119869, 1, "j"], [119870, 1, "k"], [119871, 1, "l"], [119872, 1, "m"], [119873, 1, "n"], [119874, 1, "o"], [119875, 1, "p"], [119876, 1, "q"], [119877, 1, "r"], [119878, 1, "s"], [119879, 1, "t"], [119880, 1, "u"], [119881, 1, "v"], [119882, 1, "w"], [119883, 1, "x"], [119884, 1, "y"], [119885, 1, "z"], [119886, 1, "a"], [119887, 1, "b"], [119888, 1, "c"], [119889, 1, "d"], [119890, 1, "e"], [119891, 1, "f"], [119892, 1, "g"], [119893, 3], [119894, 1, "i"], [119895, 1, "j"], [119896, 1, "k"], [119897, 1, "l"], [119898, 1, "m"], [119899, 1, "n"], [119900, 1, "o"], [119901, 1, "p"], [119902, 1, "q"], [119903, 1, "r"], [119904, 1, "s"], [119905, 1, "t"], [119906, 1, "u"], [119907, 1, "v"], [119908, 1, "w"], [119909, 1, "x"], [119910, 1, "y"], [119911, 1, "z"], [119912, 1, "a"], [119913, 1, "b"], [119914, 1, "c"], [119915, 1, "d"], [119916, 1, "e"], [119917, 1, "f"], [119918, 1, "g"], [119919, 1, "h"], [119920, 1, "i"], [119921, 1, "j"], [119922, 1, "k"], [119923, 1, "l"], [119924, 1, "m"], [119925, 1, "n"], [119926, 1, "o"], [119927, 1, "p"], [119928, 1, "q"], [119929, 1, "r"], [119930, 1, "s"], [119931, 1, "t"], [119932, 1, "u"], [119933, 1, "v"], [119934, 1, "w"], [119935, 1, "x"], [119936, 1, "y"], [119937, 1, "z"], [119938, 1, "a"], [119939, 1, "b"], [119940, 1, "c"], [119941, 1, "d"], [119942, 1, "e"], [119943, 1, "f"], [119944, 1, "g"], [119945, 1, "h"], [119946, 1, "i"], [119947, 1, "j"], [119948, 1, "k"], [119949, 1, "l"], [119950, 1, "m"], [119951, 1, "n"], [119952, 1, "o"], [119953, 1, "p"], [119954, 1, "q"], [119955, 1, "r"], [119956, 1, "s"], [119957, 1, "t"], [119958, 1, "u"], [119959, 1, "v"], [119960, 1, "w"], [119961, 1, "x"], [119962, 1, "y"], [119963, 1, "z"], [119964, 1, "a"], [119965, 3], [119966, 1, "c"], [119967, 1, "d"], [[119968, 119969], 3], [119970, 1, "g"], [[119971, 119972], 3], [119973, 1, "j"], [119974, 1, "k"], [[119975, 119976], 3], [119977, 1, "n"], [119978, 1, "o"], [119979, 1, "p"], [119980, 1, "q"], [119981, 3], [119982, 1, "s"], [119983, 1, "t"], [119984, 1, "u"], [119985, 1, "v"], [119986, 1, "w"], [119987, 1, "x"], [119988, 1, "y"], [119989, 1, "z"], [119990, 1, "a"], [119991, 1, "b"], [119992, 1, "c"], [119993, 1, "d"], [119994, 3], [119995, 1, "f"], [119996, 3], [119997, 1, "h"], [119998, 1, "i"], [119999, 1, "j"], [12e4, 1, "k"], [120001, 1, "l"], [120002, 1, "m"], [120003, 1, "n"], [120004, 3], [120005, 1, "p"], [120006, 1, "q"], [120007, 1, "r"], [120008, 1, "s"], [120009, 1, "t"], [120010, 1, "u"], [120011, 1, "v"], [120012, 1, "w"], [120013, 1, "x"], [120014, 1, "y"], [120015, 1, "z"], [120016, 1, "a"], [120017, 1, "b"], [120018, 1, "c"], [120019, 1, "d"], [120020, 1, "e"], [120021, 1, "f"], [120022, 1, "g"], [120023, 1, "h"], [120024, 1, "i"], [120025, 1, "j"], [120026, 1, "k"], [120027, 1, "l"], [120028, 1, "m"], [120029, 1, "n"], [120030, 1, "o"], [120031, 1, "p"], [120032, 1, "q"], [120033, 1, "r"], [120034, 1, "s"], [120035, 1, "t"], [120036, 1, "u"], [120037, 1, "v"], [120038, 1, "w"], [120039, 1, "x"], [120040, 1, "y"], [120041, 1, "z"], [120042, 1, "a"], [120043, 1, "b"], [120044, 1, "c"], [120045, 1, "d"], [120046, 1, "e"], [120047, 1, "f"], [120048, 1, "g"], [120049, 1, "h"], [120050, 1, "i"], [120051, 1, "j"], [120052, 1, "k"], [120053, 1, "l"], [120054, 1, "m"], [120055, 1, "n"], [120056, 1, "o"], [120057, 1, "p"], [120058, 1, "q"], [120059, 1, "r"], [120060, 1, "s"], [120061, 1, "t"], [120062, 1, "u"], [120063, 1, "v"], [120064, 1, "w"], [120065, 1, "x"], [120066, 1, "y"], [120067, 1, "z"], [120068, 1, "a"], [120069, 1, "b"], [120070, 3], [120071, 1, "d"], [120072, 1, "e"], [120073, 1, "f"], [120074, 1, "g"], [[120075, 120076], 3], [120077, 1, "j"], [120078, 1, "k"], [120079, 1, "l"], [120080, 1, "m"], [120081, 1, "n"], [120082, 1, "o"], [120083, 1, "p"], [120084, 1, "q"], [120085, 3], [120086, 1, "s"], [120087, 1, "t"], [120088, 1, "u"], [120089, 1, "v"], [120090, 1, "w"], [120091, 1, "x"], [120092, 1, "y"], [120093, 3], [120094, 1, "a"], [120095, 1, "b"], [120096, 1, "c"], [120097, 1, "d"], [120098, 1, "e"], [120099, 1, "f"], [120100, 1, "g"], [120101, 1, "h"], [120102, 1, "i"], [120103, 1, "j"], [120104, 1, "k"], [120105, 1, "l"], [120106, 1, "m"], [120107, 1, "n"], [120108, 1, "o"], [120109, 1, "p"], [120110, 1, "q"], [120111, 1, "r"], [120112, 1, "s"], [120113, 1, "t"], [120114, 1, "u"], [120115, 1, "v"], [120116, 1, "w"], [120117, 1, "x"], [120118, 1, "y"], [120119, 1, "z"], [120120, 1, "a"], [120121, 1, "b"], [120122, 3], [120123, 1, "d"], [120124, 1, "e"], [120125, 1, "f"], [120126, 1, "g"], [120127, 3], [120128, 1, "i"], [120129, 1, "j"], [120130, 1, "k"], [120131, 1, "l"], [120132, 1, "m"], [120133, 3], [120134, 1, "o"], [[120135, 120137], 3], [120138, 1, "s"], [120139, 1, "t"], [120140, 1, "u"], [120141, 1, "v"], [120142, 1, "w"], [120143, 1, "x"], [120144, 1, "y"], [120145, 3], [120146, 1, "a"], [120147, 1, "b"], [120148, 1, "c"], [120149, 1, "d"], [120150, 1, "e"], [120151, 1, "f"], [120152, 1, "g"], [120153, 1, "h"], [120154, 1, "i"], [120155, 1, "j"], [120156, 1, "k"], [120157, 1, "l"], [120158, 1, "m"], [120159, 1, "n"], [120160, 1, "o"], [120161, 1, "p"], [120162, 1, "q"], [120163, 1, "r"], [120164, 1, "s"], [120165, 1, "t"], [120166, 1, "u"], [120167, 1, "v"], [120168, 1, "w"], [120169, 1, "x"], [120170, 1, "y"], [120171, 1, "z"], [120172, 1, "a"], [120173, 1, "b"], [120174, 1, "c"], [120175, 1, "d"], [120176, 1, "e"], [120177, 1, "f"], [120178, 1, "g"], [120179, 1, "h"], [120180, 1, "i"], [120181, 1, "j"], [120182, 1, "k"], [120183, 1, "l"], [120184, 1, "m"], [120185, 1, "n"], [120186, 1, "o"], [120187, 1, "p"], [120188, 1, "q"], [120189, 1, "r"], [120190, 1, "s"], [120191, 1, "t"], [120192, 1, "u"], [120193, 1, "v"], [120194, 1, "w"], [120195, 1, "x"], [120196, 1, "y"], [120197, 1, "z"], [120198, 1, "a"], [120199, 1, "b"], [120200, 1, "c"], [120201, 1, "d"], [120202, 1, "e"], [120203, 1, "f"], [120204, 1, "g"], [120205, 1, "h"], [120206, 1, "i"], [120207, 1, "j"], [120208, 1, "k"], [120209, 1, "l"], [120210, 1, "m"], [120211, 1, "n"], [120212, 1, "o"], [120213, 1, "p"], [120214, 1, "q"], [120215, 1, "r"], [120216, 1, "s"], [120217, 1, "t"], [120218, 1, "u"], [120219, 1, "v"], [120220, 1, "w"], [120221, 1, "x"], [120222, 1, "y"], [120223, 1, "z"], [120224, 1, "a"], [120225, 1, "b"], [120226, 1, "c"], [120227, 1, "d"], [120228, 1, "e"], [120229, 1, "f"], [120230, 1, "g"], [120231, 1, "h"], [120232, 1, "i"], [120233, 1, "j"], [120234, 1, "k"], [120235, 1, "l"], [120236, 1, "m"], [120237, 1, "n"], [120238, 1, "o"], [120239, 1, "p"], [120240, 1, "q"], [120241, 1, "r"], [120242, 1, "s"], [120243, 1, "t"], [120244, 1, "u"], [120245, 1, "v"], [120246, 1, "w"], [120247, 1, "x"], [120248, 1, "y"], [120249, 1, "z"], [120250, 1, "a"], [120251, 1, "b"], [120252, 1, "c"], [120253, 1, "d"], [120254, 1, "e"], [120255, 1, "f"], [120256, 1, "g"], [120257, 1, "h"], [120258, 1, "i"], [120259, 1, "j"], [120260, 1, "k"], [120261, 1, "l"], [120262, 1, "m"], [120263, 1, "n"], [120264, 1, "o"], [120265, 1, "p"], [120266, 1, "q"], [120267, 1, "r"], [120268, 1, "s"], [120269, 1, "t"], [120270, 1, "u"], [120271, 1, "v"], [120272, 1, "w"], [120273, 1, "x"], [120274, 1, "y"], [120275, 1, "z"], [120276, 1, "a"], [120277, 1, "b"], [120278, 1, "c"], [120279, 1, "d"], [120280, 1, "e"], [120281, 1, "f"], [120282, 1, "g"], [120283, 1, "h"], [120284, 1, "i"], [120285, 1, "j"], [120286, 1, "k"], [120287, 1, "l"], [120288, 1, "m"], [120289, 1, "n"], [120290, 1, "o"], [120291, 1, "p"], [120292, 1, "q"], [120293, 1, "r"], [120294, 1, "s"], [120295, 1, "t"], [120296, 1, "u"], [120297, 1, "v"], [120298, 1, "w"], [120299, 1, "x"], [120300, 1, "y"], [120301, 1, "z"], [120302, 1, "a"], [120303, 1, "b"], [120304, 1, "c"], [120305, 1, "d"], [120306, 1, "e"], [120307, 1, "f"], [120308, 1, "g"], [120309, 1, "h"], [120310, 1, "i"], [120311, 1, "j"], [120312, 1, "k"], [120313, 1, "l"], [120314, 1, "m"], [120315, 1, "n"], [120316, 1, "o"], [120317, 1, "p"], [120318, 1, "q"], [120319, 1, "r"], [120320, 1, "s"], [120321, 1, "t"], [120322, 1, "u"], [120323, 1, "v"], [120324, 1, "w"], [120325, 1, "x"], [120326, 1, "y"], [120327, 1, "z"], [120328, 1, "a"], [120329, 1, "b"], [120330, 1, "c"], [120331, 1, "d"], [120332, 1, "e"], [120333, 1, "f"], [120334, 1, "g"], [120335, 1, "h"], [120336, 1, "i"], [120337, 1, "j"], [120338, 1, "k"], [120339, 1, "l"], [120340, 1, "m"], [120341, 1, "n"], [120342, 1, "o"], [120343, 1, "p"], [120344, 1, "q"], [120345, 1, "r"], [120346, 1, "s"], [120347, 1, "t"], [120348, 1, "u"], [120349, 1, "v"], [120350, 1, "w"], [120351, 1, "x"], [120352, 1, "y"], [120353, 1, "z"], [120354, 1, "a"], [120355, 1, "b"], [120356, 1, "c"], [120357, 1, "d"], [120358, 1, "e"], [120359, 1, "f"], [120360, 1, "g"], [120361, 1, "h"], [120362, 1, "i"], [120363, 1, "j"], [120364, 1, "k"], [120365, 1, "l"], [120366, 1, "m"], [120367, 1, "n"], [120368, 1, "o"], [120369, 1, "p"], [120370, 1, "q"], [120371, 1, "r"], [120372, 1, "s"], [120373, 1, "t"], [120374, 1, "u"], [120375, 1, "v"], [120376, 1, "w"], [120377, 1, "x"], [120378, 1, "y"], [120379, 1, "z"], [120380, 1, "a"], [120381, 1, "b"], [120382, 1, "c"], [120383, 1, "d"], [120384, 1, "e"], [120385, 1, "f"], [120386, 1, "g"], [120387, 1, "h"], [120388, 1, "i"], [120389, 1, "j"], [120390, 1, "k"], [120391, 1, "l"], [120392, 1, "m"], [120393, 1, "n"], [120394, 1, "o"], [120395, 1, "p"], [120396, 1, "q"], [120397, 1, "r"], [120398, 1, "s"], [120399, 1, "t"], [120400, 1, "u"], [120401, 1, "v"], [120402, 1, "w"], [120403, 1, "x"], [120404, 1, "y"], [120405, 1, "z"], [120406, 1, "a"], [120407, 1, "b"], [120408, 1, "c"], [120409, 1, "d"], [120410, 1, "e"], [120411, 1, "f"], [120412, 1, "g"], [120413, 1, "h"], [120414, 1, "i"], [120415, 1, "j"], [120416, 1, "k"], [120417, 1, "l"], [120418, 1, "m"], [120419, 1, "n"], [120420, 1, "o"], [120421, 1, "p"], [120422, 1, "q"], [120423, 1, "r"], [120424, 1, "s"], [120425, 1, "t"], [120426, 1, "u"], [120427, 1, "v"], [120428, 1, "w"], [120429, 1, "x"], [120430, 1, "y"], [120431, 1, "z"], [120432, 1, "a"], [120433, 1, "b"], [120434, 1, "c"], [120435, 1, "d"], [120436, 1, "e"], [120437, 1, "f"], [120438, 1, "g"], [120439, 1, "h"], [120440, 1, "i"], [120441, 1, "j"], [120442, 1, "k"], [120443, 1, "l"], [120444, 1, "m"], [120445, 1, "n"], [120446, 1, "o"], [120447, 1, "p"], [120448, 1, "q"], [120449, 1, "r"], [120450, 1, "s"], [120451, 1, "t"], [120452, 1, "u"], [120453, 1, "v"], [120454, 1, "w"], [120455, 1, "x"], [120456, 1, "y"], [120457, 1, "z"], [120458, 1, "a"], [120459, 1, "b"], [120460, 1, "c"], [120461, 1, "d"], [120462, 1, "e"], [120463, 1, "f"], [120464, 1, "g"], [120465, 1, "h"], [120466, 1, "i"], [120467, 1, "j"], [120468, 1, "k"], [120469, 1, "l"], [120470, 1, "m"], [120471, 1, "n"], [120472, 1, "o"], [120473, 1, "p"], [120474, 1, "q"], [120475, 1, "r"], [120476, 1, "s"], [120477, 1, "t"], [120478, 1, "u"], [120479, 1, "v"], [120480, 1, "w"], [120481, 1, "x"], [120482, 1, "y"], [120483, 1, "z"], [120484, 1, "\u0131"], [120485, 1, "\u0237"], [[120486, 120487], 3], [120488, 1, "\u03B1"], [120489, 1, "\u03B2"], [120490, 1, "\u03B3"], [120491, 1, "\u03B4"], [120492, 1, "\u03B5"], [120493, 1, "\u03B6"], [120494, 1, "\u03B7"], [120495, 1, "\u03B8"], [120496, 1, "\u03B9"], [120497, 1, "\u03BA"], [120498, 1, "\u03BB"], [120499, 1, "\u03BC"], [120500, 1, "\u03BD"], [120501, 1, "\u03BE"], [120502, 1, "\u03BF"], [120503, 1, "\u03C0"], [120504, 1, "\u03C1"], [120505, 1, "\u03B8"], [120506, 1, "\u03C3"], [120507, 1, "\u03C4"], [120508, 1, "\u03C5"], [120509, 1, "\u03C6"], [120510, 1, "\u03C7"], [120511, 1, "\u03C8"], [120512, 1, "\u03C9"], [120513, 1, "\u2207"], [120514, 1, "\u03B1"], [120515, 1, "\u03B2"], [120516, 1, "\u03B3"], [120517, 1, "\u03B4"], [120518, 1, "\u03B5"], [120519, 1, "\u03B6"], [120520, 1, "\u03B7"], [120521, 1, "\u03B8"], [120522, 1, "\u03B9"], [120523, 1, "\u03BA"], [120524, 1, "\u03BB"], [120525, 1, "\u03BC"], [120526, 1, "\u03BD"], [120527, 1, "\u03BE"], [120528, 1, "\u03BF"], [120529, 1, "\u03C0"], [120530, 1, "\u03C1"], [[120531, 120532], 1, "\u03C3"], [120533, 1, "\u03C4"], [120534, 1, "\u03C5"], [120535, 1, "\u03C6"], [120536, 1, "\u03C7"], [120537, 1, "\u03C8"], [120538, 1, "\u03C9"], [120539, 1, "\u2202"], [120540, 1, "\u03B5"], [120541, 1, "\u03B8"], [120542, 1, "\u03BA"], [120543, 1, "\u03C6"], [120544, 1, "\u03C1"], [120545, 1, "\u03C0"], [120546, 1, "\u03B1"], [120547, 1, "\u03B2"], [120548, 1, "\u03B3"], [120549, 1, "\u03B4"], [120550, 1, "\u03B5"], [120551, 1, "\u03B6"], [120552, 1, "\u03B7"], [120553, 1, "\u03B8"], [120554, 1, "\u03B9"], [120555, 1, "\u03BA"], [120556, 1, "\u03BB"], [120557, 1, "\u03BC"], [120558, 1, "\u03BD"], [120559, 1, "\u03BE"], [120560, 1, "\u03BF"], [120561, 1, "\u03C0"], [120562, 1, "\u03C1"], [120563, 1, "\u03B8"], [120564, 1, "\u03C3"], [120565, 1, "\u03C4"], [120566, 1, "\u03C5"], [120567, 1, "\u03C6"], [120568, 1, "\u03C7"], [120569, 1, "\u03C8"], [120570, 1, "\u03C9"], [120571, 1, "\u2207"], [120572, 1, "\u03B1"], [120573, 1, "\u03B2"], [120574, 1, "\u03B3"], [120575, 1, "\u03B4"], [120576, 1, "\u03B5"], [120577, 1, "\u03B6"], [120578, 1, "\u03B7"], [120579, 1, "\u03B8"], [120580, 1, "\u03B9"], [120581, 1, "\u03BA"], [120582, 1, "\u03BB"], [120583, 1, "\u03BC"], [120584, 1, "\u03BD"], [120585, 1, "\u03BE"], [120586, 1, "\u03BF"], [120587, 1, "\u03C0"], [120588, 1, "\u03C1"], [[120589, 120590], 1, "\u03C3"], [120591, 1, "\u03C4"], [120592, 1, "\u03C5"], [120593, 1, "\u03C6"], [120594, 1, "\u03C7"], [120595, 1, "\u03C8"], [120596, 1, "\u03C9"], [120597, 1, "\u2202"], [120598, 1, "\u03B5"], [120599, 1, "\u03B8"], [120600, 1, "\u03BA"], [120601, 1, "\u03C6"], [120602, 1, "\u03C1"], [120603, 1, "\u03C0"], [120604, 1, "\u03B1"], [120605, 1, "\u03B2"], [120606, 1, "\u03B3"], [120607, 1, "\u03B4"], [120608, 1, "\u03B5"], [120609, 1, "\u03B6"], [120610, 1, "\u03B7"], [120611, 1, "\u03B8"], [120612, 1, "\u03B9"], [120613, 1, "\u03BA"], [120614, 1, "\u03BB"], [120615, 1, "\u03BC"], [120616, 1, "\u03BD"], [120617, 1, "\u03BE"], [120618, 1, "\u03BF"], [120619, 1, "\u03C0"], [120620, 1, "\u03C1"], [120621, 1, "\u03B8"], [120622, 1, "\u03C3"], [120623, 1, "\u03C4"], [120624, 1, "\u03C5"], [120625, 1, "\u03C6"], [120626, 1, "\u03C7"], [120627, 1, "\u03C8"], [120628, 1, "\u03C9"], [120629, 1, "\u2207"], [120630, 1, "\u03B1"], [120631, 1, "\u03B2"], [120632, 1, "\u03B3"], [120633, 1, "\u03B4"], [120634, 1, "\u03B5"], [120635, 1, "\u03B6"], [120636, 1, "\u03B7"], [120637, 1, "\u03B8"], [120638, 1, "\u03B9"], [120639, 1, "\u03BA"], [120640, 1, "\u03BB"], [120641, 1, "\u03BC"], [120642, 1, "\u03BD"], [120643, 1, "\u03BE"], [120644, 1, "\u03BF"], [120645, 1, "\u03C0"], [120646, 1, "\u03C1"], [[120647, 120648], 1, "\u03C3"], [120649, 1, "\u03C4"], [120650, 1, "\u03C5"], [120651, 1, "\u03C6"], [120652, 1, "\u03C7"], [120653, 1, "\u03C8"], [120654, 1, "\u03C9"], [120655, 1, "\u2202"], [120656, 1, "\u03B5"], [120657, 1, "\u03B8"], [120658, 1, "\u03BA"], [120659, 1, "\u03C6"], [120660, 1, "\u03C1"], [120661, 1, "\u03C0"], [120662, 1, "\u03B1"], [120663, 1, "\u03B2"], [120664, 1, "\u03B3"], [120665, 1, "\u03B4"], [120666, 1, "\u03B5"], [120667, 1, "\u03B6"], [120668, 1, "\u03B7"], [120669, 1, "\u03B8"], [120670, 1, "\u03B9"], [120671, 1, "\u03BA"], [120672, 1, "\u03BB"], [120673, 1, "\u03BC"], [120674, 1, "\u03BD"], [120675, 1, "\u03BE"], [120676, 1, "\u03BF"], [120677, 1, "\u03C0"], [120678, 1, "\u03C1"], [120679, 1, "\u03B8"], [120680, 1, "\u03C3"], [120681, 1, "\u03C4"], [120682, 1, "\u03C5"], [120683, 1, "\u03C6"], [120684, 1, "\u03C7"], [120685, 1, "\u03C8"], [120686, 1, "\u03C9"], [120687, 1, "\u2207"], [120688, 1, "\u03B1"], [120689, 1, "\u03B2"], [120690, 1, "\u03B3"], [120691, 1, "\u03B4"], [120692, 1, "\u03B5"], [120693, 1, "\u03B6"], [120694, 1, "\u03B7"], [120695, 1, "\u03B8"], [120696, 1, "\u03B9"], [120697, 1, "\u03BA"], [120698, 1, "\u03BB"], [120699, 1, "\u03BC"], [120700, 1, "\u03BD"], [120701, 1, "\u03BE"], [120702, 1, "\u03BF"], [120703, 1, "\u03C0"], [120704, 1, "\u03C1"], [[120705, 120706], 1, "\u03C3"], [120707, 1, "\u03C4"], [120708, 1, "\u03C5"], [120709, 1, "\u03C6"], [120710, 1, "\u03C7"], [120711, 1, "\u03C8"], [120712, 1, "\u03C9"], [120713, 1, "\u2202"], [120714, 1, "\u03B5"], [120715, 1, "\u03B8"], [120716, 1, "\u03BA"], [120717, 1, "\u03C6"], [120718, 1, "\u03C1"], [120719, 1, "\u03C0"], [120720, 1, "\u03B1"], [120721, 1, "\u03B2"], [120722, 1, "\u03B3"], [120723, 1, "\u03B4"], [120724, 1, "\u03B5"], [120725, 1, "\u03B6"], [120726, 1, "\u03B7"], [120727, 1, "\u03B8"], [120728, 1, "\u03B9"], [120729, 1, "\u03BA"], [120730, 1, "\u03BB"], [120731, 1, "\u03BC"], [120732, 1, "\u03BD"], [120733, 1, "\u03BE"], [120734, 1, "\u03BF"], [120735, 1, "\u03C0"], [120736, 1, "\u03C1"], [120737, 1, "\u03B8"], [120738, 1, "\u03C3"], [120739, 1, "\u03C4"], [120740, 1, "\u03C5"], [120741, 1, "\u03C6"], [120742, 1, "\u03C7"], [120743, 1, "\u03C8"], [120744, 1, "\u03C9"], [120745, 1, "\u2207"], [120746, 1, "\u03B1"], [120747, 1, "\u03B2"], [120748, 1, "\u03B3"], [120749, 1, "\u03B4"], [120750, 1, "\u03B5"], [120751, 1, "\u03B6"], [120752, 1, "\u03B7"], [120753, 1, "\u03B8"], [120754, 1, "\u03B9"], [120755, 1, "\u03BA"], [120756, 1, "\u03BB"], [120757, 1, "\u03BC"], [120758, 1, "\u03BD"], [120759, 1, "\u03BE"], [120760, 1, "\u03BF"], [120761, 1, "\u03C0"], [120762, 1, "\u03C1"], [[120763, 120764], 1, "\u03C3"], [120765, 1, "\u03C4"], [120766, 1, "\u03C5"], [120767, 1, "\u03C6"], [120768, 1, "\u03C7"], [120769, 1, "\u03C8"], [120770, 1, "\u03C9"], [120771, 1, "\u2202"], [120772, 1, "\u03B5"], [120773, 1, "\u03B8"], [120774, 1, "\u03BA"], [120775, 1, "\u03C6"], [120776, 1, "\u03C1"], [120777, 1, "\u03C0"], [[120778, 120779], 1, "\u03DD"], [[120780, 120781], 3], [120782, 1, "0"], [120783, 1, "1"], [120784, 1, "2"], [120785, 1, "3"], [120786, 1, "4"], [120787, 1, "5"], [120788, 1, "6"], [120789, 1, "7"], [120790, 1, "8"], [120791, 1, "9"], [120792, 1, "0"], [120793, 1, "1"], [120794, 1, "2"], [120795, 1, "3"], [120796, 1, "4"], [120797, 1, "5"], [120798, 1, "6"], [120799, 1, "7"], [120800, 1, "8"], [120801, 1, "9"], [120802, 1, "0"], [120803, 1, "1"], [120804, 1, "2"], [120805, 1, "3"], [120806, 1, "4"], [120807, 1, "5"], [120808, 1, "6"], [120809, 1, "7"], [120810, 1, "8"], [120811, 1, "9"], [120812, 1, "0"], [120813, 1, "1"], [120814, 1, "2"], [120815, 1, "3"], [120816, 1, "4"], [120817, 1, "5"], [120818, 1, "6"], [120819, 1, "7"], [120820, 1, "8"], [120821, 1, "9"], [120822, 1, "0"], [120823, 1, "1"], [120824, 1, "2"], [120825, 1, "3"], [120826, 1, "4"], [120827, 1, "5"], [120828, 1, "6"], [120829, 1, "7"], [120830, 1, "8"], [120831, 1, "9"], [[120832, 121343], 2], [[121344, 121398], 2], [[121399, 121402], 2], [[121403, 121452], 2], [[121453, 121460], 2], [121461, 2], [[121462, 121475], 2], [121476, 2], [[121477, 121483], 2], [[121484, 121498], 3], [[121499, 121503], 2], [121504, 3], [[121505, 121519], 2], [[121520, 122623], 3], [[122624, 122654], 2], [[122655, 122660], 3], [[122661, 122666], 2], [[122667, 122879], 3], [[122880, 122886], 2], [122887, 3], [[122888, 122904], 2], [[122905, 122906], 3], [[122907, 122913], 2], [122914, 3], [[122915, 122916], 2], [122917, 3], [[122918, 122922], 2], [[122923, 122927], 3], [122928, 1, "\u0430"], [122929, 1, "\u0431"], [122930, 1, "\u0432"], [122931, 1, "\u0433"], [122932, 1, "\u0434"], [122933, 1, "\u0435"], [122934, 1, "\u0436"], [122935, 1, "\u0437"], [122936, 1, "\u0438"], [122937, 1, "\u043A"], [122938, 1, "\u043B"], [122939, 1, "\u043C"], [122940, 1, "\u043E"], [122941, 1, "\u043F"], [122942, 1, "\u0440"], [122943, 1, "\u0441"], [122944, 1, "\u0442"], [122945, 1, "\u0443"], [122946, 1, "\u0444"], [122947, 1, "\u0445"], [122948, 1, "\u0446"], [122949, 1, "\u0447"], [122950, 1, "\u0448"], [122951, 1, "\u044B"], [122952, 1, "\u044D"], [122953, 1, "\u044E"], [122954, 1, "\uA689"], [122955, 1, "\u04D9"], [122956, 1, "\u0456"], [122957, 1, "\u0458"], [122958, 1, "\u04E9"], [122959, 1, "\u04AF"], [122960, 1, "\u04CF"], [122961, 1, "\u0430"], [122962, 1, "\u0431"], [122963, 1, "\u0432"], [122964, 1, "\u0433"], [122965, 1, "\u0434"], [122966, 1, "\u0435"], [122967, 1, "\u0436"], [122968, 1, "\u0437"], [122969, 1, "\u0438"], [122970, 1, "\u043A"], [122971, 1, "\u043B"], [122972, 1, "\u043E"], [122973, 1, "\u043F"], [122974, 1, "\u0441"], [122975, 1, "\u0443"], [122976, 1, "\u0444"], [122977, 1, "\u0445"], [122978, 1, "\u0446"], [122979, 1, "\u0447"], [122980, 1, "\u0448"], [122981, 1, "\u044A"], [122982, 1, "\u044B"], [122983, 1, "\u0491"], [122984, 1, "\u0456"], [122985, 1, "\u0455"], [122986, 1, "\u045F"], [122987, 1, "\u04AB"], [122988, 1, "\uA651"], [122989, 1, "\u04B1"], [[122990, 123022], 3], [123023, 2], [[123024, 123135], 3], [[123136, 123180], 2], [[123181, 123183], 3], [[123184, 123197], 2], [[123198, 123199], 3], [[123200, 123209], 2], [[123210, 123213], 3], [123214, 2], [123215, 2], [[123216, 123535], 3], [[123536, 123566], 2], [[123567, 123583], 3], [[123584, 123641], 2], [[123642, 123646], 3], [123647, 2], [[123648, 124111], 3], [[124112, 124153], 2], [[124154, 124895], 3], [[124896, 124902], 2], [124903, 3], [[124904, 124907], 2], [124908, 3], [[124909, 124910], 2], [124911, 3], [[124912, 124926], 2], [124927, 3], [[124928, 125124], 2], [[125125, 125126], 3], [[125127, 125135], 2], [[125136, 125142], 2], [[125143, 125183], 3], [125184, 1, "\u{1E922}"], [125185, 1, "\u{1E923}"], [125186, 1, "\u{1E924}"], [125187, 1, "\u{1E925}"], [125188, 1, "\u{1E926}"], [125189, 1, "\u{1E927}"], [125190, 1, "\u{1E928}"], [125191, 1, "\u{1E929}"], [125192, 1, "\u{1E92A}"], [125193, 1, "\u{1E92B}"], [125194, 1, "\u{1E92C}"], [125195, 1, "\u{1E92D}"], [125196, 1, "\u{1E92E}"], [125197, 1, "\u{1E92F}"], [125198, 1, "\u{1E930}"], [125199, 1, "\u{1E931}"], [125200, 1, "\u{1E932}"], [125201, 1, "\u{1E933}"], [125202, 1, "\u{1E934}"], [125203, 1, "\u{1E935}"], [125204, 1, "\u{1E936}"], [125205, 1, "\u{1E937}"], [125206, 1, "\u{1E938}"], [125207, 1, "\u{1E939}"], [125208, 1, "\u{1E93A}"], [125209, 1, "\u{1E93B}"], [125210, 1, "\u{1E93C}"], [125211, 1, "\u{1E93D}"], [125212, 1, "\u{1E93E}"], [125213, 1, "\u{1E93F}"], [125214, 1, "\u{1E940}"], [125215, 1, "\u{1E941}"], [125216, 1, "\u{1E942}"], [125217, 1, "\u{1E943}"], [[125218, 125258], 2], [125259, 2], [[125260, 125263], 3], [[125264, 125273], 2], [[125274, 125277], 3], [[125278, 125279], 2], [[125280, 126064], 3], [[126065, 126132], 2], [[126133, 126208], 3], [[126209, 126269], 2], [[126270, 126463], 3], [126464, 1, "\u0627"], [126465, 1, "\u0628"], [126466, 1, "\u062C"], [126467, 1, "\u062F"], [126468, 3], [126469, 1, "\u0648"], [126470, 1, "\u0632"], [126471, 1, "\u062D"], [126472, 1, "\u0637"], [126473, 1, "\u064A"], [126474, 1, "\u0643"], [126475, 1, "\u0644"], [126476, 1, "\u0645"], [126477, 1, "\u0646"], [126478, 1, "\u0633"], [126479, 1, "\u0639"], [126480, 1, "\u0641"], [126481, 1, "\u0635"], [126482, 1, "\u0642"], [126483, 1, "\u0631"], [126484, 1, "\u0634"], [126485, 1, "\u062A"], [126486, 1, "\u062B"], [126487, 1, "\u062E"], [126488, 1, "\u0630"], [126489, 1, "\u0636"], [126490, 1, "\u0638"], [126491, 1, "\u063A"], [126492, 1, "\u066E"], [126493, 1, "\u06BA"], [126494, 1, "\u06A1"], [126495, 1, "\u066F"], [126496, 3], [126497, 1, "\u0628"], [126498, 1, "\u062C"], [126499, 3], [126500, 1, "\u0647"], [[126501, 126502], 3], [126503, 1, "\u062D"], [126504, 3], [126505, 1, "\u064A"], [126506, 1, "\u0643"], [126507, 1, "\u0644"], [126508, 1, "\u0645"], [126509, 1, "\u0646"], [126510, 1, "\u0633"], [126511, 1, "\u0639"], [126512, 1, "\u0641"], [126513, 1, "\u0635"], [126514, 1, "\u0642"], [126515, 3], [126516, 1, "\u0634"], [126517, 1, "\u062A"], [126518, 1, "\u062B"], [126519, 1, "\u062E"], [126520, 3], [126521, 1, "\u0636"], [126522, 3], [126523, 1, "\u063A"], [[126524, 126529], 3], [126530, 1, "\u062C"], [[126531, 126534], 3], [126535, 1, "\u062D"], [126536, 3], [126537, 1, "\u064A"], [126538, 3], [126539, 1, "\u0644"], [126540, 3], [126541, 1, "\u0646"], [126542, 1, "\u0633"], [126543, 1, "\u0639"], [126544, 3], [126545, 1, "\u0635"], [126546, 1, "\u0642"], [126547, 3], [126548, 1, "\u0634"], [[126549, 126550], 3], [126551, 1, "\u062E"], [126552, 3], [126553, 1, "\u0636"], [126554, 3], [126555, 1, "\u063A"], [126556, 3], [126557, 1, "\u06BA"], [126558, 3], [126559, 1, "\u066F"], [126560, 3], [126561, 1, "\u0628"], [126562, 1, "\u062C"], [126563, 3], [126564, 1, "\u0647"], [[126565, 126566], 3], [126567, 1, "\u062D"], [126568, 1, "\u0637"], [126569, 1, "\u064A"], [126570, 1, "\u0643"], [126571, 3], [126572, 1, "\u0645"], [126573, 1, "\u0646"], [126574, 1, "\u0633"], [126575, 1, "\u0639"], [126576, 1, "\u0641"], [126577, 1, "\u0635"], [126578, 1, "\u0642"], [126579, 3], [126580, 1, "\u0634"], [126581, 1, "\u062A"], [126582, 1, "\u062B"], [126583, 1, "\u062E"], [126584, 3], [126585, 1, "\u0636"], [126586, 1, "\u0638"], [126587, 1, "\u063A"], [126588, 1, "\u066E"], [126589, 3], [126590, 1, "\u06A1"], [126591, 3], [126592, 1, "\u0627"], [126593, 1, "\u0628"], [126594, 1, "\u062C"], [126595, 1, "\u062F"], [126596, 1, "\u0647"], [126597, 1, "\u0648"], [126598, 1, "\u0632"], [126599, 1, "\u062D"], [126600, 1, "\u0637"], [126601, 1, "\u064A"], [126602, 3], [126603, 1, "\u0644"], [126604, 1, "\u0645"], [126605, 1, "\u0646"], [126606, 1, "\u0633"], [126607, 1, "\u0639"], [126608, 1, "\u0641"], [126609, 1, "\u0635"], [126610, 1, "\u0642"], [126611, 1, "\u0631"], [126612, 1, "\u0634"], [126613, 1, "\u062A"], [126614, 1, "\u062B"], [126615, 1, "\u062E"], [126616, 1, "\u0630"], [126617, 1, "\u0636"], [126618, 1, "\u0638"], [126619, 1, "\u063A"], [[126620, 126624], 3], [126625, 1, "\u0628"], [126626, 1, "\u062C"], [126627, 1, "\u062F"], [126628, 3], [126629, 1, "\u0648"], [126630, 1, "\u0632"], [126631, 1, "\u062D"], [126632, 1, "\u0637"], [126633, 1, "\u064A"], [126634, 3], [126635, 1, "\u0644"], [126636, 1, "\u0645"], [126637, 1, "\u0646"], [126638, 1, "\u0633"], [126639, 1, "\u0639"], [126640, 1, "\u0641"], [126641, 1, "\u0635"], [126642, 1, "\u0642"], [126643, 1, "\u0631"], [126644, 1, "\u0634"], [126645, 1, "\u062A"], [126646, 1, "\u062B"], [126647, 1, "\u062E"], [126648, 1, "\u0630"], [126649, 1, "\u0636"], [126650, 1, "\u0638"], [126651, 1, "\u063A"], [[126652, 126703], 3], [[126704, 126705], 2], [[126706, 126975], 3], [[126976, 127019], 2], [[127020, 127023], 3], [[127024, 127123], 2], [[127124, 127135], 3], [[127136, 127150], 2], [[127151, 127152], 3], [[127153, 127166], 2], [127167, 2], [127168, 3], [[127169, 127183], 2], [127184, 3], [[127185, 127199], 2], [[127200, 127221], 2], [[127222, 127231], 3], [127232, 3], [127233, 5, "0,"], [127234, 5, "1,"], [127235, 5, "2,"], [127236, 5, "3,"], [127237, 5, "4,"], [127238, 5, "5,"], [127239, 5, "6,"], [127240, 5, "7,"], [127241, 5, "8,"], [127242, 5, "9,"], [[127243, 127244], 2], [[127245, 127247], 2], [127248, 5, "(a)"], [127249, 5, "(b)"], [127250, 5, "(c)"], [127251, 5, "(d)"], [127252, 5, "(e)"], [127253, 5, "(f)"], [127254, 5, "(g)"], [127255, 5, "(h)"], [127256, 5, "(i)"], [127257, 5, "(j)"], [127258, 5, "(k)"], [127259, 5, "(l)"], [127260, 5, "(m)"], [127261, 5, "(n)"], [127262, 5, "(o)"], [127263, 5, "(p)"], [127264, 5, "(q)"], [127265, 5, "(r)"], [127266, 5, "(s)"], [127267, 5, "(t)"], [127268, 5, "(u)"], [127269, 5, "(v)"], [127270, 5, "(w)"], [127271, 5, "(x)"], [127272, 5, "(y)"], [127273, 5, "(z)"], [127274, 1, "\u3014s\u3015"], [127275, 1, "c"], [127276, 1, "r"], [127277, 1, "cd"], [127278, 1, "wz"], [127279, 2], [127280, 1, "a"], [127281, 1, "b"], [127282, 1, "c"], [127283, 1, "d"], [127284, 1, "e"], [127285, 1, "f"], [127286, 1, "g"], [127287, 1, "h"], [127288, 1, "i"], [127289, 1, "j"], [127290, 1, "k"], [127291, 1, "l"], [127292, 1, "m"], [127293, 1, "n"], [127294, 1, "o"], [127295, 1, "p"], [127296, 1, "q"], [127297, 1, "r"], [127298, 1, "s"], [127299, 1, "t"], [127300, 1, "u"], [127301, 1, "v"], [127302, 1, "w"], [127303, 1, "x"], [127304, 1, "y"], [127305, 1, "z"], [127306, 1, "hv"], [127307, 1, "mv"], [127308, 1, "sd"], [127309, 1, "ss"], [127310, 1, "ppv"], [127311, 1, "wc"], [[127312, 127318], 2], [127319, 2], [[127320, 127326], 2], [127327, 2], [[127328, 127337], 2], [127338, 1, "mc"], [127339, 1, "md"], [127340, 1, "mr"], [[127341, 127343], 2], [[127344, 127352], 2], [127353, 2], [127354, 2], [[127355, 127356], 2], [[127357, 127358], 2], [127359, 2], [[127360, 127369], 2], [[127370, 127373], 2], [[127374, 127375], 2], [127376, 1, "dj"], [[127377, 127386], 2], [[127387, 127404], 2], [127405, 2], [[127406, 127461], 3], [[127462, 127487], 2], [127488, 1, "\u307B\u304B"], [127489, 1, "\u30B3\u30B3"], [127490, 1, "\u30B5"], [[127491, 127503], 3], [127504, 1, "\u624B"], [127505, 1, "\u5B57"], [127506, 1, "\u53CC"], [127507, 1, "\u30C7"], [127508, 1, "\u4E8C"], [127509, 1, "\u591A"], [127510, 1, "\u89E3"], [127511, 1, "\u5929"], [127512, 1, "\u4EA4"], [127513, 1, "\u6620"], [127514, 1, "\u7121"], [127515, 1, "\u6599"], [127516, 1, "\u524D"], [127517, 1, "\u5F8C"], [127518, 1, "\u518D"], [127519, 1, "\u65B0"], [127520, 1, "\u521D"], [127521, 1, "\u7D42"], [127522, 1, "\u751F"], [127523, 1, "\u8CA9"], [127524, 1, "\u58F0"], [127525, 1, "\u5439"], [127526, 1, "\u6F14"], [127527, 1, "\u6295"], [127528, 1, "\u6355"], [127529, 1, "\u4E00"], [127530, 1, "\u4E09"], [127531, 1, "\u904A"], [127532, 1, "\u5DE6"], [127533, 1, "\u4E2D"], [127534, 1, "\u53F3"], [127535, 1, "\u6307"], [127536, 1, "\u8D70"], [127537, 1, "\u6253"], [127538, 1, "\u7981"], [127539, 1, "\u7A7A"], [127540, 1, "\u5408"], [127541, 1, "\u6E80"], [127542, 1, "\u6709"], [127543, 1, "\u6708"], [127544, 1, "\u7533"], [127545, 1, "\u5272"], [127546, 1, "\u55B6"], [127547, 1, "\u914D"], [[127548, 127551], 3], [127552, 1, "\u3014\u672C\u3015"], [127553, 1, "\u3014\u4E09\u3015"], [127554, 1, "\u3014\u4E8C\u3015"], [127555, 1, "\u3014\u5B89\u3015"], [127556, 1, "\u3014\u70B9\u3015"], [127557, 1, "\u3014\u6253\u3015"], [127558, 1, "\u3014\u76D7\u3015"], [127559, 1, "\u3014\u52DD\u3015"], [127560, 1, "\u3014\u6557\u3015"], [[127561, 127567], 3], [127568, 1, "\u5F97"], [127569, 1, "\u53EF"], [[127570, 127583], 3], [[127584, 127589], 2], [[127590, 127743], 3], [[127744, 127776], 2], [[127777, 127788], 2], [[127789, 127791], 2], [[127792, 127797], 2], [127798, 2], [[127799, 127868], 2], [127869, 2], [[127870, 127871], 2], [[127872, 127891], 2], [[127892, 127903], 2], [[127904, 127940], 2], [127941, 2], [[127942, 127946], 2], [[127947, 127950], 2], [[127951, 127955], 2], [[127956, 127967], 2], [[127968, 127984], 2], [[127985, 127991], 2], [[127992, 127999], 2], [[128e3, 128062], 2], [128063, 2], [128064, 2], [128065, 2], [[128066, 128247], 2], [128248, 2], [[128249, 128252], 2], [[128253, 128254], 2], [128255, 2], [[128256, 128317], 2], [[128318, 128319], 2], [[128320, 128323], 2], [[128324, 128330], 2], [[128331, 128335], 2], [[128336, 128359], 2], [[128360, 128377], 2], [128378, 2], [[128379, 128419], 2], [128420, 2], [[128421, 128506], 2], [[128507, 128511], 2], [128512, 2], [[128513, 128528], 2], [128529, 2], [[128530, 128532], 2], [128533, 2], [128534, 2], [128535, 2], [128536, 2], [128537, 2], [128538, 2], [128539, 2], [[128540, 128542], 2], [128543, 2], [[128544, 128549], 2], [[128550, 128551], 2], [[128552, 128555], 2], [128556, 2], [128557, 2], [[128558, 128559], 2], [[128560, 128563], 2], [128564, 2], [[128565, 128576], 2], [[128577, 128578], 2], [[128579, 128580], 2], [[128581, 128591], 2], [[128592, 128639], 2], [[128640, 128709], 2], [[128710, 128719], 2], [128720, 2], [[128721, 128722], 2], [[128723, 128724], 2], [128725, 2], [[128726, 128727], 2], [[128728, 128731], 3], [128732, 2], [[128733, 128735], 2], [[128736, 128748], 2], [[128749, 128751], 3], [[128752, 128755], 2], [[128756, 128758], 2], [[128759, 128760], 2], [128761, 2], [128762, 2], [[128763, 128764], 2], [[128765, 128767], 3], [[128768, 128883], 2], [[128884, 128886], 2], [[128887, 128890], 3], [[128891, 128895], 2], [[128896, 128980], 2], [[128981, 128984], 2], [128985, 2], [[128986, 128991], 3], [[128992, 129003], 2], [[129004, 129007], 3], [129008, 2], [[129009, 129023], 3], [[129024, 129035], 2], [[129036, 129039], 3], [[129040, 129095], 2], [[129096, 129103], 3], [[129104, 129113], 2], [[129114, 129119], 3], [[129120, 129159], 2], [[129160, 129167], 3], [[129168, 129197], 2], [[129198, 129199], 3], [[129200, 129201], 2], [[129202, 129279], 3], [[129280, 129291], 2], [129292, 2], [[129293, 129295], 2], [[129296, 129304], 2], [[129305, 129310], 2], [129311, 2], [[129312, 129319], 2], [[129320, 129327], 2], [129328, 2], [[129329, 129330], 2], [[129331, 129342], 2], [129343, 2], [[129344, 129355], 2], [129356, 2], [[129357, 129359], 2], [[129360, 129374], 2], [[129375, 129387], 2], [[129388, 129392], 2], [129393, 2], [129394, 2], [[129395, 129398], 2], [[129399, 129400], 2], [129401, 2], [129402, 2], [129403, 2], [[129404, 129407], 2], [[129408, 129412], 2], [[129413, 129425], 2], [[129426, 129431], 2], [[129432, 129442], 2], [[129443, 129444], 2], [[129445, 129450], 2], [[129451, 129453], 2], [[129454, 129455], 2], [[129456, 129465], 2], [[129466, 129471], 2], [129472, 2], [[129473, 129474], 2], [[129475, 129482], 2], [129483, 2], [129484, 2], [[129485, 129487], 2], [[129488, 129510], 2], [[129511, 129535], 2], [[129536, 129619], 2], [[129620, 129631], 3], [[129632, 129645], 2], [[129646, 129647], 3], [[129648, 129651], 2], [129652, 2], [[129653, 129655], 2], [[129656, 129658], 2], [[129659, 129660], 2], [[129661, 129663], 3], [[129664, 129666], 2], [[129667, 129670], 2], [[129671, 129672], 2], [[129673, 129679], 3], [[129680, 129685], 2], [[129686, 129704], 2], [[129705, 129708], 2], [[129709, 129711], 2], [[129712, 129718], 2], [[129719, 129722], 2], [[129723, 129725], 2], [129726, 3], [129727, 2], [[129728, 129730], 2], [[129731, 129733], 2], [[129734, 129741], 3], [[129742, 129743], 2], [[129744, 129750], 2], [[129751, 129753], 2], [[129754, 129755], 2], [[129756, 129759], 3], [[129760, 129767], 2], [129768, 2], [[129769, 129775], 3], [[129776, 129782], 2], [[129783, 129784], 2], [[129785, 129791], 3], [[129792, 129938], 2], [129939, 3], [[129940, 129994], 2], [[129995, 130031], 3], [130032, 1, "0"], [130033, 1, "1"], [130034, 1, "2"], [130035, 1, "3"], [130036, 1, "4"], [130037, 1, "5"], [130038, 1, "6"], [130039, 1, "7"], [130040, 1, "8"], [130041, 1, "9"], [[130042, 131069], 3], [[131070, 131071], 3], [[131072, 173782], 2], [[173783, 173789], 2], [[173790, 173791], 2], [[173792, 173823], 3], [[173824, 177972], 2], [[177973, 177976], 2], [177977, 2], [[177978, 177983], 3], [[177984, 178205], 2], [[178206, 178207], 3], [[178208, 183969], 2], [[183970, 183983], 3], [[183984, 191456], 2], [[191457, 194559], 3], [194560, 1, "\u4E3D"], [194561, 1, "\u4E38"], [194562, 1, "\u4E41"], [194563, 1, "\u{20122}"], [194564, 1, "\u4F60"], [194565, 1, "\u4FAE"], [194566, 1, "\u4FBB"], [194567, 1, "\u5002"], [194568, 1, "\u507A"], [194569, 1, "\u5099"], [194570, 1, "\u50E7"], [194571, 1, "\u50CF"], [194572, 1, "\u349E"], [194573, 1, "\u{2063A}"], [194574, 1, "\u514D"], [194575, 1, "\u5154"], [194576, 1, "\u5164"], [194577, 1, "\u5177"], [194578, 1, "\u{2051C}"], [194579, 1, "\u34B9"], [194580, 1, "\u5167"], [194581, 1, "\u518D"], [194582, 1, "\u{2054B}"], [194583, 1, "\u5197"], [194584, 1, "\u51A4"], [194585, 1, "\u4ECC"], [194586, 1, "\u51AC"], [194587, 1, "\u51B5"], [194588, 1, "\u{291DF}"], [194589, 1, "\u51F5"], [194590, 1, "\u5203"], [194591, 1, "\u34DF"], [194592, 1, "\u523B"], [194593, 1, "\u5246"], [194594, 1, "\u5272"], [194595, 1, "\u5277"], [194596, 1, "\u3515"], [194597, 1, "\u52C7"], [194598, 1, "\u52C9"], [194599, 1, "\u52E4"], [194600, 1, "\u52FA"], [194601, 1, "\u5305"], [194602, 1, "\u5306"], [194603, 1, "\u5317"], [194604, 1, "\u5349"], [194605, 1, "\u5351"], [194606, 1, "\u535A"], [194607, 1, "\u5373"], [194608, 1, "\u537D"], [[194609, 194611], 1, "\u537F"], [194612, 1, "\u{20A2C}"], [194613, 1, "\u7070"], [194614, 1, "\u53CA"], [194615, 1, "\u53DF"], [194616, 1, "\u{20B63}"], [194617, 1, "\u53EB"], [194618, 1, "\u53F1"], [194619, 1, "\u5406"], [194620, 1, "\u549E"], [194621, 1, "\u5438"], [194622, 1, "\u5448"], [194623, 1, "\u5468"], [194624, 1, "\u54A2"], [194625, 1, "\u54F6"], [194626, 1, "\u5510"], [194627, 1, "\u5553"], [194628, 1, "\u5563"], [[194629, 194630], 1, "\u5584"], [194631, 1, "\u5599"], [194632, 1, "\u55AB"], [194633, 1, "\u55B3"], [194634, 1, "\u55C2"], [194635, 1, "\u5716"], [194636, 1, "\u5606"], [194637, 1, "\u5717"], [194638, 1, "\u5651"], [194639, 1, "\u5674"], [194640, 1, "\u5207"], [194641, 1, "\u58EE"], [194642, 1, "\u57CE"], [194643, 1, "\u57F4"], [194644, 1, "\u580D"], [194645, 1, "\u578B"], [194646, 1, "\u5832"], [194647, 1, "\u5831"], [194648, 1, "\u58AC"], [194649, 1, "\u{214E4}"], [194650, 1, "\u58F2"], [194651, 1, "\u58F7"], [194652, 1, "\u5906"], [194653, 1, "\u591A"], [194654, 1, "\u5922"], [194655, 1, "\u5962"], [194656, 1, "\u{216A8}"], [194657, 1, "\u{216EA}"], [194658, 1, "\u59EC"], [194659, 1, "\u5A1B"], [194660, 1, "\u5A27"], [194661, 1, "\u59D8"], [194662, 1, "\u5A66"], [194663, 1, "\u36EE"], [194664, 3], [194665, 1, "\u5B08"], [[194666, 194667], 1, "\u5B3E"], [194668, 1, "\u{219C8}"], [194669, 1, "\u5BC3"], [194670, 1, "\u5BD8"], [194671, 1, "\u5BE7"], [194672, 1, "\u5BF3"], [194673, 1, "\u{21B18}"], [194674, 1, "\u5BFF"], [194675, 1, "\u5C06"], [194676, 3], [194677, 1, "\u5C22"], [194678, 1, "\u3781"], [194679, 1, "\u5C60"], [194680, 1, "\u5C6E"], [194681, 1, "\u5CC0"], [194682, 1, "\u5C8D"], [194683, 1, "\u{21DE4}"], [194684, 1, "\u5D43"], [194685, 1, "\u{21DE6}"], [194686, 1, "\u5D6E"], [194687, 1, "\u5D6B"], [194688, 1, "\u5D7C"], [194689, 1, "\u5DE1"], [194690, 1, "\u5DE2"], [194691, 1, "\u382F"], [194692, 1, "\u5DFD"], [194693, 1, "\u5E28"], [194694, 1, "\u5E3D"], [194695, 1, "\u5E69"], [194696, 1, "\u3862"], [194697, 1, "\u{22183}"], [194698, 1, "\u387C"], [194699, 1, "\u5EB0"], [194700, 1, "\u5EB3"], [194701, 1, "\u5EB6"], [194702, 1, "\u5ECA"], [194703, 1, "\u{2A392}"], [194704, 1, "\u5EFE"], [[194705, 194706], 1, "\u{22331}"], [194707, 1, "\u8201"], [[194708, 194709], 1, "\u5F22"], [194710, 1, "\u38C7"], [194711, 1, "\u{232B8}"], [194712, 1, "\u{261DA}"], [194713, 1, "\u5F62"], [194714, 1, "\u5F6B"], [194715, 1, "\u38E3"], [194716, 1, "\u5F9A"], [194717, 1, "\u5FCD"], [194718, 1, "\u5FD7"], [194719, 1, "\u5FF9"], [194720, 1, "\u6081"], [194721, 1, "\u393A"], [194722, 1, "\u391C"], [194723, 1, "\u6094"], [194724, 1, "\u{226D4}"], [194725, 1, "\u60C7"], [194726, 1, "\u6148"], [194727, 1, "\u614C"], [194728, 1, "\u614E"], [194729, 1, "\u614C"], [194730, 1, "\u617A"], [194731, 1, "\u618E"], [194732, 1, "\u61B2"], [194733, 1, "\u61A4"], [194734, 1, "\u61AF"], [194735, 1, "\u61DE"], [194736, 1, "\u61F2"], [194737, 1, "\u61F6"], [194738, 1, "\u6210"], [194739, 1, "\u621B"], [194740, 1, "\u625D"], [194741, 1, "\u62B1"], [194742, 1, "\u62D4"], [194743, 1, "\u6350"], [194744, 1, "\u{22B0C}"], [194745, 1, "\u633D"], [194746, 1, "\u62FC"], [194747, 1, "\u6368"], [194748, 1, "\u6383"], [194749, 1, "\u63E4"], [194750, 1, "\u{22BF1}"], [194751, 1, "\u6422"], [194752, 1, "\u63C5"], [194753, 1, "\u63A9"], [194754, 1, "\u3A2E"], [194755, 1, "\u6469"], [194756, 1, "\u647E"], [194757, 1, "\u649D"], [194758, 1, "\u6477"], [194759, 1, "\u3A6C"], [194760, 1, "\u654F"], [194761, 1, "\u656C"], [194762, 1, "\u{2300A}"], [194763, 1, "\u65E3"], [194764, 1, "\u66F8"], [194765, 1, "\u6649"], [194766, 1, "\u3B19"], [194767, 1, "\u6691"], [194768, 1, "\u3B08"], [194769, 1, "\u3AE4"], [194770, 1, "\u5192"], [194771, 1, "\u5195"], [194772, 1, "\u6700"], [194773, 1, "\u669C"], [194774, 1, "\u80AD"], [194775, 1, "\u43D9"], [194776, 1, "\u6717"], [194777, 1, "\u671B"], [194778, 1, "\u6721"], [194779, 1, "\u675E"], [194780, 1, "\u6753"], [194781, 1, "\u{233C3}"], [194782, 1, "\u3B49"], [194783, 1, "\u67FA"], [194784, 1, "\u6785"], [194785, 1, "\u6852"], [194786, 1, "\u6885"], [194787, 1, "\u{2346D}"], [194788, 1, "\u688E"], [194789, 1, "\u681F"], [194790, 1, "\u6914"], [194791, 1, "\u3B9D"], [194792, 1, "\u6942"], [194793, 1, "\u69A3"], [194794, 1, "\u69EA"], [194795, 1, "\u6AA8"], [194796, 1, "\u{236A3}"], [194797, 1, "\u6ADB"], [194798, 1, "\u3C18"], [194799, 1, "\u6B21"], [194800, 1, "\u{238A7}"], [194801, 1, "\u6B54"], [194802, 1, "\u3C4E"], [194803, 1, "\u6B72"], [194804, 1, "\u6B9F"], [194805, 1, "\u6BBA"], [194806, 1, "\u6BBB"], [194807, 1, "\u{23A8D}"], [194808, 1, "\u{21D0B}"], [194809, 1, "\u{23AFA}"], [194810, 1, "\u6C4E"], [194811, 1, "\u{23CBC}"], [194812, 1, "\u6CBF"], [194813, 1, "\u6CCD"], [194814, 1, "\u6C67"], [194815, 1, "\u6D16"], [194816, 1, "\u6D3E"], [194817, 1, "\u6D77"], [194818, 1, "\u6D41"], [194819, 1, "\u6D69"], [194820, 1, "\u6D78"], [194821, 1, "\u6D85"], [194822, 1, "\u{23D1E}"], [194823, 1, "\u6D34"], [194824, 1, "\u6E2F"], [194825, 1, "\u6E6E"], [194826, 1, "\u3D33"], [194827, 1, "\u6ECB"], [194828, 1, "\u6EC7"], [194829, 1, "\u{23ED1}"], [194830, 1, "\u6DF9"], [194831, 1, "\u6F6E"], [194832, 1, "\u{23F5E}"], [194833, 1, "\u{23F8E}"], [194834, 1, "\u6FC6"], [194835, 1, "\u7039"], [194836, 1, "\u701E"], [194837, 1, "\u701B"], [194838, 1, "\u3D96"], [194839, 1, "\u704A"], [194840, 1, "\u707D"], [194841, 1, "\u7077"], [194842, 1, "\u70AD"], [194843, 1, "\u{20525}"], [194844, 1, "\u7145"], [194845, 1, "\u{24263}"], [194846, 1, "\u719C"], [194847, 3], [194848, 1, "\u7228"], [194849, 1, "\u7235"], [194850, 1, "\u7250"], [194851, 1, "\u{24608}"], [194852, 1, "\u7280"], [194853, 1, "\u7295"], [194854, 1, "\u{24735}"], [194855, 1, "\u{24814}"], [194856, 1, "\u737A"], [194857, 1, "\u738B"], [194858, 1, "\u3EAC"], [194859, 1, "\u73A5"], [[194860, 194861], 1, "\u3EB8"], [194862, 1, "\u7447"], [194863, 1, "\u745C"], [194864, 1, "\u7471"], [194865, 1, "\u7485"], [194866, 1, "\u74CA"], [194867, 1, "\u3F1B"], [194868, 1, "\u7524"], [194869, 1, "\u{24C36}"], [194870, 1, "\u753E"], [194871, 1, "\u{24C92}"], [194872, 1, "\u7570"], [194873, 1, "\u{2219F}"], [194874, 1, "\u7610"], [194875, 1, "\u{24FA1}"], [194876, 1, "\u{24FB8}"], [194877, 1, "\u{25044}"], [194878, 1, "\u3FFC"], [194879, 1, "\u4008"], [194880, 1, "\u76F4"], [194881, 1, "\u{250F3}"], [194882, 1, "\u{250F2}"], [194883, 1, "\u{25119}"], [194884, 1, "\u{25133}"], [194885, 1, "\u771E"], [[194886, 194887], 1, "\u771F"], [194888, 1, "\u774A"], [194889, 1, "\u4039"], [194890, 1, "\u778B"], [194891, 1, "\u4046"], [194892, 1, "\u4096"], [194893, 1, "\u{2541D}"], [194894, 1, "\u784E"], [194895, 1, "\u788C"], [194896, 1, "\u78CC"], [194897, 1, "\u40E3"], [194898, 1, "\u{25626}"], [194899, 1, "\u7956"], [194900, 1, "\u{2569A}"], [194901, 1, "\u{256C5}"], [194902, 1, "\u798F"], [194903, 1, "\u79EB"], [194904, 1, "\u412F"], [194905, 1, "\u7A40"], [194906, 1, "\u7A4A"], [194907, 1, "\u7A4F"], [194908, 1, "\u{2597C}"], [[194909, 194910], 1, "\u{25AA7}"], [194911, 3], [194912, 1, "\u4202"], [194913, 1, "\u{25BAB}"], [194914, 1, "\u7BC6"], [194915, 1, "\u7BC9"], [194916, 1, "\u4227"], [194917, 1, "\u{25C80}"], [194918, 1, "\u7CD2"], [194919, 1, "\u42A0"], [194920, 1, "\u7CE8"], [194921, 1, "\u7CE3"], [194922, 1, "\u7D00"], [194923, 1, "\u{25F86}"], [194924, 1, "\u7D63"], [194925, 1, "\u4301"], [194926, 1, "\u7DC7"], [194927, 1, "\u7E02"], [194928, 1, "\u7E45"], [194929, 1, "\u4334"], [194930, 1, "\u{26228}"], [194931, 1, "\u{26247}"], [194932, 1, "\u4359"], [194933, 1, "\u{262D9}"], [194934, 1, "\u7F7A"], [194935, 1, "\u{2633E}"], [194936, 1, "\u7F95"], [194937, 1, "\u7FFA"], [194938, 1, "\u8005"], [194939, 1, "\u{264DA}"], [194940, 1, "\u{26523}"], [194941, 1, "\u8060"], [194942, 1, "\u{265A8}"], [194943, 1, "\u8070"], [194944, 1, "\u{2335F}"], [194945, 1, "\u43D5"], [194946, 1, "\u80B2"], [194947, 1, "\u8103"], [194948, 1, "\u440B"], [194949, 1, "\u813E"], [194950, 1, "\u5AB5"], [194951, 1, "\u{267A7}"], [194952, 1, "\u{267B5}"], [194953, 1, "\u{23393}"], [194954, 1, "\u{2339C}"], [194955, 1, "\u8201"], [194956, 1, "\u8204"], [194957, 1, "\u8F9E"], [194958, 1, "\u446B"], [194959, 1, "\u8291"], [194960, 1, "\u828B"], [194961, 1, "\u829D"], [194962, 1, "\u52B3"], [194963, 1, "\u82B1"], [194964, 1, "\u82B3"], [194965, 1, "\u82BD"], [194966, 1, "\u82E6"], [194967, 1, "\u{26B3C}"], [194968, 1, "\u82E5"], [194969, 1, "\u831D"], [194970, 1, "\u8363"], [194971, 1, "\u83AD"], [194972, 1, "\u8323"], [194973, 1, "\u83BD"], [194974, 1, "\u83E7"], [194975, 1, "\u8457"], [194976, 1, "\u8353"], [194977, 1, "\u83CA"], [194978, 1, "\u83CC"], [194979, 1, "\u83DC"], [194980, 1, "\u{26C36}"], [194981, 1, "\u{26D6B}"], [194982, 1, "\u{26CD5}"], [194983, 1, "\u452B"], [194984, 1, "\u84F1"], [194985, 1, "\u84F3"], [194986, 1, "\u8516"], [194987, 1, "\u{273CA}"], [194988, 1, "\u8564"], [194989, 1, "\u{26F2C}"], [194990, 1, "\u455D"], [194991, 1, "\u4561"], [194992, 1, "\u{26FB1}"], [194993, 1, "\u{270D2}"], [194994, 1, "\u456B"], [194995, 1, "\u8650"], [194996, 1, "\u865C"], [194997, 1, "\u8667"], [194998, 1, "\u8669"], [194999, 1, "\u86A9"], [195e3, 1, "\u8688"], [195001, 1, "\u870E"], [195002, 1, "\u86E2"], [195003, 1, "\u8779"], [195004, 1, "\u8728"], [195005, 1, "\u876B"], [195006, 1, "\u8786"], [195007, 3], [195008, 1, "\u87E1"], [195009, 1, "\u8801"], [195010, 1, "\u45F9"], [195011, 1, "\u8860"], [195012, 1, "\u8863"], [195013, 1, "\u{27667}"], [195014, 1, "\u88D7"], [195015, 1, "\u88DE"], [195016, 1, "\u4635"], [195017, 1, "\u88FA"], [195018, 1, "\u34BB"], [195019, 1, "\u{278AE}"], [195020, 1, "\u{27966}"], [195021, 1, "\u46BE"], [195022, 1, "\u46C7"], [195023, 1, "\u8AA0"], [195024, 1, "\u8AED"], [195025, 1, "\u8B8A"], [195026, 1, "\u8C55"], [195027, 1, "\u{27CA8}"], [195028, 1, "\u8CAB"], [195029, 1, "\u8CC1"], [195030, 1, "\u8D1B"], [195031, 1, "\u8D77"], [195032, 1, "\u{27F2F}"], [195033, 1, "\u{20804}"], [195034, 1, "\u8DCB"], [195035, 1, "\u8DBC"], [195036, 1, "\u8DF0"], [195037, 1, "\u{208DE}"], [195038, 1, "\u8ED4"], [195039, 1, "\u8F38"], [195040, 1, "\u{285D2}"], [195041, 1, "\u{285ED}"], [195042, 1, "\u9094"], [195043, 1, "\u90F1"], [195044, 1, "\u9111"], [195045, 1, "\u{2872E}"], [195046, 1, "\u911B"], [195047, 1, "\u9238"], [195048, 1, "\u92D7"], [195049, 1, "\u92D8"], [195050, 1, "\u927C"], [195051, 1, "\u93F9"], [195052, 1, "\u9415"], [195053, 1, "\u{28BFA}"], [195054, 1, "\u958B"], [195055, 1, "\u4995"], [195056, 1, "\u95B7"], [195057, 1, "\u{28D77}"], [195058, 1, "\u49E6"], [195059, 1, "\u96C3"], [195060, 1, "\u5DB2"], [195061, 1, "\u9723"], [195062, 1, "\u{29145}"], [195063, 1, "\u{2921A}"], [195064, 1, "\u4A6E"], [195065, 1, "\u4A76"], [195066, 1, "\u97E0"], [195067, 1, "\u{2940A}"], [195068, 1, "\u4AB2"], [195069, 1, "\u{29496}"], [[195070, 195071], 1, "\u980B"], [195072, 1, "\u9829"], [195073, 1, "\u{295B6}"], [195074, 1, "\u98E2"], [195075, 1, "\u4B33"], [195076, 1, "\u9929"], [195077, 1, "\u99A7"], [195078, 1, "\u99C2"], [195079, 1, "\u99FE"], [195080, 1, "\u4BCE"], [195081, 1, "\u{29B30}"], [195082, 1, "\u9B12"], [195083, 1, "\u9C40"], [195084, 1, "\u9CFD"], [195085, 1, "\u4CCE"], [195086, 1, "\u4CED"], [195087, 1, "\u9D67"], [195088, 1, "\u{2A0CE}"], [195089, 1, "\u4CF8"], [195090, 1, "\u{2A105}"], [195091, 1, "\u{2A20E}"], [195092, 1, "\u{2A291}"], [195093, 1, "\u9EBB"], [195094, 1, "\u4D56"], [195095, 1, "\u9EF9"], [195096, 1, "\u9EFE"], [195097, 1, "\u9F05"], [195098, 1, "\u9F0F"], [195099, 1, "\u9F16"], [195100, 1, "\u9F3B"], [195101, 1, "\u{2A600}"], [[195102, 196605], 3], [[196606, 196607], 3], [[196608, 201546], 2], [[201547, 201551], 3], [[201552, 205743], 2], [[205744, 262141], 3], [[262142, 262143], 3], [[262144, 327677], 3], [[327678, 327679], 3], [[327680, 393213], 3], [[393214, 393215], 3], [[393216, 458749], 3], [[458750, 458751], 3], [[458752, 524285], 3], [[524286, 524287], 3], [[524288, 589821], 3], [[589822, 589823], 3], [[589824, 655357], 3], [[655358, 655359], 3], [[655360, 720893], 3], [[720894, 720895], 3], [[720896, 786429], 3], [[786430, 786431], 3], [[786432, 851965], 3], [[851966, 851967], 3], [[851968, 917501], 3], [[917502, 917503], 3], [917504, 3], [917505, 3], [[917506, 917535], 3], [[917536, 917631], 3], [[917632, 917759], 3], [[917760, 917999], 7], [[918e3, 983037], 3], [[983038, 983039], 3], [[983040, 1048573], 3], [[1048574, 1048575], 3], [[1048576, 1114109], 3], [[1114110, 1114111], 3]];
  }
});

// ../../node_modules/.pnpm/tr46@4.1.1/node_modules/tr46/lib/statusMapping.js
var require_statusMapping = __commonJS({
  "../../node_modules/.pnpm/tr46@4.1.1/node_modules/tr46/lib/statusMapping.js"(exports2, module2) {
    "use strict";
    module2.exports.STATUS_MAPPING = {
      mapped: 1,
      valid: 2,
      disallowed: 3,
      disallowed_STD3_valid: 4,
      disallowed_STD3_mapped: 5,
      deviation: 6,
      ignored: 7
    };
  }
});

// ../../node_modules/.pnpm/tr46@4.1.1/node_modules/tr46/index.js
var require_tr46 = __commonJS({
  "../../node_modules/.pnpm/tr46@4.1.1/node_modules/tr46/index.js"(exports2, module2) {
    "use strict";
    var punycode2 = (init_punycode_es6(), __toCommonJS(punycode_es6_exports));
    var regexes = require_regexes();
    var mappingTable = require_mappingTable();
    var { STATUS_MAPPING } = require_statusMapping();
    function containsNonASCII(str2) {
      return /[^\x00-\x7F]/u.test(str2);
    }
    function findStatus(val2, { useSTD3ASCIIRules }) {
      let start = 0;
      let end = mappingTable.length - 1;
      while (start <= end) {
        const mid = Math.floor((start + end) / 2);
        const target = mappingTable[mid];
        const min = Array.isArray(target[0]) ? target[0][0] : target[0];
        const max = Array.isArray(target[0]) ? target[0][1] : target[0];
        if (min <= val2 && max >= val2) {
          if (useSTD3ASCIIRules && (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {
            return [STATUS_MAPPING.disallowed, ...target.slice(2)];
          } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {
            return [STATUS_MAPPING.valid, ...target.slice(2)];
          } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {
            return [STATUS_MAPPING.mapped, ...target.slice(2)];
          }
          return target.slice(1);
        } else if (min > val2) {
          end = mid - 1;
        } else {
          start = mid + 1;
        }
      }
      return null;
    }
    function mapChars(domainName, { useSTD3ASCIIRules, processingOption }) {
      let hasError = false;
      let processed = "";
      for (const ch of domainName) {
        const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });
        switch (status) {
          case STATUS_MAPPING.disallowed:
            hasError = true;
            processed += ch;
            break;
          case STATUS_MAPPING.ignored:
            break;
          case STATUS_MAPPING.mapped:
            processed += mapping;
            break;
          case STATUS_MAPPING.deviation:
            if (processingOption === "transitional") {
              processed += mapping;
            } else {
              processed += ch;
            }
            break;
          case STATUS_MAPPING.valid:
            processed += ch;
            break;
        }
      }
      return {
        string: processed,
        error: hasError
      };
    }
    function validateLabel(label, { checkHyphens, checkBidi, checkJoiners, processingOption, useSTD3ASCIIRules }) {
      if (label.normalize("NFC") !== label) {
        return false;
      }
      const codePoints = Array.from(label);
      if (checkHyphens) {
        if (codePoints[2] === "-" && codePoints[3] === "-" || (label.startsWith("-") || label.endsWith("-"))) {
          return false;
        }
      }
      if (label.includes(".") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {
        return false;
      }
      for (const ch of codePoints) {
        const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });
        if (processingOption === "transitional" && status !== STATUS_MAPPING.valid || processingOption === "nontransitional" && status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {
          return false;
        }
      }
      if (checkJoiners) {
        let last = 0;
        for (const [i6, ch] of codePoints.entries()) {
          if (ch === "\u200C" || ch === "\u200D") {
            if (i6 > 0) {
              if (regexes.combiningClassVirama.test(codePoints[i6 - 1])) {
                continue;
              }
              if (ch === "\u200C") {
                const next = codePoints.indexOf("\u200C", i6 + 1);
                const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);
                if (regexes.validZWNJ.test(test.join(""))) {
                  last = i6 + 1;
                  continue;
                }
              }
            }
            return false;
          }
        }
      }
      if (checkBidi && codePoints.length > 0) {
        let rtl;
        if (regexes.bidiS1LTR.test(codePoints[0])) {
          rtl = false;
        } else if (regexes.bidiS1RTL.test(codePoints[0])) {
          rtl = true;
        } else {
          return false;
        }
        if (rtl) {
          if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {
            return false;
          }
        } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {
          return false;
        }
      }
      return true;
    }
    function isBidiDomain(labels) {
      const domain = labels.map((label) => {
        if (label.startsWith("xn--")) {
          try {
            return punycode2.decode(label.substring(4));
          } catch (err) {
            return "";
          }
        }
        return label;
      }).join(".");
      return regexes.bidiDomain.test(domain);
    }
    function processing(domainName, options) {
      const { processingOption } = options;
      let { string, error: error2 } = mapChars(domainName, options);
      string = string.normalize("NFC");
      const labels = string.split(".");
      const isBidi = isBidiDomain(labels);
      for (const [i6, origLabel] of labels.entries()) {
        let label = origLabel;
        let curProcessing = processingOption;
        if (label.startsWith("xn--")) {
          try {
            label = punycode2.decode(label.substring(4));
            labels[i6] = label;
          } catch (err) {
            error2 = true;
            continue;
          }
          curProcessing = "nontransitional";
        }
        if (error2) {
          continue;
        }
        const validation = validateLabel(label, {
          ...options,
          processingOption: curProcessing,
          checkBidi: options.checkBidi && isBidi
        });
        if (!validation) {
          error2 = true;
        }
      }
      return {
        string: labels.join("."),
        error: error2
      };
    }
    function toASCII2(domainName, {
      checkHyphens = false,
      checkBidi = false,
      checkJoiners = false,
      useSTD3ASCIIRules = false,
      processingOption = "nontransitional",
      verifyDNSLength = false
    } = {}) {
      if (processingOption !== "transitional" && processingOption !== "nontransitional") {
        throw new RangeError("processingOption must be either transitional or nontransitional");
      }
      const result = processing(domainName, {
        processingOption,
        checkHyphens,
        checkBidi,
        checkJoiners,
        useSTD3ASCIIRules
      });
      let labels = result.string.split(".");
      labels = labels.map((l6) => {
        if (containsNonASCII(l6)) {
          try {
            return `xn--${punycode2.encode(l6)}`;
          } catch (e6) {
            result.error = true;
          }
        }
        return l6;
      });
      if (verifyDNSLength) {
        const total = labels.join(".").length;
        if (total > 253 || total === 0) {
          result.error = true;
        }
        for (let i6 = 0; i6 < labels.length; ++i6) {
          if (labels[i6].length > 63 || labels[i6].length === 0) {
            result.error = true;
            break;
          }
        }
      }
      if (result.error) {
        return null;
      }
      return labels.join(".");
    }
    function toUnicode2(domainName, {
      checkHyphens = false,
      checkBidi = false,
      checkJoiners = false,
      useSTD3ASCIIRules = false,
      processingOption = "nontransitional"
    } = {}) {
      const result = processing(domainName, {
        processingOption,
        checkHyphens,
        checkBidi,
        checkJoiners,
        useSTD3ASCIIRules
      });
      return {
        domain: result.string,
        error: result.error
      };
    }
    module2.exports = {
      toASCII: toASCII2,
      toUnicode: toUnicode2
    };
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/infra.js
var require_infra = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/infra.js"(exports2, module2) {
    "use strict";
    function isASCIIDigit(c6) {
      return c6 >= 48 && c6 <= 57;
    }
    function isASCIIAlpha(c6) {
      return c6 >= 65 && c6 <= 90 || c6 >= 97 && c6 <= 122;
    }
    function isASCIIAlphanumeric(c6) {
      return isASCIIAlpha(c6) || isASCIIDigit(c6);
    }
    function isASCIIHex(c6) {
      return isASCIIDigit(c6) || c6 >= 65 && c6 <= 70 || c6 >= 97 && c6 <= 102;
    }
    module2.exports = {
      isASCIIDigit,
      isASCIIAlpha,
      isASCIIAlphanumeric,
      isASCIIHex
    };
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/encoding.js
var require_encoding = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/encoding.js"(exports2, module2) {
    "use strict";
    var utf8Encoder = new TextEncoder();
    var utf8Decoder = new TextDecoder("utf-8", { ignoreBOM: true });
    function utf8Encode(string) {
      return utf8Encoder.encode(string);
    }
    function utf8DecodeWithoutBOM(bytes) {
      return utf8Decoder.decode(bytes);
    }
    module2.exports = {
      utf8Encode,
      utf8DecodeWithoutBOM
    };
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/percent-encoding.js
var require_percent_encoding = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/percent-encoding.js"(exports2, module2) {
    "use strict";
    var { isASCIIHex } = require_infra();
    var { utf8Encode } = require_encoding();
    function p6(char) {
      return char.codePointAt(0);
    }
    function percentEncode(c6) {
      let hex = c6.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = `0${hex}`;
      }
      return `%${hex}`;
    }
    function percentDecodeBytes(input) {
      const output = new Uint8Array(input.byteLength);
      let outputIndex = 0;
      for (let i6 = 0; i6 < input.byteLength; ++i6) {
        const byte = input[i6];
        if (byte !== 37) {
          output[outputIndex++] = byte;
        } else if (byte === 37 && (!isASCIIHex(input[i6 + 1]) || !isASCIIHex(input[i6 + 2]))) {
          output[outputIndex++] = byte;
        } else {
          const bytePoint = parseInt(String.fromCodePoint(input[i6 + 1], input[i6 + 2]), 16);
          output[outputIndex++] = bytePoint;
          i6 += 2;
        }
      }
      return output.slice(0, outputIndex);
    }
    function percentDecodeString(input) {
      const bytes = utf8Encode(input);
      return percentDecodeBytes(bytes);
    }
    function isC0ControlPercentEncode(c6) {
      return c6 <= 31 || c6 > 126;
    }
    var extraFragmentPercentEncodeSet = /* @__PURE__ */ new Set([p6(" "), p6('"'), p6("<"), p6(">"), p6("`")]);
    function isFragmentPercentEncode(c6) {
      return isC0ControlPercentEncode(c6) || extraFragmentPercentEncodeSet.has(c6);
    }
    var extraQueryPercentEncodeSet = /* @__PURE__ */ new Set([p6(" "), p6('"'), p6("#"), p6("<"), p6(">")]);
    function isQueryPercentEncode(c6) {
      return isC0ControlPercentEncode(c6) || extraQueryPercentEncodeSet.has(c6);
    }
    function isSpecialQueryPercentEncode(c6) {
      return isQueryPercentEncode(c6) || c6 === p6("'");
    }
    var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([p6("?"), p6("`"), p6("{"), p6("}")]);
    function isPathPercentEncode(c6) {
      return isQueryPercentEncode(c6) || extraPathPercentEncodeSet.has(c6);
    }
    var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([p6("/"), p6(":"), p6(";"), p6("="), p6("@"), p6("["), p6("\\"), p6("]"), p6("^"), p6("|")]);
    function isUserinfoPercentEncode(c6) {
      return isPathPercentEncode(c6) || extraUserinfoPercentEncodeSet.has(c6);
    }
    var extraComponentPercentEncodeSet = /* @__PURE__ */ new Set([p6("$"), p6("%"), p6("&"), p6("+"), p6(",")]);
    function isComponentPercentEncode(c6) {
      return isUserinfoPercentEncode(c6) || extraComponentPercentEncodeSet.has(c6);
    }
    var extraURLEncodedPercentEncodeSet = /* @__PURE__ */ new Set([p6("!"), p6("'"), p6("("), p6(")"), p6("~")]);
    function isURLEncodedPercentEncode(c6) {
      return isComponentPercentEncode(c6) || extraURLEncodedPercentEncodeSet.has(c6);
    }
    function utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {
      const bytes = utf8Encode(codePoint);
      let output = "";
      for (const byte of bytes) {
        if (!percentEncodePredicate(byte)) {
          output += String.fromCharCode(byte);
        } else {
          output += percentEncode(byte);
        }
      }
      return output;
    }
    function utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {
      return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);
    }
    function utf8PercentEncodeString(input, percentEncodePredicate, spaceAsPlus = false) {
      let output = "";
      for (const codePoint of input) {
        if (spaceAsPlus && codePoint === " ") {
          output += "+";
        } else {
          output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);
        }
      }
      return output;
    }
    module2.exports = {
      isC0ControlPercentEncode,
      isFragmentPercentEncode,
      isQueryPercentEncode,
      isSpecialQueryPercentEncode,
      isPathPercentEncode,
      isUserinfoPercentEncode,
      isURLEncodedPercentEncode,
      percentDecodeString,
      percentDecodeBytes,
      utf8PercentEncodeString,
      utf8PercentEncodeCodePoint
    };
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/url-state-machine.js"(exports2, module2) {
    "use strict";
    var tr46 = require_tr46();
    var infra = require_infra();
    var { utf8DecodeWithoutBOM } = require_encoding();
    var {
      percentDecodeString,
      utf8PercentEncodeCodePoint,
      utf8PercentEncodeString,
      isC0ControlPercentEncode,
      isFragmentPercentEncode,
      isQueryPercentEncode,
      isSpecialQueryPercentEncode,
      isPathPercentEncode,
      isUserinfoPercentEncode
    } = require_percent_encoding();
    function p6(char) {
      return char.codePointAt(0);
    }
    var specialSchemes = {
      ftp: 21,
      file: null,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str2) {
      return [...str2].length;
    }
    function at2(input, idx) {
      const c6 = input[idx];
      return isNaN(c6) ? void 0 : String.fromCodePoint(c6);
    }
    function isSingleDot(buffer) {
      return buffer === "." || buffer.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer) {
      buffer = buffer.toLowerCase();
      return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return infra.isASCIIAlpha(cp1) && (cp2 === p6(":") || cp2 === p6("|"));
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|<|>|\?|@|\[|\\|\]|\^|\|/u) !== -1;
    }
    function containsForbiddenDomainCodePoint(string) {
      return containsForbiddenHostCodePoint(string) || string.search(/[\u0000-\u001F]|%|\u007F/u) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== void 0;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function isNotSpecial(url) {
      return !isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function parseIPv4Number(input) {
      if (input === "") {
        return failure;
      }
      let R2 = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R2 = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R2 = 8;
      }
      if (input === "") {
        return 0;
      }
      let regex = /[^0-7]/u;
      if (R2 === 10) {
        regex = /[^0-9]/u;
      }
      if (R2 === 16) {
        regex = /[^0-9A-Fa-f]/u;
      }
      if (regex.test(input)) {
        return failure;
      }
      return parseInt(input, R2);
    }
    function parseIPv4(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return failure;
      }
      const numbers = [];
      for (const part of parts) {
        const n6 = parseIPv4Number(part);
        if (n6 === failure) {
          return failure;
        }
        numbers.push(n6);
      }
      for (let i6 = 0; i6 < numbers.length - 1; ++i6) {
        if (numbers[i6] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {
        return failure;
      }
      let ipv4 = numbers.pop();
      let counter = 0;
      for (const n6 of numbers) {
        ipv4 += n6 * 256 ** (3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      let output = "";
      let n6 = address;
      for (let i6 = 1; i6 <= 4; ++i6) {
        output = String(n6 % 256) + output;
        if (i6 !== 4) {
          output = `.${output}`;
        }
        n6 = Math.floor(n6 / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      const address = [0, 0, 0, 0, 0, 0, 0, 0];
      let pieceIndex = 0;
      let compress = null;
      let pointer = 0;
      input = Array.from(input, (c6) => c6.codePointAt(0));
      if (input[pointer] === p6(":")) {
        if (input[pointer + 1] !== p6(":")) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === p6(":")) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        let value = 0;
        let length = 0;
        while (length < 4 && infra.isASCIIHex(input[pointer])) {
          value = value * 16 + parseInt(at2(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === p6(".")) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          let numbersSeen = 0;
          while (input[pointer] !== void 0) {
            let ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === p6(".") && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!infra.isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (infra.isASCIIDigit(input[pointer])) {
              const number = parseInt(at2(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === p6(":")) {
          ++pointer;
          if (input[pointer] === void 0) {
            return failure;
          }
        } else if (input[pointer] !== void 0) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          const temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      let output = "";
      const compress = findLongestZeroSequence(address);
      let ignore0 = false;
      for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          const separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isNotSpecialArg = false) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (isNotSpecialArg) {
        return parseOpaqueHost(input);
      }
      const domain = utf8DecodeWithoutBOM(percentDecodeString(input));
      const asciiDomain = domainToASCII(domain);
      if (asciiDomain === failure) {
        return failure;
      }
      if (containsForbiddenDomainCodePoint(asciiDomain)) {
        return failure;
      }
      if (endsInANumber(asciiDomain)) {
        return parseIPv4(asciiDomain);
      }
      return asciiDomain;
    }
    function endsInANumber(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length === 1) {
          return false;
        }
        parts.pop();
      }
      const last = parts[parts.length - 1];
      if (parseIPv4Number(last) !== failure) {
        return true;
      }
      if (/^[0-9]+$/u.test(last)) {
        return true;
      }
      return false;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePoint(input)) {
        return failure;
      }
      return utf8PercentEncodeString(input, isC0ControlPercentEncode);
    }
    function findLongestZeroSequence(arr) {
      let maxIdx = null;
      let maxLen = 1;
      let currStart = null;
      let currLen = 0;
      for (let i6 = 0; i6 < arr.length; ++i6) {
        if (arr[i6] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i6;
          }
          ++currLen;
        }
      }
      if (currLen > maxLen) {
        return currStart;
      }
      return maxIdx;
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }
      if (host instanceof Array) {
        return `[${serializeIPv6(host)}]`;
      }
      return host;
    }
    function domainToASCII(domain, beStrict = false) {
      const result = tr46.toASCII(domain, {
        checkBidi: true,
        checkHyphens: false,
        checkJoiners: true,
        useSTD3ASCIIRules: beStrict,
        verifyDNSLength: beStrict
      });
      if (result === null || result === "") {
        return failure;
      }
      return result;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/ug, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/ug, "");
    }
    function shortenPath(url) {
      const { path } = url;
      if (path.length === 0) {
        return;
      }
      if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
      }
      path.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.scheme === "file";
    }
    function hasAnOpaquePath(url) {
      return typeof url.path === "string";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/u.test(string);
    }
    function URLStateMachine(input, base2, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base2 || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null
        };
        const res2 = trimControlChars(this.input);
        if (res2 !== this.input) {
          this.parseError = true;
        }
        this.input = res2;
      }
      const res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = Array.from(this.input, (c6) => c6.codePointAt(0));
      for (; this.pointer <= this.input.length; ++this.pointer) {
        const c6 = this.input[this.pointer];
        const cStr = isNaN(c6) ? void 0 : String.fromCodePoint(c6);
        const ret = this[`parse ${this.state}`](c6, cStr);
        if (!ret) {
          break;
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c6, cStr) {
      if (infra.isASCIIAlpha(c6)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c6, cStr) {
      if (infra.isASCIIAlphanumeric(c6) || c6 === p6("+") || c6 === p6("-") || c6 === p6(".")) {
        this.buffer += cStr.toLowerCase();
      } else if (c6 === p6(":")) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && this.url.host === "") {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        if (this.stateOverride) {
          if (this.url.port === defaultPort(this.url.scheme)) {
            this.url.port = null;
          }
          return false;
        }
        this.buffer = "";
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== p6("/") || this.input[this.pointer + 2] !== p6("/")) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === p6("/")) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.path = "";
          this.state = "opaque path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c6) {
      if (this.base === null || hasAnOpaquePath(this.base) && c6 !== p6("#")) {
        return failure;
      } else if (hasAnOpaquePath(this.base) && c6 === p6("#")) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path;
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c6) {
      if (c6 === p6("/") && this.input[this.pointer + 1] === p6("/")) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c6) {
      if (c6 === p6("/")) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c6) {
      this.url.scheme = this.base.scheme;
      if (c6 === p6("/")) {
        this.state = "relative slash";
      } else if (isSpecial(this.url) && c6 === p6("\\")) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        if (c6 === p6("?")) {
          this.url.query = "";
          this.state = "query";
        } else if (c6 === p6("#")) {
          this.url.fragment = "";
          this.state = "fragment";
        } else if (!isNaN(c6)) {
          this.url.query = null;
          this.url.path.pop();
          this.state = "path";
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c6) {
      if (isSpecial(this.url) && (c6 === p6("/") || c6 === p6("\\"))) {
        if (c6 === p6("\\")) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c6 === p6("/")) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c6) {
      if (c6 === p6("/") && this.input[this.pointer + 1] === p6("/")) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c6) {
      if (c6 !== p6("/") && c6 !== p6("\\")) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c6, cStr) {
      if (c6 === p6("@")) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = `%40${this.buffer}`;
        }
        this.atFlag = true;
        const len = countSymbols(this.buffer);
        for (let pointer = 0; pointer < len; ++pointer) {
          const codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === p6(":") && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c6) || c6 === p6("/") || c6 === p6("?") || c6 === p6("#") || isSpecial(this.url) && c6 === p6("\\")) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c6, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c6 === p6(":") && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        if (this.stateOverride === "hostname") {
          return false;
        }
        const host = parseHost(this.buffer, isNotSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
      } else if (isNaN(c6) || c6 === p6("/") || c6 === p6("?") || c6 === p6("#") || isSpecial(this.url) && c6 === p6("\\")) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        const host = parseHost(this.buffer, isNotSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c6 === p6("[")) {
          this.arrFlag = true;
        } else if (c6 === p6("]")) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c6, cStr) {
      if (infra.isASCIIDigit(c6)) {
        this.buffer += cStr;
      } else if (isNaN(c6) || c6 === p6("/") || c6 === p6("?") || c6 === p6("#") || isSpecial(this.url) && c6 === p6("\\") || this.stateOverride) {
        if (this.buffer !== "") {
          const port = parseInt(this.buffer);
          if (port > 2 ** 16 - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([p6("/"), p6("\\"), p6("?"), p6("#")]);
    function startsWithWindowsDriveLetter(input, pointer) {
      const length = input.length - pointer;
      return length >= 2 && isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) && (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));
    }
    URLStateMachine.prototype["parse file"] = function parseFile(c6) {
      this.url.scheme = "file";
      this.url.host = "";
      if (c6 === p6("/") || c6 === p6("\\")) {
        if (c6 === p6("\\")) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        if (c6 === p6("?")) {
          this.url.query = "";
          this.state = "query";
        } else if (c6 === p6("#")) {
          this.url.fragment = "";
          this.state = "fragment";
        } else if (!isNaN(c6)) {
          this.url.query = null;
          if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {
            shortenPath(this.url);
          } else {
            this.parseError = true;
            this.url.path = [];
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c6) {
      if (c6 === p6("/") || c6 === p6("\\")) {
        if (c6 === p6("\\")) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (!startsWithWindowsDriveLetter(this.input, this.pointer) && isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          }
          this.url.host = this.base.host;
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c6, cStr) {
      if (isNaN(c6) || c6 === p6("/") || c6 === p6("\\") || c6 === p6("?") || c6 === p6("#")) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          let host = parseHost(this.buffer, isNotSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c6) {
      if (isSpecial(this.url)) {
        if (c6 === p6("\\")) {
          this.parseError = true;
        }
        this.state = "path";
        if (c6 !== p6("/") && c6 !== p6("\\")) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c6 === p6("?")) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c6 === p6("#")) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c6 !== void 0) {
        this.state = "path";
        if (c6 !== p6("/")) {
          --this.pointer;
        }
      } else if (this.stateOverride && this.url.host === null) {
        this.url.path.push("");
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c6) {
      if (isNaN(c6) || c6 === p6("/") || isSpecial(this.url) && c6 === p6("\\") || !this.stateOverride && (c6 === p6("?") || c6 === p6("#"))) {
        if (isSpecial(this.url) && c6 === p6("\\")) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c6 !== p6("/") && !(isSpecial(this.url) && c6 === p6("\\"))) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c6 !== p6("/") && !(isSpecial(this.url) && c6 === p6("\\"))) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            this.buffer = `${this.buffer[0]}:`;
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (c6 === p6("?")) {
          this.url.query = "";
          this.state = "query";
        }
        if (c6 === p6("#")) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c6 === p6("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += utf8PercentEncodeCodePoint(c6, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse opaque path"] = function parseOpaquePath(c6) {
      if (c6 === p6("?")) {
        this.url.query = "";
        this.state = "query";
      } else if (c6 === p6("#")) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!isNaN(c6) && c6 !== p6("%")) {
          this.parseError = true;
        }
        if (c6 === p6("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c6)) {
          this.url.path += utf8PercentEncodeCodePoint(c6, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c6, cStr) {
      if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
        this.encodingOverride = "utf-8";
      }
      if (!this.stateOverride && c6 === p6("#") || isNaN(c6)) {
        const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;
        this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);
        this.buffer = "";
        if (c6 === p6("#")) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else if (!isNaN(c6)) {
        if (c6 === p6("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c6) {
      if (!isNaN(c6)) {
        if (c6 === p6("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += utf8PercentEncodeCodePoint(c6, isFragmentPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      let output = `${url.scheme}:`;
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += `:${url.password}`;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += `:${url.port}`;
        }
      }
      if (url.host === null && !hasAnOpaquePath(url) && url.path.length > 1 && url.path[0] === "") {
        output += "/.";
      }
      output += serializePath(url);
      if (url.query !== null) {
        output += `?${url.query}`;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += `#${url.fragment}`;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      let result = `${tuple.scheme}://`;
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += `:${tuple.port}`;
      }
      return result;
    }
    function serializePath(url) {
      if (hasAnOpaquePath(url)) {
        return url.path;
      }
      let output = "";
      for (const segment of url.path) {
        output += `/${segment}`;
      }
      return output;
    }
    module2.exports.serializeURL = serializeURL;
    module2.exports.serializePath = serializePath;
    module2.exports.serializeURLOrigin = function(url) {
      switch (url.scheme) {
        case "blob": {
          const pathURL = module2.exports.parseURL(serializePath(url));
          if (pathURL === null) {
            return "null";
          }
          if (pathURL.scheme !== "http" && pathURL.scheme !== "https") {
            return "null";
          }
          return module2.exports.serializeURLOrigin(pathURL);
        }
        case "ftp":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          return "null";
        default:
          return "null";
      }
    };
    module2.exports.basicURLParse = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return null;
      }
      return usm.url;
    };
    module2.exports.setTheUsername = function(url, username) {
      url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);
    };
    module2.exports.setThePassword = function(url, password) {
      url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);
    };
    module2.exports.serializeHost = serializeHost;
    module2.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module2.exports.hasAnOpaquePath = hasAnOpaquePath;
    module2.exports.serializeInteger = function(integer) {
      return String(integer);
    };
    module2.exports.parseURL = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return module2.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
    };
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/urlencoded.js
var require_urlencoded = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/urlencoded.js"(exports2, module2) {
    "use strict";
    var { utf8Encode, utf8DecodeWithoutBOM } = require_encoding();
    var { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = require_percent_encoding();
    function p6(char) {
      return char.codePointAt(0);
    }
    function parseUrlencoded(input) {
      const sequences = strictlySplitByteSequence(input, p6("&"));
      const output = [];
      for (const bytes of sequences) {
        if (bytes.length === 0) {
          continue;
        }
        let name, value;
        const indexOfEqual = bytes.indexOf(p6("="));
        if (indexOfEqual >= 0) {
          name = bytes.slice(0, indexOfEqual);
          value = bytes.slice(indexOfEqual + 1);
        } else {
          name = bytes;
          value = new Uint8Array(0);
        }
        name = replaceByteInByteSequence(name, 43, 32);
        value = replaceByteInByteSequence(value, 43, 32);
        const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));
        const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));
        output.push([nameString, valueString]);
      }
      return output;
    }
    function parseUrlencodedString(input) {
      return parseUrlencoded(utf8Encode(input));
    }
    function serializeUrlencoded(tuples, encodingOverride = void 0) {
      let encoding = "utf-8";
      if (encodingOverride !== void 0) {
        encoding = encodingOverride;
      }
      let output = "";
      for (const [i6, tuple] of tuples.entries()) {
        const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);
        let value = tuple[1];
        if (tuple.length > 2 && tuple[2] !== void 0) {
          if (tuple[2] === "hidden" && name === "_charset_") {
            value = encoding;
          } else if (tuple[2] === "file") {
            value = value.name;
          }
        }
        value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);
        if (i6 !== 0) {
          output += "&";
        }
        output += `${name}=${value}`;
      }
      return output;
    }
    function strictlySplitByteSequence(buf, cp) {
      const list = [];
      let last = 0;
      let i6 = buf.indexOf(cp);
      while (i6 >= 0) {
        list.push(buf.slice(last, i6));
        last = i6 + 1;
        i6 = buf.indexOf(cp, last);
      }
      if (last !== buf.length) {
        list.push(buf.slice(last));
      }
      return list;
    }
    function replaceByteInByteSequence(buf, from, to) {
      let i6 = buf.indexOf(from);
      while (i6 >= 0) {
        buf[i6] = to;
        i6 = buf.indexOf(from, i6 + 1);
      }
      return buf;
    }
    module2.exports = {
      parseUrlencodedString,
      serializeUrlencoded
    };
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/Function.js
var require_Function = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/Function.js"(exports2) {
    "use strict";
    var conversions = require_lib();
    var utils = require_utils();
    exports2.convert = (globalObject, value, { context = "The provided value" } = {}) => {
      if (typeof value !== "function") {
        throw new globalObject.TypeError(context + " is not a function");
      }
      function invokeTheCallbackFunction(...args) {
        const thisArg = utils.tryWrapperForImpl(this);
        let callResult;
        for (let i6 = 0; i6 < args.length; i6++) {
          args[i6] = utils.tryWrapperForImpl(args[i6]);
        }
        callResult = Reflect.apply(value, thisArg, args);
        callResult = conversions["any"](callResult, { context, globals: globalObject });
        return callResult;
      }
      invokeTheCallbackFunction.construct = (...args) => {
        for (let i6 = 0; i6 < args.length; i6++) {
          args[i6] = utils.tryWrapperForImpl(args[i6]);
        }
        let callResult = Reflect.construct(value, args);
        callResult = conversions["any"](callResult, { context, globals: globalObject });
        return callResult;
      };
      invokeTheCallbackFunction[utils.wrapperSymbol] = value;
      invokeTheCallbackFunction.objectReference = value;
      return invokeTheCallbackFunction;
    };
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/URLSearchParams-impl.js
var require_URLSearchParams_impl = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/URLSearchParams-impl.js"(exports2) {
    "use strict";
    var urlencoded = require_urlencoded();
    exports2.implementation = class URLSearchParamsImpl {
      constructor(globalObject, constructorArgs, { doNotStripQMark = false }) {
        let init = constructorArgs[0];
        this._list = [];
        this._url = null;
        if (!doNotStripQMark && typeof init === "string" && init[0] === "?") {
          init = init.slice(1);
        }
        if (Array.isArray(init)) {
          for (const pair of init) {
            if (pair.length !== 2) {
              throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence's element does not contain exactly two elements.");
            }
            this._list.push([pair[0], pair[1]]);
          }
        } else if (typeof init === "object" && Object.getPrototypeOf(init) === null) {
          for (const name of Object.keys(init)) {
            const value = init[name];
            this._list.push([name, value]);
          }
        } else {
          this._list = urlencoded.parseUrlencodedString(init);
        }
      }
      _updateSteps() {
        if (this._url !== null) {
          let serializedQuery = urlencoded.serializeUrlencoded(this._list);
          if (serializedQuery === "") {
            serializedQuery = null;
          }
          this._url._url.query = serializedQuery;
          if (serializedQuery === null) {
            this._url._potentiallyStripTrailingSpacesFromAnOpaquePath();
          }
        }
      }
      get size() {
        return this._list.length;
      }
      append(name, value) {
        this._list.push([name, value]);
        this._updateSteps();
      }
      delete(name, value) {
        let i6 = 0;
        while (i6 < this._list.length) {
          if (this._list[i6][0] === name && (value === void 0 || this._list[i6][1] === value)) {
            this._list.splice(i6, 1);
          } else {
            i6++;
          }
        }
        this._updateSteps();
      }
      get(name) {
        for (const tuple of this._list) {
          if (tuple[0] === name) {
            return tuple[1];
          }
        }
        return null;
      }
      getAll(name) {
        const output = [];
        for (const tuple of this._list) {
          if (tuple[0] === name) {
            output.push(tuple[1]);
          }
        }
        return output;
      }
      has(name, value) {
        for (const tuple of this._list) {
          if (tuple[0] === name && (value === void 0 || tuple[1] === value)) {
            return true;
          }
        }
        return false;
      }
      set(name, value) {
        let found = false;
        let i6 = 0;
        while (i6 < this._list.length) {
          if (this._list[i6][0] === name) {
            if (found) {
              this._list.splice(i6, 1);
            } else {
              found = true;
              this._list[i6][1] = value;
              i6++;
            }
          } else {
            i6++;
          }
        }
        if (!found) {
          this._list.push([name, value]);
        }
        this._updateSteps();
      }
      sort() {
        this._list.sort((a6, b6) => {
          if (a6[0] < b6[0]) {
            return -1;
          }
          if (a6[0] > b6[0]) {
            return 1;
          }
          return 0;
        });
        this._updateSteps();
      }
      [Symbol.iterator]() {
        return this._list[Symbol.iterator]();
      }
      toString() {
        return urlencoded.serializeUrlencoded(this._list);
      }
    };
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/URLSearchParams.js
var require_URLSearchParams = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/URLSearchParams.js"(exports2) {
    "use strict";
    var conversions = require_lib();
    var utils = require_utils();
    var Function2 = require_Function();
    var newObjectInRealm = utils.newObjectInRealm;
    var implSymbol = utils.implSymbol;
    var ctorRegistrySymbol = utils.ctorRegistrySymbol;
    var interfaceName = "URLSearchParams";
    exports2.is = (value) => {
      return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
    };
    exports2.isImpl = (value) => {
      return utils.isObject(value) && value instanceof Impl.implementation;
    };
    exports2.convert = (globalObject, value, { context = "The provided value" } = {}) => {
      if (exports2.is(value)) {
        return utils.implForWrapper(value);
      }
      throw new globalObject.TypeError(`${context} is not of type 'URLSearchParams'.`);
    };
    exports2.createDefaultIterator = (globalObject, target, kind2) => {
      const ctorRegistry = globalObject[ctorRegistrySymbol];
      const iteratorPrototype = ctorRegistry["URLSearchParams Iterator"];
      const iterator = Object.create(iteratorPrototype);
      Object.defineProperty(iterator, utils.iterInternalSymbol, {
        value: { target, kind: kind2, index: 0 },
        configurable: true
      });
      return iterator;
    };
    function makeWrapper(globalObject, newTarget) {
      let proto;
      if (newTarget !== void 0) {
        proto = newTarget.prototype;
      }
      if (!utils.isObject(proto)) {
        proto = globalObject[ctorRegistrySymbol]["URLSearchParams"].prototype;
      }
      return Object.create(proto);
    }
    exports2.create = (globalObject, constructorArgs, privateData) => {
      const wrapper = makeWrapper(globalObject);
      return exports2.setup(wrapper, globalObject, constructorArgs, privateData);
    };
    exports2.createImpl = (globalObject, constructorArgs, privateData) => {
      const wrapper = exports2.create(globalObject, constructorArgs, privateData);
      return utils.implForWrapper(wrapper);
    };
    exports2._internalSetup = (wrapper, globalObject) => {
    };
    exports2.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
      privateData.wrapper = wrapper;
      exports2._internalSetup(wrapper, globalObject);
      Object.defineProperty(wrapper, implSymbol, {
        value: new Impl.implementation(globalObject, constructorArgs, privateData),
        configurable: true
      });
      wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
      if (Impl.init) {
        Impl.init(wrapper[implSymbol]);
      }
      return wrapper;
    };
    exports2.new = (globalObject, newTarget) => {
      const wrapper = makeWrapper(globalObject, newTarget);
      exports2._internalSetup(wrapper, globalObject);
      Object.defineProperty(wrapper, implSymbol, {
        value: Object.create(Impl.implementation.prototype),
        configurable: true
      });
      wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
      if (Impl.init) {
        Impl.init(wrapper[implSymbol]);
      }
      return wrapper[implSymbol];
    };
    var exposed = /* @__PURE__ */ new Set(["Window", "Worker"]);
    exports2.install = (globalObject, globalNames) => {
      if (!globalNames.some((globalName) => exposed.has(globalName))) {
        return;
      }
      const ctorRegistry = utils.initCtorRegistry(globalObject);
      class URLSearchParams2 {
        constructor() {
          const args = [];
          {
            let curArg = arguments[0];
            if (curArg !== void 0) {
              if (utils.isObject(curArg)) {
                if (curArg[Symbol.iterator] !== void 0) {
                  if (!utils.isObject(curArg)) {
                    throw new globalObject.TypeError(
                      "Failed to construct 'URLSearchParams': parameter 1 sequence is not an iterable object."
                    );
                  } else {
                    const V2 = [];
                    const tmp = curArg;
                    for (let nextItem of tmp) {
                      if (!utils.isObject(nextItem)) {
                        throw new globalObject.TypeError(
                          "Failed to construct 'URLSearchParams': parameter 1 sequence's element is not an iterable object."
                        );
                      } else {
                        const V3 = [];
                        const tmp2 = nextItem;
                        for (let nextItem2 of tmp2) {
                          nextItem2 = conversions["USVString"](nextItem2, {
                            context: "Failed to construct 'URLSearchParams': parameter 1 sequence's element's element",
                            globals: globalObject
                          });
                          V3.push(nextItem2);
                        }
                        nextItem = V3;
                      }
                      V2.push(nextItem);
                    }
                    curArg = V2;
                  }
                } else {
                  if (!utils.isObject(curArg)) {
                    throw new globalObject.TypeError(
                      "Failed to construct 'URLSearchParams': parameter 1 record is not an object."
                    );
                  } else {
                    const result = /* @__PURE__ */ Object.create(null);
                    for (const key of Reflect.ownKeys(curArg)) {
                      const desc = Object.getOwnPropertyDescriptor(curArg, key);
                      if (desc && desc.enumerable) {
                        let typedKey = key;
                        typedKey = conversions["USVString"](typedKey, {
                          context: "Failed to construct 'URLSearchParams': parameter 1 record's key",
                          globals: globalObject
                        });
                        let typedValue = curArg[key];
                        typedValue = conversions["USVString"](typedValue, {
                          context: "Failed to construct 'URLSearchParams': parameter 1 record's value",
                          globals: globalObject
                        });
                        result[typedKey] = typedValue;
                      }
                    }
                    curArg = result;
                  }
                }
              } else {
                curArg = conversions["USVString"](curArg, {
                  context: "Failed to construct 'URLSearchParams': parameter 1",
                  globals: globalObject
                });
              }
            } else {
              curArg = "";
            }
            args.push(curArg);
          }
          return exports2.setup(Object.create(new.target.prototype), globalObject, args);
        }
        append(name, value) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError(
              "'append' called on an object that is not a valid instance of URLSearchParams."
            );
          }
          if (arguments.length < 2) {
            throw new globalObject.TypeError(
              `Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`
            );
          }
          const args = [];
          {
            let curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'append' on 'URLSearchParams': parameter 1",
              globals: globalObject
            });
            args.push(curArg);
          }
          {
            let curArg = arguments[1];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'append' on 'URLSearchParams': parameter 2",
              globals: globalObject
            });
            args.push(curArg);
          }
          return utils.tryWrapperForImpl(esValue[implSymbol].append(...args));
        }
        delete(name) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError(
              "'delete' called on an object that is not a valid instance of URLSearchParams."
            );
          }
          if (arguments.length < 1) {
            throw new globalObject.TypeError(
              `Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`
            );
          }
          const args = [];
          {
            let curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'delete' on 'URLSearchParams': parameter 1",
              globals: globalObject
            });
            args.push(curArg);
          }
          {
            let curArg = arguments[1];
            if (curArg !== void 0) {
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'delete' on 'URLSearchParams': parameter 2",
                globals: globalObject
              });
            }
            args.push(curArg);
          }
          return utils.tryWrapperForImpl(esValue[implSymbol].delete(...args));
        }
        get(name) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get' called on an object that is not a valid instance of URLSearchParams.");
          }
          if (arguments.length < 1) {
            throw new globalObject.TypeError(
              `Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`
            );
          }
          const args = [];
          {
            let curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'get' on 'URLSearchParams': parameter 1",
              globals: globalObject
            });
            args.push(curArg);
          }
          return esValue[implSymbol].get(...args);
        }
        getAll(name) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError(
              "'getAll' called on an object that is not a valid instance of URLSearchParams."
            );
          }
          if (arguments.length < 1) {
            throw new globalObject.TypeError(
              `Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`
            );
          }
          const args = [];
          {
            let curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'getAll' on 'URLSearchParams': parameter 1",
              globals: globalObject
            });
            args.push(curArg);
          }
          return utils.tryWrapperForImpl(esValue[implSymbol].getAll(...args));
        }
        has(name) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'has' called on an object that is not a valid instance of URLSearchParams.");
          }
          if (arguments.length < 1) {
            throw new globalObject.TypeError(
              `Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`
            );
          }
          const args = [];
          {
            let curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'has' on 'URLSearchParams': parameter 1",
              globals: globalObject
            });
            args.push(curArg);
          }
          {
            let curArg = arguments[1];
            if (curArg !== void 0) {
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'has' on 'URLSearchParams': parameter 2",
                globals: globalObject
              });
            }
            args.push(curArg);
          }
          return esValue[implSymbol].has(...args);
        }
        set(name, value) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set' called on an object that is not a valid instance of URLSearchParams.");
          }
          if (arguments.length < 2) {
            throw new globalObject.TypeError(
              `Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`
            );
          }
          const args = [];
          {
            let curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'set' on 'URLSearchParams': parameter 1",
              globals: globalObject
            });
            args.push(curArg);
          }
          {
            let curArg = arguments[1];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'set' on 'URLSearchParams': parameter 2",
              globals: globalObject
            });
            args.push(curArg);
          }
          return utils.tryWrapperForImpl(esValue[implSymbol].set(...args));
        }
        sort() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'sort' called on an object that is not a valid instance of URLSearchParams.");
          }
          return utils.tryWrapperForImpl(esValue[implSymbol].sort());
        }
        toString() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError(
              "'toString' called on an object that is not a valid instance of URLSearchParams."
            );
          }
          return esValue[implSymbol].toString();
        }
        keys() {
          if (!exports2.is(this)) {
            throw new globalObject.TypeError("'keys' called on an object that is not a valid instance of URLSearchParams.");
          }
          return exports2.createDefaultIterator(globalObject, this, "key");
        }
        values() {
          if (!exports2.is(this)) {
            throw new globalObject.TypeError(
              "'values' called on an object that is not a valid instance of URLSearchParams."
            );
          }
          return exports2.createDefaultIterator(globalObject, this, "value");
        }
        entries() {
          if (!exports2.is(this)) {
            throw new globalObject.TypeError(
              "'entries' called on an object that is not a valid instance of URLSearchParams."
            );
          }
          return exports2.createDefaultIterator(globalObject, this, "key+value");
        }
        forEach(callback) {
          if (!exports2.is(this)) {
            throw new globalObject.TypeError(
              "'forEach' called on an object that is not a valid instance of URLSearchParams."
            );
          }
          if (arguments.length < 1) {
            throw new globalObject.TypeError(
              "Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present."
            );
          }
          callback = Function2.convert(globalObject, callback, {
            context: "Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1"
          });
          const thisArg = arguments[1];
          let pairs = Array.from(this[implSymbol]);
          let i6 = 0;
          while (i6 < pairs.length) {
            const [key, value] = pairs[i6].map(utils.tryWrapperForImpl);
            callback.call(thisArg, value, key, this);
            pairs = Array.from(this[implSymbol]);
            i6++;
          }
        }
        get size() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError(
              "'get size' called on an object that is not a valid instance of URLSearchParams."
            );
          }
          return esValue[implSymbol]["size"];
        }
      }
      Object.defineProperties(URLSearchParams2.prototype, {
        append: { enumerable: true },
        delete: { enumerable: true },
        get: { enumerable: true },
        getAll: { enumerable: true },
        has: { enumerable: true },
        set: { enumerable: true },
        sort: { enumerable: true },
        toString: { enumerable: true },
        keys: { enumerable: true },
        values: { enumerable: true },
        entries: { enumerable: true },
        forEach: { enumerable: true },
        size: { enumerable: true },
        [Symbol.toStringTag]: { value: "URLSearchParams", configurable: true },
        [Symbol.iterator]: { value: URLSearchParams2.prototype.entries, configurable: true, writable: true }
      });
      ctorRegistry[interfaceName] = URLSearchParams2;
      ctorRegistry["URLSearchParams Iterator"] = Object.create(ctorRegistry["%IteratorPrototype%"], {
        [Symbol.toStringTag]: {
          configurable: true,
          value: "URLSearchParams Iterator"
        }
      });
      utils.define(ctorRegistry["URLSearchParams Iterator"], {
        next() {
          const internal = this && this[utils.iterInternalSymbol];
          if (!internal) {
            throw new globalObject.TypeError("next() called on a value that is not a URLSearchParams iterator object");
          }
          const { target, kind: kind2, index: index2 } = internal;
          const values = Array.from(target[implSymbol]);
          const len = values.length;
          if (index2 >= len) {
            return newObjectInRealm(globalObject, { value: void 0, done: true });
          }
          const pair = values[index2];
          internal.index = index2 + 1;
          return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind2));
        }
      });
      Object.defineProperty(globalObject, interfaceName, {
        configurable: true,
        writable: true,
        value: URLSearchParams2
      });
    };
    var Impl = require_URLSearchParams_impl();
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/URL-impl.js"(exports2) {
    "use strict";
    var usm = require_url_state_machine();
    var urlencoded = require_urlencoded();
    var URLSearchParams2 = require_URLSearchParams();
    exports2.implementation = class URLImpl {
      // Unlike the spec, we duplicate some code between the constructor and canParse, because we want to give useful error
      // messages in the constructor that distinguish between the different causes of failure.
      constructor(globalObject, constructorArgs) {
        const url = constructorArgs[0];
        const base2 = constructorArgs[1];
        let parsedBase = null;
        if (base2 !== void 0) {
          parsedBase = usm.basicURLParse(base2);
          if (parsedBase === null) {
            throw new TypeError(`Invalid base URL: ${base2}`);
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === null) {
          throw new TypeError(`Invalid URL: ${url}`);
        }
        const query = parsedURL.query !== null ? parsedURL.query : "";
        this._url = parsedURL;
        this._query = URLSearchParams2.createImpl(globalObject, [query], { doNotStripQMark: true });
        this._query._url = this;
      }
      static canParse(url, base2) {
        let parsedBase = null;
        if (base2 !== void 0) {
          parsedBase = usm.basicURLParse(base2);
          if (parsedBase === null) {
            return false;
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === null) {
          return false;
        }
        return true;
      }
      get href() {
        return usm.serializeURL(this._url);
      }
      set href(v7) {
        const parsedURL = usm.basicURLParse(v7);
        if (parsedURL === null) {
          throw new TypeError(`Invalid URL: ${v7}`);
        }
        this._url = parsedURL;
        this._query._list.splice(0);
        const { query } = parsedURL;
        if (query !== null) {
          this._query._list = urlencoded.parseUrlencodedString(query);
        }
      }
      get origin() {
        return usm.serializeURLOrigin(this._url);
      }
      get protocol() {
        return `${this._url.scheme}:`;
      }
      set protocol(v7) {
        usm.basicURLParse(`${v7}:`, { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(v7) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v7);
      }
      get password() {
        return this._url.password;
      }
      set password(v7) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v7);
      }
      get host() {
        const url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;
      }
      set host(v7) {
        if (usm.hasAnOpaquePath(this._url)) {
          return;
        }
        usm.basicURLParse(v7, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      }
      set hostname(v7) {
        if (usm.hasAnOpaquePath(this._url)) {
          return;
        }
        usm.basicURLParse(v7, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      }
      set port(v7) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v7 === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v7, { url: this._url, stateOverride: "port" });
        }
      }
      get pathname() {
        return usm.serializePath(this._url);
      }
      set pathname(v7) {
        if (usm.hasAnOpaquePath(this._url)) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v7, { url: this._url, stateOverride: "path start" });
      }
      get search() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return `?${this._url.query}`;
      }
      set search(v7) {
        const url = this._url;
        if (v7 === "") {
          url.query = null;
          this._query._list = [];
          this._potentiallyStripTrailingSpacesFromAnOpaquePath();
          return;
        }
        const input = v7[0] === "?" ? v7.substring(1) : v7;
        url.query = "";
        usm.basicURLParse(input, { url, stateOverride: "query" });
        this._query._list = urlencoded.parseUrlencodedString(input);
      }
      get searchParams() {
        return this._query;
      }
      get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return `#${this._url.fragment}`;
      }
      set hash(v7) {
        if (v7 === "") {
          this._url.fragment = null;
          this._potentiallyStripTrailingSpacesFromAnOpaquePath();
          return;
        }
        const input = v7[0] === "#" ? v7.substring(1) : v7;
        this._url.fragment = "";
        usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
      _potentiallyStripTrailingSpacesFromAnOpaquePath() {
        if (!usm.hasAnOpaquePath(this._url)) {
          return;
        }
        if (this._url.fragment !== null) {
          return;
        }
        if (this._url.query !== null) {
          return;
        }
        this._url.path = this._url.path.replace(/\u0020+$/u, "");
      }
    };
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/lib/URL.js"(exports2) {
    "use strict";
    var conversions = require_lib();
    var utils = require_utils();
    var implSymbol = utils.implSymbol;
    var ctorRegistrySymbol = utils.ctorRegistrySymbol;
    var interfaceName = "URL";
    exports2.is = (value) => {
      return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
    };
    exports2.isImpl = (value) => {
      return utils.isObject(value) && value instanceof Impl.implementation;
    };
    exports2.convert = (globalObject, value, { context = "The provided value" } = {}) => {
      if (exports2.is(value)) {
        return utils.implForWrapper(value);
      }
      throw new globalObject.TypeError(`${context} is not of type 'URL'.`);
    };
    function makeWrapper(globalObject, newTarget) {
      let proto;
      if (newTarget !== void 0) {
        proto = newTarget.prototype;
      }
      if (!utils.isObject(proto)) {
        proto = globalObject[ctorRegistrySymbol]["URL"].prototype;
      }
      return Object.create(proto);
    }
    exports2.create = (globalObject, constructorArgs, privateData) => {
      const wrapper = makeWrapper(globalObject);
      return exports2.setup(wrapper, globalObject, constructorArgs, privateData);
    };
    exports2.createImpl = (globalObject, constructorArgs, privateData) => {
      const wrapper = exports2.create(globalObject, constructorArgs, privateData);
      return utils.implForWrapper(wrapper);
    };
    exports2._internalSetup = (wrapper, globalObject) => {
    };
    exports2.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
      privateData.wrapper = wrapper;
      exports2._internalSetup(wrapper, globalObject);
      Object.defineProperty(wrapper, implSymbol, {
        value: new Impl.implementation(globalObject, constructorArgs, privateData),
        configurable: true
      });
      wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
      if (Impl.init) {
        Impl.init(wrapper[implSymbol]);
      }
      return wrapper;
    };
    exports2.new = (globalObject, newTarget) => {
      const wrapper = makeWrapper(globalObject, newTarget);
      exports2._internalSetup(wrapper, globalObject);
      Object.defineProperty(wrapper, implSymbol, {
        value: Object.create(Impl.implementation.prototype),
        configurable: true
      });
      wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
      if (Impl.init) {
        Impl.init(wrapper[implSymbol]);
      }
      return wrapper[implSymbol];
    };
    var exposed = /* @__PURE__ */ new Set(["Window", "Worker"]);
    exports2.install = (globalObject, globalNames) => {
      if (!globalNames.some((globalName) => exposed.has(globalName))) {
        return;
      }
      const ctorRegistry = utils.initCtorRegistry(globalObject);
      class URL3 {
        constructor(url) {
          if (arguments.length < 1) {
            throw new globalObject.TypeError(
              `Failed to construct 'URL': 1 argument required, but only ${arguments.length} present.`
            );
          }
          const args = [];
          {
            let curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to construct 'URL': parameter 1",
              globals: globalObject
            });
            args.push(curArg);
          }
          {
            let curArg = arguments[1];
            if (curArg !== void 0) {
              curArg = conversions["USVString"](curArg, {
                context: "Failed to construct 'URL': parameter 2",
                globals: globalObject
              });
            }
            args.push(curArg);
          }
          return exports2.setup(Object.create(new.target.prototype), globalObject, args);
        }
        toJSON() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'toJSON' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol].toJSON();
        }
        get href() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get href' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["href"];
        }
        set href(V2) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set href' called on an object that is not a valid instance of URL.");
          }
          V2 = conversions["USVString"](V2, {
            context: "Failed to set the 'href' property on 'URL': The provided value",
            globals: globalObject
          });
          esValue[implSymbol]["href"] = V2;
        }
        toString() {
          const esValue = this;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'toString' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["href"];
        }
        get origin() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get origin' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["origin"];
        }
        get protocol() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get protocol' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["protocol"];
        }
        set protocol(V2) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set protocol' called on an object that is not a valid instance of URL.");
          }
          V2 = conversions["USVString"](V2, {
            context: "Failed to set the 'protocol' property on 'URL': The provided value",
            globals: globalObject
          });
          esValue[implSymbol]["protocol"] = V2;
        }
        get username() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get username' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["username"];
        }
        set username(V2) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set username' called on an object that is not a valid instance of URL.");
          }
          V2 = conversions["USVString"](V2, {
            context: "Failed to set the 'username' property on 'URL': The provided value",
            globals: globalObject
          });
          esValue[implSymbol]["username"] = V2;
        }
        get password() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get password' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["password"];
        }
        set password(V2) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set password' called on an object that is not a valid instance of URL.");
          }
          V2 = conversions["USVString"](V2, {
            context: "Failed to set the 'password' property on 'URL': The provided value",
            globals: globalObject
          });
          esValue[implSymbol]["password"] = V2;
        }
        get host() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get host' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["host"];
        }
        set host(V2) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set host' called on an object that is not a valid instance of URL.");
          }
          V2 = conversions["USVString"](V2, {
            context: "Failed to set the 'host' property on 'URL': The provided value",
            globals: globalObject
          });
          esValue[implSymbol]["host"] = V2;
        }
        get hostname() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get hostname' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["hostname"];
        }
        set hostname(V2) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set hostname' called on an object that is not a valid instance of URL.");
          }
          V2 = conversions["USVString"](V2, {
            context: "Failed to set the 'hostname' property on 'URL': The provided value",
            globals: globalObject
          });
          esValue[implSymbol]["hostname"] = V2;
        }
        get port() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get port' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["port"];
        }
        set port(V2) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set port' called on an object that is not a valid instance of URL.");
          }
          V2 = conversions["USVString"](V2, {
            context: "Failed to set the 'port' property on 'URL': The provided value",
            globals: globalObject
          });
          esValue[implSymbol]["port"] = V2;
        }
        get pathname() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get pathname' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["pathname"];
        }
        set pathname(V2) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set pathname' called on an object that is not a valid instance of URL.");
          }
          V2 = conversions["USVString"](V2, {
            context: "Failed to set the 'pathname' property on 'URL': The provided value",
            globals: globalObject
          });
          esValue[implSymbol]["pathname"] = V2;
        }
        get search() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get search' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["search"];
        }
        set search(V2) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set search' called on an object that is not a valid instance of URL.");
          }
          V2 = conversions["USVString"](V2, {
            context: "Failed to set the 'search' property on 'URL': The provided value",
            globals: globalObject
          });
          esValue[implSymbol]["search"] = V2;
        }
        get searchParams() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get searchParams' called on an object that is not a valid instance of URL.");
          }
          return utils.getSameObject(this, "searchParams", () => {
            return utils.tryWrapperForImpl(esValue[implSymbol]["searchParams"]);
          });
        }
        get hash() {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'get hash' called on an object that is not a valid instance of URL.");
          }
          return esValue[implSymbol]["hash"];
        }
        set hash(V2) {
          const esValue = this !== null && this !== void 0 ? this : globalObject;
          if (!exports2.is(esValue)) {
            throw new globalObject.TypeError("'set hash' called on an object that is not a valid instance of URL.");
          }
          V2 = conversions["USVString"](V2, {
            context: "Failed to set the 'hash' property on 'URL': The provided value",
            globals: globalObject
          });
          esValue[implSymbol]["hash"] = V2;
        }
        static canParse(url) {
          if (arguments.length < 1) {
            throw new globalObject.TypeError(
              `Failed to execute 'canParse' on 'URL': 1 argument required, but only ${arguments.length} present.`
            );
          }
          const args = [];
          {
            let curArg = arguments[0];
            curArg = conversions["USVString"](curArg, {
              context: "Failed to execute 'canParse' on 'URL': parameter 1",
              globals: globalObject
            });
            args.push(curArg);
          }
          {
            let curArg = arguments[1];
            if (curArg !== void 0) {
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'canParse' on 'URL': parameter 2",
                globals: globalObject
              });
            }
            args.push(curArg);
          }
          return Impl.implementation.canParse(...args);
        }
      }
      Object.defineProperties(URL3.prototype, {
        toJSON: { enumerable: true },
        href: { enumerable: true },
        toString: { enumerable: true },
        origin: { enumerable: true },
        protocol: { enumerable: true },
        username: { enumerable: true },
        password: { enumerable: true },
        host: { enumerable: true },
        hostname: { enumerable: true },
        port: { enumerable: true },
        pathname: { enumerable: true },
        search: { enumerable: true },
        searchParams: { enumerable: true },
        hash: { enumerable: true },
        [Symbol.toStringTag]: { value: "URL", configurable: true }
      });
      Object.defineProperties(URL3, { canParse: { enumerable: true } });
      ctorRegistry[interfaceName] = URL3;
      Object.defineProperty(globalObject, interfaceName, {
        configurable: true,
        writable: true,
        value: URL3
      });
      if (globalNames.includes("Window")) {
        Object.defineProperty(globalObject, "webkitURL", {
          configurable: true,
          writable: true,
          value: URL3
        });
      }
    };
    var Impl = require_URL_impl();
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/webidl2js-wrapper.js
var require_webidl2js_wrapper = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/webidl2js-wrapper.js"(exports2) {
    "use strict";
    var URL3 = require_URL();
    var URLSearchParams2 = require_URLSearchParams();
    exports2.URL = URL3;
    exports2.URLSearchParams = URLSearchParams2;
  }
});

// ../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/index.js
var require_whatwg_url = __commonJS({
  "../../node_modules/.pnpm/whatwg-url@13.0.0/node_modules/whatwg-url/index.js"(exports2) {
    "use strict";
    var { URL: URL3, URLSearchParams: URLSearchParams2 } = require_webidl2js_wrapper();
    var urlStateMachine = require_url_state_machine();
    var percentEncoding = require_percent_encoding();
    var sharedGlobalObject = { Array, Object, Promise, String, TypeError };
    URL3.install(sharedGlobalObject, ["Window"]);
    URLSearchParams2.install(sharedGlobalObject, ["Window"]);
    exports2.URL = sharedGlobalObject.URL;
    exports2.URLSearchParams = sharedGlobalObject.URLSearchParams;
    exports2.parseURL = urlStateMachine.parseURL;
    exports2.basicURLParse = urlStateMachine.basicURLParse;
    exports2.serializeURL = urlStateMachine.serializeURL;
    exports2.serializePath = urlStateMachine.serializePath;
    exports2.serializeHost = urlStateMachine.serializeHost;
    exports2.serializeInteger = urlStateMachine.serializeInteger;
    exports2.serializeURLOrigin = urlStateMachine.serializeURLOrigin;
    exports2.setTheUsername = urlStateMachine.setTheUsername;
    exports2.setThePassword = urlStateMachine.setThePassword;
    exports2.cannotHaveAUsernamePasswordPort = urlStateMachine.cannotHaveAUsernamePasswordPort;
    exports2.hasAnOpaquePath = urlStateMachine.hasAnOpaquePath;
    exports2.percentDecodeString = percentEncoding.percentDecodeString;
    exports2.percentDecodeBytes = percentEncoding.percentDecodeBytes;
  }
});

// ../../node_modules/.pnpm/node-fetch@2.7.0/node_modules/node-fetch/lib/index.mjs
var lib_exports = {};
__export(lib_exports, {
  AbortError: () => AbortError,
  FetchError: () => FetchError,
  Headers: () => Headers2,
  Request: () => Request2,
  Response: () => Response,
  default: () => lib_default
});
function FetchError(message, type, systemError) {
  Error.call(this, message);
  this.message = message;
  this.type = type;
  if (systemError) {
    this.code = this.errno = systemError.code;
  }
  Error.captureStackTrace(this, this.constructor);
}
function Body(body) {
  var _this = this;
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
  let size = _ref$size === void 0 ? 0 : _ref$size;
  var _ref$timeout = _ref.timeout;
  let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
  if (body == null) {
    body = null;
  } else if (isURLSearchParams(body)) {
    body = Buffer.from(body.toString());
  } else if (isBlob(body))
    ;
  else if (Buffer.isBuffer(body))
    ;
  else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    body = Buffer.from(body);
  } else if (ArrayBuffer.isView(body)) {
    body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  } else if (body instanceof import_stream.default)
    ;
  else {
    body = Buffer.from(String(body));
  }
  this[INTERNALS] = {
    body,
    disturbed: false,
    error: null
  };
  this.size = size;
  this.timeout = timeout;
  if (body instanceof import_stream.default) {
    body.on("error", function(err) {
      const error2 = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
      _this[INTERNALS].error = error2;
    });
  }
}
function consumeBody() {
  var _this4 = this;
  if (this[INTERNALS].disturbed) {
    return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  }
  this[INTERNALS].disturbed = true;
  if (this[INTERNALS].error) {
    return Body.Promise.reject(this[INTERNALS].error);
  }
  let body = this.body;
  if (body === null) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return Body.Promise.resolve(body);
  }
  if (!(body instanceof import_stream.default)) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }
  let accum = [];
  let accumBytes = 0;
  let abort = false;
  return new Body.Promise(function(resolve2, reject) {
    let resTimeout;
    if (_this4.timeout) {
      resTimeout = setTimeout(function() {
        abort = true;
        reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
      }, _this4.timeout);
    }
    body.on("error", function(err) {
      if (err.name === "AbortError") {
        abort = true;
        reject(err);
      } else {
        reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
      }
    });
    body.on("data", function(chunk) {
      if (abort || chunk === null) {
        return;
      }
      if (_this4.size && accumBytes + chunk.length > _this4.size) {
        abort = true;
        reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
        return;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    });
    body.on("end", function() {
      if (abort) {
        return;
      }
      clearTimeout(resTimeout);
      try {
        resolve2(Buffer.concat(accum, accumBytes));
      } catch (err) {
        reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
      }
    });
  });
}
function convertBody(buffer, headers) {
  if (typeof convert !== "function") {
    throw new Error("The package `encoding` must be installed to use the textConverted() function");
  }
  const ct2 = headers.get("content-type");
  let charset = "utf-8";
  let res, str2;
  if (ct2) {
    res = /charset=([^;]*)/i.exec(ct2);
  }
  str2 = buffer.slice(0, 1024).toString();
  if (!res && str2) {
    res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str2);
  }
  if (!res && str2) {
    res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str2);
    if (!res) {
      res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str2);
      if (res) {
        res.pop();
      }
    }
    if (res) {
      res = /charset=(.*)/i.exec(res.pop());
    }
  }
  if (!res && str2) {
    res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str2);
  }
  if (res) {
    charset = res.pop();
    if (charset === "gb2312" || charset === "gbk") {
      charset = "gb18030";
    }
  }
  return convert(buffer, "UTF-8", charset).toString();
}
function isURLSearchParams(obj) {
  if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
    return false;
  }
  return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
}
function isBlob(obj) {
  return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}
function clone(instance) {
  let p1, p22;
  let body = instance.body;
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
    p1 = new PassThrough();
    p22 = new PassThrough();
    body.pipe(p1);
    body.pipe(p22);
    instance[INTERNALS].body = p1;
    body = p22;
  }
  return body;
}
function extractContentType(body) {
  if (body === null) {
    return null;
  } else if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  } else if (isURLSearchParams(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  } else if (isBlob(body)) {
    return body.type || null;
  } else if (Buffer.isBuffer(body)) {
    return null;
  } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
    return null;
  } else if (ArrayBuffer.isView(body)) {
    return null;
  } else if (typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${body.getBoundary()}`;
  } else if (body instanceof import_stream.default) {
    return null;
  } else {
    return "text/plain;charset=UTF-8";
  }
}
function getTotalBytes(instance) {
  const body = instance.body;
  if (body === null) {
    return 0;
  } else if (isBlob(body)) {
    return body.size;
  } else if (Buffer.isBuffer(body)) {
    return body.length;
  } else if (body && typeof body.getLengthSync === "function") {
    if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
    body.hasKnownLength && body.hasKnownLength()) {
      return body.getLengthSync();
    }
    return null;
  } else {
    return null;
  }
}
function writeToStream(dest, instance) {
  const body = instance.body;
  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
}
function validateName(name) {
  name = `${name}`;
  if (invalidTokenRegex.test(name) || name === "") {
    throw new TypeError(`${name} is not a legal HTTP header name`);
  }
}
function validateValue(value) {
  value = `${value}`;
  if (invalidHeaderCharRegex.test(value)) {
    throw new TypeError(`${value} is not a legal HTTP header value`);
  }
}
function find(map3, name) {
  name = name.toLowerCase();
  for (const key in map3) {
    if (key.toLowerCase() === name) {
      return key;
    }
  }
  return void 0;
}
function getHeaders(headers) {
  let kind2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
  const keys = Object.keys(headers[MAP]).sort();
  return keys.map(kind2 === "key" ? function(k6) {
    return k6.toLowerCase();
  } : kind2 === "value" ? function(k6) {
    return headers[MAP][k6].join(", ");
  } : function(k6) {
    return [k6.toLowerCase(), headers[MAP][k6].join(", ")];
  });
}
function createHeadersIterator(target, kind2) {
  const iterator = Object.create(HeadersIteratorPrototype);
  iterator[INTERNAL] = {
    target,
    kind: kind2,
    index: 0
  };
  return iterator;
}
function exportNodeCompatibleHeaders(headers) {
  const obj = Object.assign({ __proto__: null }, headers[MAP]);
  const hostHeaderKey = find(headers[MAP], "Host");
  if (hostHeaderKey !== void 0) {
    obj[hostHeaderKey] = obj[hostHeaderKey][0];
  }
  return obj;
}
function createHeadersLenient(obj) {
  const headers = new Headers2();
  for (const name of Object.keys(obj)) {
    if (invalidTokenRegex.test(name)) {
      continue;
    }
    if (Array.isArray(obj[name])) {
      for (const val2 of obj[name]) {
        if (invalidHeaderCharRegex.test(val2)) {
          continue;
        }
        if (headers[MAP][name] === void 0) {
          headers[MAP][name] = [val2];
        } else {
          headers[MAP][name].push(val2);
        }
      }
    } else if (!invalidHeaderCharRegex.test(obj[name])) {
      headers[MAP][name] = [obj[name]];
    }
  }
  return headers;
}
function parseURL(urlStr) {
  if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
    urlStr = new URL2(urlStr).toString();
  }
  return parse_url(urlStr);
}
function isRequest(input) {
  return typeof input === "object" && typeof input[INTERNALS$2] === "object";
}
function isAbortSignal(signal) {
  const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
  return !!(proto && proto.constructor.name === "AbortSignal");
}
function getNodeRequestOptions(request2) {
  const parsedURL = request2[INTERNALS$2].parsedURL;
  const headers = new Headers2(request2[INTERNALS$2].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  if (!parsedURL.protocol || !parsedURL.hostname) {
    throw new TypeError("Only absolute URLs are supported");
  }
  if (!/^https?:$/.test(parsedURL.protocol)) {
    throw new TypeError("Only HTTP(S) protocols are supported");
  }
  if (request2.signal && request2.body instanceof import_stream.default.Readable && !streamDestructionSupported) {
    throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
  }
  let contentLengthValue = null;
  if (request2.body == null && /^(POST|PUT)$/i.test(request2.method)) {
    contentLengthValue = "0";
  }
  if (request2.body != null) {
    const totalBytes = getTotalBytes(request2);
    if (typeof totalBytes === "number") {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
  }
  if (request2.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip,deflate");
  }
  let agent = request2.agent;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  return Object.assign({}, parsedURL, {
    method: request2.method,
    headers: exportNodeCompatibleHeaders(headers),
    agent
  });
}
function AbortError(message) {
  Error.call(this, message);
  this.type = "aborted";
  this.message = message;
  Error.captureStackTrace(this, this.constructor);
}
function fetch2(url, opts) {
  if (!fetch2.Promise) {
    throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
  }
  Body.Promise = fetch2.Promise;
  return new fetch2.Promise(function(resolve2, reject) {
    const request2 = new Request2(url, opts);
    const options = getNodeRequestOptions(request2);
    const send = (options.protocol === "https:" ? import_https.default : import_http.default).request;
    const signal = request2.signal;
    let response = null;
    const abort = function abort2() {
      let error2 = new AbortError("The user aborted a request.");
      reject(error2);
      if (request2.body && request2.body instanceof import_stream.default.Readable) {
        destroyStream(request2.body, error2);
      }
      if (!response || !response.body)
        return;
      response.body.emit("error", error2);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = function abortAndFinalize2() {
      abort();
      finalize();
    };
    const req = send(options);
    let reqTimeout;
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    function finalize() {
      req.abort();
      if (signal)
        signal.removeEventListener("abort", abortAndFinalize);
      clearTimeout(reqTimeout);
    }
    if (request2.timeout) {
      req.once("socket", function(socket) {
        reqTimeout = setTimeout(function() {
          reject(new FetchError(`network timeout at: ${request2.url}`, "request-timeout"));
          finalize();
        }, request2.timeout);
      });
    }
    req.on("error", function(err) {
      reject(new FetchError(`request to ${request2.url} failed, reason: ${err.message}`, "system", err));
      if (response && response.body) {
        destroyStream(response.body, err);
      }
      finalize();
    });
    fixResponseChunkedTransferBadEnding(req, function(err) {
      if (signal && signal.aborted) {
        return;
      }
      if (response && response.body) {
        destroyStream(response.body, err);
      }
    });
    if (parseInt(process.version.substring(1)) < 14) {
      req.on("socket", function(s6) {
        s6.addListener("close", function(hadError) {
          const hasDataListener = s6.listenerCount("data") > 0;
          if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
            const err = new Error("Premature close");
            err.code = "ERR_STREAM_PREMATURE_CLOSE";
            response.body.emit("error", err);
          }
        });
      });
    }
    req.on("response", function(res) {
      clearTimeout(reqTimeout);
      const headers = createHeadersLenient(res.headers);
      if (fetch2.isRedirect(res.statusCode)) {
        const location = headers.get("Location");
        let locationURL = null;
        try {
          locationURL = location === null ? null : new URL$1(location, request2.url).toString();
        } catch (err) {
          if (request2.redirect !== "manual") {
            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
            finalize();
            return;
          }
        }
        switch (request2.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request2.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (err) {
                reject(err);
              }
            }
            break;
          case "follow":
            if (locationURL === null) {
              break;
            }
            if (request2.counter >= request2.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request2.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOpts = {
              headers: new Headers2(request2.headers),
              follow: request2.follow,
              counter: request2.counter + 1,
              agent: request2.agent,
              compress: request2.compress,
              method: request2.method,
              body: request2.body,
              signal: request2.signal,
              timeout: request2.timeout,
              size: request2.size
            };
            if (!isDomainOrSubdomain(request2.url, locationURL) || !isSameProtocol(request2.url, locationURL)) {
              for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                requestOpts.headers.delete(name);
              }
            }
            if (res.statusCode !== 303 && request2.body && getTotalBytes(request2) === null) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request2.method === "POST") {
              requestOpts.method = "GET";
              requestOpts.body = void 0;
              requestOpts.headers.delete("content-length");
            }
            resolve2(fetch2(new Request2(locationURL, requestOpts)));
            finalize();
            return;
        }
      }
      res.once("end", function() {
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
      });
      let body = res.pipe(new PassThrough$1());
      const response_options = {
        url: request2.url,
        status: res.statusCode,
        statusText: res.statusMessage,
        headers,
        size: request2.size,
        timeout: request2.timeout,
        counter: request2.counter
      };
      const codings = headers.get("Content-Encoding");
      if (!request2.compress || request2.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
        response = new Response(body, response_options);
        resolve2(response);
        return;
      }
      const zlibOptions = {
        flush: import_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_zlib.default.Z_SYNC_FLUSH
      };
      if (codings == "gzip" || codings == "x-gzip") {
        body = body.pipe(import_zlib.default.createGunzip(zlibOptions));
        response = new Response(body, response_options);
        resolve2(response);
        return;
      }
      if (codings == "deflate" || codings == "x-deflate") {
        const raw = res.pipe(new PassThrough$1());
        raw.once("data", function(chunk) {
          if ((chunk[0] & 15) === 8) {
            body = body.pipe(import_zlib.default.createInflate());
          } else {
            body = body.pipe(import_zlib.default.createInflateRaw());
          }
          response = new Response(body, response_options);
          resolve2(response);
        });
        raw.on("end", function() {
          if (!response) {
            response = new Response(body, response_options);
            resolve2(response);
          }
        });
        return;
      }
      if (codings == "br" && typeof import_zlib.default.createBrotliDecompress === "function") {
        body = body.pipe(import_zlib.default.createBrotliDecompress());
        response = new Response(body, response_options);
        resolve2(response);
        return;
      }
      response = new Response(body, response_options);
      resolve2(response);
    });
    writeToStream(req, request2);
  });
}
function fixResponseChunkedTransferBadEnding(request2, errorCallback) {
  let socket;
  request2.on("socket", function(s6) {
    socket = s6;
  });
  request2.on("response", function(response) {
    const headers = response.headers;
    if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
      response.once("close", function(hadError) {
        const hasDataListener = socket && socket.listenerCount("data") > 0;
        if (hasDataListener && !hadError) {
          const err = new Error("Premature close");
          err.code = "ERR_STREAM_PREMATURE_CLOSE";
          errorCallback(err);
        }
      });
    }
  });
}
function destroyStream(stream, err) {
  if (stream.destroy) {
    stream.destroy(err);
  } else {
    stream.emit("error", err);
    stream.end();
  }
}
var import_stream, import_http, import_url, import_whatwg_url, import_https, import_zlib, Readable, BUFFER, TYPE, Blob2, convert, INTERNALS, PassThrough, invalidTokenRegex, invalidHeaderCharRegex, MAP, Headers2, INTERNAL, HeadersIteratorPrototype, INTERNALS$1, STATUS_CODES, Response, INTERNALS$2, URL2, parse_url, format_url, streamDestructionSupported, Request2, URL$1, PassThrough$1, isDomainOrSubdomain, isSameProtocol, lib_default;
var init_lib = __esm({
  "../../node_modules/.pnpm/node-fetch@2.7.0/node_modules/node-fetch/lib/index.mjs"() {
    "use strict";
    import_stream = __toESM(require("stream"), 1);
    import_http = __toESM(require("http"), 1);
    import_url = __toESM(require("url"), 1);
    import_whatwg_url = __toESM(require_whatwg_url(), 1);
    import_https = __toESM(require("https"), 1);
    import_zlib = __toESM(require("zlib"), 1);
    Readable = import_stream.default.Readable;
    BUFFER = Symbol("buffer");
    TYPE = Symbol("type");
    Blob2 = class _Blob {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a6 = blobParts;
          const length = Number(a6.length);
          for (let i6 = 0; i6 < length; i6++) {
            const element = a6[i6];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof _Blob) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== void 0 && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new _Blob([], { type: arguments[2] });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob2.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Object.defineProperty(Blob2.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    FetchError.prototype = Object.create(Error.prototype);
    FetchError.prototype.constructor = FetchError;
    FetchError.prototype.name = "FetchError";
    try {
      convert = require("encoding").convert;
    } catch (e6) {
    }
    INTERNALS = Symbol("Body internals");
    PassThrough = import_stream.default.PassThrough;
    Body.prototype = {
      get body() {
        return this[INTERNALS].body;
      },
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      },
      /**
       * Decode response as ArrayBuffer
       *
       * @return  Promise
       */
      arrayBuffer() {
        return consumeBody.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      /**
       * Return raw response as Blob
       *
       * @return Promise
       */
      blob() {
        let ct2 = this.headers && this.headers.get("content-type") || "";
        return consumeBody.call(this).then(function(buf) {
          return Object.assign(
            // Prevent copying
            new Blob2([], {
              type: ct2.toLowerCase()
            }),
            {
              [BUFFER]: buf
            }
          );
        });
      },
      /**
       * Decode response as json
       *
       * @return  Promise
       */
      json() {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      /**
       * Decode response as text
       *
       * @return  Promise
       */
      text() {
        return consumeBody.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      /**
       * Decode response as buffer (non-spec api)
       *
       * @return  Promise
       */
      buffer() {
        return consumeBody.call(this);
      },
      /**
       * Decode response as text, while automatically detecting the encoding and
       * trying to decode to UTF-8 (non-spec api)
       *
       * @return  Promise
       */
      textConverted() {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    Body.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    Body.Promise = global.Promise;
    invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    MAP = Symbol("map");
    Headers2 = class _Headers {
      /**
       * Headers class
       *
       * @param   Object  headers  Response headers
       * @return  Void
       */
      constructor() {
        let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = /* @__PURE__ */ Object.create(null);
        if (init instanceof _Headers) {
          const rawHeaders = init.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init == null)
          ;
        else if (typeof init === "object") {
          const method = init[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init)) {
              const value = init[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      /**
       * Return combined header value given name
       *
       * @param   String  name  Header name
       * @return  Mixed
       */
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      /**
       * Iterate over all headers
       *
       * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
       * @param   Boolean   thisArg   `this` context for callback function
       * @return  Void
       */
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i6 = 0;
        while (i6 < pairs.length) {
          var _pairs$i = pairs[i6];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i6++;
        }
      }
      /**
       * Overwrite header values given name
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      /**
       * Append a value onto existing header
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      /**
       * Check for header name existence
       *
       * @param   String   name  Header name
       * @return  Boolean
       */
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      /**
       * Delete all header values given name
       *
       * @param   String  name  Header name
       * @return  Void
       */
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      /**
       * Return raw headers (non-spec api)
       *
       * @return  Object
       */
      raw() {
        return this[MAP];
      }
      /**
       * Get an iterator on keys.
       *
       * @return  Iterator
       */
      keys() {
        return createHeadersIterator(this, "key");
      }
      /**
       * Get an iterator on values.
       *
       * @return  Iterator
       */
      values() {
        return createHeadersIterator(this, "value");
      }
      /**
       * Get an iterator on entries.
       *
       * This is the default iterator of the Headers object.
       *
       * @return  Iterator
       */
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers2.prototype.entries = Headers2.prototype[Symbol.iterator];
    Object.defineProperty(Headers2.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers2.prototype, {
      get: { enumerable: true },
      forEach: { enumerable: true },
      set: { enumerable: true },
      append: { enumerable: true },
      has: { enumerable: true },
      delete: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true }
    });
    INTERNAL = Symbol("internal");
    HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind2 = _INTERNAL.kind, index2 = _INTERNAL.index;
        const values = getHeaders(target, kind2);
        const len = values.length;
        if (index2 >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index2 + 1;
        return {
          value: values[index2],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    INTERNALS$1 = Symbol("Response internals");
    STATUS_CODES = import_http.default.STATUS_CODES;
    Response = class _Response {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers2(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      /**
       * Convenience property representing if the request ended normally
       */
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      /**
       * Clone this response
       *
       * @return  Response
       */
      clone() {
        return new _Response(clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body.mixIn(Response.prototype);
    Object.defineProperties(Response.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    Object.defineProperty(Response.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    INTERNALS$2 = Symbol("Request internals");
    URL2 = import_url.default.URL || import_whatwg_url.default.URL;
    parse_url = import_url.default.parse;
    format_url = import_url.default.format;
    streamDestructionSupported = "destroy" in import_stream.default.Readable.prototype;
    Request2 = class _Request {
      constructor(input) {
        let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest(input)) {
          if (input && input.href) {
            parsedURL = parseURL(input.href);
          } else {
            parsedURL = parseURL(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        Body.call(this, inputBody, {
          timeout: init.timeout || input.timeout || 0,
          size: init.size || input.size || 0
        });
        const headers = new Headers2(init.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init)
          signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$2] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$2].method;
      }
      get url() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
      get headers() {
        return this[INTERNALS$2].headers;
      }
      get redirect() {
        return this[INTERNALS$2].redirect;
      }
      get signal() {
        return this[INTERNALS$2].signal;
      }
      /**
       * Clone this request
       *
       * @return  Request
       */
      clone() {
        return new _Request(this);
      }
    };
    Body.mixIn(Request2.prototype);
    Object.defineProperty(Request2.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request2.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    AbortError.prototype = Object.create(Error.prototype);
    AbortError.prototype.constructor = AbortError;
    AbortError.prototype.name = "AbortError";
    URL$1 = import_url.default.URL || import_whatwg_url.default.URL;
    PassThrough$1 = import_stream.default.PassThrough;
    isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
      const orig = new URL$1(original).hostname;
      const dest = new URL$1(destination).hostname;
      return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
    };
    isSameProtocol = function isSameProtocol2(destination, original) {
      const orig = new URL$1(original).protocol;
      const dest = new URL$1(destination).protocol;
      return orig === dest;
    };
    fetch2.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch2.Promise = global.Promise;
    lib_default = fetch2;
  }
});

// ../../node_modules/.pnpm/isomorphic-fetch@3.0.0/node_modules/isomorphic-fetch/fetch-npm-node.js
var require_fetch_npm_node = __commonJS({
  "../../node_modules/.pnpm/isomorphic-fetch@3.0.0/node_modules/isomorphic-fetch/fetch-npm-node.js"(exports2, module2) {
    "use strict";
    var realFetch = (init_lib(), __toCommonJS(lib_exports));
    module2.exports = function(url, options) {
      if (/^\/\//.test(url)) {
        url = "https:" + url;
      }
      return realFetch.call(this, url, options);
    };
    if (!global.fetch) {
      global.fetch = module2.exports;
      global.Response = realFetch.Response;
      global.Headers = realFetch.Headers;
      global.Request = realFetch.Request;
    }
  }
});

// ../../node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values2
});
function __extends(d6, b6) {
  extendStatics(d6, b6);
  function __() {
    this.constructor = d6;
  }
  d6.prototype = b6 === null ? Object.create(b6) : (__.prototype = b6.prototype, new __());
}
function __rest(s6, e6) {
  var t6 = {};
  for (var p6 in s6)
    if (Object.prototype.hasOwnProperty.call(s6, p6) && e6.indexOf(p6) < 0)
      t6[p6] = s6[p6];
  if (s6 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i6 = 0, p6 = Object.getOwnPropertySymbols(s6); i6 < p6.length; i6++) {
      if (e6.indexOf(p6[i6]) < 0 && Object.prototype.propertyIsEnumerable.call(s6, p6[i6]))
        t6[p6[i6]] = s6[p6[i6]];
    }
  return t6;
}
function __decorate(decorators, target, key, desc) {
  var c6 = arguments.length, r6 = c6 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d6;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r6 = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i6 = decorators.length - 1; i6 >= 0; i6--)
      if (d6 = decorators[i6])
        r6 = (c6 < 3 ? d6(r6) : c6 > 3 ? d6(target, key, r6) : d6(target, key)) || r6;
  return c6 > 3 && r6 && Object.defineProperty(target, key, r6), r6;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e6) {
        reject(e6);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e6) {
        reject(e6);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _3 = { label: 0, sent: function() {
    if (t6[0] & 1)
      throw t6[1];
    return t6[1];
  }, trys: [], ops: [] }, f6, y3, t6, g7;
  return g7 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g7[Symbol.iterator] = function() {
    return this;
  }), g7;
  function verb(n6) {
    return function(v7) {
      return step([n6, v7]);
    };
  }
  function step(op) {
    if (f6)
      throw new TypeError("Generator is already executing.");
    while (_3)
      try {
        if (f6 = 1, y3 && (t6 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t6 = y3["return"]) && t6.call(y3), 0) : y3.next) && !(t6 = t6.call(y3, op[1])).done)
          return t6;
        if (y3 = 0, t6)
          op = [op[0] & 2, t6.value];
        switch (op[0]) {
          case 0:
          case 1:
            t6 = op;
            break;
          case 4:
            _3.label++;
            return { value: op[1], done: false };
          case 5:
            _3.label++;
            y3 = op[1];
            op = [0];
            continue;
          case 7:
            op = _3.ops.pop();
            _3.trys.pop();
            continue;
          default:
            if (!(t6 = _3.trys, t6 = t6.length > 0 && t6[t6.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _3 = 0;
              continue;
            }
            if (op[0] === 3 && (!t6 || op[1] > t6[0] && op[1] < t6[3])) {
              _3.label = op[1];
              break;
            }
            if (op[0] === 6 && _3.label < t6[1]) {
              _3.label = t6[1];
              t6 = op;
              break;
            }
            if (t6 && _3.label < t6[2]) {
              _3.label = t6[2];
              _3.ops.push(op);
              break;
            }
            if (t6[2])
              _3.ops.pop();
            _3.trys.pop();
            continue;
        }
        op = body.call(thisArg, _3);
      } catch (e6) {
        op = [6, e6];
        y3 = 0;
      } finally {
        f6 = t6 = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding(o6, m6, k6, k22) {
  if (k22 === void 0)
    k22 = k6;
  o6[k22] = m6[k6];
}
function __exportStar(m6, exports2) {
  for (var p6 in m6)
    if (p6 !== "default" && !exports2.hasOwnProperty(p6))
      exports2[p6] = m6[p6];
}
function __values2(o6) {
  var s6 = typeof Symbol === "function" && Symbol.iterator, m6 = s6 && o6[s6], i6 = 0;
  if (m6)
    return m6.call(o6);
  if (o6 && typeof o6.length === "number")
    return {
      next: function() {
        if (o6 && i6 >= o6.length)
          o6 = void 0;
        return { value: o6 && o6[i6++], done: !o6 };
      }
    };
  throw new TypeError(s6 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o6, n6) {
  var m6 = typeof Symbol === "function" && o6[Symbol.iterator];
  if (!m6)
    return o6;
  var i6 = m6.call(o6), r6, ar2 = [], e6;
  try {
    while ((n6 === void 0 || n6-- > 0) && !(r6 = i6.next()).done)
      ar2.push(r6.value);
  } catch (error2) {
    e6 = { error: error2 };
  } finally {
    try {
      if (r6 && !r6.done && (m6 = i6["return"]))
        m6.call(i6);
    } finally {
      if (e6)
        throw e6.error;
    }
  }
  return ar2;
}
function __spread() {
  for (var ar2 = [], i6 = 0; i6 < arguments.length; i6++)
    ar2 = ar2.concat(__read(arguments[i6]));
  return ar2;
}
function __spreadArrays() {
  for (var s6 = 0, i6 = 0, il = arguments.length; i6 < il; i6++)
    s6 += arguments[i6].length;
  for (var r6 = Array(s6), k6 = 0, i6 = 0; i6 < il; i6++)
    for (var a6 = arguments[i6], j6 = 0, jl = a6.length; j6 < jl; j6++, k6++)
      r6[k6] = a6[j6];
  return r6;
}
function __await(v7) {
  return this instanceof __await ? (this.v = v7, this) : new __await(v7);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g7 = generator.apply(thisArg, _arguments || []), i6, q6 = [];
  return i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
    return this;
  }, i6;
  function verb(n6) {
    if (g7[n6])
      i6[n6] = function(v7) {
        return new Promise(function(a6, b6) {
          q6.push([n6, v7, a6, b6]) > 1 || resume(n6, v7);
        });
      };
  }
  function resume(n6, v7) {
    try {
      step(g7[n6](v7));
    } catch (e6) {
      settle(q6[0][3], e6);
    }
  }
  function step(r6) {
    r6.value instanceof __await ? Promise.resolve(r6.value.v).then(fulfill, reject) : settle(q6[0][2], r6);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f6, v7) {
    if (f6(v7), q6.shift(), q6.length)
      resume(q6[0][0], q6[0][1]);
  }
}
function __asyncDelegator(o6) {
  var i6, p6;
  return i6 = {}, verb("next"), verb("throw", function(e6) {
    throw e6;
  }), verb("return"), i6[Symbol.iterator] = function() {
    return this;
  }, i6;
  function verb(n6, f6) {
    i6[n6] = o6[n6] ? function(v7) {
      return (p6 = !p6) ? { value: __await(o6[n6](v7)), done: n6 === "return" } : f6 ? f6(v7) : v7;
    } : f6;
  }
}
function __asyncValues(o6) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m6 = o6[Symbol.asyncIterator], i6;
  return m6 ? m6.call(o6) : (o6 = typeof __values2 === "function" ? __values2(o6) : o6[Symbol.iterator](), i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
    return this;
  }, i6);
  function verb(n6) {
    i6[n6] = o6[n6] && function(v7) {
      return new Promise(function(resolve2, reject) {
        v7 = o6[n6](v7), settle(resolve2, reject, v7.done, v7.value);
      });
    };
  }
  function settle(resolve2, reject, d6, v7) {
    Promise.resolve(v7).then(function(v8) {
      resolve2({ value: v8, done: d6 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k6 in mod)
      if (Object.hasOwnProperty.call(mod, k6))
        result[k6] = mod[k6];
  }
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics, __assign;
var init_tslib_es6 = __esm({
  "../../node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.es6.js"() {
    "use strict";
    extendStatics = function(d6, b6) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d7, b7) {
        d7.__proto__ = b7;
      } || function(d7, b7) {
        for (var p6 in b7)
          if (b7.hasOwnProperty(p6))
            d7[p6] = b7[p6];
      };
      return extendStatics(d6, b6);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t6) {
        for (var s6, i6 = 1, n6 = arguments.length; i6 < n6; i6++) {
          s6 = arguments[i6];
          for (var p6 in s6)
            if (Object.prototype.hasOwnProperty.call(s6, p6))
              t6[p6] = s6[p6];
        }
        return t6;
      };
      return __assign.apply(this, arguments);
    };
  }
});

// ../../node_modules/.pnpm/@aws-crypto+sha256-js@3.0.0/node_modules/@aws-crypto/sha256-js/build/constants.js
var require_constants = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+sha256-js@3.0.0/node_modules/@aws-crypto/sha256-js/build/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MAX_HASHABLE_LENGTH = exports2.INIT = exports2.KEY = exports2.DIGEST_LENGTH = exports2.BLOCK_SIZE = void 0;
    exports2.BLOCK_SIZE = 64;
    exports2.DIGEST_LENGTH = 32;
    exports2.KEY = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    exports2.INIT = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    exports2.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+sha256-js@3.0.0/node_modules/@aws-crypto/sha256-js/build/RawSha256.js
var require_RawSha256 = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+sha256-js@3.0.0/node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RawSha256 = void 0;
    var constants_1 = require_constants();
    var RawSha256 = (
      /** @class */
      function() {
        function RawSha2562() {
          this.state = Int32Array.from(constants_1.INIT);
          this.temp = new Int32Array(64);
          this.buffer = new Uint8Array(64);
          this.bufferLength = 0;
          this.bytesHashed = 0;
          this.finished = false;
        }
        RawSha2562.prototype.update = function(data) {
          if (this.finished) {
            throw new Error("Attempted to update an already finished hash.");
          }
          var position = 0;
          var byteLength = data.byteLength;
          this.bytesHashed += byteLength;
          if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
            throw new Error("Cannot hash more than 2^53 - 1 bits");
          }
          while (byteLength > 0) {
            this.buffer[this.bufferLength++] = data[position++];
            byteLength--;
            if (this.bufferLength === constants_1.BLOCK_SIZE) {
              this.hashBuffer();
              this.bufferLength = 0;
            }
          }
        };
        RawSha2562.prototype.digest = function() {
          if (!this.finished) {
            var bitsHashed = this.bytesHashed * 8;
            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
            var undecoratedLength = this.bufferLength;
            bufferView.setUint8(this.bufferLength++, 128);
            if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
              for (var i6 = this.bufferLength; i6 < constants_1.BLOCK_SIZE; i6++) {
                bufferView.setUint8(i6, 0);
              }
              this.hashBuffer();
              this.bufferLength = 0;
            }
            for (var i6 = this.bufferLength; i6 < constants_1.BLOCK_SIZE - 8; i6++) {
              bufferView.setUint8(i6, 0);
            }
            bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
            this.hashBuffer();
            this.finished = true;
          }
          var out = new Uint8Array(constants_1.DIGEST_LENGTH);
          for (var i6 = 0; i6 < 8; i6++) {
            out[i6 * 4] = this.state[i6] >>> 24 & 255;
            out[i6 * 4 + 1] = this.state[i6] >>> 16 & 255;
            out[i6 * 4 + 2] = this.state[i6] >>> 8 & 255;
            out[i6 * 4 + 3] = this.state[i6] >>> 0 & 255;
          }
          return out;
        };
        RawSha2562.prototype.hashBuffer = function() {
          var _a3 = this, buffer = _a3.buffer, state = _a3.state;
          var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
          for (var i6 = 0; i6 < constants_1.BLOCK_SIZE; i6++) {
            if (i6 < 16) {
              this.temp[i6] = (buffer[i6 * 4] & 255) << 24 | (buffer[i6 * 4 + 1] & 255) << 16 | (buffer[i6 * 4 + 2] & 255) << 8 | buffer[i6 * 4 + 3] & 255;
            } else {
              var u6 = this.temp[i6 - 2];
              var t1_1 = (u6 >>> 17 | u6 << 15) ^ (u6 >>> 19 | u6 << 13) ^ u6 >>> 10;
              u6 = this.temp[i6 - 15];
              var t2_1 = (u6 >>> 7 | u6 << 25) ^ (u6 >>> 18 | u6 << 14) ^ u6 >>> 3;
              this.temp[i6] = (t1_1 + this.temp[i6 - 7] | 0) + (t2_1 + this.temp[i6 - 16] | 0);
            }
            var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i6] + this.temp[i6] | 0) | 0) | 0;
            var t22 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
            state7 = state6;
            state6 = state5;
            state5 = state4;
            state4 = state3 + t1 | 0;
            state3 = state2;
            state2 = state1;
            state1 = state0;
            state0 = t1 + t22 | 0;
          }
          state[0] += state0;
          state[1] += state1;
          state[2] += state2;
          state[3] += state3;
          state[4] += state4;
          state[5] += state5;
          state[6] += state6;
          state[7] += state7;
        };
        return RawSha2562;
      }()
    );
    exports2.RawSha256 = RawSha256;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js
var fromUtf8, toUtf8;
var init_pureJs = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/pureJs.js"() {
    "use strict";
    fromUtf8 = (input) => {
      const bytes = [];
      for (let i6 = 0, len = input.length; i6 < len; i6++) {
        const value = input.charCodeAt(i6);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i6 + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i6 + 1) & 64512) === 56320) {
          const surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i6) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    toUtf8 = (input) => {
      let decoded = "";
      for (let i6 = 0, len = input.length; i6 < len; i6++) {
        const byte = input[i6];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          const nextByte = input[++i6];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          const surrogatePair = [byte, input[++i6], input[++i6], input[++i6]];
          const encoded = "%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i6] & 63) << 6 | input[++i6] & 63);
        }
      }
      return decoded;
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js
function fromUtf82(input) {
  return new TextEncoder().encode(input);
}
function toUtf82(input) {
  return new TextDecoder("utf-8").decode(input);
}
var init_whatwgEncodingApi = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/whatwgEncodingApi.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js
var dist_es_exports = {};
__export(dist_es_exports, {
  fromUtf8: () => fromUtf83,
  toUtf8: () => toUtf83
});
var fromUtf83, toUtf83;
var init_dist_es = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8-browser@3.259.0/node_modules/@aws-sdk/util-utf8-browser/dist-es/index.js"() {
    "use strict";
    init_pureJs();
    init_whatwgEncodingApi();
    fromUtf83 = (input) => typeof TextEncoder === "function" ? fromUtf82(input) : fromUtf8(input);
    toUtf83 = (input) => typeof TextDecoder === "function" ? toUtf82(input) : toUtf8(input);
  }
});

// ../../node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/convertToBuffer.js
var require_convertToBuffer = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertToBuffer = void 0;
    var util_utf8_browser_1 = (init_dist_es(), __toCommonJS(dist_es_exports));
    var fromUtf86 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf86(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports2.convertToBuffer = convertToBuffer;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/isEmptyData.js
var require_isEmptyData = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/isEmptyData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports2.isEmptyData = isEmptyData;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/numToUint8.js
var require_numToUint8 = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/numToUint8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports2.numToUint8 = numToUint8;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js
var require_uint32ArrayFrom = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports2.uint32ArrayFrom = uint32ArrayFrom;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/index.js
var require_build = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+util@3.0.0/node_modules/@aws-crypto/util/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uint32ArrayFrom = exports2.numToUint8 = exports2.isEmptyData = exports2.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports2, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports2, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports2, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports2, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-crypto+sha256-js@3.0.0/node_modules/@aws-crypto/sha256-js/build/jsSha256.js
var require_jsSha256 = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+sha256-js@3.0.0/node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Sha256 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var constants_1 = require_constants();
    var RawSha256_1 = require_RawSha256();
    var util_1 = require_build();
    var Sha256 = (
      /** @class */
      function() {
        function Sha2562(secret) {
          this.secret = secret;
          this.hash = new RawSha256_1.RawSha256();
          this.reset();
        }
        Sha2562.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash) || this.error) {
            return;
          }
          try {
            this.hash.update((0, util_1.convertToBuffer)(toHash));
          } catch (e6) {
            this.error = e6;
          }
        };
        Sha2562.prototype.digestSync = function() {
          if (this.error) {
            throw this.error;
          }
          if (this.outer) {
            if (!this.outer.finished) {
              this.outer.update(this.hash.digest());
            }
            return this.outer.digest();
          }
          return this.hash.digest();
        };
        Sha2562.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a3) {
              return [2, this.digestSync()];
            });
          });
        };
        Sha2562.prototype.reset = function() {
          this.hash = new RawSha256_1.RawSha256();
          if (this.secret) {
            this.outer = new RawSha256_1.RawSha256();
            var inner = bufferFromSecret(this.secret);
            var outer = new Uint8Array(constants_1.BLOCK_SIZE);
            outer.set(inner);
            for (var i6 = 0; i6 < constants_1.BLOCK_SIZE; i6++) {
              inner[i6] ^= 54;
              outer[i6] ^= 92;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            for (var i6 = 0; i6 < inner.byteLength; i6++) {
              inner[i6] = 0;
            }
          }
        };
        return Sha2562;
      }()
    );
    exports2.Sha256 = Sha256;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
  }
});

// ../../node_modules/.pnpm/@aws-crypto+sha256-js@3.0.0/node_modules/@aws-crypto/sha256-js/build/index.js
var require_build2 = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+sha256-js@3.0.0/node_modules/@aws-crypto/sha256-js/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_jsSha256(), exports2);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/CognitoProviderParameters.js
var init_CognitoProviderParameters = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/CognitoProviderParameters.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/Logins.js
var init_Logins = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/Logins.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/Storage.js
var init_Storage = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/Storage.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/ProviderError.js
var ProviderError;
var init_ProviderError = __esm({
  "../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/ProviderError.js"() {
    "use strict";
    ProviderError = class _ProviderError extends Error {
      constructor(message, options = true) {
        let logger2;
        let tryNextLink = true;
        if (typeof options === "boolean") {
          logger2 = void 0;
          tryNextLink = options;
        } else if (options != null && typeof options === "object") {
          logger2 = options.logger;
          tryNextLink = options.tryNextLink ?? true;
        }
        super(message);
        this.name = "ProviderError";
        this.tryNextLink = tryNextLink;
        Object.setPrototypeOf(this, _ProviderError.prototype);
        logger2?.debug?.(`@smithy/property-provider ${tryNextLink ? "->" : "(!)"} ${message}`);
      }
      static from(error2, options = true) {
        return Object.assign(new this(error2.message, options), error2);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js
var CredentialsProviderError;
var init_CredentialsProviderError = __esm({
  "../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js"() {
    "use strict";
    init_ProviderError();
    CredentialsProviderError = class _CredentialsProviderError extends ProviderError {
      constructor(message, options = true) {
        super(message, options);
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/TokenProviderError.js
var TokenProviderError;
var init_TokenProviderError = __esm({
  "../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/TokenProviderError.js"() {
    "use strict";
    init_ProviderError();
    TokenProviderError = class _TokenProviderError extends ProviderError {
      constructor(message, options = true) {
        super(message, options);
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError.prototype);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/chain.js
var chain;
var init_chain = __esm({
  "../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/chain.js"() {
    "use strict";
    init_ProviderError();
    chain = (...providers) => async () => {
      if (providers.length === 0) {
        throw new ProviderError("No providers in chain");
      }
      let lastProviderError;
      for (const provider of providers) {
        try {
          const credentials = await provider();
          return credentials;
        } catch (err) {
          lastProviderError = err;
          if (err?.tryNextLink) {
            continue;
          }
          throw err;
        }
      }
      throw lastProviderError;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/fromStatic.js
var fromStatic;
var init_fromStatic = __esm({
  "../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/fromStatic.js"() {
    "use strict";
    fromStatic = (staticValue) => () => Promise.resolve(staticValue);
  }
});

// ../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/memoize.js
var memoize;
var init_memoize = __esm({
  "../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/memoize.js"() {
    "use strict";
    memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/index.js
var init_dist_es2 = __esm({
  "../../node_modules/.pnpm/@smithy+property-provider@3.1.1/node_modules/@smithy/property-provider/dist-es/index.js"() {
    "use strict";
    init_CredentialsProviderError();
    init_ProviderError();
    init_TokenProviderError();
    init_chain();
    init_fromStatic();
    init_memoize();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js
function resolveLogins(logins) {
  return Promise.all(Object.keys(logins).reduce((arr, name) => {
    const tokenOrProvider = logins[name];
    if (typeof tokenOrProvider === "string") {
      arr.push([name, tokenOrProvider]);
    } else {
      arr.push(tokenOrProvider().then((token) => [name, token]));
    }
    return arr;
  }, [])).then((resolvedPairs) => resolvedPairs.reduce((logins2, [key, value]) => {
    logins2[key] = value;
    return logins2;
  }, {}));
}
var init_resolveLogins = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js
var getHttpHandlerExtensionConfiguration, resolveHttpHandlerRuntimeConfig;
var init_httpExtensionConfiguration = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js"() {
    "use strict";
    getHttpHandlerExtensionConfiguration = (runtimeConfig) => {
      let httpHandler = runtimeConfig.httpHandler;
      return {
        setHttpHandler(handler) {
          httpHandler = handler;
        },
        httpHandler() {
          return httpHandler;
        },
        updateHttpClientConfig(key, value) {
          httpHandler.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
          return httpHandler.httpHandlerConfigs();
        }
      };
    };
    resolveHttpHandlerRuntimeConfig = (httpHandlerExtensionConfiguration) => {
      return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler()
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/extensions/index.js
var init_extensions = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/extensions/index.js"() {
    "use strict";
    init_httpExtensionConfiguration();
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/abort.js
var init_abort = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/abort.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/auth.js
var HttpAuthLocation;
var init_auth = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/auth.js"() {
    "use strict";
    (function(HttpAuthLocation3) {
      HttpAuthLocation3["HEADER"] = "header";
      HttpAuthLocation3["QUERY"] = "query";
    })(HttpAuthLocation || (HttpAuthLocation = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js
var HttpApiKeyAuthLocation;
var init_HttpApiKeyAuth = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js"() {
    "use strict";
    (function(HttpApiKeyAuthLocation2) {
      HttpApiKeyAuthLocation2["HEADER"] = "header";
      HttpApiKeyAuthLocation2["QUERY"] = "query";
    })(HttpApiKeyAuthLocation || (HttpApiKeyAuthLocation = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/HttpAuthScheme.js
var init_HttpAuthScheme = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/HttpAuthScheme.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/HttpAuthSchemeProvider.js
var init_HttpAuthSchemeProvider = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/HttpAuthSchemeProvider.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/HttpSigner.js
var init_HttpSigner = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/HttpSigner.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/IdentityProviderConfig.js
var init_IdentityProviderConfig = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/IdentityProviderConfig.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/index.js
var init_auth2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/auth/index.js"() {
    "use strict";
    init_auth();
    init_HttpApiKeyAuth();
    init_HttpAuthScheme();
    init_HttpAuthSchemeProvider();
    init_HttpSigner();
    init_IdentityProviderConfig();
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js
var init_blob_payload_input_types = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/checksum.js
var init_checksum = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/checksum.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/client.js
var init_client = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/client.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/command.js
var init_command = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/command.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/connection/config.js
var init_config = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/connection/config.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/connection/manager.js
var init_manager = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/connection/manager.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/connection/pool.js
var init_pool = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/connection/pool.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/connection/index.js
var init_connection = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/connection/index.js"() {
    "use strict";
    init_config();
    init_manager();
    init_pool();
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/crypto.js
var init_crypto = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/crypto.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/encode.js
var init_encode = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/encode.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoint.js
var EndpointURLScheme;
var init_endpoint = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoint.js"() {
    "use strict";
    (function(EndpointURLScheme3) {
      EndpointURLScheme3["HTTP"] = "http";
      EndpointURLScheme3["HTTPS"] = "https";
    })(EndpointURLScheme || (EndpointURLScheme = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js
var init_EndpointRuleObject = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js
var init_ErrorRuleObject = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js
var init_RuleSetObject = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/shared.js
var init_shared = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/shared.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js
var init_TreeRuleObject = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/index.js
var init_endpoints = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/endpoints/index.js"() {
    "use strict";
    init_EndpointRuleObject();
    init_ErrorRuleObject();
    init_RuleSetObject();
    init_shared();
    init_TreeRuleObject();
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/eventStream.js
var init_eventStream = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/eventStream.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/extensions/checksum.js
var AlgorithmId;
var init_checksum2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/extensions/checksum.js"() {
    "use strict";
    (function(AlgorithmId2) {
      AlgorithmId2["MD5"] = "md5";
      AlgorithmId2["CRC32"] = "crc32";
      AlgorithmId2["CRC32C"] = "crc32c";
      AlgorithmId2["SHA1"] = "sha1";
      AlgorithmId2["SHA256"] = "sha256";
    })(AlgorithmId || (AlgorithmId = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js
var init_defaultClientConfiguration = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js"() {
    "use strict";
    init_checksum2();
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/extensions/defaultExtensionConfiguration.js
var init_defaultExtensionConfiguration = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/extensions/defaultExtensionConfiguration.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/extensions/index.js
var init_extensions2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/extensions/index.js"() {
    "use strict";
    init_defaultClientConfiguration();
    init_defaultExtensionConfiguration();
    init_checksum2();
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/http.js
var FieldPosition;
var init_http = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/http.js"() {
    "use strict";
    (function(FieldPosition3) {
      FieldPosition3[FieldPosition3["HEADER"] = 0] = "HEADER";
      FieldPosition3[FieldPosition3["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition || (FieldPosition = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/http/httpHandlerInitialization.js
var init_httpHandlerInitialization = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/http/httpHandlerInitialization.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/identity/apiKeyIdentity.js
var init_apiKeyIdentity = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/identity/apiKeyIdentity.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js
var init_awsCredentialIdentity = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/identity/identity.js
var init_identity = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/identity/identity.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/identity/tokenIdentity.js
var init_tokenIdentity = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/identity/tokenIdentity.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/identity/index.js
var init_identity2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/identity/index.js"() {
    "use strict";
    init_apiKeyIdentity();
    init_awsCredentialIdentity();
    init_identity();
    init_tokenIdentity();
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/logger.js
var init_logger = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/logger.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/middleware.js
var SMITHY_CONTEXT_KEY;
var init_middleware = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/middleware.js"() {
    "use strict";
    SMITHY_CONTEXT_KEY = "__smithy_context";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/pagination.js
var init_pagination = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/pagination.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/profile.js
var IniSectionType;
var init_profile = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/profile.js"() {
    "use strict";
    (function(IniSectionType2) {
      IniSectionType2["PROFILE"] = "profile";
      IniSectionType2["SSO_SESSION"] = "sso-session";
      IniSectionType2["SERVICES"] = "services";
    })(IniSectionType || (IniSectionType = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/response.js
var init_response = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/response.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/retry.js
var init_retry = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/retry.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/serde.js
var init_serde = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/serde.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/shapes.js
var init_shapes = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/shapes.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/signature.js
var init_signature = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/signature.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/stream.js
var init_stream = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/stream.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js
var init_streaming_blob_common_types = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js
var init_streaming_blob_payload_input_types = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js
var init_streaming_blob_payload_output_types = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/transfer.js
var RequestHandlerProtocol;
var init_transfer = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/transfer.js"() {
    "use strict";
    (function(RequestHandlerProtocol3) {
      RequestHandlerProtocol3["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol3["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol3["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol || (RequestHandlerProtocol = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js
var init_client_payload_blob_type_narrow = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/transform/no-undefined.js
var init_no_undefined = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/transform/no-undefined.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/transform/type-transform.js
var init_type_transform = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/transform/type-transform.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/uri.js
var init_uri = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/uri.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/util.js
var init_util = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/util.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/waiter.js
var init_waiter = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/waiter.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/index.js
var init_dist_es3 = __esm({
  "../../node_modules/.pnpm/@smithy+types@3.1.0/node_modules/@smithy/types/dist-es/index.js"() {
    "use strict";
    init_abort();
    init_auth2();
    init_blob_payload_input_types();
    init_checksum();
    init_client();
    init_command();
    init_connection();
    init_crypto();
    init_encode();
    init_endpoint();
    init_endpoints();
    init_eventStream();
    init_extensions2();
    init_http();
    init_httpHandlerInitialization();
    init_identity2();
    init_logger();
    init_middleware();
    init_pagination();
    init_profile();
    init_response();
    init_retry();
    init_serde();
    init_shapes();
    init_signature();
    init_stream();
    init_streaming_blob_common_types();
    init_streaming_blob_payload_input_types();
    init_streaming_blob_payload_output_types();
    init_transfer();
    init_client_payload_blob_type_narrow();
    init_no_undefined();
    init_type_transform();
    init_uri();
    init_util();
    init_waiter();
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/Field.js
var init_Field = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
    "use strict";
    init_dist_es3();
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/Fields.js
var init_Fields = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/httpHandler.js
var init_httpHandler = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/httpRequest.js
function cloneQuery(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest;
var init_httpRequest = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    "use strict";
    HttpRequest = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static isInstance(request2) {
        if (!request2)
          return false;
        const req = request2;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new _HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/httpResponse.js
var HttpResponse;
var init_httpResponse = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
    "use strict";
    HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js
var init_isValidHostname = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/types.js
var init_types = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/index.js
var init_dist_es4 = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@4.0.1/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    "use strict";
    init_extensions();
    init_Field();
    init_Fields();
    init_httpHandler();
    init_httpRequest();
    init_httpResponse();
    init_isValidHostname();
    init_types();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-host-header@3.577.0/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
function resolveHostHeaderConfig(input) {
  return input;
}
var hostHeaderMiddleware, hostHeaderMiddlewareOptions, getHostHeaderPlugin;
var init_dist_es5 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+middleware-host-header@3.577.0/node_modules/@aws-sdk/middleware-host-header/dist-es/index.js"() {
    "use strict";
    init_dist_es4();
    hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!HttpRequest.isInstance(args.request))
        return next(args);
      const { request: request2 } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request2.headers[":authority"]) {
        delete request2.headers["host"];
        request2.headers[":authority"] = request2.hostname + (request2.port ? ":" + request2.port : "");
      } else if (!request2.headers["host"]) {
        let host = request2.hostname;
        if (request2.port != null)
          host += `:${request2.port}`;
        request2.headers["host"] = host;
      }
      return next(args);
    };
    hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.577.0/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js
var loggerMiddleware, loggerMiddlewareOptions, getLoggerPlugin;
var init_loggerMiddleware = __esm({
  "../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.577.0/node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js"() {
    "use strict";
    loggerMiddleware = () => (next, context) => async (args) => {
      try {
        const response = await next(args);
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger2?.info?.({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
        return response;
      } catch (error2) {
        const { clientName, commandName, logger: logger2, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        logger2?.error?.({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          error: error2,
          metadata: error2.$metadata
        });
        throw error2;
      }
    };
    loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.577.0/node_modules/@aws-sdk/middleware-logger/dist-es/index.js
var init_dist_es6 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.577.0/node_modules/@aws-sdk/middleware-logger/dist-es/index.js"() {
    "use strict";
    init_loggerMiddleware();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.577.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js
var TRACE_ID_HEADER_NAME, ENV_LAMBDA_FUNCTION_NAME, ENV_TRACE_ID, recursionDetectionMiddleware, addRecursionDetectionMiddlewareOptions, getRecursionDetectionPlugin;
var init_dist_es7 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.577.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js"() {
    "use strict";
    init_dist_es4();
    TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request: request2 } = args;
      if (!HttpRequest.isInstance(request2) || options.runtime !== "node" || request2.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str2) => typeof str2 === "string" && str2.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request2.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request: request2
      });
    };
    addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.587.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js
function resolveUserAgentConfig(input) {
  return {
    ...input,
    customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
  };
}
var init_configurations = __esm({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.587.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/isIpAddress.js
var IP_V4_REGEX, isIpAddress;
var init_isIpAddress = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/isIpAddress.js"() {
    "use strict";
    IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/isValidHostLabel.js
var VALID_HOST_LABEL_REGEX, isValidHostLabel;
var init_isValidHostLabel = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/isValidHostLabel.js"() {
    "use strict";
    VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!isValidHostLabel(label)) {
          return false;
        }
      }
      return true;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/customEndpointFunctions.js
var customEndpointFunctions;
var init_customEndpointFunctions = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/customEndpointFunctions.js"() {
    "use strict";
    customEndpointFunctions = {};
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js
var debugId;
var init_debugId = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js"() {
    "use strict";
    debugId = "endpoints";
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js
function toDebugString(input) {
  if (typeof input !== "object" || input == null) {
    return input;
  }
  if ("ref" in input) {
    return `$${toDebugString(input.ref)}`;
  }
  if ("fn" in input) {
    return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
  }
  return JSON.stringify(input, null, 2);
}
var init_toDebugString = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/debug/index.js
var init_debug = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/debug/index.js"() {
    "use strict";
    init_debugId();
    init_toDebugString();
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js
var EndpointError;
var init_EndpointError = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js"() {
    "use strict";
    EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/EndpointFunctions.js
var init_EndpointFunctions = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/EndpointFunctions.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/EndpointRuleObject.js
var init_EndpointRuleObject2 = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/EndpointRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/ErrorRuleObject.js
var init_ErrorRuleObject2 = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/ErrorRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/RuleSetObject.js
var init_RuleSetObject2 = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/RuleSetObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/TreeRuleObject.js
var init_TreeRuleObject2 = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/TreeRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/shared.js
var init_shared2 = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/shared.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/index.js
var init_types2 = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/types/index.js"() {
    "use strict";
    init_EndpointError();
    init_EndpointFunctions();
    init_EndpointRuleObject2();
    init_ErrorRuleObject2();
    init_RuleSetObject2();
    init_TreeRuleObject2();
    init_shared2();
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/booleanEquals.js
var booleanEquals;
var init_booleanEquals = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/booleanEquals.js"() {
    "use strict";
    booleanEquals = (value1, value2) => value1 === value2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/getAttrPathList.js
var getAttrPathList;
var init_getAttrPathList = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/getAttrPathList.js"() {
    "use strict";
    init_types2();
    getAttrPathList = (path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/getAttr.js
var getAttr;
var init_getAttr = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/getAttr.js"() {
    "use strict";
    init_types2();
    init_getAttrPathList();
    getAttr = (value, path) => getAttrPathList(path).reduce((acc, index2) => {
      if (typeof acc !== "object") {
        throw new EndpointError(`Index '${index2}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index2)];
      }
      return acc[index2];
    }, value);
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/isSet.js
var isSet;
var init_isSet = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/isSet.js"() {
    "use strict";
    isSet = (value) => value != null;
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/not.js
var not;
var init_not = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/not.js"() {
    "use strict";
    not = (value) => !value;
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/parseURL.js
var DEFAULT_PORTS, parseURL2;
var init_parseURL = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/parseURL.js"() {
    "use strict";
    init_dist_es3();
    init_isIpAddress();
    DEFAULT_PORTS = {
      [EndpointURLScheme.HTTP]: 80,
      [EndpointURLScheme.HTTPS]: 443
    };
    parseURL2 = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k6, v7]) => `${k6}=${v7}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error2) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = isIpAddress(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/stringEquals.js
var stringEquals;
var init_stringEquals = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/stringEquals.js"() {
    "use strict";
    stringEquals = (value1, value2) => value1 === value2;
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/substring.js
var substring;
var init_substring = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/substring.js"() {
    "use strict";
    substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/uriEncode.js
var uriEncode;
var init_uriEncode = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/uriEncode.js"() {
    "use strict";
    uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c6) => `%${c6.charCodeAt(0).toString(16).toUpperCase()}`);
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/index.js
var init_lib2 = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/lib/index.js"() {
    "use strict";
    init_booleanEquals();
    init_getAttr();
    init_isSet();
    init_isValidHostLabel();
    init_not();
    init_parseURL();
    init_stringEquals();
    init_substring();
    init_uriEncode();
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/endpointFunctions.js
var endpointFunctions;
var init_endpointFunctions = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/endpointFunctions.js"() {
    "use strict";
    init_lib2();
    endpointFunctions = {
      booleanEquals,
      getAttr,
      isSet,
      isValidHostLabel,
      not,
      parseURL: parseURL2,
      stringEquals,
      substring,
      uriEncode
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTemplate.js
var evaluateTemplate;
var init_evaluateTemplate = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTemplate.js"() {
    "use strict";
    init_lib2();
    evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/getReferenceValue.js
var getReferenceValue;
var init_getReferenceValue = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/getReferenceValue.js"() {
    "use strict";
    getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js
var evaluateExpression;
var init_evaluateExpression = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js"() {
    "use strict";
    init_types2();
    init_callFunction();
    init_evaluateTemplate();
    init_getReferenceValue();
    evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return evaluateTemplate(obj, options);
      } else if (obj["fn"]) {
        return callFunction(obj, options);
      } else if (obj["ref"]) {
        return getReferenceValue(obj, options);
      }
      throw new EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/callFunction.js
var callFunction;
var init_callFunction = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/callFunction.js"() {
    "use strict";
    init_customEndpointFunctions();
    init_endpointFunctions();
    init_evaluateExpression();
    callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options));
      const fnSegments = fn.split(".");
      if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
      }
      return endpointFunctions[fn](...evaluatedArgs);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateCondition.js
var evaluateCondition;
var init_evaluateCondition = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateCondition.js"() {
    "use strict";
    init_debug();
    init_types2();
    init_callFunction();
    evaluateCondition = ({ assign, ...fnArgs }, options) => {
      if (assign && assign in options.referenceRecord) {
        throw new EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = callFunction(fnArgs, options);
      options.logger?.debug?.(`${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateConditions.js
var evaluateConditions;
var init_evaluateConditions = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateConditions.js"() {
    "use strict";
    init_debug();
    init_evaluateCondition();
    evaluateConditions = (conditions = [], options) => {
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          options.logger?.debug?.(`${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointHeaders.js
var getEndpointHeaders;
var init_getEndpointHeaders = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointHeaders.js"() {
    "use strict";
    init_types2();
    init_evaluateExpression();
    getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperty.js
var getEndpointProperty;
var init_getEndpointProperty = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperty.js"() {
    "use strict";
    init_types2();
    init_evaluateTemplate();
    init_getEndpointProperties();
    getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return evaluateTemplate(property, options);
        case "object":
          if (property === null) {
            throw new EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return getEndpointProperties(property, options);
        case "boolean":
          return property;
        default:
          throw new EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperties.js
var getEndpointProperties;
var init_getEndpointProperties = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperties.js"() {
    "use strict";
    init_getEndpointProperty();
    getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: getEndpointProperty(propertyVal, options)
    }), {});
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointUrl.js
var getEndpointUrl;
var init_getEndpointUrl = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointUrl.js"() {
    "use strict";
    init_types2();
    init_evaluateExpression();
    getEndpointUrl = (endpointUrl, options) => {
      const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error2) {
          console.error(`Failed to construct URL with ${expression}`, error2);
          throw error2;
        }
      }
      throw new EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateEndpointRule.js
var evaluateEndpointRule;
var init_evaluateEndpointRule = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateEndpointRule.js"() {
    "use strict";
    init_debug();
    init_evaluateConditions();
    init_getEndpointHeaders();
    init_getEndpointProperties();
    init_getEndpointUrl();
    evaluateEndpointRule = (endpointRule, options) => {
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      options.logger?.debug?.(`${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: getEndpointHeaders(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: getEndpointProperties(properties, endpointRuleOptions)
        },
        url: getEndpointUrl(url, endpointRuleOptions)
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateErrorRule.js
var evaluateErrorRule;
var init_evaluateErrorRule = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateErrorRule.js"() {
    "use strict";
    init_types2();
    init_evaluateConditions();
    init_evaluateExpression();
    evaluateErrorRule = (errorRule, options) => {
      const { conditions, error: error2 } = errorRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      throw new EndpointError(evaluateExpression(error2, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTreeRule.js
var evaluateTreeRule;
var init_evaluateTreeRule = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTreeRule.js"() {
    "use strict";
    init_evaluateConditions();
    init_evaluateRules();
    evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = evaluateConditions(conditions, options);
      if (!result) {
        return;
      }
      return evaluateRules(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateRules.js
var evaluateRules;
var init_evaluateRules = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/evaluateRules.js"() {
    "use strict";
    init_types2();
    init_evaluateEndpointRule();
    init_evaluateErrorRule();
    init_evaluateTreeRule();
    evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = evaluateEndpointRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          evaluateErrorRule(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = evaluateTreeRule(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new EndpointError(`Rules evaluation failed`);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/index.js
var init_utils = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/utils/index.js"() {
    "use strict";
    init_customEndpointFunctions();
    init_evaluateRules();
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/resolveEndpoint.js
var resolveEndpoint;
var init_resolveEndpoint = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/resolveEndpoint.js"() {
    "use strict";
    init_debug();
    init_types2();
    init_utils();
    resolveEndpoint = (ruleSetObject, options) => {
      const { endpointParams, logger: logger2 } = options;
      const { parameters, rules } = ruleSetObject;
      options.logger?.debug?.(`${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v7]) => v7.default != null).map(([k6, v7]) => [k6, v7.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v7]) => v7.required).map(([k6]) => k6);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = evaluateRules(rules, { endpointParams, logger: logger2, referenceRecord: {} });
      if (options.endpointParams?.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e6) {
        }
      }
      options.logger?.debug?.(`${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
      return endpoint;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/index.js
var init_dist_es8 = __esm({
  "../../node_modules/.pnpm/@smithy+util-endpoints@2.0.2/node_modules/@smithy/util-endpoints/dist-es/index.js"() {
    "use strict";
    init_isIpAddress();
    init_isValidHostLabel();
    init_customEndpointFunctions();
    init_resolveEndpoint();
    init_types2();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js
var init_isIpAddress2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js"() {
    "use strict";
    init_dist_es8();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js
var isVirtualHostableS3Bucket;
var init_isVirtualHostableS3Bucket = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js"() {
    "use strict";
    init_dist_es8();
    init_isIpAddress2();
    isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!isVirtualHostableS3Bucket(label)) {
            return false;
          }
        }
        return true;
      }
      if (!isValidHostLabel(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if (isIpAddress(value)) {
        return false;
      }
      return true;
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js
var parseArn;
var init_parseArn = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js"() {
    "use strict";
    parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition3, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition3 === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition: partition3,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json
var partitions_default;
var init_partitions = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json"() {
    partitions_default = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-east-1",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af|il)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "ca-west-1": {
            description: "Canada West (Calgary)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "il-central-1": {
            description: "Israel (Tel Aviv)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          implicitGlobalRegion: "cn-northwest-1",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          implicitGlobalRegion: "us-gov-west-1",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          implicitGlobalRegion: "us-iso-east-1",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          implicitGlobalRegion: "us-isob-east-1",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }, {
        id: "aws-iso-e",
        outputs: {
          dnsSuffix: "cloud.adc-e.uk",
          dualStackDnsSuffix: "cloud.adc-e.uk",
          implicitGlobalRegion: "eu-isoe-west-1",
          name: "aws-iso-e",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
        regions: {
          "eu-isoe-west-1": {
            description: "EU ISOE West"
          }
        }
      }, {
        id: "aws-iso-f",
        outputs: {
          dnsSuffix: "csp.hci.ic.gov",
          dualStackDnsSuffix: "csp.hci.ic.gov",
          implicitGlobalRegion: "us-isof-south-1",
          name: "aws-iso-f",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
        regions: {}
      }],
      version: "1.1"
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js
var selectedPartitionsInfo, selectedUserAgentPrefix, partition, getUserAgentPrefix;
var init_partition = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js"() {
    "use strict";
    init_partitions();
    selectedPartitionsInfo = partitions_default;
    selectedUserAgentPrefix = "";
    partition = (value) => {
      const { partitions } = selectedPartitionsInfo;
      for (const partition3 of partitions) {
        const { regions, outputs } = partition3;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition3 of partitions) {
        const { regionRegex, outputs } = partition3;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      const DEFAULT_PARTITION = partitions.find((partition3) => partition3.id === "aws");
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    getUserAgentPrefix = () => selectedUserAgentPrefix;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/aws.js
var awsEndpointFunctions;
var init_aws = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/aws.js"() {
    "use strict";
    init_dist_es8();
    init_isVirtualHostableS3Bucket();
    init_parseArn();
    init_partition();
    awsEndpointFunctions = {
      isVirtualHostableS3Bucket,
      parseArn,
      partition
    };
    customEndpointFunctions.aws = awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js
var init_resolveEndpoint2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js"() {
    "use strict";
    init_dist_es8();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js
var init_EndpointError2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js"() {
    "use strict";
    init_dist_es8();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js
var init_EndpointRuleObject3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js
var init_ErrorRuleObject3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/ErrorRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js
var init_RuleSetObject3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/RuleSetObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js
var init_TreeRuleObject3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/TreeRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js
var init_shared3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/shared.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js
var init_types3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js"() {
    "use strict";
    init_EndpointError2();
    init_EndpointRuleObject3();
    init_ErrorRuleObject3();
    init_RuleSetObject3();
    init_TreeRuleObject3();
    init_shared3();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/index.js
var init_dist_es9 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.587.0/node_modules/@aws-sdk/util-endpoints/dist-es/index.js"() {
    "use strict";
    init_aws();
    init_partition();
    init_isIpAddress2();
    init_resolveEndpoint2();
    init_types3();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.587.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js
var USER_AGENT, X_AMZ_USER_AGENT, SPACE, UA_NAME_SEPARATOR, UA_NAME_ESCAPE_REGEX, UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR;
var init_constants = __esm({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.587.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js"() {
    "use strict";
    USER_AGENT = "user-agent";
    X_AMZ_USER_AGENT = "x-amz-user-agent";
    SPACE = " ";
    UA_NAME_SEPARATOR = "/";
    UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
    UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
    UA_ESCAPE_CHAR = "-";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.587.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js
var userAgentMiddleware, escapeUserAgent, getUserAgentMiddlewareOptions, getUserAgentPlugin;
var init_user_agent_middleware = __esm({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.587.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js"() {
    "use strict";
    init_dist_es9();
    init_dist_es4();
    init_constants();
    userAgentMiddleware = (options) => (next, context) => async (args) => {
      const { request: request2 } = args;
      if (!HttpRequest.isInstance(request2))
        return next(args);
      const { headers } = request2;
      const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
      const defaultUserAgent2 = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
      const prefix = getUserAgentPrefix();
      const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent2, ...userAgent, ...customUserAgent]).join(SPACE);
      const normalUAValue = [
        ...defaultUserAgent2.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request: request2
      });
    };
    escapeUserAgent = (userAgentPair) => {
      const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
      const version2 = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
      const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).reduce((acc, item, index2) => {
        switch (index2) {
          case 0:
            return item;
          case 1:
            return `${acc}/${item}`;
          default:
            return `${acc}#${item}`;
        }
      }, "");
    };
    getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.587.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js
var init_dist_es10 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.587.0/node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js"() {
    "use strict";
    init_configurations();
    init_user_agent_middleware();
  }
});

// ../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-es/booleanSelector.js
var booleanSelector;
var init_booleanSelector = __esm({
  "../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-es/booleanSelector.js"() {
    "use strict";
    booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-es/numberSelector.js
var init_numberSelector = __esm({
  "../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-es/numberSelector.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-es/types.js
var SelectorType;
var init_types4 = __esm({
  "../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-es/types.js"() {
    "use strict";
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType || (SelectorType = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-es/index.js
var init_dist_es11 = __esm({
  "../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-es/index.js"() {
    "use strict";
    init_booleanSelector();
    init_numberSelector();
    init_types4();
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var ENV_USE_DUALSTACK_ENDPOINT, CONFIG_USE_DUALSTACK_ENDPOINT, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS;
var init_NodeUseDualstackEndpointConfigOptions = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"() {
    "use strict";
    init_dist_es11();
    ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => booleanSelector(env2, ENV_USE_DUALSTACK_ENDPOINT, SelectorType.ENV),
      configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_DUALSTACK_ENDPOINT, SelectorType.CONFIG),
      default: false
    };
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var ENV_USE_FIPS_ENDPOINT, CONFIG_USE_FIPS_ENDPOINT, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS;
var init_NodeUseFipsEndpointConfigOptions = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"() {
    "use strict";
    init_dist_es11();
    ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => booleanSelector(env2, ENV_USE_FIPS_ENDPOINT, SelectorType.ENV),
      configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_FIPS_ENDPOINT, SelectorType.CONFIG),
      default: false
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-middleware@3.0.1/node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js
var getSmithyContext;
var init_getSmithyContext = __esm({
  "../../node_modules/.pnpm/@smithy+util-middleware@3.0.1/node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js"() {
    "use strict";
    init_dist_es3();
    getSmithyContext = (context) => context[SMITHY_CONTEXT_KEY] || (context[SMITHY_CONTEXT_KEY] = {});
  }
});

// ../../node_modules/.pnpm/@smithy+util-middleware@3.0.1/node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js
var normalizeProvider;
var init_normalizeProvider = __esm({
  "../../node_modules/.pnpm/@smithy+util-middleware@3.0.1/node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js"() {
    "use strict";
    normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-middleware@3.0.1/node_modules/@smithy/util-middleware/dist-es/index.js
var init_dist_es12 = __esm({
  "../../node_modules/.pnpm/@smithy+util-middleware@3.0.1/node_modules/@smithy/util-middleware/dist-es/index.js"() {
    "use strict";
    init_getSmithyContext();
    init_normalizeProvider();
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js
var init_resolveCustomEndpointsConfig = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js"() {
    "use strict";
    init_dist_es12();
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js
var init_getEndpointFromRegion = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js
var init_resolveEndpointsConfig = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js"() {
    "use strict";
    init_dist_es12();
    init_getEndpointFromRegion();
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js
var init_endpointsConfig = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js"() {
    "use strict";
    init_NodeUseDualstackEndpointConfigOptions();
    init_NodeUseFipsEndpointConfigOptions();
    init_resolveCustomEndpointsConfig();
    init_resolveEndpointsConfig();
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js
var REGION_ENV_NAME, REGION_INI_NAME, NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS;
var init_config2 = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js"() {
    "use strict";
    REGION_ENV_NAME = "AWS_REGION";
    REGION_INI_NAME = "region";
    NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[REGION_ENV_NAME],
      configFileSelector: (profile) => profile[REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js
var isFipsRegion;
var init_isFipsRegion = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js"() {
    "use strict";
    isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js
var getRealRegion;
var init_getRealRegion = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js"() {
    "use strict";
    init_isFipsRegion();
    getRealRegion = (region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js
var resolveRegionConfig;
var init_resolveRegionConfig = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js"() {
    "use strict";
    init_getRealRegion();
    init_isFipsRegion();
    resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return getRealRegion(region);
          }
          const providedRegion = await region();
          return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if (isFipsRegion(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js
var init_regionConfig = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js"() {
    "use strict";
    init_config2();
    init_resolveRegionConfig();
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/PartitionHash.js
var init_PartitionHash = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/PartitionHash.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/RegionHash.js
var init_RegionHash = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/RegionHash.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js
var init_getHostnameFromVariants = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/getHostnameFromVariants.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedHostname.js
var init_getResolvedHostname = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedHostname.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedPartition.js
var init_getResolvedPartition = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedPartition.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js
var init_getResolvedSigningRegion = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/getResolvedSigningRegion.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/getRegionInfo.js
var init_getRegionInfo = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/getRegionInfo.js"() {
    "use strict";
    init_getHostnameFromVariants();
    init_getResolvedHostname();
    init_getResolvedPartition();
    init_getResolvedSigningRegion();
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/index.js
var init_regionInfo = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/regionInfo/index.js"() {
    "use strict";
    init_PartitionHash();
    init_RegionHash();
    init_getRegionInfo();
  }
});

// ../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/index.js
var init_dist_es13 = __esm({
  "../../node_modules/.pnpm/@smithy+config-resolver@3.0.2/node_modules/@smithy/config-resolver/dist-es/index.js"() {
    "use strict";
    init_endpointsConfig();
    init_regionConfig();
    init_regionInfo();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js
function convertHttpAuthSchemesToMap(httpAuthSchemes) {
  const map3 = /* @__PURE__ */ new Map();
  for (const scheme of httpAuthSchemes) {
    map3.set(scheme.schemeId, scheme);
  }
  return map3;
}
var httpAuthSchemeMiddleware;
var init_httpAuthSchemeMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js"() {
    "use strict";
    init_dist_es3();
    init_dist_es12();
    httpAuthSchemeMiddleware = (config, mwOptions) => (next, context) => async (args) => {
      const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));
      const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);
      const smithyContext = getSmithyContext(context);
      const failureReasons = [];
      for (const option of options) {
        const scheme = authSchemes.get(option.schemeId);
        if (!scheme) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
          continue;
        }
        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));
        if (!identityProvider) {
          failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
          continue;
        }
        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};
        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
        smithyContext.selectedHttpAuthScheme = {
          httpAuthOption: option,
          identity: await identityProvider(option.identityProperties),
          signer: scheme.signer
        };
        break;
      }
      if (!smithyContext.selectedHttpAuthScheme) {
        throw new Error(failureReasons.join("\n"));
      }
      return next(args);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js
var resolveParamsForS3, DOMAIN_PATTERN, IP_ADDRESS_PATTERN, DOTS_PATTERN, isDnsCompatibleBucketName, isArnBucketName;
var init_s3 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js"() {
    "use strict";
    resolveParamsForS3 = async (endpointParams) => {
      const bucket = endpointParams?.Bucket || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    DOTS_PATTERN = /\.\./;
    isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    isArnBucketName = (bucketName) => {
      const [arn, partition3, service, , , bucket] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = Boolean(isArn && partition3 && service && bucket);
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return isValidArn;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/index.js
var init_service_customizations = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/index.js"() {
    "use strict";
    init_s3();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js
var createConfigValueProvider;
var init_createConfigValueProvider = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js"() {
    "use strict";
    createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
      const configProvider = async () => {
        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
        return async () => {
          const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
          const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;
          return configValue;
        };
      }
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/getSelectorName.js
function getSelectorName(functionString) {
  try {
    const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));
    constants.delete("CONFIG");
    constants.delete("CONFIG_PREFIX_SEPARATOR");
    constants.delete("ENV");
    return [...constants].join(", ");
  } catch (e6) {
    return functionString;
  }
}
var init_getSelectorName = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/getSelectorName.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromEnv.js
var fromEnv;
var init_fromEnv = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromEnv.js"() {
    "use strict";
    init_dist_es2();
    init_getSelectorName();
    fromEnv = (envVarSelector, logger2) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e6) {
        throw new CredentialsProviderError(e6.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`, { logger: logger2 });
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js
var import_os, import_path, homeDirCache, getHomeDirCacheKey, getHomeDir;
var init_getHomeDir = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js"() {
    "use strict";
    import_os = require("os");
    import_path = require("path");
    homeDirCache = {};
    getHomeDirCacheKey = () => {
      if (process && process.geteuid) {
        return `${process.geteuid()}`;
      }
      return "DEFAULT";
    };
    getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${import_path.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      const homeDirCacheKey = getHomeDirCacheKey();
      if (!homeDirCache[homeDirCacheKey])
        homeDirCache[homeDirCacheKey] = (0, import_os.homedir)();
      return homeDirCache[homeDirCacheKey];
    };
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileName.js
var ENV_PROFILE, DEFAULT_PROFILE, getProfileName;
var init_getProfileName = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileName.js"() {
    "use strict";
    ENV_PROFILE = "AWS_PROFILE";
    DEFAULT_PROFILE = "default";
    getProfileName = (init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE;
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js
var import_crypto, import_path2, getSSOTokenFilepath;
var init_getSSOTokenFilepath = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js"() {
    "use strict";
    import_crypto = require("crypto");
    import_path2 = require("path");
    init_getHomeDir();
    getSSOTokenFilepath = (id) => {
      const hasher = (0, import_crypto.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, import_path2.join)(getHomeDir(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js
var import_fs, readFile, getSSOTokenFromFile;
var init_getSSOTokenFromFile = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js"() {
    "use strict";
    import_fs = require("fs");
    init_getSSOTokenFilepath();
    ({ readFile } = import_fs.promises);
    getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = getSSOTokenFilepath(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigData.js
var getConfigData;
var init_getConfigData = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigData.js"() {
    "use strict";
    init_dist_es3();
    init_loadSharedConfigFiles();
    getConfigData = (data) => Object.entries(data).filter(([key]) => {
      const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
      if (indexOfSeparator === -1) {
        return false;
      }
      return Object.values(IniSectionType).includes(key.substring(0, indexOfSeparator));
    }).reduce((acc, [key, value]) => {
      const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);
      const updatedKey = key.substring(0, indexOfSeparator) === IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;
      acc[updatedKey] = value;
      return acc;
    }, {
      ...data.default && { default: data.default }
    });
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js
var import_path3, ENV_CONFIG_PATH, getConfigFilepath;
var init_getConfigFilepath = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js"() {
    "use strict";
    import_path3 = require("path");
    init_getHomeDir();
    ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    getConfigFilepath = () => process.env[ENV_CONFIG_PATH] || (0, import_path3.join)(getHomeDir(), ".aws", "config");
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getCredentialsFilepath.js
var import_path4, ENV_CREDENTIALS_PATH, getCredentialsFilepath;
var init_getCredentialsFilepath = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getCredentialsFilepath.js"() {
    "use strict";
    import_path4 = require("path");
    init_getHomeDir();
    ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    getCredentialsFilepath = () => process.env[ENV_CREDENTIALS_PATH] || (0, import_path4.join)(getHomeDir(), ".aws", "credentials");
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js
var prefixKeyRegex, profileNameBlockList, parseIni;
var init_parseIni = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js"() {
    "use strict";
    init_dist_es3();
    init_loadSharedConfigFiles();
    prefixKeyRegex = /^([\w-]+)\s(["'])?([\w-@\+\.%:/]+)\2$/;
    profileNameBlockList = ["__proto__", "profile __proto__"];
    parseIni = (iniData) => {
      const map3 = {};
      let currentSection;
      let currentSubSection;
      for (const iniLine of iniData.split(/\r?\n/)) {
        const trimmedLine = iniLine.split(/(^|\s)[;#]/)[0].trim();
        const isSection = trimmedLine[0] === "[" && trimmedLine[trimmedLine.length - 1] === "]";
        if (isSection) {
          currentSection = void 0;
          currentSubSection = void 0;
          const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);
          const matches = prefixKeyRegex.exec(sectionName);
          if (matches) {
            const [, prefix, , name] = matches;
            if (Object.values(IniSectionType).includes(prefix)) {
              currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);
            }
          } else {
            currentSection = sectionName;
          }
          if (profileNameBlockList.includes(sectionName)) {
            throw new Error(`Found invalid profile name "${sectionName}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = trimmedLine.indexOf("=");
          if (![0, -1].includes(indexOfEqualsSign)) {
            const [name, value] = [
              trimmedLine.substring(0, indexOfEqualsSign).trim(),
              trimmedLine.substring(indexOfEqualsSign + 1).trim()
            ];
            if (value === "") {
              currentSubSection = name;
            } else {
              if (currentSubSection && iniLine.trimStart() === iniLine) {
                currentSubSection = void 0;
              }
              map3[currentSection] = map3[currentSection] || {};
              const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;
              map3[currentSection][key] = value;
            }
          }
        }
      }
      return map3;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js
var import_fs2, readFile2, filePromisesHash, slurpFile;
var init_slurpFile = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js"() {
    "use strict";
    import_fs2 = require("fs");
    ({ readFile: readFile2 } = import_fs2.promises);
    filePromisesHash = {};
    slurpFile = (path, options) => {
      if (!filePromisesHash[path] || options?.ignoreCache) {
        filePromisesHash[path] = readFile2(path, "utf8");
      }
      return filePromisesHash[path];
    };
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js
var swallowError, CONFIG_PREFIX_SEPARATOR, loadSharedConfigFiles;
var init_loadSharedConfigFiles = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js"() {
    "use strict";
    init_getConfigData();
    init_getConfigFilepath();
    init_getCredentialsFilepath();
    init_parseIni();
    init_slurpFile();
    swallowError = () => ({});
    CONFIG_PREFIX_SEPARATOR = ".";
    loadSharedConfigFiles = async (init = {}) => {
      const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;
      const parsedFiles = await Promise.all([
        slurpFile(configFilepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).then(getConfigData).catch(swallowError),
        slurpFile(filepath, {
          ignoreCache: init.ignoreCache
        }).then(parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSsoSessionData.js
var getSsoSessionData;
var init_getSsoSessionData = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/getSsoSessionData.js"() {
    "use strict";
    init_dist_es3();
    init_loadSharedConfigFiles();
    getSsoSessionData = (data) => Object.entries(data).filter(([key]) => key.startsWith(IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR)).reduce((acc, [key, value]) => ({ ...acc, [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value }), {});
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js
var swallowError2, loadSsoSessionData;
var init_loadSsoSessionData = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js"() {
    "use strict";
    init_getConfigFilepath();
    init_getSsoSessionData();
    init_parseIni();
    init_slurpFile();
    swallowError2 = () => ({});
    loadSsoSessionData = async (init = {}) => slurpFile(init.configFilepath ?? getConfigFilepath()).then(parseIni).then(getSsoSessionData).catch(swallowError2);
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/mergeConfigFiles.js
var mergeConfigFiles;
var init_mergeConfigFiles = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/mergeConfigFiles.js"() {
    "use strict";
    mergeConfigFiles = (...files) => {
      const merged = {};
      for (const file of files) {
        for (const [key, values] of Object.entries(file)) {
          if (merged[key] !== void 0) {
            Object.assign(merged[key], values);
          } else {
            merged[key] = values;
          }
        }
      }
      return merged;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/parseKnownFiles.js
var parseKnownFiles;
var init_parseKnownFiles = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/parseKnownFiles.js"() {
    "use strict";
    init_loadSharedConfigFiles();
    init_mergeConfigFiles();
    parseKnownFiles = async (init) => {
      const parsedFiles = await loadSharedConfigFiles(init);
      return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/types.js
var init_types5 = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js
var init_dist_es14 = __esm({
  "../../node_modules/.pnpm/@smithy+shared-ini-file-loader@3.1.1/node_modules/@smithy/shared-ini-file-loader/dist-es/index.js"() {
    "use strict";
    init_getHomeDir();
    init_getProfileName();
    init_getSSOTokenFilepath();
    init_getSSOTokenFromFile();
    init_loadSharedConfigFiles();
    init_loadSsoSessionData();
    init_parseKnownFiles();
    init_types5();
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js
var fromSharedConfigFiles;
var init_fromSharedConfigFiles = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es14();
    init_getSelectorName();
    fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = getProfileName(init);
      const { configFile, credentialsFile } = await loadSharedConfigFiles(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
        const configValue = configSelector(mergedProfile, cfgFile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e6) {
        throw new CredentialsProviderError(e6.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`, { logger: init.logger });
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromStatic.js
var isFunction, fromStatic2;
var init_fromStatic2 = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromStatic.js"() {
    "use strict";
    init_dist_es2();
    isFunction = (func) => typeof func === "function";
    fromStatic2 = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : fromStatic(defaultValue);
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/configLoader.js
var loadConfig;
var init_configLoader = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/configLoader.js"() {
    "use strict";
    init_dist_es2();
    init_fromEnv();
    init_fromSharedConfigFiles();
    init_fromStatic2();
    loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => memoize(chain(fromEnv(environmentVariableSelector), fromSharedConfigFiles(configFileSelector, configuration), fromStatic2(defaultValue)));
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/index.js
var init_dist_es15 = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/index.js"() {
    "use strict";
    init_configLoader();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointUrlConfig.js
var ENV_ENDPOINT_URL, CONFIG_ENDPOINT_URL, getEndpointUrlConfig;
var init_getEndpointUrlConfig = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointUrlConfig.js"() {
    "use strict";
    init_dist_es14();
    ENV_ENDPOINT_URL = "AWS_ENDPOINT_URL";
    CONFIG_ENDPOINT_URL = "endpoint_url";
    getEndpointUrlConfig = (serviceId) => ({
      environmentVariableSelector: (env2) => {
        const serviceSuffixParts = serviceId.split(" ").map((w5) => w5.toUpperCase());
        const serviceEndpointUrl = env2[[ENV_ENDPOINT_URL, ...serviceSuffixParts].join("_")];
        if (serviceEndpointUrl)
          return serviceEndpointUrl;
        const endpointUrl = env2[ENV_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      configFileSelector: (profile, config) => {
        if (config && profile.services) {
          const servicesSection = config[["services", profile.services].join(CONFIG_PREFIX_SEPARATOR)];
          if (servicesSection) {
            const servicePrefixParts = serviceId.split(" ").map((w5) => w5.toLowerCase());
            const endpointUrl2 = servicesSection[[servicePrefixParts.join("_"), CONFIG_ENDPOINT_URL].join(CONFIG_PREFIX_SEPARATOR)];
            if (endpointUrl2)
              return endpointUrl2;
          }
        }
        const endpointUrl = profile[CONFIG_ENDPOINT_URL];
        if (endpointUrl)
          return endpointUrl;
        return void 0;
      },
      default: void 0
    });
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromConfig.js
var getEndpointFromConfig;
var init_getEndpointFromConfig = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromConfig.js"() {
    "use strict";
    init_dist_es15();
    init_getEndpointUrlConfig();
    getEndpointFromConfig = async (serviceId) => loadConfig(getEndpointUrlConfig(serviceId))();
  }
});

// ../../node_modules/.pnpm/@smithy+querystring-parser@3.0.1/node_modules/@smithy/querystring-parser/dist-es/index.js
function parseQueryString(querystring) {
  const query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    for (const pair of querystring.split("&")) {
      let [key, value = null] = pair.split("=");
      key = decodeURIComponent(key);
      if (value) {
        value = decodeURIComponent(value);
      }
      if (!(key in query)) {
        query[key] = value;
      } else if (Array.isArray(query[key])) {
        query[key].push(value);
      } else {
        query[key] = [query[key], value];
      }
    }
  }
  return query;
}
var init_dist_es16 = __esm({
  "../../node_modules/.pnpm/@smithy+querystring-parser@3.0.1/node_modules/@smithy/querystring-parser/dist-es/index.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+url-parser@3.0.1/node_modules/@smithy/url-parser/dist-es/index.js
var parseUrl;
var init_dist_es17 = __esm({
  "../../node_modules/.pnpm/@smithy+url-parser@3.0.1/node_modules/@smithy/url-parser/dist-es/index.js"() {
    "use strict";
    init_dist_es16();
    parseUrl = (url) => {
      if (typeof url === "string") {
        return parseUrl(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = parseQueryString(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js
var toEndpointV1;
var init_toEndpointV1 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js"() {
    "use strict";
    init_dist_es17();
    toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return parseUrl(endpoint.url);
        }
        return endpoint;
      }
      return parseUrl(endpoint);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js
var getEndpointFromInstructions, resolveParams;
var init_getEndpointFromInstructions = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js"() {
    "use strict";
    init_service_customizations();
    init_createConfigValueProvider();
    init_getEndpointFromConfig();
    init_toEndpointV1();
    getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      if (!clientConfig.endpoint) {
        const endpointFromConfig = await getEndpointFromConfig(clientConfig.serviceId || "");
        if (endpointFromConfig) {
          clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
        }
      }
      const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      const endpointParams = {};
      const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await resolveParamsForS3(endpointParams);
      }
      return endpointParams;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/index.js
var init_adaptors = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/adaptors/index.js"() {
    "use strict";
    init_getEndpointFromInstructions();
    init_toEndpointV1();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js
var endpointMiddleware;
var init_endpointMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js"() {
    "use strict";
    init_dist_es12();
    init_getEndpointFromInstructions();
    endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        const endpoint = await getEndpointFromInstructions(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = endpoint.properties?.authSchemes;
        const authScheme = context.authSchemes?.[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
          const smithyContext = getSmithyContext(context);
          const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;
          if (httpAuthOption) {
            httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {
              signing_region: authScheme.signingRegion,
              signingRegion: authScheme.signingRegion,
              signing_service: authScheme.signingName,
              signingName: authScheme.signingName,
              signingRegionSet: authScheme.signingRegionSet
            }, authScheme.properties);
          }
        }
        return next({
          ...args
        });
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-serde@3.0.1/node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js
var deserializerMiddleware;
var init_deserializerMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-serde@3.0.1/node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js"() {
    "use strict";
    deserializerMiddleware = (options, deserializer) => (next) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error2) {
        Object.defineProperty(error2, "$response", {
          value: response
        });
        if (!("$metadata" in error2)) {
          const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
          error2.message += "\n  " + hint;
          if (typeof error2.$responseBodyText !== "undefined") {
            if (error2.$response) {
              error2.$response.body = error2.$responseBodyText;
            }
          }
        }
        throw error2;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-serde@3.0.1/node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js
var serializerMiddleware;
var init_serializerMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-serde@3.0.1/node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js"() {
    "use strict";
    serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      const endpoint = context.endpointV2?.url && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request2 = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request: request2
      });
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-serde@3.0.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js
function getSerdePlugin(config, serializer, deserializer) {
  return {
    applyToStack: (commandStack) => {
      commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
      commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
    }
  };
}
var deserializerMiddlewareOption, serializerMiddlewareOption;
var init_serdePlugin = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-serde@3.0.1/node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js"() {
    "use strict";
    init_deserializerMiddleware();
    init_serializerMiddleware();
    deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-serde@3.0.1/node_modules/@smithy/middleware-serde/dist-es/index.js
var init_dist_es18 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-serde@3.0.1/node_modules/@smithy/middleware-serde/dist-es/index.js"() {
    "use strict";
    init_deserializerMiddleware();
    init_serdePlugin();
    init_serializerMiddleware();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js
var endpointMiddlewareOptions, getEndpointPlugin;
var init_getEndpointPlugin = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js"() {
    "use strict";
    init_dist_es18();
    init_endpointMiddleware();
    endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: serializerMiddlewareOption.name
    };
    getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(endpointMiddleware({
          config,
          instructions
        }), endpointMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js
var resolveEndpointConfig;
var init_resolveEndpointConfig = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js"() {
    "use strict";
    init_dist_es12();
    init_toEndpointV1();
    resolveEndpointConfig = (input) => {
      const tls = input.tls ?? true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await normalizeProvider(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: normalizeProvider(input.useDualstackEndpoint ?? false),
        useFipsEndpoint: normalizeProvider(input.useFipsEndpoint ?? false)
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/types.js
var init_types6 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/index.js
var init_dist_es19 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-endpoint@3.0.2/node_modules/@smithy/middleware-endpoint/dist-es/index.js"() {
    "use strict";
    init_adaptors();
    init_endpointMiddleware();
    init_getEndpointPlugin();
    init_resolveEndpointConfig();
    init_types6();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js
var httpAuthSchemeEndpointRuleSetMiddlewareOptions, getHttpAuthSchemeEndpointRuleSetPlugin;
var init_getHttpAuthSchemeEndpointRuleSetPlugin = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js"() {
    "use strict";
    init_dist_es19();
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: endpointMiddlewareOptions.name
    };
    getHttpAuthSchemeEndpointRuleSetPlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider }) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
          httpAuthSchemeParametersProvider,
          identityProviderConfigProvider
        }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js
var httpAuthSchemeMiddlewareOptions;
var init_getHttpAuthSchemePlugin = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js"() {
    "use strict";
    init_dist_es18();
    init_httpAuthSchemeMiddleware();
    httpAuthSchemeMiddlewareOptions = {
      step: "serialize",
      tags: ["HTTP_AUTH_SCHEME"],
      name: "httpAuthSchemeMiddleware",
      override: true,
      relation: "before",
      toMiddleware: serializerMiddlewareOption.name
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js
var init_middleware_http_auth_scheme = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js"() {
    "use strict";
    init_httpAuthSchemeMiddleware();
    init_getHttpAuthSchemeEndpointRuleSetPlugin();
    init_getHttpAuthSchemePlugin();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js
var defaultErrorHandler, defaultSuccessHandler, httpSigningMiddleware;
var init_httpSigningMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es3();
    init_dist_es12();
    defaultErrorHandler = (signingProperties) => (error2) => {
      throw error2;
    };
    defaultSuccessHandler = (httpResponse, signingProperties) => {
    };
    httpSigningMiddleware = (config) => (next, context) => async (args) => {
      if (!HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const smithyContext = getSmithyContext(context);
      const scheme = smithyContext.selectedHttpAuthScheme;
      if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
      }
      const { httpAuthOption: { signingProperties = {} }, identity, signer } = scheme;
      const output = await next({
        ...args,
        request: await signer.sign(args.request, identity, signingProperties)
      }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
      (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
      return output;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/config.js
var RETRY_MODES, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE;
var init_config3 = __esm({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/config.js"() {
    "use strict";
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES || (RETRY_MODES = {}));
    DEFAULT_MAX_ATTEMPTS = 3;
    DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

// ../../node_modules/.pnpm/@smithy+service-error-classification@3.0.1/node_modules/@smithy/service-error-classification/dist-es/constants.js
var THROTTLING_ERROR_CODES, TRANSIENT_ERROR_CODES, TRANSIENT_ERROR_STATUS_CODES, NODEJS_TIMEOUT_ERROR_CODES;
var init_constants2 = __esm({
  "../../node_modules/.pnpm/@smithy+service-error-classification@3.0.1/node_modules/@smithy/service-error-classification/dist-es/constants.js"() {
    "use strict";
    THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];
  }
});

// ../../node_modules/.pnpm/@smithy+service-error-classification@3.0.1/node_modules/@smithy/service-error-classification/dist-es/index.js
var isClockSkewCorrectedError, isThrottlingError, isTransientError, isServerError;
var init_dist_es20 = __esm({
  "../../node_modules/.pnpm/@smithy+service-error-classification@3.0.1/node_modules/@smithy/service-error-classification/dist-es/index.js"() {
    "use strict";
    init_constants2();
    isClockSkewCorrectedError = (error2) => error2.$metadata?.clockSkewCorrected;
    isThrottlingError = (error2) => error2.$metadata?.httpStatusCode === 429 || THROTTLING_ERROR_CODES.includes(error2.name) || error2.$retryable?.throttling == true;
    isTransientError = (error2) => isClockSkewCorrectedError(error2) || TRANSIENT_ERROR_CODES.includes(error2.name) || NODEJS_TIMEOUT_ERROR_CODES.includes(error2?.code || "") || TRANSIENT_ERROR_STATUS_CODES.includes(error2.$metadata?.httpStatusCode || 0);
    isServerError = (error2) => {
      if (error2.$metadata?.httpStatusCode !== void 0) {
        const statusCode = error2.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error2)) {
          return true;
        }
        return false;
      }
      return false;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js
var DefaultRateLimiter;
var init_DefaultRateLimiter = __esm({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js"() {
    "use strict";
    init_dist_es20();
    DefaultRateLimiter = class {
      constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve2) => setTimeout(resolve2, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if (isThrottlingError(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t6 = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t6 * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/constants.js
var DEFAULT_RETRY_DELAY_BASE, MAXIMUM_RETRY_DELAY, THROTTLING_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS, RETRY_COST, TIMEOUT_RETRY_COST, NO_RETRY_INCREMENT, INVOCATION_ID_HEADER, REQUEST_HEADER;
var init_constants3 = __esm({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/constants.js"() {
    "use strict";
    DEFAULT_RETRY_DELAY_BASE = 100;
    MAXIMUM_RETRY_DELAY = 20 * 1e3;
    THROTTLING_RETRY_DELAY_BASE = 500;
    INITIAL_RETRY_TOKENS = 500;
    RETRY_COST = 5;
    TIMEOUT_RETRY_COST = 10;
    NO_RETRY_INCREMENT = 1;
    INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    REQUEST_HEADER = "amz-sdk-request";
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js
var getDefaultRetryBackoffStrategy;
var init_defaultRetryBackoffStrategy = __esm({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js"() {
    "use strict";
    init_constants3();
    getDefaultRetryBackoffStrategy = () => {
      let delayBase = DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js
var createDefaultRetryToken;
var init_defaultRetryToken = __esm({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js"() {
    "use strict";
    init_constants3();
    createDefaultRetryToken = ({ retryDelay, retryCount, retryCost }) => {
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => Math.min(MAXIMUM_RETRY_DELAY, retryDelay);
      const getRetryCost = () => retryCost;
      return {
        getRetryCount,
        getRetryDelay,
        getRetryCost
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js
var StandardRetryStrategy;
var init_StandardRetryStrategy = __esm({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js"() {
    "use strict";
    init_config3();
    init_constants3();
    init_defaultRetryBackoffStrategy();
    init_defaultRetryToken();
    StandardRetryStrategy = class {
      constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = RETRY_MODES.STANDARD;
        this.capacity = INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return createDefaultRetryToken({
          retryDelay: DEFAULT_RETRY_DELAY_BASE,
          retryCount: 0
        });
      }
      async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
          const errorType = errorInfo.errorType;
          this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);
          const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
          const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
          const capacityCost = this.getCapacityCost(errorType);
          this.capacity -= capacityCost;
          return createDefaultRetryToken({
            retryDelay,
            retryCount: token.getRetryCount() + 1,
            retryCost: capacityCost
          });
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
      }
      getCapacity() {
        return this.capacity;
      }
      async getMaxAttempts() {
        try {
          return await this.maxAttemptsProvider();
        } catch (error2) {
          console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
          return DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js
var AdaptiveRetryStrategy;
var init_AdaptiveRetryStrategy = __esm({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js"() {
    "use strict";
    init_config3();
    init_DefaultRateLimiter();
    init_StandardRetryStrategy();
    AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js
var init_ConfiguredRetryStrategy = __esm({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js"() {
    "use strict";
    init_constants3();
    init_StandardRetryStrategy();
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/types.js
var init_types7 = __esm({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/index.js
var init_dist_es21 = __esm({
  "../../node_modules/.pnpm/@smithy+util-retry@3.0.1/node_modules/@smithy/util-retry/dist-es/index.js"() {
    "use strict";
    init_AdaptiveRetryStrategy();
    init_ConfiguredRetryStrategy();
    init_DefaultRateLimiter();
    init_StandardRetryStrategy();
    init_config3();
    init_constants3();
    init_types7();
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/rng.js
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto2.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto2, rnds8Pool, poolPtr;
var init_rng = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/rng.js"() {
    "use strict";
    import_crypto2 = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/stringify.js
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}
var byteToHex;
var init_stringify = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/stringify.js"() {
    "use strict";
    byteToHex = [];
    for (let i6 = 0; i6 < 256; ++i6) {
      byteToHex.push((i6 + 256).toString(16).slice(1));
    }
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/native.js
var import_crypto3, native_default;
var init_native = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/native.js"() {
    "use strict";
    import_crypto3 = __toESM(require("crypto"));
    native_default = {
      randomUUID: import_crypto3.default.randomUUID
    };
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i6 = 0; i6 < 16; ++i6) {
      buf[offset + i6] = rnds[i6];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default;
var init_v4 = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v4.js"() {
    "use strict";
    init_native();
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// ../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/index.js
var init_esm_node = __esm({
  "../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/index.js"() {
    "use strict";
    init_v4();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/defaultRetryQuota.js
var init_defaultRetryQuota = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/defaultRetryQuota.js"() {
    "use strict";
    init_dist_es21();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/delayDecider.js
var init_delayDecider = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/delayDecider.js"() {
    "use strict";
    init_dist_es21();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/retryDecider.js
var init_retryDecider = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/retryDecider.js"() {
    "use strict";
    init_dist_es20();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/util.js
var asSdkError;
var init_util2 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/util.js"() {
    "use strict";
    asSdkError = (error2) => {
      if (error2 instanceof Error)
        return error2;
      if (error2 instanceof Object)
        return Object.assign(new Error(), error2);
      if (typeof error2 === "string")
        return new Error(error2);
      return new Error(`AWS SDK error wrapper for ${error2}`);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js
var init_StandardRetryStrategy2 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es20();
    init_dist_es21();
    init_defaultRetryQuota();
    init_delayDecider();
    init_retryDecider();
    init_util2();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js
var init_AdaptiveRetryStrategy2 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js"() {
    "use strict";
    init_dist_es21();
    init_StandardRetryStrategy2();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/configurations.js
var ENV_MAX_ATTEMPTS, CONFIG_MAX_ATTEMPTS, NODE_MAX_ATTEMPT_CONFIG_OPTIONS, resolveRetryConfig, ENV_RETRY_MODE, CONFIG_RETRY_MODE, NODE_RETRY_MODE_CONFIG_OPTIONS;
var init_configurations2 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/configurations.js"() {
    "use strict";
    init_dist_es12();
    init_dist_es21();
    ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    CONFIG_MAX_ATTEMPTS = "max_attempts";
    NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        const value = env2[ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: DEFAULT_MAX_ATTEMPTS
    };
    resolveRetryConfig = (input) => {
      const { retryStrategy } = input;
      const maxAttempts = normalizeProvider(input.maxAttempts ?? DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await normalizeProvider(input.retryMode)();
          if (retryMode === RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy(maxAttempts);
        }
      };
    };
    ENV_RETRY_MODE = "AWS_RETRY_MODE";
    CONFIG_RETRY_MODE = "retry_mode";
    NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
      default: DEFAULT_RETRY_MODE
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js
var init_omitRetryHeadersMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es21();
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js
var NoOpLogger;
var init_NoOpLogger = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js"() {
    "use strict";
    NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-stack@3.0.1/node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js
var getAllAliases, getMiddlewareNameWithAliases, constructStack, stepWeights, priorityWeights;
var init_MiddlewareStack = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-stack@3.0.1/node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js"() {
    "use strict";
    getAllAliases = (name, aliases) => {
      const _aliases = [];
      if (name) {
        _aliases.push(name);
      }
      if (aliases) {
        for (const alias of aliases) {
          _aliases.push(alias);
        }
      }
      return _aliases;
    };
    getMiddlewareNameWithAliases = (name, aliases) => {
      return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
    };
    constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      let identifyOnResolve = false;
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a6, b6) => stepWeights[b6.step] - stepWeights[a6.step] || priorityWeights[b6.priority || "normal"] - priorityWeights[a6.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          const aliases = getAllAliases(entry.name, entry.aliases);
          if (aliases.includes(toRemove)) {
            isRemoved = true;
            for (const alias of aliases) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            for (const alias of getAllAliases(entry.name, entry.aliases)) {
              entriesNameSet.delete(alias);
            }
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        toStack.identifyOnResolve?.(stack.identifyOnResolve());
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug2 = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
            normalizedEntriesNameMap[alias] = normalizedEntry;
          }
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug2) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${getMiddlewareNameWithAliases(entry.name, entry.aliases)} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
          wholeList.push(...expandedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === alias || entry2.aliases?.some((a6) => a6 === alias));
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = absoluteEntries[toOverrideIndex];
                if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                  throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ${entry.priority} priority in ${entry.step} step.`);
                }
                absoluteEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override, aliases: _aliases } = options;
          const entry = {
            middleware,
            ...options
          };
          const aliases = getAllAliases(name, _aliases);
          if (aliases.length > 0) {
            if (aliases.some((alias) => entriesNameSet.has(alias))) {
              if (!override)
                throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
              for (const alias of aliases) {
                const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === alias || entry2.aliases?.some((a6) => a6 === alias));
                if (toOverrideIndex === -1) {
                  continue;
                }
                const toOverride = relativeEntries[toOverrideIndex];
                if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                  throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
                }
                relativeEntries.splice(toOverrideIndex, 1);
              }
            }
            for (const alias of aliases) {
              entriesNameSet.add(alias);
            }
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name, aliases: _aliases } = entry;
            if (tags && tags.includes(toRemove)) {
              const aliases = getAllAliases(name, _aliases);
              for (const alias of aliases) {
                entriesNameSet.delete(alias);
              }
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo(constructStack());
          cloned.use(from);
          cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            const step = mw.step ?? mw.relation + " " + mw.toMiddleware;
            return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
          });
        },
        identifyOnResolve(toggle) {
          if (typeof toggle === "boolean")
            identifyOnResolve = toggle;
          return identifyOnResolve;
        },
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler = middleware(handler, context);
          }
          if (identifyOnResolve) {
            console.log(stack.identify());
          }
          return handler;
        }
      };
      return stack;
    };
    stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-stack@3.0.1/node_modules/@smithy/middleware-stack/dist-es/index.js
var init_dist_es22 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-stack@3.0.1/node_modules/@smithy/middleware-stack/dist-es/index.js"() {
    "use strict";
    init_MiddlewareStack();
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/client.js
var Client;
var init_client2 = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/client.js"() {
    "use strict";
    init_dist_es22();
    Client = class {
      constructor(config) {
        this.middlewareStack = constructStack();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+is-array-buffer@3.0.0/node_modules/@smithy/is-array-buffer/dist-es/index.js
var isArrayBuffer;
var init_dist_es23 = __esm({
  "../../node_modules/.pnpm/@smithy+is-array-buffer@3.0.0/node_modules/@smithy/is-array-buffer/dist-es/index.js"() {
    "use strict";
    isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
  }
});

// ../../node_modules/.pnpm/@smithy+util-buffer-from@3.0.0/node_modules/@smithy/util-buffer-from/dist-es/index.js
var import_buffer, fromArrayBuffer, fromString;
var init_dist_es24 = __esm({
  "../../node_modules/.pnpm/@smithy+util-buffer-from@3.0.0/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    "use strict";
    init_dist_es23();
    import_buffer = require("buffer");
    fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer.Buffer.from(input, offset, length);
    };
    fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer.Buffer.from(input, encoding) : import_buffer.Buffer.from(input);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-es/fromBase64.js
var BASE64_REGEX, fromBase64;
var init_fromBase64 = __esm({
  "../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-es/fromBase64.js"() {
    "use strict";
    init_dist_es24();
    BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = fromString(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-utf8@3.0.0/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js
var fromUtf84;
var init_fromUtf8 = __esm({
  "../../node_modules/.pnpm/@smithy+util-utf8@3.0.0/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    "use strict";
    init_dist_es24();
    fromUtf84 = (input) => {
      const buf = fromString(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-utf8@3.0.0/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js
var toUint8Array;
var init_toUint8Array = __esm({
  "../../node_modules/.pnpm/@smithy+util-utf8@3.0.0/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    "use strict";
    init_fromUtf8();
    toUint8Array = (data) => {
      if (typeof data === "string") {
        return fromUtf84(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-utf8@3.0.0/node_modules/@smithy/util-utf8/dist-es/toUtf8.js
var toUtf84;
var init_toUtf8 = __esm({
  "../../node_modules/.pnpm/@smithy+util-utf8@3.0.0/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
    "use strict";
    init_dist_es24();
    toUtf84 = (input) => {
      if (typeof input === "string") {
        return input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-utf8@3.0.0/node_modules/@smithy/util-utf8/dist-es/index.js
var init_dist_es25 = __esm({
  "../../node_modules/.pnpm/@smithy+util-utf8@3.0.0/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    "use strict";
    init_fromUtf8();
    init_toUint8Array();
    init_toUtf8();
  }
});

// ../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-es/toBase64.js
var toBase64;
var init_toBase64 = __esm({
  "../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-es/toBase64.js"() {
    "use strict";
    init_dist_es24();
    init_dist_es25();
    toBase64 = (_input) => {
      let input;
      if (typeof _input === "string") {
        input = fromUtf84(_input);
      } else {
        input = _input;
      }
      if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
      }
      return fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-es/index.js
var init_dist_es26 = __esm({
  "../../node_modules/.pnpm/@smithy+util-base64@3.0.0/node_modules/@smithy/util-base64/dist-es/index.js"() {
    "use strict";
    init_fromBase64();
    init_toBase64();
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/blob/transforms.js
function transformToString(payload, encoding = "utf-8") {
  if (encoding === "base64") {
    return toBase64(payload);
  }
  return toUtf84(payload);
}
function transformFromString(str2, encoding) {
  if (encoding === "base64") {
    return Uint8ArrayBlobAdapter.mutate(fromBase64(str2));
  }
  return Uint8ArrayBlobAdapter.mutate(fromUtf84(str2));
}
var init_transforms = __esm({
  "../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/blob/transforms.js"() {
    "use strict";
    init_dist_es26();
    init_dist_es25();
    init_Uint8ArrayBlobAdapter();
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js
var Uint8ArrayBlobAdapter;
var init_Uint8ArrayBlobAdapter = __esm({
  "../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js"() {
    "use strict";
    init_transforms();
    Uint8ArrayBlobAdapter = class _Uint8ArrayBlobAdapter extends Uint8Array {
      static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
          case "string":
            return transformFromString(source, encoding);
          default:
            throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
      }
      static mutate(source) {
        Object.setPrototypeOf(source, _Uint8ArrayBlobAdapter.prototype);
        return source;
      }
      transformToString(encoding = "utf-8") {
        return transformToString(this, encoding);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js
var init_getAwsChunkedEncodingStream = __esm({
  "../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/getAwsChunkedEncodingStream.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+util-uri-escape@3.0.0/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js
var escapeUri, hexEncode;
var init_escape_uri = __esm({
  "../../node_modules/.pnpm/@smithy+util-uri-escape@3.0.0/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js"() {
    "use strict";
    escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    hexEncode = (c6) => `%${c6.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// ../../node_modules/.pnpm/@smithy+util-uri-escape@3.0.0/node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js
var init_escape_uri_path = __esm({
  "../../node_modules/.pnpm/@smithy+util-uri-escape@3.0.0/node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js"() {
    "use strict";
    init_escape_uri();
  }
});

// ../../node_modules/.pnpm/@smithy+util-uri-escape@3.0.0/node_modules/@smithy/util-uri-escape/dist-es/index.js
var init_dist_es27 = __esm({
  "../../node_modules/.pnpm/@smithy+util-uri-escape@3.0.0/node_modules/@smithy/util-uri-escape/dist-es/index.js"() {
    "use strict";
    init_escape_uri();
    init_escape_uri_path();
  }
});

// ../../node_modules/.pnpm/@smithy+querystring-builder@3.0.1/node_modules/@smithy/querystring-builder/dist-es/index.js
function buildQueryString(query) {
  const parts = [];
  for (let key of Object.keys(query).sort()) {
    const value = query[key];
    key = escapeUri(key);
    if (Array.isArray(value)) {
      for (let i6 = 0, iLen = value.length; i6 < iLen; i6++) {
        parts.push(`${key}=${escapeUri(value[i6])}`);
      }
    } else {
      let qsEntry = key;
      if (value || typeof value === "string") {
        qsEntry += `=${escapeUri(value)}`;
      }
      parts.push(qsEntry);
    }
  }
  return parts.join("&");
}
var init_dist_es28 = __esm({
  "../../node_modules/.pnpm/@smithy+querystring-builder@3.0.1/node_modules/@smithy/querystring-builder/dist-es/index.js"() {
    "use strict";
    init_dist_es27();
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/constants.js
var NODEJS_TIMEOUT_ERROR_CODES2;
var init_constants4 = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/constants.js"() {
    "use strict";
    NODEJS_TIMEOUT_ERROR_CODES2 = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/get-transformed-headers.js
var getTransformedHeaders;
var init_get_transformed_headers = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/get-transformed-headers.js"() {
    "use strict";
    getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/set-connection-timeout.js
var setConnectionTimeout;
var init_set_connection_timeout = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/set-connection-timeout.js"() {
    "use strict";
    setConnectionTimeout = (request2, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      const timeoutId = setTimeout(() => {
        request2.destroy();
        reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
          name: "TimeoutError"
        }));
      }, timeoutInMs);
      request2.on("socket", (socket) => {
        if (socket.connecting) {
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        } else {
          clearTimeout(timeoutId);
        }
      });
    };
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/set-socket-keep-alive.js
var setSocketKeepAlive;
var init_set_socket_keep_alive = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/set-socket-keep-alive.js"() {
    "use strict";
    setSocketKeepAlive = (request2, { keepAlive, keepAliveMsecs }) => {
      if (keepAlive !== true) {
        return;
      }
      request2.on("socket", (socket) => {
        socket.setKeepAlive(keepAlive, keepAliveMsecs || 0);
      });
    };
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/set-socket-timeout.js
var setSocketTimeout;
var init_set_socket_timeout = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/set-socket-timeout.js"() {
    "use strict";
    setSocketTimeout = (request2, reject, timeoutInMs = 0) => {
      request2.setTimeout(timeoutInMs, () => {
        request2.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/write-request-body.js
async function writeRequestBody(httpRequest2, request2, maxContinueTimeoutMs = MIN_WAIT_TIME) {
  const headers = request2.headers ?? {};
  const expect = headers["Expect"] || headers["expect"];
  let timeoutId = -1;
  let hasError = false;
  if (expect === "100-continue") {
    await Promise.race([
      new Promise((resolve2) => {
        timeoutId = Number(setTimeout(resolve2, Math.max(MIN_WAIT_TIME, maxContinueTimeoutMs)));
      }),
      new Promise((resolve2) => {
        httpRequest2.on("continue", () => {
          clearTimeout(timeoutId);
          resolve2();
        });
        httpRequest2.on("error", () => {
          hasError = true;
          clearTimeout(timeoutId);
          resolve2();
        });
      })
    ]);
  }
  if (!hasError) {
    writeBody(httpRequest2, request2.body);
  }
}
function writeBody(httpRequest2, body) {
  if (body instanceof import_stream2.Readable) {
    body.pipe(httpRequest2);
    return;
  }
  if (body) {
    if (Buffer.isBuffer(body) || typeof body === "string") {
      httpRequest2.end(body);
      return;
    }
    const uint8 = body;
    if (typeof uint8 === "object" && uint8.buffer && typeof uint8.byteOffset === "number" && typeof uint8.byteLength === "number") {
      httpRequest2.end(Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength));
      return;
    }
    httpRequest2.end(Buffer.from(body));
    return;
  }
  httpRequest2.end();
}
var import_stream2, MIN_WAIT_TIME;
var init_write_request_body = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/write-request-body.js"() {
    "use strict";
    import_stream2 = require("stream");
    MIN_WAIT_TIME = 1e3;
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/node-http-handler.js
var import_http2, import_https2, NodeHttpHandler;
var init_node_http_handler = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/node-http-handler.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es28();
    import_http2 = require("http");
    import_https2 = require("https");
    init_constants4();
    init_get_transformed_headers();
    init_set_connection_timeout();
    init_set_socket_keep_alive();
    init_set_socket_timeout();
    init_write_request_body();
    NodeHttpHandler = class _NodeHttpHandler {
      static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
          return instanceOrOptions;
        }
        return new _NodeHttpHandler(instanceOrOptions);
      }
      static checkSocketUsage(agent, socketWarningTimestamp) {
        const { sockets, requests, maxSockets } = agent;
        if (typeof maxSockets !== "number" || maxSockets === Infinity) {
          return socketWarningTimestamp;
        }
        const interval = 15e3;
        if (Date.now() - interval < socketWarningTimestamp) {
          return socketWarningTimestamp;
        }
        if (sockets && requests) {
          for (const origin in sockets) {
            const socketsInUse = sockets[origin]?.length ?? 0;
            const requestsEnqueued = requests[origin]?.length ?? 0;
            if (socketsInUse >= maxSockets && requestsEnqueued >= 2 * maxSockets) {
              console.warn("@smithy/node-http-handler:WARN", `socket usage at capacity=${socketsInUse} and ${requestsEnqueued} additional requests are enqueued.`, "See https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-configuring-maxsockets.html", "or increase socketAcquisitionWarningTimeout=(millis) in the NodeHttpHandler config.");
              return Date.now();
            }
          }
        }
        return socketWarningTimestamp;
      }
      constructor(options) {
        this.socketWarningTimestamp = 0;
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve2, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve2(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve2(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { requestTimeout: requestTimeout2, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          requestTimeout: requestTimeout2 ?? socketTimeout,
          httpAgent: (() => {
            if (httpAgent instanceof import_http2.Agent || typeof httpAgent?.destroy === "function") {
              return httpAgent;
            }
            return new import_http2.Agent({ keepAlive, maxSockets, ...httpAgent });
          })(),
          httpsAgent: (() => {
            if (httpsAgent instanceof import_https2.Agent || typeof httpsAgent?.destroy === "function") {
              return httpsAgent;
            }
            return new import_https2.Agent({ keepAlive, maxSockets, ...httpsAgent });
          })()
        };
      }
      destroy() {
        this.config?.httpAgent?.destroy();
        this.config?.httpsAgent?.destroy();
      }
      async handle(request2, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        let socketCheckTimeoutId;
        return new Promise((_resolve, _reject) => {
          let writeRequestBodyPromise = void 0;
          const resolve2 = async (arg) => {
            await writeRequestBodyPromise;
            clearTimeout(socketCheckTimeoutId);
            _resolve(arg);
          };
          const reject = async (arg) => {
            await writeRequestBodyPromise;
            _reject(arg);
          };
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal?.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request2.protocol === "https:";
          const agent = isSSL ? this.config.httpsAgent : this.config.httpAgent;
          socketCheckTimeoutId = setTimeout(() => {
            this.socketWarningTimestamp = _NodeHttpHandler.checkSocketUsage(agent, this.socketWarningTimestamp);
          }, this.config.socketAcquisitionWarningTimeout ?? (this.config.requestTimeout ?? 2e3) + (this.config.connectionTimeout ?? 1e3));
          const queryString = buildQueryString(request2.query || {});
          let auth = void 0;
          if (request2.username != null || request2.password != null) {
            const username = request2.username ?? "";
            const password = request2.password ?? "";
            auth = `${username}:${password}`;
          }
          let path = request2.path;
          if (queryString) {
            path += `?${queryString}`;
          }
          if (request2.fragment) {
            path += `#${request2.fragment}`;
          }
          const nodeHttpsOptions = {
            headers: request2.headers,
            host: request2.hostname,
            method: request2.method,
            path,
            port: request2.port,
            agent,
            auth
          };
          const requestFunc = isSSL ? import_https2.request : import_http2.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new HttpResponse({
              statusCode: res.statusCode || -1,
              reason: res.statusMessage,
              headers: getTransformedHeaders(res.headers),
              body: res
            });
            resolve2({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (NODEJS_TIMEOUT_ERROR_CODES2.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          setConnectionTimeout(req, reject, this.config.connectionTimeout);
          setSocketTimeout(req, reject, this.config.requestTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          const httpAgent = nodeHttpsOptions.agent;
          if (typeof httpAgent === "object" && "keepAlive" in httpAgent) {
            setSocketKeepAlive(req, {
              keepAlive: httpAgent.keepAlive,
              keepAliveMsecs: httpAgent.keepAliveMsecs
            });
          }
          writeRequestBodyPromise = writeRequestBody(req, request2, this.config.requestTimeout).catch(_reject);
        });
      }
      updateHttpClientConfig(key, value) {
        this.config = void 0;
        this.configProvider = this.configProvider.then((config) => {
          return {
            ...config,
            [key]: value
          };
        });
      }
      httpHandlerConfigs() {
        return this.config ?? {};
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-pool.js
var init_node_http2_connection_pool = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-pool.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-manager.js
var init_node_http2_connection_manager = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-connection-manager.js"() {
    "use strict";
    init_node_http2_connection_pool();
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-handler.js
var init_node_http2_handler = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/node-http2-handler.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es28();
    init_get_transformed_headers();
    init_node_http2_connection_manager();
    init_write_request_body();
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/stream-collector/collector.js
var import_stream3, Collector;
var init_collector = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/stream-collector/collector.js"() {
    "use strict";
    import_stream3 = require("stream");
    Collector = class extends import_stream3.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/stream-collector/index.js
async function collectReadableStream(stream) {
  const chunks = [];
  const reader = stream.getReader();
  let isDone = false;
  let length = 0;
  while (!isDone) {
    const { done, value } = await reader.read();
    if (value) {
      chunks.push(value);
      length += value.length;
    }
    isDone = done;
  }
  const collected = new Uint8Array(length);
  let offset = 0;
  for (const chunk of chunks) {
    collected.set(chunk, offset);
    offset += chunk.length;
  }
  return collected;
}
var streamCollector, isReadableStreamInstance;
var init_stream_collector = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/stream-collector/index.js"() {
    "use strict";
    init_collector();
    streamCollector = (stream) => {
      if (isReadableStreamInstance(stream)) {
        return collectReadableStream(stream);
      }
      return new Promise((resolve2, reject) => {
        const collector = new Collector();
        stream.pipe(collector);
        stream.on("error", (err) => {
          collector.end();
          reject(err);
        });
        collector.on("error", reject);
        collector.on("finish", function() {
          const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
          resolve2(bytes);
        });
      });
    };
    isReadableStreamInstance = (stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream;
  }
});

// ../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/index.js
var init_dist_es29 = __esm({
  "../../node_modules/.pnpm/@smithy+node-http-handler@3.0.1/node_modules/@smithy/node-http-handler/dist-es/index.js"() {
    "use strict";
    init_node_http_handler();
    init_node_http2_handler();
    init_stream_collector();
  }
});

// ../../node_modules/.pnpm/@smithy+fetch-http-handler@3.0.2/node_modules/@smithy/fetch-http-handler/dist-es/request-timeout.js
var init_request_timeout = __esm({
  "../../node_modules/.pnpm/@smithy+fetch-http-handler@3.0.2/node_modules/@smithy/fetch-http-handler/dist-es/request-timeout.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+fetch-http-handler@3.0.2/node_modules/@smithy/fetch-http-handler/dist-es/fetch-http-handler.js
var keepAliveSupport;
var init_fetch_http_handler = __esm({
  "../../node_modules/.pnpm/@smithy+fetch-http-handler@3.0.2/node_modules/@smithy/fetch-http-handler/dist-es/fetch-http-handler.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es28();
    init_request_timeout();
    keepAliveSupport = {
      supported: Boolean(typeof Request !== "undefined" && "keepalive" in new Request("https://[::1]"))
    };
  }
});

// ../../node_modules/.pnpm/@smithy+fetch-http-handler@3.0.2/node_modules/@smithy/fetch-http-handler/dist-es/stream-collector.js
async function collectBlob(blob) {
  const base64 = await readToBase64(blob);
  const arrayBuffer = fromBase64(base64);
  return new Uint8Array(arrayBuffer);
}
async function collectStream(stream) {
  const chunks = [];
  const reader = stream.getReader();
  let isDone = false;
  let length = 0;
  while (!isDone) {
    const { done, value } = await reader.read();
    if (value) {
      chunks.push(value);
      length += value.length;
    }
    isDone = done;
  }
  const collected = new Uint8Array(length);
  let offset = 0;
  for (const chunk of chunks) {
    collected.set(chunk, offset);
    offset += chunk.length;
  }
  return collected;
}
function readToBase64(blob) {
  return new Promise((resolve2, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      if (reader.readyState !== 2) {
        return reject(new Error("Reader aborted too early"));
      }
      const result = reader.result ?? "";
      const commaIndex = result.indexOf(",");
      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
      resolve2(result.substring(dataOffset));
    };
    reader.onabort = () => reject(new Error("Read aborted"));
    reader.onerror = () => reject(reader.error);
    reader.readAsDataURL(blob);
  });
}
var streamCollector2;
var init_stream_collector2 = __esm({
  "../../node_modules/.pnpm/@smithy+fetch-http-handler@3.0.2/node_modules/@smithy/fetch-http-handler/dist-es/stream-collector.js"() {
    "use strict";
    init_dist_es26();
    streamCollector2 = (stream) => {
      if (typeof Blob === "function" && stream instanceof Blob) {
        return collectBlob(stream);
      }
      return collectStream(stream);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+fetch-http-handler@3.0.2/node_modules/@smithy/fetch-http-handler/dist-es/index.js
var init_dist_es30 = __esm({
  "../../node_modules/.pnpm/@smithy+fetch-http-handler@3.0.2/node_modules/@smithy/fetch-http-handler/dist-es/index.js"() {
    "use strict";
    init_fetch_http_handler();
    init_stream_collector2();
  }
});

// ../../node_modules/.pnpm/@smithy+util-hex-encoding@3.0.0/node_modules/@smithy/util-hex-encoding/dist-es/index.js
function fromHex(encoded) {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  const out = new Uint8Array(encoded.length / 2);
  for (let i6 = 0; i6 < encoded.length; i6 += 2) {
    const encodedByte = encoded.slice(i6, i6 + 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT) {
      out[i6 / 2] = HEX_TO_SHORT[encodedByte];
    } else {
      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
  }
  return out;
}
function toHex(bytes) {
  let out = "";
  for (let i6 = 0; i6 < bytes.byteLength; i6++) {
    out += SHORT_TO_HEX[bytes[i6]];
  }
  return out;
}
var SHORT_TO_HEX, HEX_TO_SHORT;
var init_dist_es31 = __esm({
  "../../node_modules/.pnpm/@smithy+util-hex-encoding@3.0.0/node_modules/@smithy/util-hex-encoding/dist-es/index.js"() {
    "use strict";
    SHORT_TO_HEX = {};
    HEX_TO_SHORT = {};
    for (let i6 = 0; i6 < 256; i6++) {
      let encodedByte = i6.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i6] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i6;
    }
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.browser.js
var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED, sdkStreamMixin, isBlobInstance, isReadableStreamInstance2;
var init_sdk_stream_mixin_browser = __esm({
  "../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.browser.js"() {
    "use strict";
    init_dist_es30();
    init_dist_es26();
    init_dist_es31();
    init_dist_es25();
    ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    sdkStreamMixin = (stream) => {
      if (!isBlobInstance(stream) && !isReadableStreamInstance2(stream)) {
        const name = stream?.__proto__?.constructor?.name || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await streamCollector2(stream);
      };
      const blobToWebStream = (blob) => {
        if (typeof blob.stream !== "function") {
          throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\nIf you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === "base64") {
            return toBase64(buf);
          } else if (encoding === "hex") {
            return toHex(buf);
          } else if (encoding === void 0 || encoding === "utf8" || encoding === "utf-8") {
            return toUtf84(buf);
          } else if (typeof TextDecoder === "function") {
            return new TextDecoder(encoding).decode(buf);
          } else {
            throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          transformed = true;
          if (isBlobInstance(stream)) {
            return blobToWebStream(stream);
          } else if (isReadableStreamInstance2(stream)) {
            return stream;
          } else {
            throw new Error(`Cannot transform payload to web stream, got ${stream}`);
          }
        }
      });
    };
    isBlobInstance = (stream) => typeof Blob === "function" && stream instanceof Blob;
    isReadableStreamInstance2 = (stream) => typeof ReadableStream === "function" && stream instanceof ReadableStream;
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js
var import_stream4, import_util2, ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED2, sdkStreamMixin2;
var init_sdk_stream_mixin = __esm({
  "../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.js"() {
    "use strict";
    init_dist_es29();
    init_dist_es24();
    import_stream4 = require("stream");
    import_util2 = require("util");
    init_sdk_stream_mixin_browser();
    ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED2 = "The stream has already been transformed.";
    sdkStreamMixin2 = (stream) => {
      if (!(stream instanceof import_stream4.Readable)) {
        try {
          return sdkStreamMixin(stream);
        } catch (e6) {
          const name = stream?.__proto__?.constructor?.name || stream;
          throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
        }
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED2);
        }
        transformed = true;
        return await streamCollector(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return fromArrayBuffer(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new import_util2.TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED2);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof import_stream4.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
          }
          transformed = true;
          return import_stream4.Readable.toWeb(stream);
        }
      });
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/index.js
var init_dist_es32 = __esm({
  "../../node_modules/.pnpm/@smithy+util-stream@3.0.2/node_modules/@smithy/util-stream/dist-es/index.js"() {
    "use strict";
    init_Uint8ArrayBlobAdapter();
    init_getAwsChunkedEncodingStream();
    init_sdk_stream_mixin();
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js
var collectBody;
var init_collect_stream_body = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js"() {
    "use strict";
    init_dist_es32();
    collectBody = async (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Uint8ArrayBlobAdapter.mutate(streamBody);
      }
      if (!streamBody) {
        return Uint8ArrayBlobAdapter.mutate(new Uint8Array());
      }
      const fromContext = context.streamCollector(streamBody);
      return Uint8ArrayBlobAdapter.mutate(await fromContext);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/command.js
var Command, ClassBuilder;
var init_command2 = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/command.js"() {
    "use strict";
    init_dist_es22();
    init_dist_es3();
    Command = class {
      constructor() {
        this.middlewareStack = constructStack();
      }
      static classBuilder() {
        return new ClassBuilder();
      }
      resolveMiddlewareWithContext(clientStack, configuration, options, { middlewareFn, clientName, commandName, inputFilterSensitiveLog, outputFilterSensitiveLog, smithyContext, additionalContext, CommandCtor }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
          this.middlewareStack.use(mw);
        }
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog,
          outputFilterSensitiveLog,
          [SMITHY_CONTEXT_KEY]: {
            ...smithyContext
          },
          ...additionalContext
        };
        const { requestHandler } = configuration;
        return stack.resolve((request2) => requestHandler.handle(request2.request, options || {}), handlerExecutionContext);
      }
    };
    ClassBuilder = class {
      constructor() {
        this._init = () => {
        };
        this._ep = {};
        this._middlewareFn = () => [];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = (_3) => _3;
        this._outputFilterSensitiveLog = (_3) => _3;
        this._serializer = null;
        this._deserializer = null;
      }
      init(cb) {
        this._init = cb;
      }
      ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
      }
      m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
      }
      s(service, operation, smithyContext = {}) {
        this._smithyContext = {
          service,
          operation,
          ...smithyContext
        };
        return this;
      }
      c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
      }
      n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
      }
      f(inputFilter = (_3) => _3, outputFilter = (_3) => _3) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
      }
      ser(serializer) {
        this._serializer = serializer;
        return this;
      }
      de(deserializer) {
        this._deserializer = deserializer;
        return this;
      }
      build() {
        const closure = this;
        let CommandRef;
        return CommandRef = class extends Command {
          static getEndpointParameterInstructions() {
            return closure._ep;
          }
          constructor(...[input]) {
            super();
            this.serialize = closure._serializer;
            this.deserialize = closure._deserializer;
            this.input = input ?? {};
            closure._init(this);
          }
          resolveMiddleware(stack, configuration, options) {
            return this.resolveMiddlewareWithContext(stack, configuration, options, {
              CommandCtor: CommandRef,
              middlewareFn: closure._middlewareFn,
              clientName: closure._clientName,
              commandName: closure._commandName,
              inputFilterSensitiveLog: closure._inputFilterSensitiveLog,
              outputFilterSensitiveLog: closure._outputFilterSensitiveLog,
              smithyContext: closure._smithyContext,
              additionalContext: closure._additionalContext
            });
          }
        };
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/constants.js
var SENSITIVE_STRING;
var init_constants5 = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/constants.js"() {
    "use strict";
    SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js
var createAggregatedClient;
var init_create_aggregated_client = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js"() {
    "use strict";
    createAggregatedClient = (commands5, Client2) => {
      for (const command of Object.keys(commands5)) {
        const CommandCtor = commands5[command];
        const methodImpl = async function(args, optionsOrCb, cb) {
          const command2 = new CommandCtor(args);
          if (typeof optionsOrCb === "function") {
            this.send(command2, optionsOrCb);
          } else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
              throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
            this.send(command2, optionsOrCb || {}, cb);
          } else {
            return this.send(command2, optionsOrCb);
          }
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client2.prototype[methodName] = methodImpl;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/parse-utils.js
var expectNumber, MAX_FLOAT, expectFloat32, expectLong, expectInt32, expectShort, expectByte, expectSizedInt, castInt, expectNonNull, expectObject, expectString, strictParseDouble, strictParseFloat32, NUMBER_REGEX, parseNumber, strictParseInt32, strictParseShort, strictParseByte, stackTraceWarning, logger;
var init_parse_utils = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/parse-utils.js"() {
    "use strict";
    expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    expectFloat32 = (value) => {
      const expected = expectNumber(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    expectInt32 = (value) => expectSizedInt(value, 32);
    expectShort = (value) => expectSizedInt(value, 16);
    expectByte = (value) => expectSizedInt(value, 8);
    expectSizedInt = (value, size) => {
      const expected = expectLong(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    strictParseDouble = (value) => {
      if (typeof value == "string") {
        return expectNumber(parseNumber(value));
      }
      return expectNumber(value);
    };
    strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
      }
      return expectFloat32(value);
    };
    NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return expectInt32(parseNumber(value));
      }
      return expectInt32(value);
    };
    strictParseShort = (value) => {
      if (typeof value === "string") {
        return expectShort(parseNumber(value));
      }
      return expectShort(value);
    };
    strictParseByte = (value) => {
      if (typeof value === "string") {
        return expectByte(parseNumber(value));
      }
      return expectByte(value);
    };
    stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s6) => !s6.includes("stackTraceWarning")).join("\n");
    };
    logger = {
      warn: console.warn
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/date-utils.js
var MONTHS, RFC3339, parseRfc3339DateTime, RFC3339_WITH_OFFSET, parseRfc3339DateTimeWithOffset, IMF_FIXDATE, RFC_850_DATE, ASC_TIME, parseEpochTimestamp, buildDate, FIFTY_YEARS_IN_MILLIS, DAYS_IN_MONTH, validateDayOfMonth, isLeapYear, parseDateValue, parseMilliseconds, parseOffsetToMilliseconds, stripLeadingZeroes;
var init_date_utils = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/date-utils.js"() {
    "use strict";
    init_parse_utils();
    MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_3, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_3, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = strictParseShort(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = strictParseDouble(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    parseDateValue = (value, type, lower, upper) => {
      const dateVal = strictParseByte(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return strictParseFloat32("0." + value) * 1e3;
    };
    parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/exceptions.js
var ServiceException, decorateServiceException;
var init_exceptions = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/exceptions.js"() {
    "use strict";
    ServiceException = class _ServiceException extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, _ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v7]) => v7 !== void 0).forEach(([k6, v7]) => {
        if (exception[k6] == void 0 || exception[k6] === "") {
          exception[k6] = v7;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/default-error-handler.js
var throwDefaultError, withBaseException, deserializeMetadata;
var init_default_error_handler = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/default-error-handler.js"() {
    "use strict";
    init_exceptions();
    throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw decorateServiceException(response, parsedBody);
    };
    withBaseException = (ExceptionCtor) => {
      return ({ output, parsedBody, errorCode }) => {
        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
      };
    };
    deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/defaults-mode.js
var loadConfigsForDefaultMode;
var init_defaults_mode = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/defaults-mode.js"() {
    "use strict";
    loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js
var warningEmitted, emitWarningIfUnsupportedVersion;
var init_emitWarningIfUnsupportedVersion = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js"() {
    "use strict";
    warningEmitted = false;
    emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 16) {
        warningEmitted = true;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js
var getChecksumConfiguration2, resolveChecksumRuntimeConfig2;
var init_checksum3 = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js"() {
    "use strict";
    init_dist_es3();
    getChecksumConfiguration2 = (runtimeConfig) => {
      const checksumAlgorithms = [];
      for (const id in AlgorithmId) {
        const algorithmId = AlgorithmId[id];
        if (runtimeConfig[algorithmId] === void 0) {
          continue;
        }
        checksumAlgorithms.push({
          algorithmId: () => algorithmId,
          checksumConstructor: () => runtimeConfig[algorithmId]
        });
      }
      return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
          this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
          return this._checksumAlgorithms;
        }
      };
    };
    resolveChecksumRuntimeConfig2 = (clientConfig) => {
      const runtimeConfig = {};
      clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
      });
      return runtimeConfig;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/extensions/retry.js
var getRetryConfiguration, resolveRetryRuntimeConfig;
var init_retry2 = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/extensions/retry.js"() {
    "use strict";
    getRetryConfiguration = (runtimeConfig) => {
      let _retryStrategy = runtimeConfig.retryStrategy;
      return {
        setRetryStrategy(retryStrategy) {
          _retryStrategy = retryStrategy;
        },
        retryStrategy() {
          return _retryStrategy;
        }
      };
    };
    resolveRetryRuntimeConfig = (retryStrategyConfiguration) => {
      const runtimeConfig = {};
      runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
      return runtimeConfig;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js
var getDefaultExtensionConfiguration, resolveDefaultRuntimeConfig;
var init_defaultExtensionConfiguration2 = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js"() {
    "use strict";
    init_checksum3();
    init_retry2();
    getDefaultExtensionConfiguration = (runtimeConfig) => {
      return {
        ...getChecksumConfiguration2(runtimeConfig),
        ...getRetryConfiguration(runtimeConfig)
      };
    };
    resolveDefaultRuntimeConfig = (config) => {
      return {
        ...resolveChecksumRuntimeConfig2(config),
        ...resolveRetryRuntimeConfig(config)
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/extensions/index.js
var init_extensions3 = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/extensions/index.js"() {
    "use strict";
    init_defaultExtensionConfiguration2();
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js
function extendedEncodeURIComponent(str2) {
  return encodeURIComponent(str2).replace(/[!'()*]/g, function(c6) {
    return "%" + c6.charCodeAt(0).toString(16).toUpperCase();
  });
}
var init_extended_encode_uri_component = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js
var init_get_array_if_single_item = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/get-array-if-single-item.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js
var getValueFromTextNode;
var init_get_value_from_text_node = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/get-value-from-text-node.js"() {
    "use strict";
    getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = getValueFromTextNode(obj[key]);
        }
      }
      return obj;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/lazy-json.js
var StringWrapper;
var init_lazy_json = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/lazy-json.js"() {
    "use strict";
    StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(StringWrapper, String);
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/object-mapping.js
function map2(arg0, arg1, arg2) {
  let target;
  let filter;
  let instructions;
  if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
    target = {};
    instructions = arg0;
  } else {
    target = arg0;
    if (typeof arg1 === "function") {
      filter = arg1;
      instructions = arg2;
      return mapWithFilter(target, filter, instructions);
    } else {
      instructions = arg1;
    }
  }
  for (const key of Object.keys(instructions)) {
    if (!Array.isArray(instructions[key])) {
      target[key] = instructions[key];
      continue;
    }
    applyInstruction(target, null, instructions, key);
  }
  return target;
}
var take, mapWithFilter, applyInstruction, nonNullish, pass;
var init_object_mapping = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/object-mapping.js"() {
    "use strict";
    take = (source, instructions) => {
      const out = {};
      for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
      }
      return out;
    };
    mapWithFilter = (target, filter, instructions) => {
      return map2(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
    applyInstruction = (target, source, instructions, targetKey) => {
      if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
          instruction = [, instruction];
        }
        const [filter2 = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if (typeof filter2 === "function" && filter2(source[sourceKey]) || typeof filter2 !== "function" && !!filter2) {
          target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
      }
      let [filter, value] = instructions[targetKey];
      if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === void 0 && (_value = value()) != null;
        const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed) {
          target[targetKey] = _value;
        } else if (customFilterPassed) {
          target[targetKey] = value();
        }
      } else {
        const defaultFilterPassed = filter === void 0 && value != null;
        const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
        if (defaultFilterPassed || customFilterPassed) {
          target[targetKey] = value;
        }
      }
    };
    nonNullish = (_3) => _3 != null;
    pass = (_3) => _3;
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/resolve-path.js
var resolvedPath;
var init_resolve_path = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/resolve-path.js"() {
    "use strict";
    init_extended_encode_uri_component();
    resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => extendedEncodeURIComponent(segment)).join("/") : extendedEncodeURIComponent(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/ser-utils.js
var init_ser_utils = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/ser-utils.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/serde-json.js
var _json;
var init_serde_json = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/serde-json.js"() {
    "use strict";
    _json = (obj) => {
      if (obj == null) {
        return {};
      }
      if (Array.isArray(obj)) {
        return obj.filter((_3) => _3 != null).map(_json);
      }
      if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
          if (obj[key] == null) {
            continue;
          }
          target[key] = _json(obj[key]);
        }
        return target;
      }
      return obj;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/split-every.js
var init_split_every = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/split-every.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/index.js
var init_dist_es33 = __esm({
  "../../node_modules/.pnpm/@smithy+smithy-client@3.1.2/node_modules/@smithy/smithy-client/dist-es/index.js"() {
    "use strict";
    init_NoOpLogger();
    init_client2();
    init_collect_stream_body();
    init_command2();
    init_constants5();
    init_create_aggregated_client();
    init_date_utils();
    init_default_error_handler();
    init_defaults_mode();
    init_emitWarningIfUnsupportedVersion();
    init_extensions3();
    init_exceptions();
    init_extended_encode_uri_component();
    init_get_array_if_single_item();
    init_get_value_from_text_node();
    init_lazy_json();
    init_object_mapping();
    init_parse_utils();
    init_resolve_path();
    init_ser_utils();
    init_serde_json();
    init_split_every();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/isStreamingPayload/isStreamingPayload.js
var import_stream5, isStreamingPayload;
var init_isStreamingPayload = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/isStreamingPayload/isStreamingPayload.js"() {
    "use strict";
    import_stream5 = require("stream");
    isStreamingPayload = (request2) => request2?.body instanceof import_stream5.Readable || typeof ReadableStream !== "undefined" && request2?.body instanceof ReadableStream;
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js
var retryMiddleware, isRetryStrategyV2, getRetryErrorInfo, getRetryErrorType, retryMiddlewareOptions, getRetryPlugin, getRetryAfterHint;
var init_retryMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es20();
    init_dist_es33();
    init_dist_es21();
    init_esm_node();
    init_isStreamingPayload();
    init_util2();
    retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request: request2 } = args;
        const isRequest2 = HttpRequest.isInstance(request2);
        if (isRequest2) {
          request2.headers[INVOCATION_ID_HEADER] = v4_default();
        }
        while (true) {
          try {
            if (isRequest2) {
              request2.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e6) {
            const retryErrorInfo = getRetryErrorInfo(e6);
            lastError = asSdkError(e6);
            if (isRequest2 && isStreamingPayload(request2)) {
              (context.logger instanceof NoOpLogger ? console : context.logger)?.warn("An error was encountered in a non-retryable streaming request.");
              throw lastError;
            }
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve2) => setTimeout(resolve2, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy?.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    getRetryErrorInfo = (error2) => {
      const errorInfo = {
        error: error2,
        errorType: getRetryErrorType(error2)
      };
      const retryAfterHint = getRetryAfterHint(error2.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    getRetryErrorType = (error2) => {
      if (isThrottlingError(error2))
        return "THROTTLING";
      if (isTransientError(error2))
        return "TRANSIENT";
      if (isServerError(error2))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
      }
    });
    getRetryAfterHint = (response) => {
      if (!HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/index.js
var init_dist_es34 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-retry@3.0.4/node_modules/@smithy/middleware-retry/dist-es/index.js"() {
    "use strict";
    init_AdaptiveRetryStrategy2();
    init_StandardRetryStrategy2();
    init_configurations2();
    init_delayDecider();
    init_omitRetryHeadersMiddleware();
    init_retryDecider();
    init_retryMiddleware();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js
var httpSigningMiddlewareOptions, getHttpSigningPlugin;
var init_getHttpSigningMiddleware = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js"() {
    "use strict";
    init_dist_es34();
    init_httpSigningMiddleware();
    httpSigningMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["HTTP_SIGNING"],
      name: "httpSigningMiddleware",
      aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
      override: true,
      relation: "after",
      toMiddleware: retryMiddlewareOptions.name
    };
    getHttpSigningPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpSigningMiddleware(config), httpSigningMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-signing/index.js
var init_middleware_http_signing = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/middleware-http-signing/index.js"() {
    "use strict";
    init_httpSigningMiddleware();
    init_getHttpSigningMiddleware();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js
var DefaultIdentityProviderConfig;
var init_DefaultIdentityProviderConfig = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js"() {
    "use strict";
    DefaultIdentityProviderConfig = class {
      constructor(config) {
        this.authSchemes = /* @__PURE__ */ new Map();
        for (const [key, value] of Object.entries(config)) {
          if (value !== void 0) {
            this.authSchemes.set(key, value);
          }
        }
      }
      getIdentityProvider(schemeId) {
        return this.authSchemes.get(schemeId);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js
var init_httpApiKeyAuth = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js"() {
    "use strict";
    init_dist_es3();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js
var init_httpBearerAuth = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js
var NoAuthSigner;
var init_noAuth = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/noAuth.js"() {
    "use strict";
    NoAuthSigner = class {
      async sign(httpRequest2, identity, signingProperties) {
        return httpRequest2;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js
var init_httpAuthSchemes = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js"() {
    "use strict";
    init_httpApiKeyAuth();
    init_httpBearerAuth();
    init_noAuth();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js
var createIsIdentityExpiredFunction, EXPIRATION_MS, isIdentityExpired, doesIdentityRequireRefresh, memoizeIdentityProvider;
var init_memoizeIdentityProvider = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js"() {
    "use strict";
    createIsIdentityExpiredFunction = (expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs;
    EXPIRATION_MS = 3e5;
    isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
    doesIdentityRequireRefresh = (identity) => identity.expiration !== void 0;
    memoizeIdentityProvider = (provider, isExpired, requiresRefresh) => {
      if (provider === void 0) {
        return void 0;
      }
      const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async (options) => {
        if (!pending) {
          pending = normalizedProvider(options);
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider(options);
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider(options);
        }
        if (isConstant) {
          return resolved;
        }
        if (!requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider(options);
          return resolved;
        }
        return resolved;
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js
var init_util_identity_and_auth = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js"() {
    "use strict";
    init_DefaultIdentityProviderConfig();
    init_httpAuthSchemes();
    init_memoizeIdentityProvider();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/getSmithyContext.js
var init_getSmithyContext2 = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/getSmithyContext.js"() {
    "use strict";
    init_dist_es3();
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/normalizeProvider.js
var normalizeProvider2;
var init_normalizeProvider2 = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/normalizeProvider.js"() {
    "use strict";
    normalizeProvider2 = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/protocols/requestBuilder.js
function requestBuilder(input, context) {
  return new RequestBuilder(input, context);
}
var RequestBuilder;
var init_requestBuilder = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/protocols/requestBuilder.js"() {
    "use strict";
    init_dist_es4();
    init_dist_es33();
    RequestBuilder = class {
      constructor(input, context) {
        this.input = input;
        this.context = context;
        this.query = {};
        this.method = "";
        this.headers = {};
        this.path = "";
        this.body = null;
        this.hostname = "";
        this.resolvePathStack = [];
      }
      async build() {
        const { hostname, protocol = "https", port, path: basePath } = await this.context.endpoint();
        this.path = basePath;
        for (const resolvePath of this.resolvePathStack) {
          resolvePath(this.path);
        }
        return new HttpRequest({
          protocol,
          hostname: this.hostname || hostname,
          port,
          method: this.method,
          path: this.path,
          query: this.query,
          body: this.body,
          headers: this.headers
        });
      }
      hn(hostname) {
        this.hostname = hostname;
        return this;
      }
      bp(uriLabel) {
        this.resolvePathStack.push((basePath) => {
          this.path = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
        });
        return this;
      }
      p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
        this.resolvePathStack.push((path) => {
          this.path = resolvedPath(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
        });
        return this;
      }
      h(headers) {
        this.headers = headers;
        return this;
      }
      q(query) {
        this.query = query;
        return this;
      }
      b(body) {
        this.body = body;
        return this;
      }
      m(method) {
        this.method = method;
        return this;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/pagination/createPaginator.js
function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
  return async function* paginateOperation(config, input, ...additionalArguments) {
    let token = config.startingToken || void 0;
    let hasNext = true;
    let page;
    while (hasNext) {
      input[inputTokenName] = token;
      if (pageSizeTokenName) {
        input[pageSizeTokenName] = input[pageSizeTokenName] ?? config.pageSize;
      }
      if (config.client instanceof ClientCtor) {
        page = await makePagedClientRequest(CommandCtor, config.client, input, ...additionalArguments);
      } else {
        throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
      }
      yield page;
      const prevToken = token;
      token = get(page, outputTokenName);
      hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return void 0;
  };
}
var makePagedClientRequest, get;
var init_createPaginator = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/pagination/createPaginator.js"() {
    "use strict";
    makePagedClientRequest = async (CommandCtor, client, input, ...args) => {
      return await client.send(new CommandCtor(input), ...args);
    };
    get = (fromObject, path) => {
      let cursor = fromObject;
      const pathComponents = path.split(".");
      for (const step of pathComponents) {
        if (!cursor || typeof cursor !== "object") {
          return void 0;
        }
        cursor = cursor[step];
      }
      return cursor;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/index.js
var init_dist_es35 = __esm({
  "../../node_modules/.pnpm/@smithy+core@2.2.1/node_modules/@smithy/core/dist-es/index.js"() {
    "use strict";
    init_middleware_http_auth_scheme();
    init_middleware_http_signing();
    init_util_identity_and_auth();
    init_getSmithyContext2();
    init_normalizeProvider2();
    init_requestBuilder();
    init_createPaginator();
  }
});

// ../../node_modules/.pnpm/@smithy+middleware-content-length@3.0.1/node_modules/@smithy/middleware-content-length/dist-es/index.js
function contentLengthMiddleware(bodyLengthChecker) {
  return (next) => async (args) => {
    const request2 = args.request;
    if (HttpRequest.isInstance(request2)) {
      const { body, headers } = request2;
      if (body && Object.keys(headers).map((str2) => str2.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
        try {
          const length = bodyLengthChecker(body);
          request2.headers = {
            ...request2.headers,
            [CONTENT_LENGTH_HEADER]: String(length)
          };
        } catch (error2) {
        }
      }
    }
    return next({
      ...args,
      request: request2
    });
  };
}
var CONTENT_LENGTH_HEADER, contentLengthMiddlewareOptions, getContentLengthPlugin;
var init_dist_es36 = __esm({
  "../../node_modules/.pnpm/@smithy+middleware-content-length@3.0.1/node_modules/@smithy/middleware-content-length/dist-es/index.js"() {
    "use strict";
    init_dist_es4();
    CONTENT_LENGTH_HEADER = "content-length";
    contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
      }
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js
var warningEmitted2, emitWarningIfUnsupportedVersion2;
var init_emitWarningIfUnsupportedVersion2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/client/emitWarningIfUnsupportedVersion.js"() {
    "use strict";
    warningEmitted2 = false;
    emitWarningIfUnsupportedVersion2 = (version2) => {
      if (version2 && !warningEmitted2 && parseInt(version2.substring(1, version2.indexOf("."))) < 16) {
        warningEmitted2 = true;
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/client/index.js
var init_client3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/client/index.js"() {
    "use strict";
    init_emitWarningIfUnsupportedVersion2();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js
var getDateHeader;
var init_getDateHeader = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js"() {
    "use strict";
    init_dist_es4();
    getDateHeader = (response) => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : void 0;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js
var getSkewCorrectedDate;
var init_getSkewCorrectedDate = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js"() {
    "use strict";
    getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js
var isClockSkewed;
var init_isClockSkewed = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js"() {
    "use strict";
    init_getSkewCorrectedDate();
    isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 3e5;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js
var getUpdatedSystemClockOffset;
var init_getUpdatedSystemClockOffset = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js"() {
    "use strict";
    init_isClockSkewed();
    getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js
var init_utils2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/index.js"() {
    "use strict";
    init_getDateHeader();
    init_getSkewCorrectedDate();
    init_getUpdatedSystemClockOffset();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js
var throwSigningPropertyError, validateSigningProperties, AwsSdkSigV4Signer;
var init_AwsSdkSigV4Signer = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js"() {
    "use strict";
    init_dist_es4();
    init_utils2();
    throwSigningPropertyError = (name, property) => {
      if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
      }
      return property;
    };
    validateSigningProperties = async (signingProperties) => {
      const context = throwSigningPropertyError("context", signingProperties.context);
      const config = throwSigningPropertyError("config", signingProperties.config);
      const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
      const signerFunction = throwSigningPropertyError("signer", config.signer);
      const signer = await signerFunction(authScheme);
      const signingRegion = signingProperties?.signingRegion;
      const signingName = signingProperties?.signingName;
      return {
        config,
        signer,
        signingRegion,
        signingName
      };
    };
    AwsSdkSigV4Signer = class {
      async sign(httpRequest2, identity, signingProperties) {
        if (!HttpRequest.isInstance(httpRequest2)) {
          throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const { config, signer, signingRegion, signingName } = await validateSigningProperties(signingProperties);
        const signedRequest = await signer.sign(httpRequest2, {
          signingDate: getSkewCorrectedDate(config.systemClockOffset),
          signingRegion,
          signingService: signingName
        });
        return signedRequest;
      }
      errorHandler(signingProperties) {
        return (error2) => {
          const serverTime = error2.ServerTime ?? getDateHeader(error2.$response);
          if (serverTime) {
            const config = throwSigningPropertyError("config", signingProperties.config);
            const initialSystemClockOffset = config.systemClockOffset;
            config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
            const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;
            if (clockSkewCorrected && error2.$metadata) {
              error2.$metadata.clockSkewCorrected = true;
            }
          }
          throw error2;
        };
      }
      successHandler(httpResponse, signingProperties) {
        const dateHeader = getDateHeader(httpResponse);
        if (dateHeader) {
          const config = throwSigningPropertyError("config", signingProperties.config);
          config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/constants.js
var ALGORITHM_QUERY_PARAM, CREDENTIAL_QUERY_PARAM, AMZ_DATE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, EXPIRES_QUERY_PARAM, SIGNATURE_QUERY_PARAM, TOKEN_QUERY_PARAM, AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER, GENERATED_HEADERS, SIGNATURE_HEADER, SHA256_HEADER, TOKEN_HEADER, ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN, ALGORITHM_IDENTIFIER, EVENT_ALGORITHM_IDENTIFIER, UNSIGNED_PAYLOAD, MAX_CACHE_SIZE, KEY_TYPE_IDENTIFIER, MAX_PRESIGNED_TTL;
var init_constants6 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/constants.js"() {
    "use strict";
    ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    AUTH_HEADER = "authorization";
    AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
    DATE_HEADER = "date";
    GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
    SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
    SHA256_HEADER = "x-amz-content-sha256";
    TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
    ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    PROXY_HEADER_PATTERN = /^proxy-/;
    SEC_HEADER_PATTERN = /^sec-/;
    ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    MAX_CACHE_SIZE = 50;
    KEY_TYPE_IDENTIFIER = "aws4_request";
    MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js
var signingKeyCache, cacheQueue, createScope, getSigningKey, hmac;
var init_credentialDerivation = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js"() {
    "use strict";
    init_dist_es31();
    init_dist_es25();
    init_constants6();
    signingKeyCache = {};
    cacheQueue = [];
    createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;
    getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(toUint8Array(data));
      return hash.digest();
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js
var getCanonicalHeaders;
var init_getCanonicalHeaders = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js"() {
    "use strict";
    init_constants6();
    getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || unsignableHeaders?.has(canonicalHeaderName) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js
var getCanonicalQuery;
var init_getCanonicalQuery = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js"() {
    "use strict";
    init_dist_es27();
    init_constants6();
    getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${escapeUri(key)}=${escapeUri(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).reduce((encoded, value2) => encoded.concat([`${escapeUri(key)}=${escapeUri(value2)}`]), []).sort().join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js
var getPayloadHash;
var init_getPayloadHash = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js"() {
    "use strict";
    init_dist_es23();
    init_dist_es31();
    init_dist_es25();
    init_constants6();
    getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(toUint8Array(body));
        return toHex(await hashCtor.digest());
      }
      return UNSIGNED_PAYLOAD;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/HeaderFormatter.js
function negate(bytes) {
  for (let i6 = 0; i6 < 8; i6++) {
    bytes[i6] ^= 255;
  }
  for (let i6 = 7; i6 > -1; i6--) {
    bytes[i6]++;
    if (bytes[i6] !== 0)
      break;
  }
}
var HeaderFormatter, HEADER_VALUE_TYPE, UUID_PATTERN, Int64;
var init_HeaderFormatter = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/HeaderFormatter.js"() {
    "use strict";
    init_dist_es31();
    init_dist_es25();
    HeaderFormatter = class {
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = fromUtf84(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = fromUtf84(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set(fromHex(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
    };
    (function(HEADER_VALUE_TYPE3) {
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["short"] = 3] = "short";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["long"] = 5] = "long";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["string"] = 7] = "string";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
    UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
    Int64 = class _Int64 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i6 = 7, remaining = Math.abs(Math.round(number)); i6 > -1 && remaining > 0; i6--, remaining /= 256) {
          bytes[i6] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/headerUtil.js
var hasHeader;
var init_headerUtil = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/headerUtil.js"() {
    "use strict";
    hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/cloneRequest.js
var cloneRequest, cloneQuery2;
var init_cloneRequest = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/cloneRequest.js"() {
    "use strict";
    cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? cloneQuery2(query) : void 0
    });
    cloneQuery2 = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js
var moveHeadersToQuery;
var init_moveHeadersToQuery = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js"() {
    "use strict";
    init_cloneRequest();
    moveHeadersToQuery = (request2, options = {}) => {
      const { headers, query = {} } = typeof request2.clone === "function" ? request2.clone() : cloneRequest(request2);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname)) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request2,
        headers,
        query
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/prepareRequest.js
var prepareRequest;
var init_prepareRequest = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/prepareRequest.js"() {
    "use strict";
    init_cloneRequest();
    init_constants6();
    prepareRequest = (request2) => {
      request2 = typeof request2.clone === "function" ? request2.clone() : cloneRequest(request2);
      for (const headerName of Object.keys(request2.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request2.headers[headerName];
        }
      }
      return request2;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/utilDate.js
var iso8601, toDate;
var init_utilDate = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/utilDate.js"() {
    "use strict";
    iso8601 = (time) => toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/SignatureV4.js
var SignatureV4, formatDate, getCanonicalHeaderList;
var init_SignatureV4 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/SignatureV4.js"() {
    "use strict";
    init_dist_es31();
    init_dist_es12();
    init_dist_es27();
    init_dist_es25();
    init_constants6();
    init_credentialDerivation();
    init_getCanonicalHeaders();
    init_getCanonicalQuery();
    init_getPayloadHash();
    init_HeaderFormatter();
    init_headerUtil();
    init_moveHeadersToQuery();
    init_prepareRequest();
    init_utilDate();
    SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.headerFormatter = new HeaderFormatter();
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = normalizeProvider(region);
        this.credentialProvider = normalizeProvider(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const request2 = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request2.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request2.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
        request2.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request2.query[AMZ_DATE_QUERY_PARAM] = longDate;
        request2.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders(request2, unsignableHeaders, signableHeaders);
        request2.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request2.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request2, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));
        return request2;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = toHex(await hash.digest());
        const stringToSign = [
          EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
          headers: this.headerFormatter.format(signableMessage.message.headers),
          payload: signableMessage.message.body
        }, {
          signingDate,
          signingRegion,
          signingService,
          priorSignature: signableMessage.priorSignature
        });
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(toUint8Array(stringToSign));
        return toHex(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request2 = prepareRequest(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        request2.headers[AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request2.headers[TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash(request2, this.sha256);
        if (!hasHeader(SHA256_HEADER, request2.headers) && this.applyChecksum) {
          request2.headers[SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders(request2, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request2, canonicalHeaders, payloadHash));
        request2.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request2;
      }
      createCanonicalRequest(request2, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request2.method}
${this.getCanonicalPath(request2)}
${getCanonicalQuery(request2)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(toUint8Array(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${toHex(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if (pathSegment?.length === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
          const doubleEncoded = escapeUri(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(toUint8Array(stringToSign));
        return toHex(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    formatDate = (now) => {
      const longDate = iso8601(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/index.js
var init_dist_es37 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@3.0.1/node_modules/@smithy/signature-v4/dist-es/index.js"() {
    "use strict";
    init_SignatureV4();
    init_getCanonicalHeaders();
    init_getCanonicalQuery();
    init_getPayloadHash();
    init_moveHeadersToQuery();
    init_prepareRequest();
    init_credentialDerivation();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js
var resolveAwsSdkSigV4Config;
var init_resolveAwsSdkSigV4Config = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js"() {
    "use strict";
    init_dist_es35();
    init_dist_es37();
    resolveAwsSdkSigV4Config = (config) => {
      let normalizedCreds;
      if (config.credentials) {
        normalizedCreds = memoizeIdentityProvider(config.credentials, isIdentityExpired, doesIdentityRequireRefresh);
      }
      if (!normalizedCreds) {
        if (config.credentialDefaultProvider) {
          normalizedCreds = normalizeProvider2(config.credentialDefaultProvider(Object.assign({}, config, {
            parentClientConfig: config
          })));
        } else {
          normalizedCreds = async () => {
            throw new Error("`credentials` is missing");
          };
        }
      }
      const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256 } = config;
      let signer;
      if (config.signer) {
        signer = normalizeProvider2(config.signer);
      } else if (config.regionInfoProvider) {
        signer = () => normalizeProvider2(config.region)().then(async (region) => [
          await config.regionInfoProvider(region, {
            useFipsEndpoint: await config.useFipsEndpoint(),
            useDualstackEndpoint: await config.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          config.signingRegion = config.signingRegion || signingRegion || region;
          config.signingName = config.signingName || signingService || config.serviceId;
          const params = {
            ...config,
            credentials: normalizedCreds,
            region: config.signingRegion,
            service: config.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config.signerConstructor || SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: config.signingName || config.defaultSigningName,
            signingRegion: await normalizeProvider2(config.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          config.signingRegion = config.signingRegion || signingRegion;
          config.signingName = config.signingName || signingService || config.serviceId;
          const params = {
            ...config,
            credentials: normalizedCreds,
            region: config.signingRegion,
            service: config.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = config.signerConstructor || SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...config,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js
var init_aws_sdk = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/index.js"() {
    "use strict";
    init_AwsSdkSigV4Signer();
    init_resolveAwsSdkSigV4Config();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js
var init_httpAuthSchemes2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/index.js"() {
    "use strict";
    init_aws_sdk();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js
var init_coercing_serializers = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/coercing-serializers.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js
var init_awsExpectUnion = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js"() {
    "use strict";
    init_dist_es33();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js
var collectBodyString;
var init_common = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js"() {
    "use strict";
    init_dist_es33();
    collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js
var parseJsonBody, parseJsonErrorBody, loadRestJsonErrorCode;
var init_parseJsonBody = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js"() {
    "use strict";
    init_common();
    parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        try {
          return JSON.parse(encoded);
        } catch (e6) {
          if (e6?.name === "SyntaxError") {
            Object.defineProperty(e6, "$responseBodyText", {
              value: encoded
            });
          }
          throw e6;
        }
      }
      return {};
    });
    parseJsonErrorBody = async (errorBody, context) => {
      const value = await parseJsonBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k6) => k6.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js"(exports2) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index2 = 0; index2 < len; index2++) {
          allmatches.push(match[index2]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports2.isExist = function(v7) {
      return typeof v7 !== "undefined";
    };
    exports2.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports2.merge = function(target, a6, arrayMode) {
      if (a6) {
        const keys = Object.keys(a6);
        const len = keys.length;
        for (let i6 = 0; i6 < len; i6++) {
          if (arrayMode === "strict") {
            target[keys[i6]] = [a6[keys[i6]]];
          } else {
            target[keys[i6]] = a6[keys[i6]];
          }
        }
      }
    };
    exports2.getValue = function(v7) {
      if (exports2.isExist(v7)) {
        return v7;
      } else {
        return "";
      }
    };
    exports2.isName = isName;
    exports2.getAllMatches = getAllMatches;
    exports2.nameRegexp = nameRegexp;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/validator.js"(exports2) {
    "use strict";
    var util = require_util();
    var defaultOptions2 = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports2.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions2, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i6 = 0; i6 < xmlData.length; i6++) {
        if (xmlData[i6] === "<" && xmlData[i6 + 1] === "?") {
          i6 += 2;
          i6 = readPI(xmlData, i6);
          if (i6.err)
            return i6;
        } else if (xmlData[i6] === "<") {
          let tagStartPos = i6;
          i6++;
          if (xmlData[i6] === "!") {
            i6 = readCommentAndCDATA(xmlData, i6);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i6] === "/") {
              closingTag = true;
              i6++;
            }
            let tagName = "";
            for (; i6 < xmlData.length && xmlData[i6] !== ">" && xmlData[i6] !== " " && xmlData[i6] !== "	" && xmlData[i6] !== "\n" && xmlData[i6] !== "\r"; i6++) {
              tagName += xmlData[i6];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i6--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i6));
            }
            const result = readAttributeStr(xmlData, i6);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i6));
            }
            let attrStr = result.value;
            i6 = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i6 - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i6));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i6 - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i6));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i6++; i6 < xmlData.length; i6++) {
              if (xmlData[i6] === "<") {
                if (xmlData[i6 + 1] === "!") {
                  i6++;
                  i6 = readCommentAndCDATA(xmlData, i6);
                  continue;
                } else if (xmlData[i6 + 1] === "?") {
                  i6 = readPI(xmlData, ++i6);
                  if (i6.err)
                    return i6;
                } else {
                  break;
                }
              } else if (xmlData[i6] === "&") {
                const afterAmp = validateAmpersand(xmlData, i6);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i6));
                i6 = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i6])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i6));
                }
              }
            }
            if (xmlData[i6] === "<") {
              i6--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i6])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i6] + "' is not expected.", getLineNumberForPosition(xmlData, i6));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t6) => t6.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i6) {
      const start = i6;
      for (; i6 < xmlData.length; i6++) {
        if (xmlData[i6] == "?" || xmlData[i6] == " ") {
          const tagname = xmlData.substr(start, i6 - start);
          if (i6 > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i6));
          } else if (xmlData[i6] == "?" && xmlData[i6 + 1] == ">") {
            i6++;
            break;
          } else {
            continue;
          }
        }
      }
      return i6;
    }
    function readCommentAndCDATA(xmlData, i6) {
      if (xmlData.length > i6 + 5 && xmlData[i6 + 1] === "-" && xmlData[i6 + 2] === "-") {
        for (i6 += 3; i6 < xmlData.length; i6++) {
          if (xmlData[i6] === "-" && xmlData[i6 + 1] === "-" && xmlData[i6 + 2] === ">") {
            i6 += 2;
            break;
          }
        }
      } else if (xmlData.length > i6 + 8 && xmlData[i6 + 1] === "D" && xmlData[i6 + 2] === "O" && xmlData[i6 + 3] === "C" && xmlData[i6 + 4] === "T" && xmlData[i6 + 5] === "Y" && xmlData[i6 + 6] === "P" && xmlData[i6 + 7] === "E") {
        let angleBracketsCount = 1;
        for (i6 += 8; i6 < xmlData.length; i6++) {
          if (xmlData[i6] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i6] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i6 + 9 && xmlData[i6 + 1] === "[" && xmlData[i6 + 2] === "C" && xmlData[i6 + 3] === "D" && xmlData[i6 + 4] === "A" && xmlData[i6 + 5] === "T" && xmlData[i6 + 6] === "A" && xmlData[i6 + 7] === "[") {
        for (i6 += 8; i6 < xmlData.length; i6++) {
          if (xmlData[i6] === "]" && xmlData[i6 + 1] === "]" && xmlData[i6 + 2] === ">") {
            i6 += 2;
            break;
          }
        }
      }
      return i6;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i6) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i6 < xmlData.length; i6++) {
        if (xmlData[i6] === doubleQuote || xmlData[i6] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i6];
          } else if (startChar !== xmlData[i6]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i6] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i6];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i6,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i6 = 0; i6 < matches.length; i6++) {
        if (matches[i6][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i6][2] + "' has no space in starting.", getPositionFromMatch(matches[i6]));
        } else if (matches[i6][3] !== void 0 && matches[i6][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i6][2] + "' is without value.", getPositionFromMatch(matches[i6]));
        } else if (matches[i6][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i6][2] + "' is not allowed.", getPositionFromMatch(matches[i6]));
        }
        const attrName = matches[i6][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i6]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i6]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i6) {
      let re2 = /\d/;
      if (xmlData[i6] === "x") {
        i6++;
        re2 = /[\da-fA-F]/;
      }
      for (; i6 < xmlData.length; i6++) {
        if (xmlData[i6] === ";")
          return i6;
        if (!xmlData[i6].match(re2))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i6) {
      i6++;
      if (xmlData[i6] === ";")
        return -1;
      if (xmlData[i6] === "#") {
        i6++;
        return validateNumberAmpersand(xmlData, i6);
      }
      let count = 0;
      for (; i6 < xmlData.length; i6++, count++) {
        if (xmlData[i6].match(/\w/) && count < 20)
          continue;
        if (xmlData[i6] === ";")
          break;
        return -1;
      }
      return i6;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index2) {
      const lines = xmlData.substring(0, index2).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports2) {
    "use strict";
    var defaultOptions2 = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val2) {
        return val2;
      },
      attributeValueProcessor: function(attrName, val2) {
        return val2;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false,
      updateTag: function(tagName, jPath, attrs) {
        return tagName;
      }
      // skipEmptyListItem: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions2, options);
    };
    exports2.buildOptions = buildOptions;
    exports2.defaultOptions = defaultOptions2;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports2, module2) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val2) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val2 });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports2, module2) {
    "use strict";
    var util = require_util();
    function readDocType(xmlData, i6) {
      const entities = {};
      if (xmlData[i6 + 3] === "O" && xmlData[i6 + 4] === "C" && xmlData[i6 + 5] === "T" && xmlData[i6 + 6] === "Y" && xmlData[i6 + 7] === "P" && xmlData[i6 + 8] === "E") {
        i6 = i6 + 9;
        let angleBracketsCount = 1;
        let hasBody = false, comment = false;
        let exp = "";
        for (; i6 < xmlData.length; i6++) {
          if (xmlData[i6] === "<" && !comment) {
            if (hasBody && isEntity(xmlData, i6)) {
              i6 += 7;
              [entityName, val, i6] = readEntityExp(xmlData, i6 + 1);
              if (val.indexOf("&") === -1)
                entities[validateEntityName(entityName)] = {
                  regx: RegExp(`&${entityName};`, "g"),
                  val
                };
            } else if (hasBody && isElement(xmlData, i6))
              i6 += 8;
            else if (hasBody && isAttlist(xmlData, i6))
              i6 += 8;
            else if (hasBody && isNotation(xmlData, i6))
              i6 += 9;
            else if (isComment)
              comment = true;
            else
              throw new Error("Invalid DOCTYPE");
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i6] === ">") {
            if (comment) {
              if (xmlData[i6 - 1] === "-" && xmlData[i6 - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i6] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i6];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i: i6 };
    }
    function readEntityExp(xmlData, i6) {
      let entityName2 = "";
      for (; i6 < xmlData.length && (xmlData[i6] !== "'" && xmlData[i6] !== '"'); i6++) {
        entityName2 += xmlData[i6];
      }
      entityName2 = entityName2.trim();
      if (entityName2.indexOf(" ") !== -1)
        throw new Error("External entites are not supported");
      const startChar = xmlData[i6++];
      let val2 = "";
      for (; i6 < xmlData.length && xmlData[i6] !== startChar; i6++) {
        val2 += xmlData[i6];
      }
      return [entityName2, val2, i6];
    }
    function isComment(xmlData, i6) {
      if (xmlData[i6 + 1] === "!" && xmlData[i6 + 2] === "-" && xmlData[i6 + 3] === "-")
        return true;
      return false;
    }
    function isEntity(xmlData, i6) {
      if (xmlData[i6 + 1] === "!" && xmlData[i6 + 2] === "E" && xmlData[i6 + 3] === "N" && xmlData[i6 + 4] === "T" && xmlData[i6 + 5] === "I" && xmlData[i6 + 6] === "T" && xmlData[i6 + 7] === "Y")
        return true;
      return false;
    }
    function isElement(xmlData, i6) {
      if (xmlData[i6 + 1] === "!" && xmlData[i6 + 2] === "E" && xmlData[i6 + 3] === "L" && xmlData[i6 + 4] === "E" && xmlData[i6 + 5] === "M" && xmlData[i6 + 6] === "E" && xmlData[i6 + 7] === "N" && xmlData[i6 + 8] === "T")
        return true;
      return false;
    }
    function isAttlist(xmlData, i6) {
      if (xmlData[i6 + 1] === "!" && xmlData[i6 + 2] === "A" && xmlData[i6 + 3] === "T" && xmlData[i6 + 4] === "T" && xmlData[i6 + 5] === "L" && xmlData[i6 + 6] === "I" && xmlData[i6 + 7] === "S" && xmlData[i6 + 8] === "T")
        return true;
      return false;
    }
    function isNotation(xmlData, i6) {
      if (xmlData[i6 + 1] === "!" && xmlData[i6 + 2] === "N" && xmlData[i6 + 3] === "O" && xmlData[i6 + 4] === "T" && xmlData[i6 + 5] === "A" && xmlData[i6 + 6] === "T" && xmlData[i6 + 7] === "I" && xmlData[i6 + 8] === "O" && xmlData[i6 + 9] === "N")
        return true;
      return false;
    }
    function validateEntityName(name) {
      if (util.isName(name))
        return name;
      else
        throw new Error(`Invalid entity name ${name}`);
    }
    module2.exports = readDocType;
  }
});

// ../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js"(exports2, module2) {
    "use strict";
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str2, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str2 || typeof str2 !== "string")
        return str2;
      let trimmedStr = str2.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str2;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str2;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str2;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str2;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str2;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str2;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str2;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str2;
          }
        } else {
          return str2;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports2, module2) {
    "use strict";
    var util = require_util();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
        this.addChild = addChild;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i6 = 0; i6 < entKeys.length; i6++) {
        const ent = entKeys[i6];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val2, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val2 !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val2 = val2.trim();
        }
        if (val2.length > 0) {
          if (!escapeEntities)
            val2 = this.replaceEntitiesValue(val2);
          const newval = this.options.tagValueProcessor(tagName, val2, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val2;
          } else if (typeof newval !== typeof val2 || newval !== val2) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val2.trim();
            if (trimmedVal === val2) {
              return parseValue(val2, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val2;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath, tagName) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i6 = 0; i6 < len; i6++) {
          const attrName = this.resolveNameSpace(matches[i6][1]);
          let oldVal = matches[i6][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i6 = 0; i6 < xmlData.length; i6++) {
        const ch = xmlData[i6];
        if (ch === "<") {
          if (xmlData[i6 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i6, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i6 + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
            if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
              throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
            }
            let propIndex = 0;
            if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
              propIndex = jPath.lastIndexOf(".", jPath.lastIndexOf(".") - 1);
              this.tagsNodeStack.pop();
            } else {
              propIndex = jPath.lastIndexOf(".");
            }
            jPath = jPath.substring(0, propIndex);
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i6 = closeIndex;
          } else if (xmlData[i6 + 1] === "?") {
            let tagData = readTagExp(xmlData, i6, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
              }
              this.addChild(currentNode, childNode, jPath);
            }
            i6 = tagData.closeIndex + 1;
          } else if (xmlData.substr(i6 + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i6 + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i6 + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i6 = endIndex;
          } else if (xmlData.substr(i6 + 1, 2) === "!D") {
            const result = readDocType(xmlData, i6);
            this.docTypeEntities = result.entities;
            i6 = result.i;
          } else if (xmlData.substr(i6 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i6, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i6 + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val2 = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val2 == void 0)
                val2 = "";
              currentNode.add(this.options.textNodeName, val2);
            }
            i6 = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i6, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
              jPath = jPath.substring(0, jPath.lastIndexOf("."));
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i6 = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i6 = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i6 = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              this.addChild(currentNode, childNode, jPath);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
                }
                this.addChild(currentNode, childNode, jPath);
                currentNode = childNode;
              }
              textData = "";
              i6 = closeIndex;
            }
          }
        } else {
          textData += xmlData[i6];
        }
      }
      return xmlObj.child;
    };
    function addChild(currentNode, childNode, jPath) {
      const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
      if (result === false) {
      } else if (typeof result === "string") {
        childNode.tagname = result;
        currentNode.addChild(childNode);
      } else {
        currentNode.addChild(childNode);
      }
    }
    var replaceEntitiesValue = function(val2) {
      if (this.options.processEntities) {
        for (let entityName2 in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName2];
          val2 = val2.replace(entity.regx, entity.val);
        }
        for (let entityName2 in this.lastEntities) {
          const entity = this.lastEntities[entityName2];
          val2 = val2.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName2 in this.htmlEntities) {
            const entity = this.htmlEntities[entityName2];
            val2 = val2.replace(entity.regex, entity.val);
          }
        }
        val2 = val2.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val2;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i6, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index2 = i6; index2 < xmlData.length; index2++) {
        let ch = xmlData[index2];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index2 + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index: index2
              };
            }
          } else {
            return {
              data: tagExp,
              index: index2
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str2, i6, errMsg) {
      const closingIndex = xmlData.indexOf(str2, i6);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str2.length - 1;
      }
    }
    function readTagExp(xmlData, i6, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i6 + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i6) {
      const startIndex = i6;
      let openTagCount = 1;
      for (; i6 < xmlData.length; i6++) {
        if (xmlData[i6] === "<") {
          if (xmlData[i6 + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i6, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i6 + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i6),
                  i: closeIndex
                };
              }
            }
            i6 = closeIndex;
          } else if (xmlData[i6 + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i6 + 1, "StopNode is not closed.");
            i6 = closeIndex;
          } else if (xmlData.substr(i6 + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i6 + 3, "StopNode is not closed.");
            i6 = closeIndex;
          } else if (xmlData.substr(i6 + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i6, "StopNode is not closed.") - 2;
            i6 = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i6, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i6 = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val2, shouldParse, options) {
      if (shouldParse && typeof val2 === "string") {
        const newval = val2.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val2, options);
      } else {
        if (util.isExist(val2)) {
          return val2;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports2) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i6 = 0; i6 < arr.length; i6++) {
        const tagObj = arr[i6];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val2 = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val2, options);
          if (tagObj[":@"]) {
            assignAttributes(val2, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val2).length === 1 && val2[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val2 = val2[options.textNodeName];
          } else if (Object.keys(val2).length === 0) {
            if (options.alwaysCreateTextNode)
              val2[options.textNodeName] = "";
            else
              val2 = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val2);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val2];
            } else {
              compressedObj[property] = val2;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i6 = 0; i6 < keys.length; i6++) {
        const key = keys[i6];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i6 = 0; i6 < len; i6++) {
          const atrrName = keys[i6];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const { textNodeName } = options;
      const propCount = Object.keys(obj).length;
      if (propCount === 0) {
        return true;
      }
      if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
        return true;
      }
      return false;
    }
    exports2.prettify = prettify;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports2, module2) {
    "use strict";
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser2 = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser2;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports2, module2) {
    "use strict";
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i6 = 0; i6 < arr.length; i6++) {
        const tagObj = arr[i6];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i6 = 0; i6 < keys.length; i6++) {
        const key = keys[i6];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index2 in options.stopNodes) {
        if (options.stopNodes[index2] === jPath || options.stopNodes[index2] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i6 = 0; i6 < options.entities.length; i6++) {
          const entity = options.entities[i6];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports2, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions2 = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a6) {
        return a6;
      },
      attributeValueProcessor: function(attrName, a6) {
        return a6;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      // transformTagName: false,
      // transformAttributeName: false,
      oneListGroup: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions2, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val2 = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val2 += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val2 += this.replaceEntitiesValue(newval);
            } else {
              val2 += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          let listTagVal = "";
          for (let j6 = 0; j6 < arrLen; j6++) {
            const item = jObj[key][j6];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val2 += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val2 += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              if (this.options.oneListGroup) {
                listTagVal += this.j2x(item, level + 1).val;
              } else {
                listTagVal += this.processTextOrObjNode(item, key, level);
              }
            } else {
              listTagVal += this.buildTextValNode(item, key, "", level);
            }
          }
          if (this.options.oneListGroup) {
            listTagVal = this.buildObjectNode(listTagVal, key, "", level);
          }
          val2 += listTagVal;
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L2 = Ks.length;
            for (let j6 = 0; j6 < L2; j6++) {
              attrStr += this.buildAttrPairStr(Ks[j6], "" + jObj[key][Ks[j6]]);
            }
          } else {
            val2 += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val: val2 };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val2) {
      val2 = this.options.attributeValueProcessor(attrName, "" + val2);
      val2 = this.replaceEntitiesValue(val2);
      if (this.options.suppressBooleanAttributes && val2 === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val2 + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val2, key, attrStr, level) {
      if (val2 === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val2.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val2 + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val2}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val2 + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val2, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val2}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val2}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val2);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i6 = 0; i6 < this.options.entities.length; i6++) {
          const entity = this.options.entities[i6];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/fxp.js"(exports2, module2) {
    "use strict";
    var validator = require_validator();
    var XMLParser2 = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser: XMLParser2,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js
var import_fast_xml_parser, parseXmlBody, parseXmlErrorBody;
var init_parseXmlBody = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/xml/parseXmlBody.js"() {
    "use strict";
    init_dist_es33();
    import_fast_xml_parser = __toESM(require_fxp());
    init_common();
    parseXmlBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new import_fast_xml_parser.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_3, val2) => val2.trim() === "" && val2.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        let parsedObj;
        try {
          parsedObj = parser.parse(encoded, true);
        } catch (e6) {
          if (e6 && typeof e6 === "object") {
            Object.defineProperty(e6, "$responseBodyText", {
              value: encoded
            });
          }
          throw e6;
        }
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return getValueFromTextNode(parsedObjToReturn);
      }
      return {};
    });
    parseXmlErrorBody = async (errorBody, context) => {
      const value = await parseXmlBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js
var init_protocols = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/submodules/protocols/index.js"() {
    "use strict";
    init_coercing_serializers();
    init_awsExpectUnion();
    init_parseJsonBody();
    init_parseXmlBody();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/index.js
var init_dist_es38 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+core@3.592.0/node_modules/@aws-sdk/core/dist-es/index.js"() {
    "use strict";
    init_client3();
    init_httpAuthSchemes2();
    init_protocols();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/auth/httpAuthSchemeProvider.js
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "cognito-identity",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
function createSmithyApiNoAuthHttpAuthOption(authParameters) {
  return {
    schemeId: "smithy.api#noAuth"
  };
}
var defaultCognitoIdentityHttpAuthSchemeParametersProvider, defaultCognitoIdentityHttpAuthSchemeProvider, resolveHttpAuthSchemeConfig;
var init_httpAuthSchemeProvider = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/auth/httpAuthSchemeProvider.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es12();
    defaultCognitoIdentityHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: getSmithyContext(context).operation,
        region: await normalizeProvider(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    defaultCognitoIdentityHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "GetCredentialsForIdentity": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "GetId": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "GetOpenIdToken": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        case "UnlinkIdentity": {
          options.push(createSmithyApiNoAuthHttpAuthOption(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
      }
      return options;
    };
    resolveHttpAuthSchemeConfig = (config) => {
      const config_0 = resolveAwsSdkSigV4Config(config);
      return {
        ...config_0
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters, commonParams;
var init_EndpointParameters = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/EndpointParameters.js"() {
    "use strict";
    resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "cognito-identity"
      };
    };
    commonParams = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/package.json
var package_default;
var init_package = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/package.json"() {
    package_default = {
      name: "@aws-sdk/client-cognito-identity",
      description: "AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native",
      version: "3.596.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-cognito-identity",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo cognito-identity",
        "test:e2e": "ts-mocha test/**/*.ispec.ts && karma start karma.conf.js"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sso-oidc": "3.596.0",
        "@aws-sdk/client-sts": "3.596.0",
        "@aws-sdk/core": "3.592.0",
        "@aws-sdk/credential-provider-node": "3.596.0",
        "@aws-sdk/middleware-host-header": "3.577.0",
        "@aws-sdk/middleware-logger": "3.577.0",
        "@aws-sdk/middleware-recursion-detection": "3.577.0",
        "@aws-sdk/middleware-user-agent": "3.587.0",
        "@aws-sdk/region-config-resolver": "3.587.0",
        "@aws-sdk/types": "3.577.0",
        "@aws-sdk/util-endpoints": "3.587.0",
        "@aws-sdk/util-user-agent-browser": "3.577.0",
        "@aws-sdk/util-user-agent-node": "3.587.0",
        "@smithy/config-resolver": "^3.0.1",
        "@smithy/core": "^2.2.0",
        "@smithy/fetch-http-handler": "^3.0.1",
        "@smithy/hash-node": "^3.0.0",
        "@smithy/invalid-dependency": "^3.0.0",
        "@smithy/middleware-content-length": "^3.0.0",
        "@smithy/middleware-endpoint": "^3.0.1",
        "@smithy/middleware-retry": "^3.0.3",
        "@smithy/middleware-serde": "^3.0.0",
        "@smithy/middleware-stack": "^3.0.0",
        "@smithy/node-config-provider": "^3.1.0",
        "@smithy/node-http-handler": "^3.0.0",
        "@smithy/protocol-http": "^4.0.0",
        "@smithy/smithy-client": "^3.1.1",
        "@smithy/types": "^3.0.0",
        "@smithy/url-parser": "^3.0.0",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.3",
        "@smithy/util-defaults-mode-node": "^3.0.3",
        "@smithy/util-endpoints": "^2.0.1",
        "@smithy/util-middleware": "^3.0.0",
        "@smithy/util-retry": "^3.0.0",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@aws-sdk/client-iam": "3.596.0",
        "@tsconfig/node16": "16.1.3",
        "@types/chai": "^4.2.11",
        "@types/mocha": "^8.0.4",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-cognito-identity"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.587.0/node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js
var ENV_KEY, ENV_SECRET, ENV_SESSION, ENV_EXPIRATION, ENV_CREDENTIAL_SCOPE, fromEnv2;
var init_fromEnv2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.587.0/node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js"() {
    "use strict";
    init_dist_es2();
    ENV_KEY = "AWS_ACCESS_KEY_ID";
    ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    ENV_SESSION = "AWS_SESSION_TOKEN";
    ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    ENV_CREDENTIAL_SCOPE = "AWS_CREDENTIAL_SCOPE";
    fromEnv2 = (init) => async () => {
      init?.logger?.debug("@aws-sdk/credential-provider-env - fromEnv");
      const accessKeyId = process.env[ENV_KEY];
      const secretAccessKey = process.env[ENV_SECRET];
      const sessionToken = process.env[ENV_SESSION];
      const expiry = process.env[ENV_EXPIRATION];
      const credentialScope = process.env[ENV_CREDENTIAL_SCOPE];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) },
          ...credentialScope && { credentialScope }
        };
      }
      throw new CredentialsProviderError("Unable to find environment variable credentials.", { logger: init?.logger });
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.587.0/node_modules/@aws-sdk/credential-provider-env/dist-es/index.js
var dist_es_exports2 = {};
__export(dist_es_exports2, {
  ENV_CREDENTIAL_SCOPE: () => ENV_CREDENTIAL_SCOPE,
  ENV_EXPIRATION: () => ENV_EXPIRATION,
  ENV_KEY: () => ENV_KEY,
  ENV_SECRET: () => ENV_SECRET,
  ENV_SESSION: () => ENV_SESSION,
  fromEnv: () => fromEnv2
});
var init_dist_es39 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.587.0/node_modules/@aws-sdk/credential-provider-env/dist-es/index.js"() {
    "use strict";
    init_fromEnv2();
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js
function httpRequest(options) {
  return new Promise((resolve2, reject) => {
    const req = (0, import_http3.request)({
      method: "GET",
      ...options,
      hostname: options.hostname?.replace(/^\[(.+)\]$/, "$1")
    });
    req.on("error", (err) => {
      reject(Object.assign(new ProviderError("Unable to connect to instance metadata service"), err));
      req.destroy();
    });
    req.on("timeout", () => {
      reject(new ProviderError("TimeoutError from instance metadata service"));
      req.destroy();
    });
    req.on("response", (res) => {
      const { statusCode = 400 } = res;
      if (statusCode < 200 || 300 <= statusCode) {
        reject(Object.assign(new ProviderError("Error response received from instance metadata service"), { statusCode }));
        req.destroy();
      }
      const chunks = [];
      res.on("data", (chunk) => {
        chunks.push(chunk);
      });
      res.on("end", () => {
        resolve2(import_buffer2.Buffer.concat(chunks));
        req.destroy();
      });
    });
    req.end();
  });
}
var import_buffer2, import_http3;
var init_httpRequest2 = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js"() {
    "use strict";
    init_dist_es2();
    import_buffer2 = require("buffer");
    import_http3 = require("http");
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js
var isImdsCredentials, fromImdsCredentials;
var init_ImdsCredentials = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js"() {
    "use strict";
    isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js
var DEFAULT_TIMEOUT, DEFAULT_MAX_RETRIES, providerConfigFromInit;
var init_RemoteProviderInit = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js"() {
    "use strict";
    DEFAULT_TIMEOUT = 1e3;
    DEFAULT_MAX_RETRIES = 0;
    providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js
var retry;
var init_retry3 = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js"() {
    "use strict";
    retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i6 = 0; i6 < maxRetries; i6++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js
var import_url2, ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, ENV_CMDS_AUTH_TOKEN, fromContainerMetadata, requestFromEcsImds, CMDS_IP, GREENGRASS_HOSTS, GREENGRASS_PROTOCOLS, getCmdsUri;
var init_fromContainerMetadata = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js"() {
    "use strict";
    init_dist_es2();
    import_url2 = require("url");
    init_httpRequest2();
    init_ImdsCredentials();
    init_RemoteProviderInit();
    init_retry3();
    ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = providerConfigFromInit(init);
      return () => retry(async () => {
        const requestOptions = await getCmdsUri({ logger: init.logger });
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!isImdsCredentials(credsResponse)) {
          throw new CredentialsProviderError("Invalid response received from instance metadata service.", {
            logger: init.logger
          });
        }
        return fromImdsCredentials(credsResponse);
      }, maxRetries);
    };
    requestFromEcsImds = async (timeout, options) => {
      if (process.env[ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await httpRequest({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    CMDS_IP = "169.254.170.2";
    GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    getCmdsUri = async ({ logger: logger2 }) => {
      if (process.env[ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[ENV_CMDS_FULL_URI]) {
        const parsed = (0, import_url2.parse)(process.env[ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {
            tryNextLink: false,
            logger: logger2
          });
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {
            tryNextLink: false,
            logger: logger2
          });
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment variable is set`, {
        tryNextLink: false,
        logger: logger2
      });
    };
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js
var InstanceMetadataV1FallbackError;
var init_InstanceMetadataV1FallbackError = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js"() {
    "use strict";
    init_dist_es2();
    InstanceMetadataV1FallbackError = class _InstanceMetadataV1FallbackError extends CredentialsProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "InstanceMetadataV1FallbackError";
        Object.setPrototypeOf(this, _InstanceMetadataV1FallbackError.prototype);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js
var Endpoint;
var init_Endpoint = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js"() {
    "use strict";
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint || (Endpoint = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js
var ENV_ENDPOINT_NAME, CONFIG_ENDPOINT_NAME, ENDPOINT_CONFIG_OPTIONS;
var init_EndpointConfigOptions = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js"() {
    "use strict";
    ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js
var EndpointMode;
var init_EndpointMode = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js"() {
    "use strict";
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode || (EndpointMode = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js
var ENV_ENDPOINT_MODE_NAME, CONFIG_ENDPOINT_MODE_NAME, ENDPOINT_MODE_CONFIG_OPTIONS;
var init_EndpointModeConfigOptions = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js"() {
    "use strict";
    init_EndpointMode();
    ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => env2[ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode.IPv4
    };
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js
var getInstanceMetadataEndpoint, getFromEndpointConfig, getFromEndpointModeConfig;
var init_getInstanceMetadataEndpoint = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js"() {
    "use strict";
    init_dist_es15();
    init_dist_es17();
    init_Endpoint();
    init_EndpointConfigOptions();
    init_EndpointMode();
    init_EndpointModeConfigOptions();
    getInstanceMetadataEndpoint = async () => parseUrl(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();
    getFromEndpointModeConfig = async () => {
      const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode.IPv4:
          return Endpoint.IPv4;
        case EndpointMode.IPv6:
          return Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode)}`);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js
var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS, STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS, STATIC_STABILITY_DOC_URL, getExtendedInstanceMetadataCredentials;
var init_getExtendedInstanceMetadataCredentials = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js"() {
    "use strict";
    STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    getExtendedInstanceMetadataCredentials = (credentials, logger2) => {
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger2.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.
For more information, please visit: ` + STATIC_STABILITY_DOC_URL);
      const originalExpiration = credentials.originalExpiration ?? credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js
var staticStabilityProvider;
var init_staticStabilityProvider = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js"() {
    "use strict";
    init_getExtendedInstanceMetadataCredentials();
    staticStabilityProvider = (provider, options = {}) => {
      const logger2 = options?.logger || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = getExtendedInstanceMetadataCredentials(credentials, logger2);
          }
        } catch (e6) {
          if (pastCredentials) {
            logger2.warn("Credential renew failed: ", e6);
            credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger2);
          } else {
            throw e6;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js
var IMDS_PATH, IMDS_TOKEN_PATH, AWS_EC2_METADATA_V1_DISABLED, PROFILE_AWS_EC2_METADATA_V1_DISABLED, X_AWS_EC2_METADATA_TOKEN, fromInstanceMetadata, getInstanceMetadataProvider, getMetadataToken, getProfile, getCredentialsFromProfile;
var init_fromInstanceMetadata = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js"() {
    "use strict";
    init_dist_es15();
    init_dist_es2();
    init_InstanceMetadataV1FallbackError();
    init_httpRequest2();
    init_ImdsCredentials();
    init_RemoteProviderInit();
    init_retry3();
    init_getInstanceMetadataEndpoint();
    init_staticStabilityProvider();
    IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    IMDS_TOKEN_PATH = "/latest/api/token";
    AWS_EC2_METADATA_V1_DISABLED = "AWS_EC2_METADATA_V1_DISABLED";
    PROFILE_AWS_EC2_METADATA_V1_DISABLED = "ec2_metadata_v1_disabled";
    X_AWS_EC2_METADATA_TOKEN = "x-aws-ec2-metadata-token";
    fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });
    getInstanceMetadataProvider = (init = {}) => {
      let disableFetchToken = false;
      const { logger: logger2, profile } = init;
      const { timeout, maxRetries } = providerConfigFromInit(init);
      const getCredentials2 = async (maxRetries2, options) => {
        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;
        if (isImdsV1Fallback) {
          let fallbackBlockedFromProfile = false;
          let fallbackBlockedFromProcessEnv = false;
          const configValue = await loadConfig({
            environmentVariableSelector: (env2) => {
              const envValue = env2[AWS_EC2_METADATA_V1_DISABLED];
              fallbackBlockedFromProcessEnv = !!envValue && envValue !== "false";
              if (envValue === void 0) {
                throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });
              }
              return fallbackBlockedFromProcessEnv;
            },
            configFileSelector: (profile2) => {
              const profileValue = profile2[PROFILE_AWS_EC2_METADATA_V1_DISABLED];
              fallbackBlockedFromProfile = !!profileValue && profileValue !== "false";
              return fallbackBlockedFromProfile;
            },
            default: false
          }, {
            profile
          })();
          if (init.ec2MetadataV1Disabled || configValue) {
            const causes = [];
            if (init.ec2MetadataV1Disabled)
              causes.push("credential provider initialization (runtime option ec2MetadataV1Disabled)");
            if (fallbackBlockedFromProfile)
              causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);
            if (fallbackBlockedFromProcessEnv)
              causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);
            throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(", ")}].`);
          }
        }
        const imdsProfile = (await retry(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return retry(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(imdsProfile, options, init);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await getInstanceMetadataEndpoint();
        if (disableFetchToken) {
          logger2?.debug("AWS SDK Instance Metadata", "using v1 fallback (no token fetch)");
          return getCredentials2(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error2) {
            if (error2?.statusCode === 400) {
              throw Object.assign(error2, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error2.message === "TimeoutError" || [403, 404, 405].includes(error2.statusCode)) {
              disableFetchToken = true;
            }
            logger2?.debug("AWS SDK Instance Metadata", "using v1 fallback (initial)");
            return getCredentials2(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials2(maxRetries, {
            ...endpoint,
            headers: {
              [X_AWS_EC2_METADATA_TOKEN]: token
            },
            timeout
          });
        }
      };
    };
    getMetadataToken = async (options) => httpRequest({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();
    getCredentialsFromProfile = async (profile, options, init) => {
      const credentialsResponse = JSON.parse((await httpRequest({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!isImdsCredentials(credentialsResponse)) {
        throw new CredentialsProviderError("Invalid response received from instance metadata service.", {
          logger: init.logger
        });
      }
      return fromImdsCredentials(credentialsResponse);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/types.js
var init_types8 = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/index.js
var dist_es_exports3 = {};
__export(dist_es_exports3, {
  DEFAULT_MAX_RETRIES: () => DEFAULT_MAX_RETRIES,
  DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
  ENV_CMDS_AUTH_TOKEN: () => ENV_CMDS_AUTH_TOKEN,
  ENV_CMDS_FULL_URI: () => ENV_CMDS_FULL_URI,
  ENV_CMDS_RELATIVE_URI: () => ENV_CMDS_RELATIVE_URI,
  Endpoint: () => Endpoint,
  fromContainerMetadata: () => fromContainerMetadata,
  fromInstanceMetadata: () => fromInstanceMetadata,
  getInstanceMetadataEndpoint: () => getInstanceMetadataEndpoint,
  httpRequest: () => httpRequest,
  providerConfigFromInit: () => providerConfigFromInit
});
var init_dist_es40 = __esm({
  "../../node_modules/.pnpm/@smithy+credential-provider-imds@3.1.1/node_modules/@smithy/credential-provider-imds/dist-es/index.js"() {
    "use strict";
    init_fromContainerMetadata();
    init_fromInstanceMetadata();
    init_RemoteProviderInit();
    init_types8();
    init_httpRequest2();
    init_getInstanceMetadataEndpoint();
    init_Endpoint();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.596.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/checkUrl.js
var ECS_CONTAINER_HOST, EKS_CONTAINER_HOST_IPv4, EKS_CONTAINER_HOST_IPv6, checkUrl;
var init_checkUrl = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.596.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/checkUrl.js"() {
    "use strict";
    init_dist_es2();
    ECS_CONTAINER_HOST = "169.254.170.2";
    EKS_CONTAINER_HOST_IPv4 = "169.254.170.23";
    EKS_CONTAINER_HOST_IPv6 = "[fd00:ec2::23]";
    checkUrl = (url, logger2) => {
      if (url.protocol === "https:") {
        return;
      }
      if (url.hostname === ECS_CONTAINER_HOST || url.hostname === EKS_CONTAINER_HOST_IPv4 || url.hostname === EKS_CONTAINER_HOST_IPv6) {
        return;
      }
      if (url.hostname.includes("[")) {
        if (url.hostname === "[::1]" || url.hostname === "[0000:0000:0000:0000:0000:0000:0000:0001]") {
          return;
        }
      } else {
        if (url.hostname === "localhost") {
          return;
        }
        const ipComponents = url.hostname.split(".");
        const inRange = (component) => {
          const num = parseInt(component, 10);
          return 0 <= num && num <= 255;
        };
        if (ipComponents[0] === "127" && inRange(ipComponents[1]) && inRange(ipComponents[2]) && inRange(ipComponents[3]) && ipComponents.length === 4) {
          return;
        }
      }
      throw new CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:
  - loopback CIDR 127.0.0.0/8 or [::1/128]
  - ECS container host 169.254.170.2
  - EKS container host 169.254.170.23 or [fd00:ec2::23]`, { logger: logger2 });
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.596.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/requestHelpers.js
function createGetRequest(url) {
  return new HttpRequest({
    protocol: url.protocol,
    hostname: url.hostname,
    port: Number(url.port),
    path: url.pathname,
    query: Array.from(url.searchParams.entries()).reduce((acc, [k6, v7]) => {
      acc[k6] = v7;
      return acc;
    }, {}),
    fragment: url.hash
  });
}
async function getCredentials(response, logger2) {
  const stream = sdkStreamMixin2(response.body);
  const str2 = await stream.transformToString();
  if (response.statusCode === 200) {
    const parsed = JSON.parse(str2);
    if (typeof parsed.AccessKeyId !== "string" || typeof parsed.SecretAccessKey !== "string" || typeof parsed.Token !== "string" || typeof parsed.Expiration !== "string") {
      throw new CredentialsProviderError("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }", { logger: logger2 });
    }
    return {
      accessKeyId: parsed.AccessKeyId,
      secretAccessKey: parsed.SecretAccessKey,
      sessionToken: parsed.Token,
      expiration: parseRfc3339DateTime(parsed.Expiration)
    };
  }
  if (response.statusCode >= 400 && response.statusCode < 500) {
    let parsedBody = {};
    try {
      parsedBody = JSON.parse(str2);
    } catch (e6) {
    }
    throw Object.assign(new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger: logger2 }), {
      Code: parsedBody.Code,
      Message: parsedBody.Message
    });
  }
  throw new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger: logger2 });
}
var init_requestHelpers = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.596.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/requestHelpers.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es4();
    init_dist_es33();
    init_dist_es32();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.596.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/retry-wrapper.js
var retryWrapper;
var init_retry_wrapper = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.596.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/retry-wrapper.js"() {
    "use strict";
    retryWrapper = (toRetry, maxRetries, delayMs) => {
      return async () => {
        for (let i6 = 0; i6 < maxRetries; ++i6) {
          try {
            return await toRetry();
          } catch (e6) {
            await new Promise((resolve2) => setTimeout(resolve2, delayMs));
          }
        }
        return await toRetry();
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.596.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/fromHttp.js
var import_promises, AWS_CONTAINER_CREDENTIALS_RELATIVE_URI, DEFAULT_LINK_LOCAL_HOST, AWS_CONTAINER_CREDENTIALS_FULL_URI, AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE, AWS_CONTAINER_AUTHORIZATION_TOKEN, fromHttp;
var init_fromHttp = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.596.0/node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/fromHttp.js"() {
    "use strict";
    init_dist_es29();
    init_dist_es2();
    import_promises = __toESM(require("fs/promises"));
    init_checkUrl();
    init_requestHelpers();
    init_retry_wrapper();
    AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    DEFAULT_LINK_LOCAL_HOST = "http://169.254.170.2";
    AWS_CONTAINER_CREDENTIALS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = "AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE";
    AWS_CONTAINER_AUTHORIZATION_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    fromHttp = (options = {}) => {
      options.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");
      let host;
      const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];
      const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];
      const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];
      const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];
      const warn = options.logger?.constructor?.name === "NoOpLogger" || !options.logger ? console.warn : options.logger.warn;
      if (relative && full) {
        warn("@aws-sdk/credential-provider-http: you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.");
        warn("awsContainerCredentialsFullUri will take precedence.");
      }
      if (token && tokenFile) {
        warn("@aws-sdk/credential-provider-http: you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.");
        warn("awsContainerAuthorizationToken will take precedence.");
      }
      if (full) {
        host = full;
      } else if (relative) {
        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;
      } else {
        throw new CredentialsProviderError(`No HTTP credential provider host provided.
Set AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`, { logger: options.logger });
      }
      const url = new URL(host);
      checkUrl(url, options.logger);
      const requestHandler = new NodeHttpHandler({
        requestTimeout: options.timeout ?? 1e3,
        connectionTimeout: options.timeout ?? 1e3
      });
      return retryWrapper(async () => {
        const request2 = createGetRequest(url);
        if (token) {
          request2.headers.Authorization = token;
        } else if (tokenFile) {
          request2.headers.Authorization = (await import_promises.default.readFile(tokenFile)).toString();
        }
        try {
          const result = await requestHandler.handle(request2);
          return getCredentials(result.response);
        } catch (e6) {
          throw new CredentialsProviderError(String(e6), { logger: options.logger });
        }
      }, options.maxRetries ?? 3, options.timeout ?? 1e3);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.596.0/node_modules/@aws-sdk/credential-provider-http/dist-es/index.js
var dist_es_exports4 = {};
__export(dist_es_exports4, {
  fromHttp: () => fromHttp
});
var init_dist_es41 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-http@3.596.0/node_modules/@aws-sdk/credential-provider-http/dist-es/index.js"() {
    "use strict";
    init_fromHttp();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js
var ENV_IMDS_DISABLED, remoteProvider;
var init_remoteProvider = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js"() {
    "use strict";
    init_dist_es2();
    ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    remoteProvider = async (init) => {
      const { ENV_CMDS_FULL_URI: ENV_CMDS_FULL_URI2, ENV_CMDS_RELATIVE_URI: ENV_CMDS_RELATIVE_URI2, fromContainerMetadata: fromContainerMetadata3, fromInstanceMetadata: fromInstanceMetadata3 } = await Promise.resolve().then(() => (init_dist_es40(), dist_es_exports3));
      if (process.env[ENV_CMDS_RELATIVE_URI2] || process.env[ENV_CMDS_FULL_URI2]) {
        init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");
        const { fromHttp: fromHttp2 } = await Promise.resolve().then(() => (init_dist_es41(), dist_es_exports4));
        return chain(fromHttp2(init), fromContainerMetadata3(init));
      }
      if (process.env[ENV_IMDS_DISABLED]) {
        return async () => {
          throw new CredentialsProviderError("EC2 Instance Metadata Service access disabled", { logger: init.logger });
        };
      }
      init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata");
      return fromInstanceMetadata3(init);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js
var isSsoProfile;
var init_isSsoProfile = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js"() {
    "use strict";
    isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/constants.js
var EXPIRE_WINDOW_MS, REFRESH_MESSAGE;
var init_constants7 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/constants.js"() {
    "use strict";
    EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/auth/httpAuthSchemeProvider.js
function createAwsAuthSigv4HttpAuthOption2(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "sso-oauth",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
function createSmithyApiNoAuthHttpAuthOption2(authParameters) {
  return {
    schemeId: "smithy.api#noAuth"
  };
}
var defaultSSOOIDCHttpAuthSchemeParametersProvider, defaultSSOOIDCHttpAuthSchemeProvider, resolveHttpAuthSchemeConfig2;
var init_httpAuthSchemeProvider2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/auth/httpAuthSchemeProvider.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es12();
    defaultSSOOIDCHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: getSmithyContext(context).operation,
        region: await normalizeProvider(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    defaultSSOOIDCHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "CreateToken": {
          options.push(createSmithyApiNoAuthHttpAuthOption2(authParameters));
          break;
        }
        case "RegisterClient": {
          options.push(createSmithyApiNoAuthHttpAuthOption2(authParameters));
          break;
        }
        case "StartDeviceAuthorization": {
          options.push(createSmithyApiNoAuthHttpAuthOption2(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption2(authParameters));
        }
      }
      return options;
    };
    resolveHttpAuthSchemeConfig2 = (config) => {
      const config_0 = resolveAwsSdkSigV4Config(config);
      return {
        ...config_0
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters2, commonParams2;
var init_EndpointParameters2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/EndpointParameters.js"() {
    "use strict";
    resolveClientEndpointParameters2 = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sso-oauth"
      };
    };
    commonParams2 = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/package.json
var package_default2;
var init_package2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/package.json"() {
    package_default2 = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.596.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso-oidc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.596.0",
        "@aws-sdk/core": "3.592.0",
        "@aws-sdk/credential-provider-node": "3.596.0",
        "@aws-sdk/middleware-host-header": "3.577.0",
        "@aws-sdk/middleware-logger": "3.577.0",
        "@aws-sdk/middleware-recursion-detection": "3.577.0",
        "@aws-sdk/middleware-user-agent": "3.587.0",
        "@aws-sdk/region-config-resolver": "3.587.0",
        "@aws-sdk/types": "3.577.0",
        "@aws-sdk/util-endpoints": "3.587.0",
        "@aws-sdk/util-user-agent-browser": "3.577.0",
        "@aws-sdk/util-user-agent-node": "3.587.0",
        "@smithy/config-resolver": "^3.0.1",
        "@smithy/core": "^2.2.0",
        "@smithy/fetch-http-handler": "^3.0.1",
        "@smithy/hash-node": "^3.0.0",
        "@smithy/invalid-dependency": "^3.0.0",
        "@smithy/middleware-content-length": "^3.0.0",
        "@smithy/middleware-endpoint": "^3.0.1",
        "@smithy/middleware-retry": "^3.0.3",
        "@smithy/middleware-serde": "^3.0.0",
        "@smithy/middleware-stack": "^3.0.0",
        "@smithy/node-config-provider": "^3.1.0",
        "@smithy/node-http-handler": "^3.0.0",
        "@smithy/protocol-http": "^4.0.0",
        "@smithy/smithy-client": "^3.1.1",
        "@smithy/types": "^3.0.0",
        "@smithy/url-parser": "^3.0.0",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.3",
        "@smithy/util-defaults-mode-node": "^3.0.3",
        "@smithy/util-endpoints": "^2.0.1",
        "@smithy/util-middleware": "^3.0.0",
        "@smithy/util-retry": "^3.0.0",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.587.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/crt-availability.js
var crtAvailability;
var init_crt_availability = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.587.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/crt-availability.js"() {
    "use strict";
    crtAvailability = {
      isCrtAvailable: false
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.587.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js
var isCrtAvailable;
var init_is_crt_available = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.587.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js"() {
    "use strict";
    init_crt_availability();
    isCrtAvailable = () => {
      if (crtAvailability.isCrtAvailable) {
        return ["md/crt-avail"];
      }
      return null;
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.587.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js
var import_os2, import_process, UA_APP_ID_ENV_NAME, UA_APP_ID_INI_NAME, defaultUserAgent;
var init_dist_es42 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.587.0/node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js"() {
    "use strict";
    init_dist_es15();
    import_os2 = require("os");
    import_process = require("process");
    init_is_crt_available();
    init_crt_availability();
    UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        ["ua", "2.0"],
        [`os/${(0, import_os2.platform)()}`, (0, import_os2.release)()],
        ["lang/js"],
        ["md/nodejs", `${import_process.versions.node}`]
      ];
      const crtAvailable = isCrtAvailable();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (import_process.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${import_process.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = loadConfig({
        environmentVariableSelector: (env2) => env2[UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+hash-node@3.0.1/node_modules/@smithy/hash-node/dist-es/index.js
function castSourceData(toCast, encoding) {
  if (import_buffer3.Buffer.isBuffer(toCast)) {
    return toCast;
  }
  if (typeof toCast === "string") {
    return fromString(toCast, encoding);
  }
  if (ArrayBuffer.isView(toCast)) {
    return fromArrayBuffer(toCast.buffer, toCast.byteOffset, toCast.byteLength);
  }
  return fromArrayBuffer(toCast);
}
var import_buffer3, import_crypto4, Hash;
var init_dist_es43 = __esm({
  "../../node_modules/.pnpm/@smithy+hash-node@3.0.1/node_modules/@smithy/hash-node/dist-es/index.js"() {
    "use strict";
    init_dist_es24();
    init_dist_es25();
    import_buffer3 = require("buffer");
    import_crypto4 = require("crypto");
    Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update(toUint8Array(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, import_crypto4.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, import_crypto4.createHash)(this.algorithmIdentifier);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-body-length-node@3.0.0/node_modules/@smithy/util-body-length-node/dist-es/calculateBodyLength.js
var import_fs3, calculateBodyLength;
var init_calculateBodyLength = __esm({
  "../../node_modules/.pnpm/@smithy+util-body-length-node@3.0.0/node_modules/@smithy/util-body-length-node/dist-es/calculateBodyLength.js"() {
    "use strict";
    import_fs3 = require("fs");
    calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.byteLength(body);
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.start === "number" && typeof body.end === "number") {
        return body.end + 1 - body.start;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, import_fs3.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, import_fs3.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-body-length-node@3.0.0/node_modules/@smithy/util-body-length-node/dist-es/index.js
var init_dist_es44 = __esm({
  "../../node_modules/.pnpm/@smithy+util-body-length-node@3.0.0/node_modules/@smithy/util-body-length-node/dist-es/index.js"() {
    "use strict";
    init_calculateBodyLength();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/ruleset.js
var u, v, w, x, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, _data, ruleSet;
var init_ruleset = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/ruleset.js"() {
    "use strict";
    u = "required";
    v = "fn";
    w = "argv";
    x = "ref";
    a = true;
    b = "isSet";
    c = "booleanEquals";
    d = "error";
    e = "endpoint";
    f = "tree";
    g = "PartitionResult";
    h = "getAttr";
    i = { [u]: false, "type": "String" };
    j = { [u]: true, "default": false, "type": "Boolean" };
    k = { [x]: "Endpoint" };
    l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] };
    m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] };
    n = {};
    o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] };
    p = { [x]: g };
    q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] };
    r = [l];
    s = [m];
    t = [{ [x]: "Region" }];
    _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://oidc.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
    ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver;
var init_endpointResolver = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/endpointResolver.js"() {
    "use strict";
    init_dist_es9();
    init_dist_es8();
    init_ruleset();
    defaultEndpointResolver = (endpointParams, context = {}) => {
      return resolveEndpoint(ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    customEndpointFunctions.aws = awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/runtimeConfig.shared.js
var getRuntimeConfig;
var init_runtimeConfig_shared = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/runtimeConfig.shared.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es35();
    init_dist_es33();
    init_dist_es17();
    init_dist_es26();
    init_dist_es25();
    init_httpAuthSchemeProvider2();
    init_endpointResolver();
    getRuntimeConfig = (config) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? fromBase64,
        base64Encoder: config?.base64Encoder ?? toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultSSOOIDCHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO OIDC",
        urlParser: config?.urlParser ?? parseUrl,
        utf8Decoder: config?.utf8Decoder ?? fromUtf84,
        utf8Encoder: config?.utf8Encoder ?? toUtf84
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-defaults-mode-node@3.0.4/node_modules/@smithy/util-defaults-mode-node/dist-es/constants.js
var AWS_EXECUTION_ENV, AWS_REGION_ENV, AWS_DEFAULT_REGION_ENV, ENV_IMDS_DISABLED2, DEFAULTS_MODE_OPTIONS, IMDS_REGION_PATH;
var init_constants8 = __esm({
  "../../node_modules/.pnpm/@smithy+util-defaults-mode-node@3.0.4/node_modules/@smithy/util-defaults-mode-node/dist-es/constants.js"() {
    "use strict";
    AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    AWS_REGION_ENV = "AWS_REGION";
    AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    ENV_IMDS_DISABLED2 = "AWS_EC2_METADATA_DISABLED";
    DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// ../../node_modules/.pnpm/@smithy+util-defaults-mode-node@3.0.4/node_modules/@smithy/util-defaults-mode-node/dist-es/defaultsModeConfig.js
var AWS_DEFAULTS_MODE_ENV, AWS_DEFAULTS_MODE_CONFIG, NODE_DEFAULTS_MODE_CONFIG_OPTIONS;
var init_defaultsModeConfig = __esm({
  "../../node_modules/.pnpm/@smithy+util-defaults-mode-node@3.0.4/node_modules/@smithy/util-defaults-mode-node/dist-es/defaultsModeConfig.js"() {
    "use strict";
    AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env2) => {
        return env2[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-defaults-mode-node@3.0.4/node_modules/@smithy/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js
var resolveDefaultsModeConfig, resolveNodeDefaultsModeAuto, inferPhysicalRegion;
var init_resolveDefaultsModeConfig = __esm({
  "../../node_modules/.pnpm/@smithy+util-defaults-mode-node@3.0.4/node_modules/@smithy/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js"() {
    "use strict";
    init_dist_es13();
    init_dist_es15();
    init_dist_es2();
    init_constants8();
    init_defaultsModeConfig();
    resolveDefaultsModeConfig = ({ region = loadConfig(NODE_REGION_CONFIG_OPTIONS), defaultsMode = loadConfig(NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => memoize(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode?.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode?.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    inferPhysicalRegion = async () => {
      if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {
        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[ENV_IMDS_DISABLED2]) {
        try {
          const { getInstanceMetadataEndpoint: getInstanceMetadataEndpoint2, httpRequest: httpRequest2 } = await Promise.resolve().then(() => (init_dist_es40(), dist_es_exports3));
          const endpoint = await getInstanceMetadataEndpoint2();
          return (await httpRequest2({ ...endpoint, path: IMDS_REGION_PATH })).toString();
        } catch (e6) {
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-defaults-mode-node@3.0.4/node_modules/@smithy/util-defaults-mode-node/dist-es/index.js
var init_dist_es45 = __esm({
  "../../node_modules/.pnpm/@smithy+util-defaults-mode-node@3.0.4/node_modules/@smithy/util-defaults-mode-node/dist-es/index.js"() {
    "use strict";
    init_resolveDefaultsModeConfig();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/runtimeConfig.js
var getRuntimeConfig2;
var init_runtimeConfig = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/runtimeConfig.js"() {
    "use strict";
    init_package2();
    init_dist_es38();
    init_dist_es55();
    init_dist_es42();
    init_dist_es13();
    init_dist_es43();
    init_dist_es34();
    init_dist_es15();
    init_dist_es29();
    init_dist_es44();
    init_dist_es21();
    init_runtimeConfig_shared();
    init_dist_es33();
    init_dist_es45();
    init_dist_es33();
    getRuntimeConfig2 = (config) => {
      emitWarningIfUnsupportedVersion(process.version);
      const defaultsMode = resolveDefaultsModeConfig(config);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig(config);
      emitWarningIfUnsupportedVersion2(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default2.version }),
        maxAttempts: config?.maxAttempts ?? loadConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? loadConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? loadConfig({
          ...NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? loadConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js
var getAwsRegionExtensionConfiguration, resolveAwsRegionExtensionConfiguration;
var init_extensions4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js"() {
    "use strict";
    getAwsRegionExtensionConfiguration = (runtimeConfig) => {
      let runtimeConfigRegion = async () => {
        if (runtimeConfig.region === void 0) {
          throw new Error("Region is missing from runtimeConfig");
        }
        const region = runtimeConfig.region;
        if (typeof region === "string") {
          return region;
        }
        return region();
      };
      return {
        setRegion(region) {
          runtimeConfigRegion = region;
        },
        region() {
          return runtimeConfigRegion;
        }
      };
    };
    resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration) => {
      return {
        region: awsRegionExtensionConfiguration.region()
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/config.js
var init_config4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/config.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/isFipsRegion.js
var init_isFipsRegion2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/isFipsRegion.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/getRealRegion.js
var init_getRealRegion2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/getRealRegion.js"() {
    "use strict";
    init_isFipsRegion2();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/resolveRegionConfig.js
var init_resolveRegionConfig2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/resolveRegionConfig.js"() {
    "use strict";
    init_getRealRegion2();
    init_isFipsRegion2();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/index.js
var init_regionConfig2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/index.js"() {
    "use strict";
    init_config4();
    init_resolveRegionConfig2();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/index.js
var init_dist_es46 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+region-config-resolver@3.587.0/node_modules/@aws-sdk/region-config-resolver/dist-es/index.js"() {
    "use strict";
    init_extensions4();
    init_regionConfig2();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration, resolveHttpAuthRuntimeConfig;
var init_httpAuthExtensionConfiguration = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/auth/httpAuthExtensionConfiguration.js"() {
    "use strict";
    getHttpAuthExtensionConfiguration = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index2 = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index2 === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index2, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    resolveHttpAuthRuntimeConfig = (config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/runtimeExtensions.js
var asPartial, resolveRuntimeExtensions;
var init_runtimeExtensions = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/runtimeExtensions.js"() {
    "use strict";
    init_dist_es46();
    init_dist_es4();
    init_dist_es33();
    init_httpAuthExtensionConfiguration();
    asPartial = (t6) => t6;
    resolveRuntimeExtensions = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial(getAwsRegionExtensionConfiguration(runtimeConfig)),
        ...asPartial(getDefaultExtensionConfiguration(runtimeConfig)),
        ...asPartial(getHttpHandlerExtensionConfiguration(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
        ...resolveDefaultRuntimeConfig(extensionConfiguration),
        ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/SSOOIDCClient.js
var SSOOIDCClient;
var init_SSOOIDCClient = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/SSOOIDCClient.js"() {
    "use strict";
    init_dist_es5();
    init_dist_es6();
    init_dist_es7();
    init_dist_es10();
    init_dist_es13();
    init_dist_es35();
    init_dist_es36();
    init_dist_es19();
    init_dist_es34();
    init_dist_es33();
    init_httpAuthSchemeProvider2();
    init_EndpointParameters2();
    init_runtimeConfig();
    init_runtimeExtensions();
    SSOOIDCClient = class extends Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig2(configuration || {});
        const _config_1 = resolveClientEndpointParameters2(_config_0);
        const _config_2 = resolveRegionConfig(_config_1);
        const _config_3 = resolveEndpointConfig(_config_2);
        const _config_4 = resolveRetryConfig(_config_3);
        const _config_5 = resolveHostHeaderConfig(_config_4);
        const _config_6 = resolveUserAgentConfig(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig2(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getUserAgentPlugin(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
          identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
      getDefaultHttpAuthSchemeParametersProvider() {
        return defaultSSOOIDCHttpAuthSchemeParametersProvider;
      }
      getIdentityProviderConfigProvider() {
        return async (config) => new DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        });
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/models/SSOOIDCServiceException.js
var SSOOIDCServiceException;
var init_SSOOIDCServiceException = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/models/SSOOIDCServiceException.js"() {
    "use strict";
    init_dist_es33();
    SSOOIDCServiceException = class _SSOOIDCServiceException extends ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/models/models_0.js
var AccessDeniedException, AuthorizationPendingException, ExpiredTokenException, InternalServerException, InvalidClientException, InvalidGrantException, InvalidRequestException, InvalidScopeException, SlowDownException, UnauthorizedClientException, UnsupportedGrantTypeException, InvalidRequestRegionException, InvalidClientMetadataException, InvalidRedirectUriException, CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog, CreateTokenWithIAMRequestFilterSensitiveLog, CreateTokenWithIAMResponseFilterSensitiveLog, RegisterClientResponseFilterSensitiveLog, StartDeviceAuthorizationRequestFilterSensitiveLog;
var init_models_0 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/models/models_0.js"() {
    "use strict";
    init_dist_es33();
    init_SSOOIDCServiceException();
    AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InternalServerException = class _InternalServerException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    SlowDownException = class _SlowDownException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidRequestRegionException = class _InvalidRequestRegionException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestRegionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestRegionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestRegionException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
        this.endpoint = opts.endpoint;
        this.region = opts.region;
      }
    };
    InvalidClientMetadataException = class _InvalidClientMetadataException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    InvalidRedirectUriException = class _InvalidRedirectUriException extends SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRedirectUriException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRedirectUriException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRedirectUriException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    CreateTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: SENSITIVE_STRING }
    });
    CreateTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: SENSITIVE_STRING },
      ...obj.idToken && { idToken: SENSITIVE_STRING }
    });
    CreateTokenWithIAMRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.refreshToken && { refreshToken: SENSITIVE_STRING },
      ...obj.assertion && { assertion: SENSITIVE_STRING },
      ...obj.subjectToken && { subjectToken: SENSITIVE_STRING },
      ...obj.codeVerifier && { codeVerifier: SENSITIVE_STRING }
    });
    CreateTokenWithIAMResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING },
      ...obj.refreshToken && { refreshToken: SENSITIVE_STRING },
      ...obj.idToken && { idToken: SENSITIVE_STRING }
    });
    RegisterClientResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: SENSITIVE_STRING }
    });
    StartDeviceAuthorizationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.clientSecret && { clientSecret: SENSITIVE_STRING }
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/protocols/Aws_restJson1.js
var se_CreateTokenCommand, se_CreateTokenWithIAMCommand, se_RegisterClientCommand, se_StartDeviceAuthorizationCommand, de_CreateTokenCommand, de_CreateTokenWithIAMCommand, de_RegisterClientCommand, de_StartDeviceAuthorizationCommand, de_CommandError, throwDefaultError2, de_AccessDeniedExceptionRes, de_AuthorizationPendingExceptionRes, de_ExpiredTokenExceptionRes, de_InternalServerExceptionRes, de_InvalidClientExceptionRes, de_InvalidClientMetadataExceptionRes, de_InvalidGrantExceptionRes, de_InvalidRedirectUriExceptionRes, de_InvalidRequestExceptionRes, de_InvalidRequestRegionExceptionRes, de_InvalidScopeExceptionRes, de_SlowDownExceptionRes, de_UnauthorizedClientExceptionRes, de_UnsupportedGrantTypeExceptionRes, deserializeMetadata2, _ai;
var init_Aws_restJson1 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/protocols/Aws_restJson1.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es35();
    init_dist_es33();
    init_models_0();
    init_SSOOIDCServiceException();
    se_CreateTokenCommand = async (input, context) => {
      const b6 = requestBuilder(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b6.bp("/token");
      let body;
      body = JSON.stringify(take(input, {
        clientId: [],
        clientSecret: [],
        code: [],
        codeVerifier: [],
        deviceCode: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        scope: (_3) => _json(_3)
      }));
      b6.m("POST").h(headers).b(body);
      return b6.build();
    };
    se_CreateTokenWithIAMCommand = async (input, context) => {
      const b6 = requestBuilder(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b6.bp("/token");
      const query = map2({
        [_ai]: [, "t"]
      });
      let body;
      body = JSON.stringify(take(input, {
        assertion: [],
        clientId: [],
        code: [],
        codeVerifier: [],
        grantType: [],
        redirectUri: [],
        refreshToken: [],
        requestedTokenType: [],
        scope: (_3) => _json(_3),
        subjectToken: [],
        subjectTokenType: []
      }));
      b6.m("POST").h(headers).q(query).b(body);
      return b6.build();
    };
    se_RegisterClientCommand = async (input, context) => {
      const b6 = requestBuilder(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b6.bp("/client/register");
      let body;
      body = JSON.stringify(take(input, {
        clientName: [],
        clientType: [],
        entitledApplicationArn: [],
        grantTypes: (_3) => _json(_3),
        issuerUrl: [],
        redirectUris: (_3) => _json(_3),
        scopes: (_3) => _json(_3)
      }));
      b6.m("POST").h(headers).b(body);
      return b6.build();
    };
    se_StartDeviceAuthorizationCommand = async (input, context) => {
      const b6 = requestBuilder(input, context);
      const headers = {
        "content-type": "application/json"
      };
      b6.bp("/device_authorization");
      let body;
      body = JSON.stringify(take(input, {
        clientId: [],
        clientSecret: [],
        startUrl: []
      }));
      b6.m("POST").h(headers).b(body);
      return b6.build();
    };
    de_CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take(data, {
        accessToken: expectString,
        expiresIn: expectInt32,
        idToken: expectString,
        refreshToken: expectString,
        tokenType: expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_CreateTokenWithIAMCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take(data, {
        accessToken: expectString,
        expiresIn: expectInt32,
        idToken: expectString,
        issuedTokenType: expectString,
        refreshToken: expectString,
        scope: _json,
        tokenType: expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take(data, {
        authorizationEndpoint: expectString,
        clientId: expectString,
        clientIdIssuedAt: expectLong,
        clientSecret: expectString,
        clientSecretExpiresAt: expectLong,
        tokenEndpoint: expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata2(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take(data, {
        deviceCode: expectString,
        expiresIn: expectInt32,
        interval: expectInt32,
        userCode: expectString,
        verificationUri: expectString,
        verificationUriComplete: expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_CommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseJsonErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await de_InvalidClientExceptionRes(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await de_InvalidGrantExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await de_InvalidScopeExceptionRes(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await de_SlowDownExceptionRes(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);
        case "InvalidRequestRegionException":
        case "com.amazonaws.ssooidc#InvalidRequestRegionException":
          throw await de_InvalidRequestRegionExceptionRes(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);
        case "InvalidRedirectUriException":
        case "com.amazonaws.ssooidc#InvalidRedirectUriException":
          throw await de_InvalidRedirectUriExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError2({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    throwDefaultError2 = withBaseException(SSOOIDCServiceException);
    de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new AccessDeniedException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new AuthorizationPendingException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InternalServerExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InternalServerException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InvalidClientExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InvalidClientMetadataExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidClientMetadataException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InvalidGrantExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidGrantException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InvalidRedirectUriExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRedirectUriException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InvalidRequestRegionExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        endpoint: expectString,
        error: expectString,
        error_description: expectString,
        region: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestRegionException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_InvalidScopeExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidScopeException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_SlowDownExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new SlowDownException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedClientException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        error: expectString,
        error_description: expectString
      });
      Object.assign(contents, doc);
      const exception = new UnsupportedGrantTypeException({
        $metadata: deserializeMetadata2(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    deserializeMetadata2 = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    _ai = "aws_iam";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/CreateTokenCommand.js
var CreateTokenCommand;
var init_CreateTokenCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/CreateTokenCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters2();
    init_models_0();
    init_Aws_restJson1();
    CreateTokenCommand = class extends Command.classBuilder().ep({
      ...commonParams2
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateToken", {}).n("SSOOIDCClient", "CreateTokenCommand").f(CreateTokenRequestFilterSensitiveLog, CreateTokenResponseFilterSensitiveLog).ser(se_CreateTokenCommand).de(de_CreateTokenCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/CreateTokenWithIAMCommand.js
var CreateTokenWithIAMCommand;
var init_CreateTokenWithIAMCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/CreateTokenWithIAMCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters2();
    init_models_0();
    init_Aws_restJson1();
    CreateTokenWithIAMCommand = class extends Command.classBuilder().ep({
      ...commonParams2
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "CreateTokenWithIAM", {}).n("SSOOIDCClient", "CreateTokenWithIAMCommand").f(CreateTokenWithIAMRequestFilterSensitiveLog, CreateTokenWithIAMResponseFilterSensitiveLog).ser(se_CreateTokenWithIAMCommand).de(de_CreateTokenWithIAMCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/RegisterClientCommand.js
var RegisterClientCommand;
var init_RegisterClientCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/RegisterClientCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters2();
    init_models_0();
    init_Aws_restJson1();
    RegisterClientCommand = class extends Command.classBuilder().ep({
      ...commonParams2
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "RegisterClient", {}).n("SSOOIDCClient", "RegisterClientCommand").f(void 0, RegisterClientResponseFilterSensitiveLog).ser(se_RegisterClientCommand).de(de_RegisterClientCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/StartDeviceAuthorizationCommand.js
var StartDeviceAuthorizationCommand;
var init_StartDeviceAuthorizationCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/StartDeviceAuthorizationCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters2();
    init_models_0();
    init_Aws_restJson1();
    StartDeviceAuthorizationCommand = class extends Command.classBuilder().ep({
      ...commonParams2
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSSOOIDCService", "StartDeviceAuthorization", {}).n("SSOOIDCClient", "StartDeviceAuthorizationCommand").f(StartDeviceAuthorizationRequestFilterSensitiveLog, void 0).ser(se_StartDeviceAuthorizationCommand).de(de_StartDeviceAuthorizationCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/SSOOIDC.js
var commands, SSOOIDC;
var init_SSOOIDC = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/SSOOIDC.js"() {
    "use strict";
    init_dist_es33();
    init_CreateTokenCommand();
    init_CreateTokenWithIAMCommand();
    init_RegisterClientCommand();
    init_StartDeviceAuthorizationCommand();
    init_SSOOIDCClient();
    commands = {
      CreateTokenCommand,
      CreateTokenWithIAMCommand,
      RegisterClientCommand,
      StartDeviceAuthorizationCommand
    };
    SSOOIDC = class extends SSOOIDCClient {
    };
    createAggregatedClient(commands, SSOOIDC);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/index.js
var init_commands = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/index.js"() {
    "use strict";
    init_CreateTokenCommand();
    init_CreateTokenWithIAMCommand();
    init_RegisterClientCommand();
    init_StartDeviceAuthorizationCommand();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/models/index.js
var init_models = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/models/index.js"() {
    "use strict";
    init_models_0();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/index.js
var dist_es_exports5 = {};
__export(dist_es_exports5, {
  $Command: () => Command,
  AccessDeniedException: () => AccessDeniedException,
  AuthorizationPendingException: () => AuthorizationPendingException,
  CreateTokenCommand: () => CreateTokenCommand,
  CreateTokenRequestFilterSensitiveLog: () => CreateTokenRequestFilterSensitiveLog,
  CreateTokenResponseFilterSensitiveLog: () => CreateTokenResponseFilterSensitiveLog,
  CreateTokenWithIAMCommand: () => CreateTokenWithIAMCommand,
  CreateTokenWithIAMRequestFilterSensitiveLog: () => CreateTokenWithIAMRequestFilterSensitiveLog,
  CreateTokenWithIAMResponseFilterSensitiveLog: () => CreateTokenWithIAMResponseFilterSensitiveLog,
  ExpiredTokenException: () => ExpiredTokenException,
  InternalServerException: () => InternalServerException,
  InvalidClientException: () => InvalidClientException,
  InvalidClientMetadataException: () => InvalidClientMetadataException,
  InvalidGrantException: () => InvalidGrantException,
  InvalidRedirectUriException: () => InvalidRedirectUriException,
  InvalidRequestException: () => InvalidRequestException,
  InvalidRequestRegionException: () => InvalidRequestRegionException,
  InvalidScopeException: () => InvalidScopeException,
  RegisterClientCommand: () => RegisterClientCommand,
  RegisterClientResponseFilterSensitiveLog: () => RegisterClientResponseFilterSensitiveLog,
  SSOOIDC: () => SSOOIDC,
  SSOOIDCClient: () => SSOOIDCClient,
  SSOOIDCServiceException: () => SSOOIDCServiceException,
  SlowDownException: () => SlowDownException,
  StartDeviceAuthorizationCommand: () => StartDeviceAuthorizationCommand,
  StartDeviceAuthorizationRequestFilterSensitiveLog: () => StartDeviceAuthorizationRequestFilterSensitiveLog,
  UnauthorizedClientException: () => UnauthorizedClientException,
  UnsupportedGrantTypeException: () => UnsupportedGrantTypeException,
  __Client: () => Client
});
var init_dist_es47 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sso-oidc/dist-es/index.js"() {
    "use strict";
    init_SSOOIDCClient();
    init_SSOOIDC();
    init_commands();
    init_models();
    init_SSOOIDCServiceException();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js
var ssoOidcClientsHash, getSsoOidcClient;
var init_getSsoOidcClient = __esm({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js"() {
    "use strict";
    ssoOidcClientsHash = {};
    getSsoOidcClient = async (ssoRegion) => {
      const { SSOOIDCClient: SSOOIDCClient2 } = await Promise.resolve().then(() => (init_dist_es47(), dist_es_exports5));
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new SSOOIDCClient2({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js
var getNewSsoOidcToken;
var init_getNewSsoOidcToken = __esm({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js"() {
    "use strict";
    init_getSsoOidcClient();
    getNewSsoOidcToken = async (ssoToken, ssoRegion) => {
      const { CreateTokenCommand: CreateTokenCommand2 } = await Promise.resolve().then(() => (init_dist_es47(), dist_es_exports5));
      const ssoOidcClient = await getSsoOidcClient(ssoRegion);
      return ssoOidcClient.send(new CreateTokenCommand2({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js
var validateTokenExpiry;
var init_validateTokenExpiry = __esm({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js"() {
    "use strict";
    init_dist_es2();
    init_constants7();
    validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js
var validateTokenKey;
var init_validateTokenKey = __esm({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js"() {
    "use strict";
    init_dist_es2();
    init_constants7();
    validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${REFRESH_MESSAGE}`, false);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js
var import_fs4, writeFile, writeSSOTokenToFile;
var init_writeSSOTokenToFile = __esm({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js"() {
    "use strict";
    init_dist_es14();
    import_fs4 = require("fs");
    ({ writeFile } = import_fs4.promises);
    writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = getSSOTokenFilepath(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js
var lastRefreshAttemptTime, fromSso;
var init_fromSso = __esm({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es14();
    init_constants7();
    init_getNewSsoOidcToken();
    init_validateTokenExpiry();
    init_validateTokenKey();
    init_writeSSOTokenToFile();
    lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    fromSso = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/token-providers - fromSso");
      const profiles = await parseKnownFiles(init);
      const profileName = getProfileName(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await loadSsoSessionData(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await getSSOTokenFromFile(ssoSessionName);
      } catch (e6) {
        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);
      }
      validateTokenKey("accessToken", ssoToken.accessToken);
      validateTokenKey("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
      validateTokenKey("clientId", ssoToken.clientId, true);
      validateTokenKey("clientSecret", ssoToken.clientSecret, true);
      validateTokenKey("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);
        validateTokenKey("accessToken", newSsoOidcToken.accessToken);
        validateTokenKey("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await writeSSOTokenToFile(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error2) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error2) {
        validateTokenExpiry(existingToken);
        return existingToken;
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/fromStatic.js
var init_fromStatic3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/fromStatic.js"() {
    "use strict";
    init_dist_es2();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/nodeProvider.js
var init_nodeProvider = __esm({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/nodeProvider.js"() {
    "use strict";
    init_dist_es2();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/index.js
var init_dist_es48 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/index.js"() {
    "use strict";
    init_fromSso();
    init_fromStatic3();
    init_nodeProvider();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/auth/httpAuthSchemeProvider.js
function createAwsAuthSigv4HttpAuthOption3(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "awsssoportal",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
function createSmithyApiNoAuthHttpAuthOption3(authParameters) {
  return {
    schemeId: "smithy.api#noAuth"
  };
}
var defaultSSOHttpAuthSchemeParametersProvider, defaultSSOHttpAuthSchemeProvider, resolveHttpAuthSchemeConfig3;
var init_httpAuthSchemeProvider3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/auth/httpAuthSchemeProvider.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es12();
    defaultSSOHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: getSmithyContext(context).operation,
        region: await normalizeProvider(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    defaultSSOHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "GetRoleCredentials": {
          options.push(createSmithyApiNoAuthHttpAuthOption3(authParameters));
          break;
        }
        case "ListAccountRoles": {
          options.push(createSmithyApiNoAuthHttpAuthOption3(authParameters));
          break;
        }
        case "ListAccounts": {
          options.push(createSmithyApiNoAuthHttpAuthOption3(authParameters));
          break;
        }
        case "Logout": {
          options.push(createSmithyApiNoAuthHttpAuthOption3(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption3(authParameters));
        }
      }
      return options;
    };
    resolveHttpAuthSchemeConfig3 = (config) => {
      const config_0 = resolveAwsSdkSigV4Config(config);
      return {
        ...config_0
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters3, commonParams3;
var init_EndpointParameters3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/EndpointParameters.js"() {
    "use strict";
    resolveClientEndpointParameters3 = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    };
    commonParams3 = {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/package.json
var package_default3;
var init_package3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/package.json"() {
    package_default3 = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.592.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sso",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/core": "3.592.0",
        "@aws-sdk/middleware-host-header": "3.577.0",
        "@aws-sdk/middleware-logger": "3.577.0",
        "@aws-sdk/middleware-recursion-detection": "3.577.0",
        "@aws-sdk/middleware-user-agent": "3.587.0",
        "@aws-sdk/region-config-resolver": "3.587.0",
        "@aws-sdk/types": "3.577.0",
        "@aws-sdk/util-endpoints": "3.587.0",
        "@aws-sdk/util-user-agent-browser": "3.577.0",
        "@aws-sdk/util-user-agent-node": "3.587.0",
        "@smithy/config-resolver": "^3.0.1",
        "@smithy/core": "^2.2.0",
        "@smithy/fetch-http-handler": "^3.0.1",
        "@smithy/hash-node": "^3.0.0",
        "@smithy/invalid-dependency": "^3.0.0",
        "@smithy/middleware-content-length": "^3.0.0",
        "@smithy/middleware-endpoint": "^3.0.1",
        "@smithy/middleware-retry": "^3.0.3",
        "@smithy/middleware-serde": "^3.0.0",
        "@smithy/middleware-stack": "^3.0.0",
        "@smithy/node-config-provider": "^3.1.0",
        "@smithy/node-http-handler": "^3.0.0",
        "@smithy/protocol-http": "^4.0.0",
        "@smithy/smithy-client": "^3.1.1",
        "@smithy/types": "^3.0.0",
        "@smithy/url-parser": "^3.0.0",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.3",
        "@smithy/util-defaults-mode-node": "^3.0.3",
        "@smithy/util-endpoints": "^2.0.1",
        "@smithy/util-middleware": "^3.0.0",
        "@smithy/util-retry": "^3.0.0",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/ruleset.js
var u2, v2, w2, x2, a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, _data2, ruleSet2;
var init_ruleset2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/ruleset.js"() {
    "use strict";
    u2 = "required";
    v2 = "fn";
    w2 = "argv";
    x2 = "ref";
    a2 = true;
    b2 = "isSet";
    c2 = "booleanEquals";
    d2 = "error";
    e2 = "endpoint";
    f2 = "tree";
    g2 = "PartitionResult";
    h2 = "getAttr";
    i2 = { [u2]: false, "type": "String" };
    j2 = { [u2]: true, "default": false, "type": "Boolean" };
    k2 = { [x2]: "Endpoint" };
    l2 = { [v2]: c2, [w2]: [{ [x2]: "UseFIPS" }, true] };
    m2 = { [v2]: c2, [w2]: [{ [x2]: "UseDualStack" }, true] };
    n2 = {};
    o2 = { [v2]: h2, [w2]: [{ [x2]: g2 }, "supportsFIPS"] };
    p2 = { [x2]: g2 };
    q2 = { [v2]: c2, [w2]: [true, { [v2]: h2, [w2]: [p2, "supportsDualStack"] }] };
    r2 = [l2];
    s2 = [m2];
    t2 = [{ [x2]: "Region" }];
    _data2 = { version: "1.0", parameters: { Region: i2, UseDualStack: j2, UseFIPS: j2, Endpoint: i2 }, rules: [{ conditions: [{ [v2]: b2, [w2]: [k2] }], rules: [{ conditions: r2, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d2 }, { conditions: s2, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d2 }, { endpoint: { url: k2, properties: n2, headers: n2 }, type: e2 }], type: f2 }, { conditions: [{ [v2]: b2, [w2]: t2 }], rules: [{ conditions: [{ [v2]: "aws.partition", [w2]: t2, assign: g2 }], rules: [{ conditions: [l2, m2], rules: [{ conditions: [{ [v2]: c2, [w2]: [a2, o2] }, q2], rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n2, headers: n2 }, type: e2 }], type: f2 }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d2 }], type: f2 }, { conditions: r2, rules: [{ conditions: [{ [v2]: c2, [w2]: [o2, a2] }], rules: [{ conditions: [{ [v2]: "stringEquals", [w2]: [{ [v2]: h2, [w2]: [p2, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://portal.sso.{Region}.amazonaws.com", properties: n2, headers: n2 }, type: e2 }, { endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n2, headers: n2 }, type: e2 }], type: f2 }, { error: "FIPS is enabled but this partition does not support FIPS", type: d2 }], type: f2 }, { conditions: s2, rules: [{ conditions: [q2], rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n2, headers: n2 }, type: e2 }], type: f2 }, { error: "DualStack is enabled but this partition does not support DualStack", type: d2 }], type: f2 }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: n2, headers: n2 }, type: e2 }], type: f2 }], type: f2 }, { error: "Invalid Configuration: Missing Region", type: d2 }] };
    ruleSet2 = _data2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver2;
var init_endpointResolver2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/endpoint/endpointResolver.js"() {
    "use strict";
    init_dist_es9();
    init_dist_es8();
    init_ruleset2();
    defaultEndpointResolver2 = (endpointParams, context = {}) => {
      return resolveEndpoint(ruleSet2, {
        endpointParams,
        logger: context.logger
      });
    };
    customEndpointFunctions.aws = awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.shared.js
var getRuntimeConfig3;
var init_runtimeConfig_shared2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.shared.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es35();
    init_dist_es33();
    init_dist_es17();
    init_dist_es26();
    init_dist_es25();
    init_httpAuthSchemeProvider3();
    init_endpointResolver2();
    getRuntimeConfig3 = (config) => {
      return {
        apiVersion: "2019-06-10",
        base64Decoder: config?.base64Decoder ?? fromBase64,
        base64Encoder: config?.base64Encoder ?? toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver2,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultSSOHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new NoOpLogger(),
        serviceId: config?.serviceId ?? "SSO",
        urlParser: config?.urlParser ?? parseUrl,
        utf8Decoder: config?.utf8Decoder ?? fromUtf84,
        utf8Encoder: config?.utf8Encoder ?? toUtf84
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.js
var getRuntimeConfig4;
var init_runtimeConfig2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.js"() {
    "use strict";
    init_package3();
    init_dist_es38();
    init_dist_es42();
    init_dist_es13();
    init_dist_es43();
    init_dist_es34();
    init_dist_es15();
    init_dist_es29();
    init_dist_es44();
    init_dist_es21();
    init_runtimeConfig_shared2();
    init_dist_es33();
    init_dist_es45();
    init_dist_es33();
    getRuntimeConfig4 = (config) => {
      emitWarningIfUnsupportedVersion(process.version);
      const defaultsMode = resolveDefaultsModeConfig(config);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig3(config);
      emitWarningIfUnsupportedVersion2(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default3.version }),
        maxAttempts: config?.maxAttempts ?? loadConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? loadConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? loadConfig({
          ...NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? loadConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration2, resolveHttpAuthRuntimeConfig2;
var init_httpAuthExtensionConfiguration2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/auth/httpAuthExtensionConfiguration.js"() {
    "use strict";
    getHttpAuthExtensionConfiguration2 = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index2 = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index2 === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index2, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    resolveHttpAuthRuntimeConfig2 = (config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeExtensions.js
var asPartial2, resolveRuntimeExtensions2;
var init_runtimeExtensions2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/runtimeExtensions.js"() {
    "use strict";
    init_dist_es46();
    init_dist_es4();
    init_dist_es33();
    init_httpAuthExtensionConfiguration2();
    asPartial2 = (t6) => t6;
    resolveRuntimeExtensions2 = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial2(getAwsRegionExtensionConfiguration(runtimeConfig)),
        ...asPartial2(getDefaultExtensionConfiguration(runtimeConfig)),
        ...asPartial2(getHttpHandlerExtensionConfiguration(runtimeConfig)),
        ...asPartial2(getHttpAuthExtensionConfiguration2(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
        ...resolveDefaultRuntimeConfig(extensionConfiguration),
        ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig2(extensionConfiguration)
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/SSOClient.js
var SSOClient;
var init_SSOClient = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/SSOClient.js"() {
    "use strict";
    init_dist_es5();
    init_dist_es6();
    init_dist_es7();
    init_dist_es10();
    init_dist_es13();
    init_dist_es35();
    init_dist_es36();
    init_dist_es19();
    init_dist_es34();
    init_dist_es33();
    init_httpAuthSchemeProvider3();
    init_EndpointParameters3();
    init_runtimeConfig2();
    init_runtimeExtensions2();
    SSOClient = class extends Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig4(configuration || {});
        const _config_1 = resolveClientEndpointParameters3(_config_0);
        const _config_2 = resolveRegionConfig(_config_1);
        const _config_3 = resolveEndpointConfig(_config_2);
        const _config_4 = resolveRetryConfig(_config_3);
        const _config_5 = resolveHostHeaderConfig(_config_4);
        const _config_6 = resolveUserAgentConfig(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig3(_config_6);
        const _config_8 = resolveRuntimeExtensions2(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getUserAgentPlugin(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
          identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
      getDefaultHttpAuthSchemeParametersProvider() {
        return defaultSSOHttpAuthSchemeParametersProvider;
      }
      getIdentityProviderConfigProvider() {
        return async (config) => new DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        });
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/models/SSOServiceException.js
var SSOServiceException;
var init_SSOServiceException = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/models/SSOServiceException.js"() {
    "use strict";
    init_dist_es33();
    SSOServiceException = class _SSOServiceException extends ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException.prototype);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/models/models_0.js
var InvalidRequestException2, ResourceNotFoundException, TooManyRequestsException, UnauthorizedException, GetRoleCredentialsRequestFilterSensitiveLog, RoleCredentialsFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog, ListAccountRolesRequestFilterSensitiveLog, ListAccountsRequestFilterSensitiveLog, LogoutRequestFilterSensitiveLog;
var init_models_02 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/models/models_0.js"() {
    "use strict";
    init_dist_es33();
    init_SSOServiceException();
    InvalidRequestException2 = class _InvalidRequestException extends SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
      }
    };
    ResourceNotFoundException = class _ResourceNotFoundException extends SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    TooManyRequestsException = class _TooManyRequestsException extends SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      }
    };
    UnauthorizedException = class _UnauthorizedException extends SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException.prototype);
      }
    };
    GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING }
    });
    RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: SENSITIVE_STRING }
    });
    GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }
    });
    ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING }
    });
    ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING }
    });
    LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: SENSITIVE_STRING }
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/protocols/Aws_restJson1.js
var se_GetRoleCredentialsCommand, se_ListAccountRolesCommand, se_ListAccountsCommand, se_LogoutCommand, de_GetRoleCredentialsCommand, de_ListAccountRolesCommand, de_ListAccountsCommand, de_LogoutCommand, de_CommandError2, throwDefaultError3, de_InvalidRequestExceptionRes2, de_ResourceNotFoundExceptionRes, de_TooManyRequestsExceptionRes, de_UnauthorizedExceptionRes, deserializeMetadata3, isSerializableHeaderValue, _aI, _aT, _ai2, _mR, _mr, _nT, _nt, _rN, _rn, _xasbt;
var init_Aws_restJson12 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/protocols/Aws_restJson1.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es35();
    init_dist_es33();
    init_models_02();
    init_SSOServiceException();
    se_GetRoleCredentialsCommand = async (input, context) => {
      const b6 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b6.bp("/federation/credentials");
      const query = map2({
        [_rn]: [, expectNonNull(input[_rN], `roleName`)],
        [_ai2]: [, expectNonNull(input[_aI], `accountId`)]
      });
      let body;
      b6.m("GET").h(headers).q(query).b(body);
      return b6.build();
    };
    se_ListAccountRolesCommand = async (input, context) => {
      const b6 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b6.bp("/assignment/roles");
      const query = map2({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_ai2]: [, expectNonNull(input[_aI], `accountId`)]
      });
      let body;
      b6.m("GET").h(headers).q(query).b(body);
      return b6.build();
    };
    se_ListAccountsCommand = async (input, context) => {
      const b6 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b6.bp("/assignment/accounts");
      const query = map2({
        [_nt]: [, input[_nT]],
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
      });
      let body;
      b6.m("GET").h(headers).q(query).b(body);
      return b6.build();
    };
    se_LogoutCommand = async (input, context) => {
      const b6 = requestBuilder(input, context);
      const headers = map2({}, isSerializableHeaderValue, {
        [_xasbt]: input[_aT]
      });
      b6.bp("/logout");
      let body;
      b6.m("POST").h(headers).b(body);
      return b6.build();
    };
    de_GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError2(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata3(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take(data, {
        roleCredentials: _json
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError2(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata3(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take(data, {
        nextToken: expectString,
        roleList: _json
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError2(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata3(output)
      });
      const data = expectNonNull(expectObject(await parseJsonBody(output.body, context)), "body");
      const doc = take(data, {
        accountList: _json,
        nextToken: expectString
      });
      Object.assign(contents, doc);
      return contents;
    };
    de_LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError2(output, context);
      }
      const contents = map2({
        $metadata: deserializeMetadata3(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    de_CommandError2 = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseJsonErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await de_InvalidRequestExceptionRes2(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError3({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    throwDefaultError3 = withBaseException(SSOServiceException);
    de_InvalidRequestExceptionRes2 = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new InvalidRequestException2({
        $metadata: deserializeMetadata3(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
      const contents = map2({});
      const data = parsedOutput.body;
      const doc = take(data, {
        message: expectString
      });
      Object.assign(contents, doc);
      const exception = new UnauthorizedException({
        $metadata: deserializeMetadata3(parsedOutput),
        ...contents
      });
      return decorateServiceException(exception, parsedOutput.body);
    };
    deserializeMetadata3 = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    _aI = "accountId";
    _aT = "accessToken";
    _ai2 = "account_id";
    _mR = "maxResults";
    _mr = "max_result";
    _nT = "nextToken";
    _nt = "next_token";
    _rN = "roleName";
    _rn = "role_name";
    _xasbt = "x-amz-sso_bearer_token";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/commands/GetRoleCredentialsCommand.js
var GetRoleCredentialsCommand;
var init_GetRoleCredentialsCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/commands/GetRoleCredentialsCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters3();
    init_models_02();
    init_Aws_restJson12();
    GetRoleCredentialsCommand = class extends Command.classBuilder().ep({
      ...commonParams3
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "GetRoleCredentials", {}).n("SSOClient", "GetRoleCredentialsCommand").f(GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog).ser(se_GetRoleCredentialsCommand).de(de_GetRoleCredentialsCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/commands/ListAccountRolesCommand.js
var ListAccountRolesCommand;
var init_ListAccountRolesCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/commands/ListAccountRolesCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters3();
    init_models_02();
    init_Aws_restJson12();
    ListAccountRolesCommand = class extends Command.classBuilder().ep({
      ...commonParams3
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccountRoles", {}).n("SSOClient", "ListAccountRolesCommand").f(ListAccountRolesRequestFilterSensitiveLog, void 0).ser(se_ListAccountRolesCommand).de(de_ListAccountRolesCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/commands/ListAccountsCommand.js
var ListAccountsCommand;
var init_ListAccountsCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/commands/ListAccountsCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters3();
    init_models_02();
    init_Aws_restJson12();
    ListAccountsCommand = class extends Command.classBuilder().ep({
      ...commonParams3
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "ListAccounts", {}).n("SSOClient", "ListAccountsCommand").f(ListAccountsRequestFilterSensitiveLog, void 0).ser(se_ListAccountsCommand).de(de_ListAccountsCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/commands/LogoutCommand.js
var LogoutCommand;
var init_LogoutCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/commands/LogoutCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters3();
    init_models_02();
    init_Aws_restJson12();
    LogoutCommand = class extends Command.classBuilder().ep({
      ...commonParams3
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("SWBPortalService", "Logout", {}).n("SSOClient", "LogoutCommand").f(LogoutRequestFilterSensitiveLog, void 0).ser(se_LogoutCommand).de(de_LogoutCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/SSO.js
var commands2, SSO;
var init_SSO = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/SSO.js"() {
    "use strict";
    init_dist_es33();
    init_GetRoleCredentialsCommand();
    init_ListAccountRolesCommand();
    init_ListAccountsCommand();
    init_LogoutCommand();
    init_SSOClient();
    commands2 = {
      GetRoleCredentialsCommand,
      ListAccountRolesCommand,
      ListAccountsCommand,
      LogoutCommand
    };
    SSO = class extends SSOClient {
    };
    createAggregatedClient(commands2, SSO);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/commands/index.js
var init_commands2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/commands/index.js"() {
    "use strict";
    init_GetRoleCredentialsCommand();
    init_ListAccountRolesCommand();
    init_ListAccountsCommand();
    init_LogoutCommand();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/pagination/Interfaces.js
var init_Interfaces = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/pagination/Interfaces.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountRolesPaginator.js
var paginateListAccountRoles;
var init_ListAccountRolesPaginator = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountRolesPaginator.js"() {
    "use strict";
    init_dist_es35();
    init_ListAccountRolesCommand();
    init_SSOClient();
    paginateListAccountRoles = createPaginator(SSOClient, ListAccountRolesCommand, "nextToken", "nextToken", "maxResults");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountsPaginator.js
var paginateListAccounts;
var init_ListAccountsPaginator = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountsPaginator.js"() {
    "use strict";
    init_dist_es35();
    init_ListAccountsCommand();
    init_SSOClient();
    paginateListAccounts = createPaginator(SSOClient, ListAccountsCommand, "nextToken", "nextToken", "maxResults");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/pagination/index.js
var init_pagination2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/pagination/index.js"() {
    "use strict";
    init_Interfaces();
    init_ListAccountRolesPaginator();
    init_ListAccountsPaginator();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/models/index.js
var init_models2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/models/index.js"() {
    "use strict";
    init_models_02();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/index.js
var init_dist_es49 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.592.0/node_modules/@aws-sdk/client-sso/dist-es/index.js"() {
    "use strict";
    init_SSOClient();
    init_SSO();
    init_commands2();
    init_pagination2();
    init_models2();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/loadSso.js
var loadSso_exports = {};
__export(loadSso_exports, {
  GetRoleCredentialsCommand: () => GetRoleCredentialsCommand,
  SSOClient: () => SSOClient
});
var init_loadSso = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/loadSso.js"() {
    "use strict";
    init_dist_es49();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js
var SHOULD_FAIL_CREDENTIAL_CHAIN, resolveSSOCredentials;
var init_resolveSSOCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js"() {
    "use strict";
    init_dist_es48();
    init_dist_es2();
    init_dist_es14();
    SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, profile, logger: logger2 }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await fromSso({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e6) {
          throw new CredentialsProviderError(e6.message, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger: logger2
          });
        }
      } else {
        try {
          token = await getSSOTokenFromFile(ssoStartUrl);
        } catch (e6) {
          throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {
            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
            logger: logger2
          });
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {
        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      const { accessToken } = token;
      const { SSOClient: SSOClient2, GetRoleCredentialsCommand: GetRoleCredentialsCommand2 } = await Promise.resolve().then(() => (init_loadSso(), loadSso_exports));
      const sso = ssoClient || new SSOClient2(Object.assign({}, clientConfig ?? {}, {
        region: clientConfig?.region ?? ssoRegion
      }));
      let ssoResp;
      try {
        ssoResp = await sso.send(new GetRoleCredentialsCommand2({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e6) {
        throw new CredentialsProviderError(e6, {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new CredentialsProviderError("SSO returns an invalid temporary credential.", {
          tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,
          logger: logger2
        });
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration), credentialScope };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js
var validateSsoProfile;
var init_validateSsoProfile = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js"() {
    "use strict";
    init_dist_es2();
    validateSsoProfile = (profile, logger2) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, { tryNextLink: false, logger: logger2 });
      }
      return profile;
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js
var fromSSO;
var init_fromSSO = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es14();
    init_isSsoProfile();
    init_resolveSSOCredentials();
    init_validateSsoProfile();
    fromSSO = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
      const { ssoClient } = init;
      const profileName = getProfileName(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await parseKnownFiles(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });
        }
        if (!isSsoProfile(profile)) {
          throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {
            logger: init.logger
          });
        }
        if (profile?.sso_session) {
          const ssoSessions = await loadSsoSessionData(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {
              tryNextLink: false,
              logger: init.logger
            });
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile, init.logger);
        return resolveSSOCredentials({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          clientConfig: init.clientConfig,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"', { tryNextLink: false, logger: init.logger });
      } else {
        return resolveSSOCredentials({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          clientConfig: init.clientConfig,
          profile: profileName
        });
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/types.js
var init_types9 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js
var dist_es_exports6 = {};
__export(dist_es_exports6, {
  fromSSO: () => fromSSO,
  isSsoProfile: () => isSsoProfile,
  validateSsoProfile: () => validateSsoProfile
});
var init_dist_es50 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js"() {
    "use strict";
    init_fromSSO();
    init_isSsoProfile();
    init_types9();
    init_validateSsoProfile();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js
var resolveCredentialSource;
var init_resolveCredentialSource = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js"() {
    "use strict";
    init_dist_es2();
    resolveCredentialSource = (credentialSource, profileName, logger2) => {
      const sourceProvidersMap = {
        EcsContainer: async (options) => {
          const { fromHttp: fromHttp2 } = await Promise.resolve().then(() => (init_dist_es41(), dist_es_exports4));
          const { fromContainerMetadata: fromContainerMetadata3 } = await Promise.resolve().then(() => (init_dist_es40(), dist_es_exports3));
          logger2?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");
          return chain(fromHttp2(options ?? {}), fromContainerMetadata3(options));
        },
        Ec2InstanceMetadata: async (options) => {
          logger2?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");
          const { fromInstanceMetadata: fromInstanceMetadata3 } = await Promise.resolve().then(() => (init_dist_es40(), dist_es_exports3));
          return fromInstanceMetadata3(options);
        },
        Environment: async (options) => {
          logger2?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");
          const { fromEnv: fromEnv4 } = await Promise.resolve().then(() => (init_dist_es39(), dist_es_exports2));
          return fromEnv4(options);
        }
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource];
      } else {
        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger: logger2 });
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthSchemeProvider.js
function createAwsAuthSigv4HttpAuthOption4(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "sts",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
function createSmithyApiNoAuthHttpAuthOption4(authParameters) {
  return {
    schemeId: "smithy.api#noAuth"
  };
}
var defaultSTSHttpAuthSchemeParametersProvider, defaultSTSHttpAuthSchemeProvider, resolveStsAuthConfig, resolveHttpAuthSchemeConfig4;
var init_httpAuthSchemeProvider4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthSchemeProvider.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es12();
    init_STSClient();
    defaultSTSHttpAuthSchemeParametersProvider = async (config, context, input) => {
      return {
        operation: getSmithyContext(context).operation,
        region: await normalizeProvider(config.region)() || (() => {
          throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
        })()
      };
    };
    defaultSTSHttpAuthSchemeProvider = (authParameters) => {
      const options = [];
      switch (authParameters.operation) {
        case "AssumeRoleWithSAML": {
          options.push(createSmithyApiNoAuthHttpAuthOption4(authParameters));
          break;
        }
        case "AssumeRoleWithWebIdentity": {
          options.push(createSmithyApiNoAuthHttpAuthOption4(authParameters));
          break;
        }
        default: {
          options.push(createAwsAuthSigv4HttpAuthOption4(authParameters));
        }
      }
      return options;
    };
    resolveStsAuthConfig = (input) => ({
      ...input,
      stsClientCtor: STSClient
    });
    resolveHttpAuthSchemeConfig4 = (config) => {
      const config_0 = resolveStsAuthConfig(config);
      const config_1 = resolveAwsSdkSigV4Config(config_0);
      return {
        ...config_1
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters4, commonParams4;
var init_EndpointParameters4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js"() {
    "use strict";
    resolveClientEndpointParameters4 = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    commonParams4 = {
      UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/package.json
var package_default4;
var init_package4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/package.json"() {
    package_default4 = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.596.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "node ../../scripts/compilation/inline client-sts",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "rimraf ./dist-types tsconfig.types.tsbuildinfo && tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "extract:docs": "api-extractor run --local",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sso-oidc": "3.596.0",
        "@aws-sdk/core": "3.592.0",
        "@aws-sdk/credential-provider-node": "3.596.0",
        "@aws-sdk/middleware-host-header": "3.577.0",
        "@aws-sdk/middleware-logger": "3.577.0",
        "@aws-sdk/middleware-recursion-detection": "3.577.0",
        "@aws-sdk/middleware-user-agent": "3.587.0",
        "@aws-sdk/region-config-resolver": "3.587.0",
        "@aws-sdk/types": "3.577.0",
        "@aws-sdk/util-endpoints": "3.587.0",
        "@aws-sdk/util-user-agent-browser": "3.577.0",
        "@aws-sdk/util-user-agent-node": "3.587.0",
        "@smithy/config-resolver": "^3.0.1",
        "@smithy/core": "^2.2.0",
        "@smithy/fetch-http-handler": "^3.0.1",
        "@smithy/hash-node": "^3.0.0",
        "@smithy/invalid-dependency": "^3.0.0",
        "@smithy/middleware-content-length": "^3.0.0",
        "@smithy/middleware-endpoint": "^3.0.1",
        "@smithy/middleware-retry": "^3.0.3",
        "@smithy/middleware-serde": "^3.0.0",
        "@smithy/middleware-stack": "^3.0.0",
        "@smithy/node-config-provider": "^3.1.0",
        "@smithy/node-http-handler": "^3.0.0",
        "@smithy/protocol-http": "^4.0.0",
        "@smithy/smithy-client": "^3.1.1",
        "@smithy/types": "^3.0.0",
        "@smithy/url-parser": "^3.0.0",
        "@smithy/util-base64": "^3.0.0",
        "@smithy/util-body-length-browser": "^3.0.0",
        "@smithy/util-body-length-node": "^3.0.0",
        "@smithy/util-defaults-mode-browser": "^3.0.3",
        "@smithy/util-defaults-mode-node": "^3.0.3",
        "@smithy/util-endpoints": "^2.0.1",
        "@smithy/util-middleware": "^3.0.0",
        "@smithy/util-retry": "^3.0.0",
        "@smithy/util-utf8": "^3.0.0",
        tslib: "^2.6.2"
      },
      devDependencies: {
        "@tsconfig/node16": "16.1.3",
        "@types/node": "^16.18.96",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typescript: "~4.9.5"
      },
      engines: {
        node: ">=16.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*/**"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/ruleset.js
var F, G, H, I, J, a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y, z, A, B, C, D, E, _data3, ruleSet3;
var init_ruleset3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/ruleset.js"() {
    "use strict";
    F = "required";
    G = "type";
    H = "fn";
    I = "argv";
    J = "ref";
    a3 = false;
    b3 = true;
    c3 = "booleanEquals";
    d3 = "stringEquals";
    e3 = "sigv4";
    f3 = "sts";
    g3 = "us-east-1";
    h3 = "endpoint";
    i3 = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    j3 = "tree";
    k3 = "error";
    l3 = "getAttr";
    m3 = { [F]: false, [G]: "String" };
    n3 = { [F]: true, "default": false, [G]: "Boolean" };
    o3 = { [J]: "Endpoint" };
    p3 = { [H]: "isSet", [I]: [{ [J]: "Region" }] };
    q3 = { [J]: "Region" };
    r3 = { [H]: "aws.partition", [I]: [q3], "assign": "PartitionResult" };
    s3 = { [J]: "UseFIPS" };
    t3 = { [J]: "UseDualStack" };
    u3 = { "url": "https://sts.amazonaws.com", "properties": { "authSchemes": [{ "name": e3, "signingName": f3, "signingRegion": g3 }] }, "headers": {} };
    v3 = {};
    w3 = { "conditions": [{ [H]: d3, [I]: [q3, "aws-global"] }], [h3]: u3, [G]: h3 };
    x3 = { [H]: c3, [I]: [s3, true] };
    y = { [H]: c3, [I]: [t3, true] };
    z = { [H]: l3, [I]: [{ [J]: "PartitionResult" }, "supportsFIPS"] };
    A = { [J]: "PartitionResult" };
    B = { [H]: c3, [I]: [true, { [H]: l3, [I]: [A, "supportsDualStack"] }] };
    C = [{ [H]: "isSet", [I]: [o3] }];
    D = [x3];
    E = [y];
    _data3 = { version: "1.0", parameters: { Region: m3, UseDualStack: n3, UseFIPS: n3, Endpoint: m3, UseGlobalEndpoint: n3 }, rules: [{ conditions: [{ [H]: c3, [I]: [{ [J]: "UseGlobalEndpoint" }, b3] }, { [H]: "not", [I]: C }, p3, r3, { [H]: c3, [I]: [s3, a3] }, { [H]: c3, [I]: [t3, a3] }], rules: [{ conditions: [{ [H]: d3, [I]: [q3, "ap-northeast-1"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "ap-south-1"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "ap-southeast-1"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "ap-southeast-2"] }], endpoint: u3, [G]: h3 }, w3, { conditions: [{ [H]: d3, [I]: [q3, "ca-central-1"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "eu-central-1"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "eu-north-1"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "eu-west-1"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "eu-west-2"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "eu-west-3"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "sa-east-1"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, g3] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "us-east-2"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "us-west-1"] }], endpoint: u3, [G]: h3 }, { conditions: [{ [H]: d3, [I]: [q3, "us-west-2"] }], endpoint: u3, [G]: h3 }, { endpoint: { url: i3, properties: { authSchemes: [{ name: e3, signingName: f3, signingRegion: "{Region}" }] }, headers: v3 }, [G]: h3 }], [G]: j3 }, { conditions: C, rules: [{ conditions: D, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [G]: k3 }, { conditions: E, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [G]: k3 }, { endpoint: { url: o3, properties: v3, headers: v3 }, [G]: h3 }], [G]: j3 }, { conditions: [p3], rules: [{ conditions: [r3], rules: [{ conditions: [x3, y], rules: [{ conditions: [{ [H]: c3, [I]: [b3, z] }, B], rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v3, headers: v3 }, [G]: h3 }], [G]: j3 }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [G]: k3 }], [G]: j3 }, { conditions: D, rules: [{ conditions: [{ [H]: c3, [I]: [z, b3] }], rules: [{ conditions: [{ [H]: d3, [I]: [{ [H]: l3, [I]: [A, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://sts.{Region}.amazonaws.com", properties: v3, headers: v3 }, [G]: h3 }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", properties: v3, headers: v3 }, [G]: h3 }], [G]: j3 }, { error: "FIPS is enabled but this partition does not support FIPS", [G]: k3 }], [G]: j3 }, { conditions: E, rules: [{ conditions: [B], rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: v3, headers: v3 }, [G]: h3 }], [G]: j3 }, { error: "DualStack is enabled but this partition does not support DualStack", [G]: k3 }], [G]: j3 }, w3, { endpoint: { url: i3, properties: v3, headers: v3 }, [G]: h3 }], [G]: j3 }], [G]: j3 }, { error: "Invalid Configuration: Missing Region", [G]: k3 }] };
    ruleSet3 = _data3;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver3;
var init_endpointResolver3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/endpoint/endpointResolver.js"() {
    "use strict";
    init_dist_es9();
    init_dist_es8();
    init_ruleset3();
    defaultEndpointResolver3 = (endpointParams, context = {}) => {
      return resolveEndpoint(ruleSet3, {
        endpointParams,
        logger: context.logger
      });
    };
    customEndpointFunctions.aws = awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.shared.js
var getRuntimeConfig5;
var init_runtimeConfig_shared3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.shared.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es35();
    init_dist_es33();
    init_dist_es17();
    init_dist_es26();
    init_dist_es25();
    init_httpAuthSchemeProvider4();
    init_endpointResolver3();
    getRuntimeConfig5 = (config) => {
      return {
        apiVersion: "2011-06-15",
        base64Decoder: config?.base64Decoder ?? fromBase64,
        base64Encoder: config?.base64Encoder ?? toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver3,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultSTSHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new NoOpLogger(),
        serviceId: config?.serviceId ?? "STS",
        urlParser: config?.urlParser ?? parseUrl,
        utf8Decoder: config?.utf8Decoder ?? fromUtf84,
        utf8Encoder: config?.utf8Encoder ?? toUtf84
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.js
var getRuntimeConfig6;
var init_runtimeConfig3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.js"() {
    "use strict";
    init_package4();
    init_dist_es38();
    init_dist_es55();
    init_dist_es42();
    init_dist_es13();
    init_dist_es35();
    init_dist_es43();
    init_dist_es34();
    init_dist_es15();
    init_dist_es29();
    init_dist_es44();
    init_dist_es21();
    init_runtimeConfig_shared3();
    init_dist_es33();
    init_dist_es45();
    init_dist_es33();
    getRuntimeConfig6 = (config) => {
      emitWarningIfUnsupportedVersion(process.version);
      const defaultsMode = resolveDefaultsModeConfig(config);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig5(config);
      emitWarningIfUnsupportedVersion2(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default4.version }),
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4") || (async (idProps) => await defaultProvider(idProps?.__config || {})()),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        maxAttempts: config?.maxAttempts ?? loadConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? loadConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? loadConfig({
          ...NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? loadConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration3, resolveHttpAuthRuntimeConfig3;
var init_httpAuthExtensionConfiguration3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/auth/httpAuthExtensionConfiguration.js"() {
    "use strict";
    getHttpAuthExtensionConfiguration3 = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index2 = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index2 === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index2, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    resolveHttpAuthRuntimeConfig3 = (config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeExtensions.js
var asPartial3, resolveRuntimeExtensions3;
var init_runtimeExtensions3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/runtimeExtensions.js"() {
    "use strict";
    init_dist_es46();
    init_dist_es4();
    init_dist_es33();
    init_httpAuthExtensionConfiguration3();
    asPartial3 = (t6) => t6;
    resolveRuntimeExtensions3 = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial3(getAwsRegionExtensionConfiguration(runtimeConfig)),
        ...asPartial3(getDefaultExtensionConfiguration(runtimeConfig)),
        ...asPartial3(getHttpHandlerExtensionConfiguration(runtimeConfig)),
        ...asPartial3(getHttpAuthExtensionConfiguration3(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
        ...resolveDefaultRuntimeConfig(extensionConfiguration),
        ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig3(extensionConfiguration)
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/STSClient.js
var STSClient;
var init_STSClient = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/STSClient.js"() {
    "use strict";
    init_dist_es5();
    init_dist_es6();
    init_dist_es7();
    init_dist_es10();
    init_dist_es13();
    init_dist_es35();
    init_dist_es36();
    init_dist_es19();
    init_dist_es34();
    init_dist_es33();
    init_httpAuthSchemeProvider4();
    init_EndpointParameters4();
    init_runtimeConfig3();
    init_runtimeExtensions3();
    STSClient = class extends Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig6(configuration || {});
        const _config_1 = resolveClientEndpointParameters4(_config_0);
        const _config_2 = resolveRegionConfig(_config_1);
        const _config_3 = resolveEndpointConfig(_config_2);
        const _config_4 = resolveRetryConfig(_config_3);
        const _config_5 = resolveHostHeaderConfig(_config_4);
        const _config_6 = resolveUserAgentConfig(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig4(_config_6);
        const _config_8 = resolveRuntimeExtensions3(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getUserAgentPlugin(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
          identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
      getDefaultHttpAuthSchemeParametersProvider() {
        return defaultSTSHttpAuthSchemeParametersProvider;
      }
      getIdentityProviderConfigProvider() {
        return async (config) => new DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        });
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js
var STSServiceException;
var init_STSServiceException = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js"() {
    "use strict";
    init_dist_es33();
    STSServiceException = class _STSServiceException extends ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException.prototype);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js
var ExpiredTokenException2, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException, IDPRejectedClaimException, InvalidIdentityTokenException, IDPCommunicationErrorException, InvalidAuthorizationMessageException, CredentialsFilterSensitiveLog, AssumeRoleResponseFilterSensitiveLog, AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog, AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog, GetFederationTokenResponseFilterSensitiveLog, GetSessionTokenResponseFilterSensitiveLog;
var init_models_03 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js"() {
    "use strict";
    init_dist_es33();
    init_STSServiceException();
    ExpiredTokenException2 = class _ExpiredTokenException extends STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
      }
    };
    MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
      }
    };
    PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
      }
    };
    RegionDisabledException = class _RegionDisabledException extends STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException.prototype);
      }
    };
    IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
      }
    };
    InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
      }
    };
    IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
      }
    };
    InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException extends STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException.prototype);
      }
    };
    CredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SecretAccessKey && { SecretAccessKey: SENSITIVE_STRING }
    });
    AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    });
    AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SAMLAssertion && { SAMLAssertion: SENSITIVE_STRING }
    });
    AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    });
    AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.WebIdentityToken && { WebIdentityToken: SENSITIVE_STRING }
    });
    AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    });
    GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    });
    GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js
var se_AssumeRoleCommand, se_AssumeRoleWithSAMLCommand, se_AssumeRoleWithWebIdentityCommand, se_DecodeAuthorizationMessageCommand, se_GetAccessKeyInfoCommand, se_GetCallerIdentityCommand, se_GetFederationTokenCommand, se_GetSessionTokenCommand, de_AssumeRoleCommand, de_AssumeRoleWithSAMLCommand, de_AssumeRoleWithWebIdentityCommand, de_DecodeAuthorizationMessageCommand, de_GetAccessKeyInfoCommand, de_GetCallerIdentityCommand, de_GetFederationTokenCommand, de_GetSessionTokenCommand, de_CommandError3, de_ExpiredTokenExceptionRes2, de_IDPCommunicationErrorExceptionRes, de_IDPRejectedClaimExceptionRes, de_InvalidAuthorizationMessageExceptionRes, de_InvalidIdentityTokenExceptionRes, de_MalformedPolicyDocumentExceptionRes, de_PackedPolicyTooLargeExceptionRes, de_RegionDisabledExceptionRes, se_AssumeRoleRequest, se_AssumeRoleWithSAMLRequest, se_AssumeRoleWithWebIdentityRequest, se_DecodeAuthorizationMessageRequest, se_GetAccessKeyInfoRequest, se_GetCallerIdentityRequest, se_GetFederationTokenRequest, se_GetSessionTokenRequest, se_policyDescriptorListType, se_PolicyDescriptorType, se_ProvidedContext, se_ProvidedContextsListType, se_Tag, se_tagKeyListType, se_tagListType, de_AssumedRoleUser, de_AssumeRoleResponse, de_AssumeRoleWithSAMLResponse, de_AssumeRoleWithWebIdentityResponse, de_Credentials, de_DecodeAuthorizationMessageResponse, de_ExpiredTokenException, de_FederatedUser, de_GetAccessKeyInfoResponse, de_GetCallerIdentityResponse, de_GetFederationTokenResponse, de_GetSessionTokenResponse, de_IDPCommunicationErrorException, de_IDPRejectedClaimException, de_InvalidAuthorizationMessageException, de_InvalidIdentityTokenException, de_MalformedPolicyDocumentException, de_PackedPolicyTooLargeException, de_RegionDisabledException, deserializeMetadata4, throwDefaultError4, buildHttpRpcRequest, SHARED_HEADERS, _, _A, _AKI, _AR, _ARI, _ARU, _ARWSAML, _ARWWI, _Ac, _Ar, _Au, _C, _CA, _DAM, _DM, _DS, _E, _EI, _EM, _FU, _FUI, _GAKI, _GCI, _GFT, _GST, _I, _K, _N, _NQ, _P, _PA, _PAr, _PAro, _PC, _PI, _PPS, _Pr, _RA, _RSN, _S, _SAK, _SAMLA, _SFWIT, _SI, _SN, _ST, _STe, _T, _TC, _TTK, _UI, _V, _Va, _WIT, _a, _m, buildFormUrlencodedString, loadQueryErrorCode;
var init_Aws_query = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es4();
    init_dist_es33();
    init_models_03();
    init_STSServiceException();
    se_AssumeRoleCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleRequest(input, context),
        [_A]: _AR,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    se_AssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithSAMLRequest(input, context),
        [_A]: _ARWSAML,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    se_AssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_AssumeRoleWithWebIdentityRequest(input, context),
        [_A]: _ARWWI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    se_DecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_DecodeAuthorizationMessageRequest(input, context),
        [_A]: _DAM,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    se_GetAccessKeyInfoCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetAccessKeyInfoRequest(input, context),
        [_A]: _GAKI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    se_GetCallerIdentityCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetCallerIdentityRequest(input, context),
        [_A]: _GCI,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    se_GetFederationTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetFederationTokenRequest(input, context),
        [_A]: _GFT,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    se_GetSessionTokenCommand = async (input, context) => {
      const headers = SHARED_HEADERS;
      let body;
      body = buildFormUrlencodedString({
        ...se_GetSessionTokenRequest(input, context),
        [_A]: _GST,
        [_V]: _
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    de_AssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata4(output),
        ...contents
      };
      return response;
    };
    de_AssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata4(output),
        ...contents
      };
      return response;
    };
    de_AssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata4(output),
        ...contents
      };
      return response;
    };
    de_DecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata4(output),
        ...contents
      };
      return response;
    };
    de_GetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata4(output),
        ...contents
      };
      return response;
    };
    de_GetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata4(output),
        ...contents
      };
      return response;
    };
    de_GetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata4(output),
        ...contents
      };
      return response;
    };
    de_GetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError3(output, context);
      }
      const data = await parseXmlBody(output.body, context);
      let contents = {};
      contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata4(output),
        ...contents
      };
      return response;
    };
    de_CommandError3 = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseXmlErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await de_ExpiredTokenExceptionRes2(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await de_RegionDisabledExceptionRes(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError4({
            output,
            parsedBody: parsedBody.Error,
            errorCode
          });
      }
    };
    de_ExpiredTokenExceptionRes2 = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_ExpiredTokenException(body.Error, context);
      const exception = new ExpiredTokenException2({
        $metadata: deserializeMetadata4(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPCommunicationErrorException(body.Error, context);
      const exception = new IDPCommunicationErrorException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_IDPRejectedClaimException(body.Error, context);
      const exception = new IDPRejectedClaimException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);
      const exception = new InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_InvalidIdentityTokenException(body.Error, context);
      const exception = new InvalidIdentityTokenException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_MalformedPolicyDocumentException(body.Error, context);
      const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_PackedPolicyTooLargeException(body.Error, context);
      const exception = new PackedPolicyTooLargeException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_RegionDisabledExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = de_RegionDisabledException(body.Error, context);
      const exception = new RegionDisabledException({
        $metadata: deserializeMetadata4(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    se_AssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (input[_T]?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_TTK] != null) {
        const memberEntries = se_tagKeyListType(input[_TTK], context);
        if (input[_TTK]?.length === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_EI] != null) {
        entries[_EI] = input[_EI];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      if (input[_SI] != null) {
        entries[_SI] = input[_SI];
      }
      if (input[_PC] != null) {
        const memberEntries = se_ProvidedContextsListType(input[_PC], context);
        if (input[_PC]?.length === 0) {
          entries.ProvidedContexts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ProvidedContexts.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    se_AssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_PAr] != null) {
        entries[_PAr] = input[_PAr];
      }
      if (input[_SAMLA] != null) {
        entries[_SAMLA] = input[_SAMLA];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    };
    se_AssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input[_RA] != null) {
        entries[_RA] = input[_RA];
      }
      if (input[_RSN] != null) {
        entries[_RSN] = input[_RSN];
      }
      if (input[_WIT] != null) {
        entries[_WIT] = input[_WIT];
      }
      if (input[_PI] != null) {
        entries[_PI] = input[_PI];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      return entries;
    };
    se_DecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input[_EM] != null) {
        entries[_EM] = input[_EM];
      }
      return entries;
    };
    se_GetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input[_AKI] != null) {
        entries[_AKI] = input[_AKI];
      }
      return entries;
    };
    se_GetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    se_GetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input[_N] != null) {
        entries[_N] = input[_N];
      }
      if (input[_P] != null) {
        entries[_P] = input[_P];
      }
      if (input[_PA] != null) {
        const memberEntries = se_policyDescriptorListType(input[_PA], context);
        if (input[_PA]?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_T] != null) {
        const memberEntries = se_tagListType(input[_T], context);
        if (input[_T]?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    se_GetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input[_DS] != null) {
        entries[_DS] = input[_DS];
      }
      if (input[_SN] != null) {
        entries[_SN] = input[_SN];
      }
      if (input[_TC] != null) {
        entries[_TC] = input[_TC];
      }
      return entries;
    };
    se_policyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_PolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    se_PolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input[_a] != null) {
        entries[_a] = input[_a];
      }
      return entries;
    };
    se_ProvidedContext = (input, context) => {
      const entries = {};
      if (input[_PAro] != null) {
        entries[_PAro] = input[_PAro];
      }
      if (input[_CA] != null) {
        entries[_CA] = input[_CA];
      }
      return entries;
    };
    se_ProvidedContextsListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_ProvidedContext(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    se_Tag = (input, context) => {
      const entries = {};
      if (input[_K] != null) {
        entries[_K] = input[_K];
      }
      if (input[_Va] != null) {
        entries[_Va] = input[_Va];
      }
      return entries;
    };
    se_tagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    se_tagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    de_AssumedRoleUser = (output, context) => {
      const contents = {};
      if (output[_ARI] != null) {
        contents[_ARI] = expectString(output[_ARI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = expectString(output[_Ar]);
      }
      return contents;
    };
    de_AssumeRoleResponse = (output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = strictParseInt32(output[_PPS]);
      }
      if (output[_SI] != null) {
        contents[_SI] = expectString(output[_SI]);
      }
      return contents;
    };
    de_AssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = strictParseInt32(output[_PPS]);
      }
      if (output[_S] != null) {
        contents[_S] = expectString(output[_S]);
      }
      if (output[_ST] != null) {
        contents[_ST] = expectString(output[_ST]);
      }
      if (output[_I] != null) {
        contents[_I] = expectString(output[_I]);
      }
      if (output[_Au] != null) {
        contents[_Au] = expectString(output[_Au]);
      }
      if (output[_NQ] != null) {
        contents[_NQ] = expectString(output[_NQ]);
      }
      if (output[_SI] != null) {
        contents[_SI] = expectString(output[_SI]);
      }
      return contents;
    };
    de_AssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_SFWIT] != null) {
        contents[_SFWIT] = expectString(output[_SFWIT]);
      }
      if (output[_ARU] != null) {
        contents[_ARU] = de_AssumedRoleUser(output[_ARU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = strictParseInt32(output[_PPS]);
      }
      if (output[_Pr] != null) {
        contents[_Pr] = expectString(output[_Pr]);
      }
      if (output[_Au] != null) {
        contents[_Au] = expectString(output[_Au]);
      }
      if (output[_SI] != null) {
        contents[_SI] = expectString(output[_SI]);
      }
      return contents;
    };
    de_Credentials = (output, context) => {
      const contents = {};
      if (output[_AKI] != null) {
        contents[_AKI] = expectString(output[_AKI]);
      }
      if (output[_SAK] != null) {
        contents[_SAK] = expectString(output[_SAK]);
      }
      if (output[_STe] != null) {
        contents[_STe] = expectString(output[_STe]);
      }
      if (output[_E] != null) {
        contents[_E] = expectNonNull(parseRfc3339DateTimeWithOffset(output[_E]));
      }
      return contents;
    };
    de_DecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {};
      if (output[_DM] != null) {
        contents[_DM] = expectString(output[_DM]);
      }
      return contents;
    };
    de_ExpiredTokenException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = expectString(output[_m]);
      }
      return contents;
    };
    de_FederatedUser = (output, context) => {
      const contents = {};
      if (output[_FUI] != null) {
        contents[_FUI] = expectString(output[_FUI]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = expectString(output[_Ar]);
      }
      return contents;
    };
    de_GetAccessKeyInfoResponse = (output, context) => {
      const contents = {};
      if (output[_Ac] != null) {
        contents[_Ac] = expectString(output[_Ac]);
      }
      return contents;
    };
    de_GetCallerIdentityResponse = (output, context) => {
      const contents = {};
      if (output[_UI] != null) {
        contents[_UI] = expectString(output[_UI]);
      }
      if (output[_Ac] != null) {
        contents[_Ac] = expectString(output[_Ac]);
      }
      if (output[_Ar] != null) {
        contents[_Ar] = expectString(output[_Ar]);
      }
      return contents;
    };
    de_GetFederationTokenResponse = (output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      if (output[_FU] != null) {
        contents[_FU] = de_FederatedUser(output[_FU], context);
      }
      if (output[_PPS] != null) {
        contents[_PPS] = strictParseInt32(output[_PPS]);
      }
      return contents;
    };
    de_GetSessionTokenResponse = (output, context) => {
      const contents = {};
      if (output[_C] != null) {
        contents[_C] = de_Credentials(output[_C], context);
      }
      return contents;
    };
    de_IDPCommunicationErrorException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = expectString(output[_m]);
      }
      return contents;
    };
    de_IDPRejectedClaimException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = expectString(output[_m]);
      }
      return contents;
    };
    de_InvalidAuthorizationMessageException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = expectString(output[_m]);
      }
      return contents;
    };
    de_InvalidIdentityTokenException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = expectString(output[_m]);
      }
      return contents;
    };
    de_MalformedPolicyDocumentException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = expectString(output[_m]);
      }
      return contents;
    };
    de_PackedPolicyTooLargeException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = expectString(output[_m]);
      }
      return contents;
    };
    de_RegionDisabledException = (output, context) => {
      const contents = {};
      if (output[_m] != null) {
        contents[_m] = expectString(output[_m]);
      }
      return contents;
    };
    deserializeMetadata4 = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    throwDefaultError4 = withBaseException(STSServiceException);
    buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new HttpRequest(contents);
    };
    SHARED_HEADERS = {
      "content-type": "application/x-www-form-urlencoded"
    };
    _ = "2011-06-15";
    _A = "Action";
    _AKI = "AccessKeyId";
    _AR = "AssumeRole";
    _ARI = "AssumedRoleId";
    _ARU = "AssumedRoleUser";
    _ARWSAML = "AssumeRoleWithSAML";
    _ARWWI = "AssumeRoleWithWebIdentity";
    _Ac = "Account";
    _Ar = "Arn";
    _Au = "Audience";
    _C = "Credentials";
    _CA = "ContextAssertion";
    _DAM = "DecodeAuthorizationMessage";
    _DM = "DecodedMessage";
    _DS = "DurationSeconds";
    _E = "Expiration";
    _EI = "ExternalId";
    _EM = "EncodedMessage";
    _FU = "FederatedUser";
    _FUI = "FederatedUserId";
    _GAKI = "GetAccessKeyInfo";
    _GCI = "GetCallerIdentity";
    _GFT = "GetFederationToken";
    _GST = "GetSessionToken";
    _I = "Issuer";
    _K = "Key";
    _N = "Name";
    _NQ = "NameQualifier";
    _P = "Policy";
    _PA = "PolicyArns";
    _PAr = "PrincipalArn";
    _PAro = "ProviderArn";
    _PC = "ProvidedContexts";
    _PI = "ProviderId";
    _PPS = "PackedPolicySize";
    _Pr = "Provider";
    _RA = "RoleArn";
    _RSN = "RoleSessionName";
    _S = "Subject";
    _SAK = "SecretAccessKey";
    _SAMLA = "SAMLAssertion";
    _SFWIT = "SubjectFromWebIdentityToken";
    _SI = "SourceIdentity";
    _SN = "SerialNumber";
    _ST = "SubjectType";
    _STe = "SessionToken";
    _T = "Tags";
    _TC = "TokenCode";
    _TTK = "TransitiveTagKeys";
    _UI = "UserId";
    _V = "Version";
    _Va = "Value";
    _WIT = "WebIdentityToken";
    _a = "arn";
    _m = "message";
    buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => extendedEncodeURIComponent(key) + "=" + extendedEncodeURIComponent(value)).join("&");
    loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleCommand.js
var AssumeRoleCommand;
var init_AssumeRoleCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters4();
    init_models_03();
    init_Aws_query();
    AssumeRoleCommand = class extends Command.classBuilder().ep({
      ...commonParams4
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRole", {}).n("STSClient", "AssumeRoleCommand").f(void 0, AssumeRoleResponseFilterSensitiveLog).ser(se_AssumeRoleCommand).de(de_AssumeRoleCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithSAMLCommand.js
var AssumeRoleWithSAMLCommand;
var init_AssumeRoleWithSAMLCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithSAMLCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters4();
    init_models_03();
    init_Aws_query();
    AssumeRoleWithSAMLCommand = class extends Command.classBuilder().ep({
      ...commonParams4
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithSAML", {}).n("STSClient", "AssumeRoleWithSAMLCommand").f(AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog).ser(se_AssumeRoleWithSAMLCommand).de(de_AssumeRoleWithSAMLCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js
var AssumeRoleWithWebIdentityCommand;
var init_AssumeRoleWithWebIdentityCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters4();
    init_models_03();
    init_Aws_query();
    AssumeRoleWithWebIdentityCommand = class extends Command.classBuilder().ep({
      ...commonParams4
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "AssumeRoleWithWebIdentity", {}).n("STSClient", "AssumeRoleWithWebIdentityCommand").f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog).ser(se_AssumeRoleWithWebIdentityCommand).de(de_AssumeRoleWithWebIdentityCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/DecodeAuthorizationMessageCommand.js
var DecodeAuthorizationMessageCommand;
var init_DecodeAuthorizationMessageCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/DecodeAuthorizationMessageCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters4();
    init_Aws_query();
    DecodeAuthorizationMessageCommand = class extends Command.classBuilder().ep({
      ...commonParams4
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "DecodeAuthorizationMessage", {}).n("STSClient", "DecodeAuthorizationMessageCommand").f(void 0, void 0).ser(se_DecodeAuthorizationMessageCommand).de(de_DecodeAuthorizationMessageCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/GetAccessKeyInfoCommand.js
var GetAccessKeyInfoCommand;
var init_GetAccessKeyInfoCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/GetAccessKeyInfoCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters4();
    init_Aws_query();
    GetAccessKeyInfoCommand = class extends Command.classBuilder().ep({
      ...commonParams4
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetAccessKeyInfo", {}).n("STSClient", "GetAccessKeyInfoCommand").f(void 0, void 0).ser(se_GetAccessKeyInfoCommand).de(de_GetAccessKeyInfoCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/GetCallerIdentityCommand.js
var GetCallerIdentityCommand;
var init_GetCallerIdentityCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/GetCallerIdentityCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters4();
    init_Aws_query();
    GetCallerIdentityCommand = class extends Command.classBuilder().ep({
      ...commonParams4
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetCallerIdentity", {}).n("STSClient", "GetCallerIdentityCommand").f(void 0, void 0).ser(se_GetCallerIdentityCommand).de(de_GetCallerIdentityCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/GetFederationTokenCommand.js
var GetFederationTokenCommand;
var init_GetFederationTokenCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/GetFederationTokenCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters4();
    init_models_03();
    init_Aws_query();
    GetFederationTokenCommand = class extends Command.classBuilder().ep({
      ...commonParams4
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetFederationToken", {}).n("STSClient", "GetFederationTokenCommand").f(void 0, GetFederationTokenResponseFilterSensitiveLog).ser(se_GetFederationTokenCommand).de(de_GetFederationTokenCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/GetSessionTokenCommand.js
var GetSessionTokenCommand;
var init_GetSessionTokenCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/GetSessionTokenCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters4();
    init_models_03();
    init_Aws_query();
    GetSessionTokenCommand = class extends Command.classBuilder().ep({
      ...commonParams4
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSSecurityTokenServiceV20110615", "GetSessionToken", {}).n("STSClient", "GetSessionTokenCommand").f(void 0, GetSessionTokenResponseFilterSensitiveLog).ser(se_GetSessionTokenCommand).de(de_GetSessionTokenCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/STS.js
var commands3, STS;
var init_STS = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/STS.js"() {
    "use strict";
    init_dist_es33();
    init_AssumeRoleCommand();
    init_AssumeRoleWithSAMLCommand();
    init_AssumeRoleWithWebIdentityCommand();
    init_DecodeAuthorizationMessageCommand();
    init_GetAccessKeyInfoCommand();
    init_GetCallerIdentityCommand();
    init_GetFederationTokenCommand();
    init_GetSessionTokenCommand();
    init_STSClient();
    commands3 = {
      AssumeRoleCommand,
      AssumeRoleWithSAMLCommand,
      AssumeRoleWithWebIdentityCommand,
      DecodeAuthorizationMessageCommand,
      GetAccessKeyInfoCommand,
      GetCallerIdentityCommand,
      GetFederationTokenCommand,
      GetSessionTokenCommand
    };
    STS = class extends STSClient {
    };
    createAggregatedClient(commands3, STS);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/index.js
var init_commands3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/commands/index.js"() {
    "use strict";
    init_AssumeRoleCommand();
    init_AssumeRoleWithSAMLCommand();
    init_AssumeRoleWithWebIdentityCommand();
    init_DecodeAuthorizationMessageCommand();
    init_GetAccessKeyInfoCommand();
    init_GetCallerIdentityCommand();
    init_GetFederationTokenCommand();
    init_GetSessionTokenCommand();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/models/index.js
var init_models3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/models/index.js"() {
    "use strict";
    init_models_03();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js
var ASSUME_ROLE_DEFAULT_REGION, resolveRegion, getDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity;
var init_defaultStsRoleAssumers = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js"() {
    "use strict";
    init_AssumeRoleCommand();
    init_AssumeRoleWithWebIdentityCommand();
    ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    resolveRegion = async (_region, _parentRegion, credentialProviderLogger) => {
      const region = typeof _region === "function" ? await _region() : _region;
      const parentRegion = typeof _parentRegion === "function" ? await _parentRegion() : _parentRegion;
      credentialProviderLogger?.debug?.("@aws-sdk/client-sts::resolveRegion", "accepting first of:", `${region} (provider)`, `${parentRegion} (parent client)`, `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`);
      return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;
    };
    getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger: logger2 = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger } = stsOptions;
          const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);
          stsClient = new stsClientCtor({
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: resolvedRegion,
            requestHandler,
            logger: logger2
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
          credentialScope: Credentials.CredentialScope
        };
      };
    };
    getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger: logger2 = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger } = stsOptions;
          const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);
          stsClient = new stsClientCtor({
            region: resolvedRegion,
            requestHandler,
            logger: logger2
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
          credentialScope: Credentials.CredentialScope
        };
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js
var getCustomizableStsClientCtor, getDefaultRoleAssumer2, getDefaultRoleAssumerWithWebIdentity2, decorateDefaultCredentialProvider;
var init_defaultRoleAssumers = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js"() {
    "use strict";
    init_defaultStsRoleAssumers();
    init_STSClient();
    getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    getDefaultRoleAssumer2 = (stsOptions = {}, stsPlugins) => getDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));
    getDefaultRoleAssumerWithWebIdentity2 = (stsOptions = {}, stsPlugins) => getDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));
    decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: getDefaultRoleAssumer2(input),
      roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity2(input),
      ...input
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/index.js
var dist_es_exports7 = {};
__export(dist_es_exports7, {
  $Command: () => Command,
  AssumeRoleCommand: () => AssumeRoleCommand,
  AssumeRoleResponseFilterSensitiveLog: () => AssumeRoleResponseFilterSensitiveLog,
  AssumeRoleWithSAMLCommand: () => AssumeRoleWithSAMLCommand,
  AssumeRoleWithSAMLRequestFilterSensitiveLog: () => AssumeRoleWithSAMLRequestFilterSensitiveLog,
  AssumeRoleWithSAMLResponseFilterSensitiveLog: () => AssumeRoleWithSAMLResponseFilterSensitiveLog,
  AssumeRoleWithWebIdentityCommand: () => AssumeRoleWithWebIdentityCommand,
  AssumeRoleWithWebIdentityRequestFilterSensitiveLog: () => AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
  AssumeRoleWithWebIdentityResponseFilterSensitiveLog: () => AssumeRoleWithWebIdentityResponseFilterSensitiveLog,
  CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
  DecodeAuthorizationMessageCommand: () => DecodeAuthorizationMessageCommand,
  ExpiredTokenException: () => ExpiredTokenException2,
  GetAccessKeyInfoCommand: () => GetAccessKeyInfoCommand,
  GetCallerIdentityCommand: () => GetCallerIdentityCommand,
  GetFederationTokenCommand: () => GetFederationTokenCommand,
  GetFederationTokenResponseFilterSensitiveLog: () => GetFederationTokenResponseFilterSensitiveLog,
  GetSessionTokenCommand: () => GetSessionTokenCommand,
  GetSessionTokenResponseFilterSensitiveLog: () => GetSessionTokenResponseFilterSensitiveLog,
  IDPCommunicationErrorException: () => IDPCommunicationErrorException,
  IDPRejectedClaimException: () => IDPRejectedClaimException,
  InvalidAuthorizationMessageException: () => InvalidAuthorizationMessageException,
  InvalidIdentityTokenException: () => InvalidIdentityTokenException,
  MalformedPolicyDocumentException: () => MalformedPolicyDocumentException,
  PackedPolicyTooLargeException: () => PackedPolicyTooLargeException,
  RegionDisabledException: () => RegionDisabledException,
  STS: () => STS,
  STSClient: () => STSClient,
  STSServiceException: () => STSServiceException,
  __Client: () => Client,
  decorateDefaultCredentialProvider: () => decorateDefaultCredentialProvider,
  getDefaultRoleAssumer: () => getDefaultRoleAssumer2,
  getDefaultRoleAssumerWithWebIdentity: () => getDefaultRoleAssumerWithWebIdentity2
});
var init_dist_es51 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/client-sts/dist-es/index.js"() {
    "use strict";
    init_STSClient();
    init_STS();
    init_commands3();
    init_models3();
    init_defaultRoleAssumers();
    init_STSServiceException();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js
var isAssumeRoleProfile, isAssumeRoleWithSourceProfile, isCredentialSourceProfile, resolveAssumeRoleCredentials;
var init_resolveAssumeRoleCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js"() {
    "use strict";
    init_dist_es2();
    init_dist_es14();
    init_resolveCredentialSource();
    init_resolveProfileData();
    isAssumeRoleProfile = (arg, { profile = "default", logger: logger2 } = {}) => {
      return Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg, { profile, logger: logger2 }) || isCredentialSourceProfile(arg, { profile, logger: logger2 }));
    };
    isAssumeRoleWithSourceProfile = (arg, { profile, logger: logger2 }) => {
      const withSourceProfile = typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
      if (withSourceProfile) {
        logger2?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);
      }
      return withSourceProfile;
    };
    isCredentialSourceProfile = (arg, { profile, logger: logger2 }) => {
      const withProviderProfile = typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
      if (withProviderProfile) {
        logger2?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);
      }
      return withProviderProfile;
    };
    resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      options.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        const { getDefaultRoleAssumer: getDefaultRoleAssumer3 } = await Promise.resolve().then(() => (init_dist_es51(), dist_es_exports7));
        options.roleAssumer = getDefaultRoleAssumer3({
          ...options.clientConfig,
          credentialProviderLogger: options.logger,
          parentClientConfig: options?.parentClientConfig
        }, options.clientPlugins);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${getProfileName(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), { logger: options.logger });
      }
      options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);
      const sourceCredsProvider = source_profile ? resolveProfileData(source_profile, {
        ...profiles,
        [source_profile]: {
          ...profiles[source_profile],
          role_arn: data.role_arn ?? profiles[source_profile].role_arn
        }
      }, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (await resolveCredentialSource(data.credential_source, profileName, options.logger)(options))();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id,
        DurationSeconds: parseInt(data.duration_seconds || "3600", 10)
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js
var getValidatedProcessCredentials;
var init_getValidatedProcessCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js"() {
    "use strict";
    getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) },
        ...data.CredentialScope && { credentialScope: data.CredentialScope }
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js
var import_child_process, import_util4, resolveProcessCredentials;
var init_resolveProcessCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js"() {
    "use strict";
    init_dist_es2();
    import_child_process = require("child_process");
    import_util4 = require("util");
    init_getValidatedProcessCredentials();
    resolveProcessCredentials = async (profileName, profiles, logger2) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, import_util4.promisify)(import_child_process.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials(profileName, data);
          } catch (error2) {
            throw new CredentialsProviderError(error2.message, { logger: logger2 });
          }
        } else {
          throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger: logger2 });
        }
      } else {
        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {
          logger: logger2
        });
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js
var fromProcess;
var init_fromProcess = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js"() {
    "use strict";
    init_dist_es14();
    init_resolveProcessCredentials();
    fromProcess = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");
      const profiles = await parseKnownFiles(init);
      return resolveProcessCredentials(getProfileName(init), profiles, init.logger);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/index.js
var dist_es_exports8 = {};
__export(dist_es_exports8, {
  fromProcess: () => fromProcess
});
var init_dist_es52 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/index.js"() {
    "use strict";
    init_fromProcess();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js
var isProcessProfile, resolveProcessCredentials2;
var init_resolveProcessCredentials2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js"() {
    "use strict";
    isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    resolveProcessCredentials2 = async (options, profile) => Promise.resolve().then(() => (init_dist_es52(), dist_es_exports8)).then(({ fromProcess: fromProcess3 }) => fromProcess3({
      ...options,
      profile
    })());
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js
var resolveSsoCredentials, isSsoProfile2;
var init_resolveSsoCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js"() {
    "use strict";
    resolveSsoCredentials = async (profile, options = {}) => {
      const { fromSSO: fromSSO3 } = await Promise.resolve().then(() => (init_dist_es50(), dist_es_exports6));
      return fromSSO3({
        profile,
        logger: options.logger
      })();
    };
    isSsoProfile2 = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js
var isStaticCredsProfile, resolveStaticCredentials;
var init_resolveStaticCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js"() {
    "use strict";
    isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    resolveStaticCredentials = (profile, options) => {
      options?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");
      return Promise.resolve({
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
        credentialScope: profile.aws_credential_scope
      });
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.587.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js
var fromWebToken;
var init_fromWebToken = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.587.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js"() {
    "use strict";
    fromWebToken = (init) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;
      let { roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        const { getDefaultRoleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity3 } = await Promise.resolve().then(() => (init_dist_es51(), dist_es_exports7));
        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity3({
          ...init.clientConfig,
          credentialProviderLogger: init.logger,
          parentClientConfig: init.parentClientConfig
        }, init.clientPlugins);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.587.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js
var import_fs5, ENV_TOKEN_FILE, ENV_ROLE_ARN, ENV_ROLE_SESSION_NAME, fromTokenFile;
var init_fromTokenFile = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.587.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js"() {
    "use strict";
    init_dist_es2();
    import_fs5 = require("fs");
    init_fromWebToken();
    ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    ENV_ROLE_ARN = "AWS_ROLE_ARN";
    ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    fromTokenFile = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");
      const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];
      const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];
      const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new CredentialsProviderError("Web identity configuration not specified", {
          logger: init.logger
        });
      }
      return fromWebToken({
        ...init,
        webIdentityToken: (0, import_fs5.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.587.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js
var dist_es_exports9 = {};
__export(dist_es_exports9, {
  fromTokenFile: () => fromTokenFile,
  fromWebToken: () => fromWebToken
});
var init_dist_es53 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.587.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js"() {
    "use strict";
    init_fromTokenFile();
    init_fromWebToken();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js
var isWebIdentityProfile, resolveWebIdentityCredentials;
var init_resolveWebIdentityCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js"() {
    "use strict";
    isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    resolveWebIdentityCredentials = async (profile, options) => Promise.resolve().then(() => (init_dist_es53(), dist_es_exports9)).then(({ fromTokenFile: fromTokenFile3 }) => fromTokenFile3({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
      logger: options.logger,
      parentClientConfig: options.parentClientConfig
    })());
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js
var resolveProfileData;
var init_resolveProfileData = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js"() {
    "use strict";
    init_dist_es2();
    init_resolveAssumeRoleCredentials();
    init_resolveProcessCredentials2();
    init_resolveSsoCredentials();
    init_resolveStaticCredentials();
    init_resolveWebIdentityCredentials();
    resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
      }
      if (isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials(data, options);
      }
      if (isProcessProfile(data)) {
        return resolveProcessCredentials2(options, profileName);
      }
      if (isSsoProfile2(data)) {
        return await resolveSsoCredentials(profileName, options);
      }
      throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js
var fromIni;
var init_fromIni = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js"() {
    "use strict";
    init_dist_es14();
    init_resolveProfileData();
    fromIni = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");
      const profiles = await parseKnownFiles(init);
      return resolveProfileData(getProfileName(init), profiles, init);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js
var dist_es_exports10 = {};
__export(dist_es_exports10, {
  fromIni: () => fromIni
});
var init_dist_es54 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js"() {
    "use strict";
    init_fromIni();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js
var defaultProvider, credentialsWillNeedRefresh, credentialsTreatedAsExpired;
var init_defaultProvider = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js"() {
    "use strict";
    init_dist_es39();
    init_dist_es2();
    init_dist_es14();
    init_remoteProvider();
    defaultProvider = (init = {}) => memoize(chain(...init.profile || process.env[ENV_PROFILE] ? [] : [
      async () => {
        init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv");
        return fromEnv2(init)();
      }
    ], async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        throw new CredentialsProviderError("Skipping SSO provider in default chain (inputs do not include SSO fields).", { logger: init.logger });
      }
      const { fromSSO: fromSSO3 } = await Promise.resolve().then(() => (init_dist_es50(), dist_es_exports6));
      return fromSSO3(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");
      const { fromIni: fromIni3 } = await Promise.resolve().then(() => (init_dist_es54(), dist_es_exports10));
      return fromIni3(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");
      const { fromProcess: fromProcess3 } = await Promise.resolve().then(() => (init_dist_es52(), dist_es_exports8));
      return fromProcess3(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");
      const { fromTokenFile: fromTokenFile3 } = await Promise.resolve().then(() => (init_dist_es53(), dist_es_exports9));
      return fromTokenFile3(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider");
      return (await remoteProvider(init))();
    }, async () => {
      throw new CredentialsProviderError("Could not load credentials from any providers", {
        tryNextLink: false,
        logger: init.logger
      });
    }), credentialsTreatedAsExpired, credentialsWillNeedRefresh);
    credentialsWillNeedRefresh = (credentials) => credentials?.expiration !== void 0;
    credentialsTreatedAsExpired = (credentials) => credentials?.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/index.js
var init_dist_es55 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/index.js"() {
    "use strict";
    init_defaultProvider();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/ruleset.js
var s4, t4, u4, v5, a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, _data4, ruleSet4;
var init_ruleset4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/ruleset.js"() {
    "use strict";
    s4 = "required";
    t4 = "fn";
    u4 = "argv";
    v5 = "ref";
    a4 = true;
    b4 = "isSet";
    c4 = "booleanEquals";
    d4 = "error";
    e4 = "endpoint";
    f4 = "tree";
    g4 = "PartitionResult";
    h4 = { [s4]: false, "type": "String" };
    i4 = { [s4]: true, "default": false, "type": "Boolean" };
    j4 = { [v5]: "Endpoint" };
    k4 = { [t4]: c4, [u4]: [{ [v5]: "UseFIPS" }, true] };
    l4 = { [t4]: c4, [u4]: [{ [v5]: "UseDualStack" }, true] };
    m4 = {};
    n4 = { [t4]: "getAttr", [u4]: [{ [v5]: g4 }, "supportsFIPS"] };
    o4 = { [t4]: c4, [u4]: [true, { [t4]: "getAttr", [u4]: [{ [v5]: g4 }, "supportsDualStack"] }] };
    p4 = [k4];
    q4 = [l4];
    r4 = [{ [v5]: "Region" }];
    _data4 = { version: "1.0", parameters: { Region: h4, UseDualStack: i4, UseFIPS: i4, Endpoint: h4 }, rules: [{ conditions: [{ [t4]: b4, [u4]: [j4] }], rules: [{ conditions: p4, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d4 }, { conditions: q4, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d4 }, { endpoint: { url: j4, properties: m4, headers: m4 }, type: e4 }], type: f4 }, { conditions: [{ [t4]: b4, [u4]: r4 }], rules: [{ conditions: [{ [t4]: "aws.partition", [u4]: r4, assign: g4 }], rules: [{ conditions: [k4, l4], rules: [{ conditions: [{ [t4]: c4, [u4]: [a4, n4] }, o4], rules: [{ endpoint: { url: "https://cognito-identity-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m4, headers: m4 }, type: e4 }], type: f4 }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d4 }], type: f4 }, { conditions: p4, rules: [{ conditions: [{ [t4]: c4, [u4]: [n4, a4] }], rules: [{ endpoint: { url: "https://cognito-identity-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m4, headers: m4 }, type: e4 }], type: f4 }, { error: "FIPS is enabled but this partition does not support FIPS", type: d4 }], type: f4 }, { conditions: q4, rules: [{ conditions: [o4], rules: [{ endpoint: { url: "https://cognito-identity.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m4, headers: m4 }, type: e4 }], type: f4 }, { error: "DualStack is enabled but this partition does not support DualStack", type: d4 }], type: f4 }, { endpoint: { url: "https://cognito-identity.{Region}.{PartitionResult#dnsSuffix}", properties: m4, headers: m4 }, type: e4 }], type: f4 }], type: f4 }, { error: "Invalid Configuration: Missing Region", type: d4 }] };
    ruleSet4 = _data4;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver4;
var init_endpointResolver4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/endpoint/endpointResolver.js"() {
    "use strict";
    init_dist_es9();
    init_dist_es8();
    init_ruleset4();
    defaultEndpointResolver4 = (endpointParams, context = {}) => {
      return resolveEndpoint(ruleSet4, {
        endpointParams,
        logger: context.logger
      });
    };
    customEndpointFunctions.aws = awsEndpointFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.shared.js
var getRuntimeConfig7;
var init_runtimeConfig_shared4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.shared.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es35();
    init_dist_es33();
    init_dist_es17();
    init_dist_es26();
    init_dist_es25();
    init_httpAuthSchemeProvider();
    init_endpointResolver4();
    getRuntimeConfig7 = (config) => {
      return {
        apiVersion: "2014-06-30",
        base64Decoder: config?.base64Decoder ?? fromBase64,
        base64Encoder: config?.base64Encoder ?? toBase64,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver4,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultCognitoIdentityHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
          {
            schemeId: "aws.auth#sigv4",
            identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
            signer: new AwsSdkSigV4Signer()
          },
          {
            schemeId: "smithy.api#noAuth",
            identityProvider: (ipc) => ipc.getIdentityProvider("smithy.api#noAuth") || (async () => ({})),
            signer: new NoAuthSigner()
          }
        ],
        logger: config?.logger ?? new NoOpLogger(),
        serviceId: config?.serviceId ?? "Cognito Identity",
        urlParser: config?.urlParser ?? parseUrl,
        utf8Decoder: config?.utf8Decoder ?? fromUtf84,
        utf8Encoder: config?.utf8Encoder ?? toUtf84
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.js
var getRuntimeConfig8;
var init_runtimeConfig4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeConfig.js"() {
    "use strict";
    init_package();
    init_dist_es38();
    init_dist_es55();
    init_dist_es42();
    init_dist_es13();
    init_dist_es43();
    init_dist_es34();
    init_dist_es15();
    init_dist_es29();
    init_dist_es44();
    init_dist_es21();
    init_runtimeConfig_shared4();
    init_dist_es33();
    init_dist_es45();
    init_dist_es33();
    getRuntimeConfig8 = (config) => {
      emitWarningIfUnsupportedVersion(process.version);
      const defaultsMode = resolveDefaultsModeConfig(config);
      const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
      const clientSharedValues = getRuntimeConfig7(config);
      emitWarningIfUnsupportedVersion2(process.version);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? defaultProvider,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
        maxAttempts: config?.maxAttempts ?? loadConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? loadConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: NodeHttpHandler.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? loadConfig({
          ...NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? loadConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration4, resolveHttpAuthRuntimeConfig4;
var init_httpAuthExtensionConfiguration4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/auth/httpAuthExtensionConfiguration.js"() {
    "use strict";
    getHttpAuthExtensionConfiguration4 = (runtimeConfig) => {
      const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
      let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
      let _credentials = runtimeConfig.credentials;
      return {
        setHttpAuthScheme(httpAuthScheme) {
          const index2 = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
          if (index2 === -1) {
            _httpAuthSchemes.push(httpAuthScheme);
          } else {
            _httpAuthSchemes.splice(index2, 1, httpAuthScheme);
          }
        },
        httpAuthSchemes() {
          return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
          _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
          return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
          _credentials = credentials;
        },
        credentials() {
          return _credentials;
        }
      };
    };
    resolveHttpAuthRuntimeConfig4 = (config) => {
      return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials()
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeExtensions.js
var asPartial4, resolveRuntimeExtensions4;
var init_runtimeExtensions4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/runtimeExtensions.js"() {
    "use strict";
    init_dist_es46();
    init_dist_es4();
    init_dist_es33();
    init_httpAuthExtensionConfiguration4();
    asPartial4 = (t6) => t6;
    resolveRuntimeExtensions4 = (runtimeConfig, extensions) => {
      const extensionConfiguration = {
        ...asPartial4(getAwsRegionExtensionConfiguration(runtimeConfig)),
        ...asPartial4(getDefaultExtensionConfiguration(runtimeConfig)),
        ...asPartial4(getHttpHandlerExtensionConfiguration(runtimeConfig)),
        ...asPartial4(getHttpAuthExtensionConfiguration4(runtimeConfig))
      };
      extensions.forEach((extension) => extension.configure(extensionConfiguration));
      return {
        ...runtimeConfig,
        ...resolveAwsRegionExtensionConfiguration(extensionConfiguration),
        ...resolveDefaultRuntimeConfig(extensionConfiguration),
        ...resolveHttpHandlerRuntimeConfig(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig4(extensionConfiguration)
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentityClient.js
var CognitoIdentityClient;
var init_CognitoIdentityClient = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentityClient.js"() {
    "use strict";
    init_dist_es5();
    init_dist_es6();
    init_dist_es7();
    init_dist_es10();
    init_dist_es13();
    init_dist_es35();
    init_dist_es36();
    init_dist_es19();
    init_dist_es34();
    init_dist_es33();
    init_httpAuthSchemeProvider();
    init_EndpointParameters();
    init_runtimeConfig4();
    init_runtimeExtensions4();
    CognitoIdentityClient = class extends Client {
      constructor(...[configuration]) {
        const _config_0 = getRuntimeConfig8(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = resolveRegionConfig(_config_1);
        const _config_3 = resolveEndpointConfig(_config_2);
        const _config_4 = resolveRetryConfig(_config_3);
        const _config_5 = resolveHostHeaderConfig(_config_4);
        const _config_6 = resolveUserAgentConfig(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions4(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use(getRetryPlugin(this.config));
        this.middlewareStack.use(getContentLengthPlugin(this.config));
        this.middlewareStack.use(getHostHeaderPlugin(this.config));
        this.middlewareStack.use(getLoggerPlugin(this.config));
        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(getUserAgentPlugin(this.config));
        this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
          httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
          identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
        }));
        this.middlewareStack.use(getHttpSigningPlugin(this.config));
      }
      destroy() {
        super.destroy();
      }
      getDefaultHttpAuthSchemeParametersProvider() {
        return defaultCognitoIdentityHttpAuthSchemeParametersProvider;
      }
      getIdentityProviderConfigProvider() {
        return async (config) => new DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        });
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/models/CognitoIdentityServiceException.js
var CognitoIdentityServiceException;
var init_CognitoIdentityServiceException = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/models/CognitoIdentityServiceException.js"() {
    "use strict";
    init_dist_es33();
    CognitoIdentityServiceException = class _CognitoIdentityServiceException extends ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _CognitoIdentityServiceException.prototype);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js
var InternalErrorException, InvalidParameterException, LimitExceededException, NotAuthorizedException, ResourceConflictException, TooManyRequestsException2, ResourceNotFoundException2, ExternalServiceException, InvalidIdentityPoolConfigurationException, DeveloperUserAlreadyRegisteredException, ConcurrentModificationException;
var init_models_04 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/models/models_0.js"() {
    "use strict";
    init_CognitoIdentityServiceException();
    InternalErrorException = class _InternalErrorException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "InternalErrorException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalErrorException.prototype);
      }
    };
    InvalidParameterException = class _InvalidParameterException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "InvalidParameterException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidParameterException.prototype);
      }
    };
    LimitExceededException = class _LimitExceededException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "LimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _LimitExceededException.prototype);
      }
    };
    NotAuthorizedException = class _NotAuthorizedException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "NotAuthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "NotAuthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NotAuthorizedException.prototype);
      }
    };
    ResourceConflictException = class _ResourceConflictException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "ResourceConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceConflictException.prototype);
      }
    };
    TooManyRequestsException2 = class _TooManyRequestsException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      }
    };
    ResourceNotFoundException2 = class _ResourceNotFoundException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    ExternalServiceException = class _ExternalServiceException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "ExternalServiceException",
          $fault: "client",
          ...opts
        });
        this.name = "ExternalServiceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExternalServiceException.prototype);
      }
    };
    InvalidIdentityPoolConfigurationException = class _InvalidIdentityPoolConfigurationException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityPoolConfigurationException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityPoolConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityPoolConfigurationException.prototype);
      }
    };
    DeveloperUserAlreadyRegisteredException = class _DeveloperUserAlreadyRegisteredException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "DeveloperUserAlreadyRegisteredException",
          $fault: "client",
          ...opts
        });
        this.name = "DeveloperUserAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _DeveloperUserAlreadyRegisteredException.prototype);
      }
    };
    ConcurrentModificationException = class _ConcurrentModificationException extends CognitoIdentityServiceException {
      constructor(opts) {
        super({
          name: "ConcurrentModificationException",
          $fault: "client",
          ...opts
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ConcurrentModificationException.prototype);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js
function sharedHeaders(operation) {
  return {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": `AWSCognitoIdentityService.${operation}`
  };
}
var se_CreateIdentityPoolCommand, se_DeleteIdentitiesCommand, se_DeleteIdentityPoolCommand, se_DescribeIdentityCommand, se_DescribeIdentityPoolCommand, se_GetCredentialsForIdentityCommand, se_GetIdCommand, se_GetIdentityPoolRolesCommand, se_GetOpenIdTokenCommand, se_GetOpenIdTokenForDeveloperIdentityCommand, se_GetPrincipalTagAttributeMapCommand, se_ListIdentitiesCommand, se_ListIdentityPoolsCommand, se_ListTagsForResourceCommand, se_LookupDeveloperIdentityCommand, se_MergeDeveloperIdentitiesCommand, se_SetIdentityPoolRolesCommand, se_SetPrincipalTagAttributeMapCommand, se_TagResourceCommand, se_UnlinkDeveloperIdentityCommand, se_UnlinkIdentityCommand, se_UntagResourceCommand, se_UpdateIdentityPoolCommand, de_CreateIdentityPoolCommand, de_DeleteIdentitiesCommand, de_DeleteIdentityPoolCommand, de_DescribeIdentityCommand, de_DescribeIdentityPoolCommand, de_GetCredentialsForIdentityCommand, de_GetIdCommand, de_GetIdentityPoolRolesCommand, de_GetOpenIdTokenCommand, de_GetOpenIdTokenForDeveloperIdentityCommand, de_GetPrincipalTagAttributeMapCommand, de_ListIdentitiesCommand, de_ListIdentityPoolsCommand, de_ListTagsForResourceCommand, de_LookupDeveloperIdentityCommand, de_MergeDeveloperIdentitiesCommand, de_SetIdentityPoolRolesCommand, de_SetPrincipalTagAttributeMapCommand, de_TagResourceCommand, de_UnlinkDeveloperIdentityCommand, de_UnlinkIdentityCommand, de_UntagResourceCommand, de_UpdateIdentityPoolCommand, de_CommandError4, de_ConcurrentModificationExceptionRes, de_DeveloperUserAlreadyRegisteredExceptionRes, de_ExternalServiceExceptionRes, de_InternalErrorExceptionRes, de_InvalidIdentityPoolConfigurationExceptionRes, de_InvalidParameterExceptionRes, de_LimitExceededExceptionRes, de_NotAuthorizedExceptionRes, de_ResourceConflictExceptionRes, de_ResourceNotFoundExceptionRes2, de_TooManyRequestsExceptionRes2, de_Credentials2, de_GetCredentialsForIdentityResponse, de_IdentitiesList, de_IdentityDescription, de_ListIdentitiesResponse, deserializeMetadata5, throwDefaultError5, buildHttpRpcRequest2;
var init_Aws_json1_1 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/protocols/Aws_json1_1.js"() {
    "use strict";
    init_dist_es38();
    init_dist_es4();
    init_dist_es33();
    init_CognitoIdentityServiceException();
    init_models_04();
    se_CreateIdentityPoolCommand = async (input, context) => {
      const headers = sharedHeaders("CreateIdentityPool");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_DeleteIdentitiesCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteIdentities");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_DeleteIdentityPoolCommand = async (input, context) => {
      const headers = sharedHeaders("DeleteIdentityPool");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_DescribeIdentityCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeIdentity");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_DescribeIdentityPoolCommand = async (input, context) => {
      const headers = sharedHeaders("DescribeIdentityPool");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_GetCredentialsForIdentityCommand = async (input, context) => {
      const headers = sharedHeaders("GetCredentialsForIdentity");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_GetIdCommand = async (input, context) => {
      const headers = sharedHeaders("GetId");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_GetIdentityPoolRolesCommand = async (input, context) => {
      const headers = sharedHeaders("GetIdentityPoolRoles");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_GetOpenIdTokenCommand = async (input, context) => {
      const headers = sharedHeaders("GetOpenIdToken");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_GetOpenIdTokenForDeveloperIdentityCommand = async (input, context) => {
      const headers = sharedHeaders("GetOpenIdTokenForDeveloperIdentity");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_GetPrincipalTagAttributeMapCommand = async (input, context) => {
      const headers = sharedHeaders("GetPrincipalTagAttributeMap");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_ListIdentitiesCommand = async (input, context) => {
      const headers = sharedHeaders("ListIdentities");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_ListIdentityPoolsCommand = async (input, context) => {
      const headers = sharedHeaders("ListIdentityPools");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_ListTagsForResourceCommand = async (input, context) => {
      const headers = sharedHeaders("ListTagsForResource");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_LookupDeveloperIdentityCommand = async (input, context) => {
      const headers = sharedHeaders("LookupDeveloperIdentity");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_MergeDeveloperIdentitiesCommand = async (input, context) => {
      const headers = sharedHeaders("MergeDeveloperIdentities");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_SetIdentityPoolRolesCommand = async (input, context) => {
      const headers = sharedHeaders("SetIdentityPoolRoles");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_SetPrincipalTagAttributeMapCommand = async (input, context) => {
      const headers = sharedHeaders("SetPrincipalTagAttributeMap");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_TagResourceCommand = async (input, context) => {
      const headers = sharedHeaders("TagResource");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_UnlinkDeveloperIdentityCommand = async (input, context) => {
      const headers = sharedHeaders("UnlinkDeveloperIdentity");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_UnlinkIdentityCommand = async (input, context) => {
      const headers = sharedHeaders("UnlinkIdentity");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_UntagResourceCommand = async (input, context) => {
      const headers = sharedHeaders("UntagResource");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    se_UpdateIdentityPoolCommand = async (input, context) => {
      const headers = sharedHeaders("UpdateIdentityPool");
      let body;
      body = JSON.stringify(_json(input));
      return buildHttpRpcRequest2(context, headers, "/", void 0, body);
    };
    de_CreateIdentityPoolCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_DeleteIdentitiesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_DeleteIdentityPoolCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata5(output)
      };
      return response;
    };
    de_DescribeIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = de_IdentityDescription(data, context);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_DescribeIdentityPoolCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_GetCredentialsForIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = de_GetCredentialsForIdentityResponse(data, context);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_GetIdCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_GetIdentityPoolRolesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_GetOpenIdTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_GetOpenIdTokenForDeveloperIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_GetPrincipalTagAttributeMapCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_ListIdentitiesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = de_ListIdentitiesResponse(data, context);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_ListIdentityPoolsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_ListTagsForResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_LookupDeveloperIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_MergeDeveloperIdentitiesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_SetIdentityPoolRolesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata5(output)
      };
      return response;
    };
    de_SetPrincipalTagAttributeMapCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_UnlinkDeveloperIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata5(output)
      };
      return response;
    };
    de_UnlinkIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata5(output)
      };
      return response;
    };
    de_UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_UpdateIdentityPoolCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return de_CommandError4(output, context);
      }
      const data = await parseJsonBody(output.body, context);
      let contents = {};
      contents = _json(data);
      const response = {
        $metadata: deserializeMetadata5(output),
        ...contents
      };
      return response;
    };
    de_CommandError4 = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseJsonErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
          throw await de_InternalErrorExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
          throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cognitoidentity#LimitExceededException":
          throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
          throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
          throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
          throw await de_TooManyRequestsExceptionRes2(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
          throw await de_ResourceNotFoundExceptionRes2(parsedOutput, context);
        case "ExternalServiceException":
        case "com.amazonaws.cognitoidentity#ExternalServiceException":
          throw await de_ExternalServiceExceptionRes(parsedOutput, context);
        case "InvalidIdentityPoolConfigurationException":
        case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":
          throw await de_InvalidIdentityPoolConfigurationExceptionRes(parsedOutput, context);
        case "DeveloperUserAlreadyRegisteredException":
        case "com.amazonaws.cognitoidentity#DeveloperUserAlreadyRegisteredException":
          throw await de_DeveloperUserAlreadyRegisteredExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
          throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          return throwDefaultError5({
            output,
            parsedBody,
            errorCode
          });
      }
    };
    de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_DeveloperUserAlreadyRegisteredExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new DeveloperUserAlreadyRegisteredException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_ExternalServiceExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new ExternalServiceException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_InternalErrorExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new InternalErrorException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_InvalidIdentityPoolConfigurationExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new InvalidIdentityPoolConfigurationException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new InvalidParameterException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_LimitExceededExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new LimitExceededException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_NotAuthorizedExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new NotAuthorizedException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new ResourceConflictException({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_ResourceNotFoundExceptionRes2 = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new ResourceNotFoundException2({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_TooManyRequestsExceptionRes2 = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = _json(body);
      const exception = new TooManyRequestsException2({
        $metadata: deserializeMetadata5(parsedOutput),
        ...deserialized
      });
      return decorateServiceException(exception, body);
    };
    de_Credentials2 = (output, context) => {
      return take(output, {
        AccessKeyId: expectString,
        Expiration: (_3) => expectNonNull(parseEpochTimestamp(expectNumber(_3))),
        SecretKey: expectString,
        SessionToken: expectString
      });
    };
    de_GetCredentialsForIdentityResponse = (output, context) => {
      return take(output, {
        Credentials: (_3) => de_Credentials2(_3, context),
        IdentityId: expectString
      });
    };
    de_IdentitiesList = (output, context) => {
      const retVal = (output || []).filter((e6) => e6 != null).map((entry) => {
        return de_IdentityDescription(entry, context);
      });
      return retVal;
    };
    de_IdentityDescription = (output, context) => {
      return take(output, {
        CreationDate: (_3) => expectNonNull(parseEpochTimestamp(expectNumber(_3))),
        IdentityId: expectString,
        LastModifiedDate: (_3) => expectNonNull(parseEpochTimestamp(expectNumber(_3))),
        Logins: _json
      });
    };
    de_ListIdentitiesResponse = (output, context) => {
      return take(output, {
        Identities: (_3) => de_IdentitiesList(_3, context),
        IdentityPoolId: expectString,
        NextToken: expectString
      });
    };
    deserializeMetadata5 = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    throwDefaultError5 = withBaseException(CognitoIdentityServiceException);
    buildHttpRpcRequest2 = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new HttpRequest(contents);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/CreateIdentityPoolCommand.js
var CreateIdentityPoolCommand;
var init_CreateIdentityPoolCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/CreateIdentityPoolCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    CreateIdentityPoolCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "CreateIdentityPool", {}).n("CognitoIdentityClient", "CreateIdentityPoolCommand").f(void 0, void 0).ser(se_CreateIdentityPoolCommand).de(de_CreateIdentityPoolCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentitiesCommand.js
var DeleteIdentitiesCommand;
var init_DeleteIdentitiesCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentitiesCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    DeleteIdentitiesCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "DeleteIdentities", {}).n("CognitoIdentityClient", "DeleteIdentitiesCommand").f(void 0, void 0).ser(se_DeleteIdentitiesCommand).de(de_DeleteIdentitiesCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentityPoolCommand.js
var DeleteIdentityPoolCommand;
var init_DeleteIdentityPoolCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DeleteIdentityPoolCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    DeleteIdentityPoolCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "DeleteIdentityPool", {}).n("CognitoIdentityClient", "DeleteIdentityPoolCommand").f(void 0, void 0).ser(se_DeleteIdentityPoolCommand).de(de_DeleteIdentityPoolCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityCommand.js
var DescribeIdentityCommand;
var init_DescribeIdentityCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    DescribeIdentityCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "DescribeIdentity", {}).n("CognitoIdentityClient", "DescribeIdentityCommand").f(void 0, void 0).ser(se_DescribeIdentityCommand).de(de_DescribeIdentityCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityPoolCommand.js
var DescribeIdentityPoolCommand;
var init_DescribeIdentityPoolCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/DescribeIdentityPoolCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    DescribeIdentityPoolCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "DescribeIdentityPool", {}).n("CognitoIdentityClient", "DescribeIdentityPoolCommand").f(void 0, void 0).ser(se_DescribeIdentityPoolCommand).de(de_DescribeIdentityPoolCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetCredentialsForIdentityCommand.js
var GetCredentialsForIdentityCommand;
var init_GetCredentialsForIdentityCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetCredentialsForIdentityCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    GetCredentialsForIdentityCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "GetCredentialsForIdentity", {}).n("CognitoIdentityClient", "GetCredentialsForIdentityCommand").f(void 0, void 0).ser(se_GetCredentialsForIdentityCommand).de(de_GetCredentialsForIdentityCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdCommand.js
var GetIdCommand;
var init_GetIdCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    GetIdCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "GetId", {}).n("CognitoIdentityClient", "GetIdCommand").f(void 0, void 0).ser(se_GetIdCommand).de(de_GetIdCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdentityPoolRolesCommand.js
var GetIdentityPoolRolesCommand;
var init_GetIdentityPoolRolesCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetIdentityPoolRolesCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    GetIdentityPoolRolesCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "GetIdentityPoolRoles", {}).n("CognitoIdentityClient", "GetIdentityPoolRolesCommand").f(void 0, void 0).ser(se_GetIdentityPoolRolesCommand).de(de_GetIdentityPoolRolesCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenCommand.js
var GetOpenIdTokenCommand;
var init_GetOpenIdTokenCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    GetOpenIdTokenCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "GetOpenIdToken", {}).n("CognitoIdentityClient", "GetOpenIdTokenCommand").f(void 0, void 0).ser(se_GetOpenIdTokenCommand).de(de_GetOpenIdTokenCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenForDeveloperIdentityCommand.js
var GetOpenIdTokenForDeveloperIdentityCommand;
var init_GetOpenIdTokenForDeveloperIdentityCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetOpenIdTokenForDeveloperIdentityCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    GetOpenIdTokenForDeveloperIdentityCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "GetOpenIdTokenForDeveloperIdentity", {}).n("CognitoIdentityClient", "GetOpenIdTokenForDeveloperIdentityCommand").f(void 0, void 0).ser(se_GetOpenIdTokenForDeveloperIdentityCommand).de(de_GetOpenIdTokenForDeveloperIdentityCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetPrincipalTagAttributeMapCommand.js
var GetPrincipalTagAttributeMapCommand;
var init_GetPrincipalTagAttributeMapCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/GetPrincipalTagAttributeMapCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    GetPrincipalTagAttributeMapCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "GetPrincipalTagAttributeMap", {}).n("CognitoIdentityClient", "GetPrincipalTagAttributeMapCommand").f(void 0, void 0).ser(se_GetPrincipalTagAttributeMapCommand).de(de_GetPrincipalTagAttributeMapCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentitiesCommand.js
var ListIdentitiesCommand;
var init_ListIdentitiesCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentitiesCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    ListIdentitiesCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "ListIdentities", {}).n("CognitoIdentityClient", "ListIdentitiesCommand").f(void 0, void 0).ser(se_ListIdentitiesCommand).de(de_ListIdentitiesCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentityPoolsCommand.js
var ListIdentityPoolsCommand;
var init_ListIdentityPoolsCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListIdentityPoolsCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    ListIdentityPoolsCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "ListIdentityPools", {}).n("CognitoIdentityClient", "ListIdentityPoolsCommand").f(void 0, void 0).ser(se_ListIdentityPoolsCommand).de(de_ListIdentityPoolsCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListTagsForResourceCommand.js
var ListTagsForResourceCommand;
var init_ListTagsForResourceCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/ListTagsForResourceCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    ListTagsForResourceCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "ListTagsForResource", {}).n("CognitoIdentityClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/LookupDeveloperIdentityCommand.js
var LookupDeveloperIdentityCommand;
var init_LookupDeveloperIdentityCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/LookupDeveloperIdentityCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    LookupDeveloperIdentityCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "LookupDeveloperIdentity", {}).n("CognitoIdentityClient", "LookupDeveloperIdentityCommand").f(void 0, void 0).ser(se_LookupDeveloperIdentityCommand).de(de_LookupDeveloperIdentityCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/MergeDeveloperIdentitiesCommand.js
var MergeDeveloperIdentitiesCommand;
var init_MergeDeveloperIdentitiesCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/MergeDeveloperIdentitiesCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    MergeDeveloperIdentitiesCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "MergeDeveloperIdentities", {}).n("CognitoIdentityClient", "MergeDeveloperIdentitiesCommand").f(void 0, void 0).ser(se_MergeDeveloperIdentitiesCommand).de(de_MergeDeveloperIdentitiesCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetIdentityPoolRolesCommand.js
var SetIdentityPoolRolesCommand;
var init_SetIdentityPoolRolesCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetIdentityPoolRolesCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    SetIdentityPoolRolesCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "SetIdentityPoolRoles", {}).n("CognitoIdentityClient", "SetIdentityPoolRolesCommand").f(void 0, void 0).ser(se_SetIdentityPoolRolesCommand).de(de_SetIdentityPoolRolesCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetPrincipalTagAttributeMapCommand.js
var SetPrincipalTagAttributeMapCommand;
var init_SetPrincipalTagAttributeMapCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/SetPrincipalTagAttributeMapCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    SetPrincipalTagAttributeMapCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "SetPrincipalTagAttributeMap", {}).n("CognitoIdentityClient", "SetPrincipalTagAttributeMapCommand").f(void 0, void 0).ser(se_SetPrincipalTagAttributeMapCommand).de(de_SetPrincipalTagAttributeMapCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/TagResourceCommand.js
var TagResourceCommand;
var init_TagResourceCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/TagResourceCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    TagResourceCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "TagResource", {}).n("CognitoIdentityClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkDeveloperIdentityCommand.js
var UnlinkDeveloperIdentityCommand;
var init_UnlinkDeveloperIdentityCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkDeveloperIdentityCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    UnlinkDeveloperIdentityCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "UnlinkDeveloperIdentity", {}).n("CognitoIdentityClient", "UnlinkDeveloperIdentityCommand").f(void 0, void 0).ser(se_UnlinkDeveloperIdentityCommand).de(de_UnlinkDeveloperIdentityCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkIdentityCommand.js
var UnlinkIdentityCommand;
var init_UnlinkIdentityCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UnlinkIdentityCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    UnlinkIdentityCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "UnlinkIdentity", {}).n("CognitoIdentityClient", "UnlinkIdentityCommand").f(void 0, void 0).ser(se_UnlinkIdentityCommand).de(de_UnlinkIdentityCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UntagResourceCommand.js
var UntagResourceCommand;
var init_UntagResourceCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UntagResourceCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    UntagResourceCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "UntagResource", {}).n("CognitoIdentityClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UpdateIdentityPoolCommand.js
var UpdateIdentityPoolCommand;
var init_UpdateIdentityPoolCommand = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/UpdateIdentityPoolCommand.js"() {
    "use strict";
    init_dist_es19();
    init_dist_es18();
    init_dist_es33();
    init_EndpointParameters();
    init_Aws_json1_1();
    UpdateIdentityPoolCommand = class extends Command.classBuilder().ep({
      ...commonParams
    }).m(function(Command2, cs, config, o6) {
      return [
        getSerdePlugin(config, this.serialize, this.deserialize),
        getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
      ];
    }).s("AWSCognitoIdentityService", "UpdateIdentityPool", {}).n("CognitoIdentityClient", "UpdateIdentityPoolCommand").f(void 0, void 0).ser(se_UpdateIdentityPoolCommand).de(de_UpdateIdentityPoolCommand).build() {
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentity.js
var commands4, CognitoIdentity;
var init_CognitoIdentity = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/CognitoIdentity.js"() {
    "use strict";
    init_dist_es33();
    init_CognitoIdentityClient();
    init_CreateIdentityPoolCommand();
    init_DeleteIdentitiesCommand();
    init_DeleteIdentityPoolCommand();
    init_DescribeIdentityCommand();
    init_DescribeIdentityPoolCommand();
    init_GetCredentialsForIdentityCommand();
    init_GetIdCommand();
    init_GetIdentityPoolRolesCommand();
    init_GetOpenIdTokenCommand();
    init_GetOpenIdTokenForDeveloperIdentityCommand();
    init_GetPrincipalTagAttributeMapCommand();
    init_ListIdentitiesCommand();
    init_ListIdentityPoolsCommand();
    init_ListTagsForResourceCommand();
    init_LookupDeveloperIdentityCommand();
    init_MergeDeveloperIdentitiesCommand();
    init_SetIdentityPoolRolesCommand();
    init_SetPrincipalTagAttributeMapCommand();
    init_TagResourceCommand();
    init_UnlinkDeveloperIdentityCommand();
    init_UnlinkIdentityCommand();
    init_UntagResourceCommand();
    init_UpdateIdentityPoolCommand();
    commands4 = {
      CreateIdentityPoolCommand,
      DeleteIdentitiesCommand,
      DeleteIdentityPoolCommand,
      DescribeIdentityCommand,
      DescribeIdentityPoolCommand,
      GetCredentialsForIdentityCommand,
      GetIdCommand,
      GetIdentityPoolRolesCommand,
      GetOpenIdTokenCommand,
      GetOpenIdTokenForDeveloperIdentityCommand,
      GetPrincipalTagAttributeMapCommand,
      ListIdentitiesCommand,
      ListIdentityPoolsCommand,
      ListTagsForResourceCommand,
      LookupDeveloperIdentityCommand,
      MergeDeveloperIdentitiesCommand,
      SetIdentityPoolRolesCommand,
      SetPrincipalTagAttributeMapCommand,
      TagResourceCommand,
      UnlinkDeveloperIdentityCommand,
      UnlinkIdentityCommand,
      UntagResourceCommand,
      UpdateIdentityPoolCommand
    };
    CognitoIdentity = class extends CognitoIdentityClient {
    };
    createAggregatedClient(commands4, CognitoIdentity);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/index.js
var init_commands4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/commands/index.js"() {
    "use strict";
    init_CreateIdentityPoolCommand();
    init_DeleteIdentitiesCommand();
    init_DeleteIdentityPoolCommand();
    init_DescribeIdentityCommand();
    init_DescribeIdentityPoolCommand();
    init_GetCredentialsForIdentityCommand();
    init_GetIdCommand();
    init_GetIdentityPoolRolesCommand();
    init_GetOpenIdTokenCommand();
    init_GetOpenIdTokenForDeveloperIdentityCommand();
    init_GetPrincipalTagAttributeMapCommand();
    init_ListIdentitiesCommand();
    init_ListIdentityPoolsCommand();
    init_ListTagsForResourceCommand();
    init_LookupDeveloperIdentityCommand();
    init_MergeDeveloperIdentitiesCommand();
    init_SetIdentityPoolRolesCommand();
    init_SetPrincipalTagAttributeMapCommand();
    init_TagResourceCommand();
    init_UnlinkDeveloperIdentityCommand();
    init_UnlinkIdentityCommand();
    init_UntagResourceCommand();
    init_UpdateIdentityPoolCommand();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/Interfaces.js
var init_Interfaces2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/Interfaces.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/ListIdentityPoolsPaginator.js
var paginateListIdentityPools;
var init_ListIdentityPoolsPaginator = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/ListIdentityPoolsPaginator.js"() {
    "use strict";
    init_dist_es35();
    init_CognitoIdentityClient();
    init_ListIdentityPoolsCommand();
    paginateListIdentityPools = createPaginator(CognitoIdentityClient, ListIdentityPoolsCommand, "NextToken", "NextToken", "MaxResults");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/index.js
var init_pagination3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/pagination/index.js"() {
    "use strict";
    init_Interfaces2();
    init_ListIdentityPoolsPaginator();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/models/index.js
var init_models4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/models/index.js"() {
    "use strict";
    init_models_04();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/index.js
var init_dist_es56 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+client-cognito-identity@3.596.0/node_modules/@aws-sdk/client-cognito-identity/dist-es/index.js"() {
    "use strict";
    init_CognitoIdentityClient();
    init_CognitoIdentity();
    init_commands4();
    init_pagination3();
    init_models4();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/loadCognitoIdentity.js
var loadCognitoIdentity_exports = {};
__export(loadCognitoIdentity_exports, {
  CognitoIdentityClient: () => CognitoIdentityClient,
  GetCredentialsForIdentityCommand: () => GetCredentialsForIdentityCommand,
  GetIdCommand: () => GetIdCommand
});
var init_loadCognitoIdentity = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/loadCognitoIdentity.js"() {
    "use strict";
    init_dist_es56();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentity.js
function fromCognitoIdentity(parameters) {
  return async () => {
    parameters.logger?.debug("@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity");
    const { GetCredentialsForIdentityCommand: GetCredentialsForIdentityCommand2, CognitoIdentityClient: CognitoIdentityClient2 } = await Promise.resolve().then(() => (init_loadCognitoIdentity(), loadCognitoIdentity_exports));
    const { Credentials: { AccessKeyId = throwOnMissingAccessKeyId(parameters.logger), Expiration, SecretKey = throwOnMissingSecretKey(parameters.logger), SessionToken } = throwOnMissingCredentials(parameters.logger) } = await (parameters.client ?? new CognitoIdentityClient2(Object.assign({}, parameters.clientConfig ?? {}, {
      region: parameters.clientConfig?.region ?? parameters.parentClientConfig?.region
    }))).send(new GetCredentialsForIdentityCommand2({
      CustomRoleArn: parameters.customRoleArn,
      IdentityId: parameters.identityId,
      Logins: parameters.logins ? await resolveLogins(parameters.logins) : void 0
    }));
    return {
      identityId: parameters.identityId,
      accessKeyId: AccessKeyId,
      secretAccessKey: SecretKey,
      sessionToken: SessionToken,
      expiration: Expiration
    };
  };
}
function throwOnMissingAccessKeyId(logger2) {
  throw new CredentialsProviderError("Response from Amazon Cognito contained no access key ID", { logger: logger2 });
}
function throwOnMissingCredentials(logger2) {
  throw new CredentialsProviderError("Response from Amazon Cognito contained no credentials", { logger: logger2 });
}
function throwOnMissingSecretKey(logger2) {
  throw new CredentialsProviderError("Response from Amazon Cognito contained no secret key", { logger: logger2 });
}
var init_fromCognitoIdentity = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentity.js"() {
    "use strict";
    init_dist_es2();
    init_resolveLogins();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js
var STORE_NAME, IndexedDbStorage;
var init_IndexedDbStorage = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js"() {
    "use strict";
    STORE_NAME = "IdentityIds";
    IndexedDbStorage = class {
      constructor(dbName = "aws:cognito-identity-ids") {
        this.dbName = dbName;
      }
      getItem(key) {
        return this.withObjectStore("readonly", (store) => {
          const req = store.get(key);
          return new Promise((resolve2) => {
            req.onerror = () => resolve2(null);
            req.onsuccess = () => resolve2(req.result ? req.result.value : null);
          });
        }).catch(() => null);
      }
      removeItem(key) {
        return this.withObjectStore("readwrite", (store) => {
          const req = store.delete(key);
          return new Promise((resolve2, reject) => {
            req.onerror = () => reject(req.error);
            req.onsuccess = () => resolve2();
          });
        });
      }
      setItem(id, value) {
        return this.withObjectStore("readwrite", (store) => {
          const req = store.put({ id, value });
          return new Promise((resolve2, reject) => {
            req.onerror = () => reject(req.error);
            req.onsuccess = () => resolve2();
          });
        });
      }
      getDb() {
        const openDbRequest = self.indexedDB.open(this.dbName, 1);
        return new Promise((resolve2, reject) => {
          openDbRequest.onsuccess = () => {
            resolve2(openDbRequest.result);
          };
          openDbRequest.onerror = () => {
            reject(openDbRequest.error);
          };
          openDbRequest.onblocked = () => {
            reject(new Error("Unable to access DB"));
          };
          openDbRequest.onupgradeneeded = () => {
            const db = openDbRequest.result;
            db.onerror = () => {
              reject(new Error("Failed to create object store"));
            };
            db.createObjectStore(STORE_NAME, { keyPath: "id" });
          };
        });
      }
      withObjectStore(mode, action) {
        return this.getDb().then((db) => {
          const tx = db.transaction(STORE_NAME, mode);
          tx.oncomplete = () => db.close();
          return new Promise((resolve2, reject) => {
            tx.onerror = () => reject(tx.error);
            resolve2(action(tx.objectStore(STORE_NAME)));
          }).catch((err) => {
            db.close();
            throw err;
          });
        });
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/InMemoryStorage.js
var InMemoryStorage;
var init_InMemoryStorage = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/InMemoryStorage.js"() {
    "use strict";
    InMemoryStorage = class {
      constructor(store = {}) {
        this.store = store;
      }
      getItem(key) {
        if (key in this.store) {
          return this.store[key];
        }
        return null;
      }
      removeItem(key) {
        delete this.store[key];
      }
      setItem(key, value) {
        this.store[key] = value;
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/localStorage.js
function localStorage() {
  if (typeof self === "object" && self.indexedDB) {
    return new IndexedDbStorage();
  }
  if (typeof window === "object" && window.localStorage) {
    return window.localStorage;
  }
  return inMemoryStorage;
}
var inMemoryStorage;
var init_localStorage = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/localStorage.js"() {
    "use strict";
    init_IndexedDbStorage();
    init_InMemoryStorage();
    inMemoryStorage = new InMemoryStorage();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js
function fromCognitoIdentityPool({ accountId, cache = localStorage(), client, clientConfig, customRoleArn, identityPoolId, logins, userIdentifier = !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : void 0, logger: logger2, parentClientConfig }) {
  logger2?.debug("@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity");
  const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : void 0;
  let provider = async () => {
    const { GetIdCommand: GetIdCommand2, CognitoIdentityClient: CognitoIdentityClient2 } = await Promise.resolve().then(() => (init_loadCognitoIdentity(), loadCognitoIdentity_exports));
    const _client = client ?? new CognitoIdentityClient2(Object.assign({}, clientConfig ?? {}, { region: clientConfig?.region ?? parentClientConfig?.region }));
    let identityId = cacheKey && await cache.getItem(cacheKey);
    if (!identityId) {
      const { IdentityId = throwOnMissingId(logger2) } = await _client.send(new GetIdCommand2({
        AccountId: accountId,
        IdentityPoolId: identityPoolId,
        Logins: logins ? await resolveLogins(logins) : void 0
      }));
      identityId = IdentityId;
      if (cacheKey) {
        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => {
        });
      }
    }
    provider = fromCognitoIdentity({
      client: _client,
      customRoleArn,
      logins,
      identityId
    });
    return provider();
  };
  return () => provider().catch(async (err) => {
    if (cacheKey) {
      Promise.resolve(cache.removeItem(cacheKey)).catch(() => {
      });
    }
    throw err;
  });
}
function throwOnMissingId(logger2) {
  throw new CredentialsProviderError("Response from Amazon Cognito contained no identity ID", { logger: logger2 });
}
var init_fromCognitoIdentityPool = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js"() {
    "use strict";
    init_dist_es2();
    init_fromCognitoIdentity();
    init_localStorage();
    init_resolveLogins();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/index.js
var init_dist_es57 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-cognito-identity@3.596.0/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/index.js"() {
    "use strict";
    init_CognitoProviderParameters();
    init_Logins();
    init_Storage();
    init_fromCognitoIdentity();
    init_fromCognitoIdentityPool();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromCognitoIdentity.js
var fromCognitoIdentity2;
var init_fromCognitoIdentity2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromCognitoIdentity.js"() {
    "use strict";
    init_dist_es57();
    fromCognitoIdentity2 = (options) => fromCognitoIdentity({
      ...options
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromCognitoIdentityPool.js
var fromCognitoIdentityPool2;
var init_fromCognitoIdentityPool2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromCognitoIdentityPool.js"() {
    "use strict";
    init_dist_es57();
    fromCognitoIdentityPool2 = (options) => fromCognitoIdentityPool({
      ...options
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromContainerMetadata.js
var fromContainerMetadata2;
var init_fromContainerMetadata2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromContainerMetadata.js"() {
    "use strict";
    init_dist_es40();
    fromContainerMetadata2 = (init) => {
      init?.logger?.debug("@smithy/credential-provider-imds", "fromContainerMetadata");
      return fromContainerMetadata(init);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromEnv.js
var fromEnv3;
var init_fromEnv3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromEnv.js"() {
    "use strict";
    init_dist_es39();
    fromEnv3 = (init) => fromEnv2(init);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromIni.js
var fromIni2;
var init_fromIni2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromIni.js"() {
    "use strict";
    init_dist_es54();
    fromIni2 = (init = {}) => fromIni({
      ...init
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromInstanceMetadata.js
var fromInstanceMetadata2;
var init_fromInstanceMetadata2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromInstanceMetadata.js"() {
    "use strict";
    init_dist_es40();
    fromInstanceMetadata2 = (init) => {
      init?.logger?.debug("@smithy/credential-provider-imds", "fromInstanceMetadata");
      return fromInstanceMetadata(init);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromNodeProviderChain.js
var fromNodeProviderChain;
var init_fromNodeProviderChain = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromNodeProviderChain.js"() {
    "use strict";
    init_dist_es55();
    fromNodeProviderChain = (init = {}) => defaultProvider({
      ...init
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromProcess.js
var fromProcess2;
var init_fromProcess2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromProcess.js"() {
    "use strict";
    init_dist_es52();
    fromProcess2 = (init) => fromProcess(init);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromSSO.js
var fromSSO2;
var init_fromSSO2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromSSO.js"() {
    "use strict";
    init_dist_es50();
    fromSSO2 = (init = {}) => {
      return fromSSO({ ...init });
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/loadSts.js
var loadSts_exports = {};
__export(loadSts_exports, {
  AssumeRoleCommand: () => AssumeRoleCommand,
  STSClient: () => STSClient
});
var init_loadSts = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/loadSts.js"() {
    "use strict";
    init_dist_es51();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromTemporaryCredentials.js
var fromTemporaryCredentials;
var init_fromTemporaryCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromTemporaryCredentials.js"() {
    "use strict";
    init_dist_es2();
    fromTemporaryCredentials = (options) => {
      let stsClient;
      return async () => {
        options.logger?.debug("@aws-sdk/credential-providers - fromTemporaryCredentials (STS)");
        const params = { ...options.params, RoleSessionName: options.params.RoleSessionName ?? "aws-sdk-js-" + Date.now() };
        if (params?.SerialNumber) {
          if (!options.mfaCodeProvider) {
            throw new CredentialsProviderError(`Temporary credential requires multi-factor authentication, but no MFA code callback was provided.`, {
              tryNextLink: false,
              logger: options.logger
            });
          }
          params.TokenCode = await options.mfaCodeProvider(params?.SerialNumber);
        }
        const { AssumeRoleCommand: AssumeRoleCommand2, STSClient: STSClient2 } = await Promise.resolve().then(() => (init_loadSts(), loadSts_exports));
        if (!stsClient)
          stsClient = new STSClient2({ ...options.clientConfig, credentials: options.masterCredentials });
        if (options.clientPlugins) {
          for (const plugin of options.clientPlugins) {
            stsClient.middlewareStack.use(plugin);
          }
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand2(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`, {
            logger: options.logger
          });
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration,
          credentialScope: Credentials.CredentialScope
        };
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromTokenFile.js
var fromTokenFile2;
var init_fromTokenFile2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromTokenFile.js"() {
    "use strict";
    init_dist_es53();
    fromTokenFile2 = (init = {}) => fromTokenFile({
      ...init
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromWebToken.js
var fromWebToken2;
var init_fromWebToken2 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/fromWebToken.js"() {
    "use strict";
    init_dist_es53();
    fromWebToken2 = (init) => fromWebToken({
      ...init
    });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/index.js
var dist_es_exports11 = {};
__export(dist_es_exports11, {
  fromCognitoIdentity: () => fromCognitoIdentity2,
  fromCognitoIdentityPool: () => fromCognitoIdentityPool2,
  fromContainerMetadata: () => fromContainerMetadata2,
  fromEnv: () => fromEnv3,
  fromHttp: () => fromHttp,
  fromIni: () => fromIni2,
  fromInstanceMetadata: () => fromInstanceMetadata2,
  fromNodeProviderChain: () => fromNodeProviderChain,
  fromProcess: () => fromProcess2,
  fromSSO: () => fromSSO2,
  fromTemporaryCredentials: () => fromTemporaryCredentials,
  fromTokenFile: () => fromTokenFile2,
  fromWebToken: () => fromWebToken2
});
var init_dist_es58 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-providers@3.596.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-providers/dist-es/index.js"() {
    "use strict";
    init_fromCognitoIdentity2();
    init_fromCognitoIdentityPool2();
    init_fromContainerMetadata2();
    init_fromEnv3();
    init_dist_es41();
    init_fromIni2();
    init_fromInstanceMetadata2();
    init_fromNodeProviderChain();
    init_fromProcess2();
    init_fromSSO2();
    init_fromTemporaryCredentials();
    init_fromTokenFile2();
    init_fromWebToken2();
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/abort.js
var init_abort2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/abort.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/auth.js
var HttpAuthLocation2;
var init_auth3 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/auth.js"() {
    "use strict";
    (function(HttpAuthLocation3) {
      HttpAuthLocation3["HEADER"] = "header";
      HttpAuthLocation3["QUERY"] = "query";
    })(HttpAuthLocation2 || (HttpAuthLocation2 = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js
var init_blob_payload_input_types2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/blob/blob-payload-input-types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/checksum.js
var init_checksum4 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/checksum.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/client.js
var init_client4 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/client.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/command.js
var init_command3 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/command.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/connection/config.js
var init_config5 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/connection/config.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/connection/manager.js
var init_manager2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/connection/manager.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/connection/pool.js
var init_pool2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/connection/pool.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/connection/index.js
var init_connection2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/connection/index.js"() {
    "use strict";
    init_config5();
    init_manager2();
    init_pool2();
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/crypto.js
var init_crypto2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/crypto.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/encode.js
var init_encode2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/encode.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoint.js
var EndpointURLScheme2;
var init_endpoint2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoint.js"() {
    "use strict";
    (function(EndpointURLScheme3) {
      EndpointURLScheme3["HTTP"] = "http";
      EndpointURLScheme3["HTTPS"] = "https";
    })(EndpointURLScheme2 || (EndpointURLScheme2 = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js
var init_EndpointRuleObject4 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/EndpointRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js
var init_ErrorRuleObject4 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/ErrorRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js
var init_RuleSetObject4 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/RuleSetObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/shared.js
var init_shared4 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/shared.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js
var init_TreeRuleObject4 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/TreeRuleObject.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/index.js
var init_endpoints2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/endpoints/index.js"() {
    "use strict";
    init_EndpointRuleObject4();
    init_ErrorRuleObject4();
    init_RuleSetObject4();
    init_shared4();
    init_TreeRuleObject4();
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/eventStream.js
var init_eventStream2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/eventStream.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/http.js
var FieldPosition2;
var init_http2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/http.js"() {
    "use strict";
    (function(FieldPosition3) {
      FieldPosition3[FieldPosition3["HEADER"] = 0] = "HEADER";
      FieldPosition3[FieldPosition3["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition2 || (FieldPosition2 = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js
var init_awsCredentialIdentity2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/identity/awsCredentialIdentity.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/identity/identity.js
var init_identity3 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/identity/identity.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/identity/index.js
var init_identity4 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/identity/index.js"() {
    "use strict";
    init_awsCredentialIdentity2();
    init_identity3();
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/logger.js
var init_logger2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/logger.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/middleware.js
var init_middleware2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/middleware.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/pagination.js
var init_pagination4 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/pagination.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/profile.js
var init_profile2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/profile.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/response.js
var init_response2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/response.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/retry.js
var init_retry4 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/retry.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/serde.js
var init_serde2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/serde.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/shapes.js
var init_shapes2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/shapes.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/signature.js
var init_signature2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/signature.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/stream.js
var init_stream2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/stream.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js
var init_streaming_blob_common_types2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-common-types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js
var init_streaming_blob_payload_input_types2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-input-types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js
var init_streaming_blob_payload_output_types2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/streaming-payload/streaming-blob-payload-output-types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/transfer.js
var RequestHandlerProtocol2;
var init_transfer2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/transfer.js"() {
    "use strict";
    (function(RequestHandlerProtocol3) {
      RequestHandlerProtocol3["HTTP_0_9"] = "http/0.9";
      RequestHandlerProtocol3["HTTP_1_0"] = "http/1.0";
      RequestHandlerProtocol3["TDS_8_0"] = "tds/8.0";
    })(RequestHandlerProtocol2 || (RequestHandlerProtocol2 = {}));
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js
var init_client_payload_blob_type_narrow2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/transform/client-payload-blob-type-narrow.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/transform/type-transform.js
var init_type_transform2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/transform/type-transform.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/uri.js
var init_uri2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/uri.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/util.js
var init_util3 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/util.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/waiter.js
var init_waiter2 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/waiter.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/index.js
var init_dist_es59 = __esm({
  "../../node_modules/.pnpm/@smithy+types@1.2.0/node_modules/@smithy/types/dist-es/index.js"() {
    "use strict";
    init_abort2();
    init_auth3();
    init_blob_payload_input_types2();
    init_checksum4();
    init_client4();
    init_command3();
    init_connection2();
    init_crypto2();
    init_encode2();
    init_endpoint2();
    init_endpoints2();
    init_eventStream2();
    init_http2();
    init_identity4();
    init_logger2();
    init_middleware2();
    init_pagination4();
    init_profile2();
    init_response2();
    init_retry4();
    init_serde2();
    init_shapes2();
    init_signature2();
    init_stream2();
    init_streaming_blob_common_types2();
    init_streaming_blob_payload_input_types2();
    init_streaming_blob_payload_output_types2();
    init_transfer2();
    init_client_payload_blob_type_narrow2();
    init_type_transform2();
    init_uri2();
    init_util3();
    init_waiter2();
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/Field.js
var Field;
var init_Field2 = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/Field.js"() {
    "use strict";
    init_dist_es59();
    Field = class {
      constructor({ name, kind: kind2 = FieldPosition2.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind2;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v7) => v7 !== value);
      }
      toString() {
        return this.values.map((v7) => v7.includes(",") || v7.includes(" ") ? `"${v7}"` : v7).join(", ");
      }
      get() {
        return this.values;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/Fields.js
var Fields;
var init_Fields2 = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/Fields.js"() {
    "use strict";
    Fields = class {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name.toLowerCase()] = field;
      }
      getField(name) {
        return this.entries[name.toLowerCase()];
      }
      removeField(name) {
        delete this.entries[name.toLowerCase()];
      }
      getByType(kind2) {
        return Object.values(this.entries).filter((field) => field.kind === kind2);
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/httpHandler.js
var init_httpHandler2 = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/httpHandler.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/httpRequest.js
function cloneQuery3(query) {
  return Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});
}
var HttpRequest2;
var init_httpRequest3 = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/httpRequest.js"() {
    "use strict";
    HttpRequest2 = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
      }
      static isInstance(request2) {
        if (!request2)
          return false;
        const req = request2;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new _HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery3(cloned.query);
        return cloned;
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/httpResponse.js
var HttpResponse2;
var init_httpResponse2 = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/httpResponse.js"() {
    "use strict";
    HttpResponse2 = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js
function isValidHostname(hostname) {
  const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
  return hostPattern.test(hostname);
}
var init_isValidHostname2 = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/isValidHostname.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/types.js
var init_types10 = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/types.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/index.js
var init_dist_es60 = __esm({
  "../../node_modules/.pnpm/@smithy+protocol-http@1.2.0/node_modules/@smithy/protocol-http/dist-es/index.js"() {
    "use strict";
    init_Field2();
    init_Fields2();
    init_httpHandler2();
    init_httpRequest3();
    init_httpResponse2();
    init_isValidHostname2();
    init_types10();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.374.0/node_modules/@aws-sdk/protocol-http/dist-es/index.js
var dist_es_exports12 = {};
__export(dist_es_exports12, {
  Field: () => Field,
  Fields: () => Fields,
  HttpRequest: () => HttpRequest2,
  HttpResponse: () => HttpResponse2,
  isValidHostname: () => isValidHostname
});
var init_dist_es61 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.374.0/node_modules/@aws-sdk/protocol-http/dist-es/index.js"() {
    "use strict";
    init_dist_es60();
  }
});

// ../../node_modules/.pnpm/@aws-crypto+crc32@3.0.0/node_modules/@aws-crypto/crc32/build/aws_crc32.js
var require_aws_crc32 = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+crc32@3.0.0/node_modules/@aws-crypto/crc32/build/aws_crc32.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_build();
    var index_1 = require_build3();
    var AwsCrc32 = (
      /** @class */
      function() {
        function AwsCrc322() {
          this.crc32 = new index_1.Crc32();
        }
        AwsCrc322.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc322.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a3) {
              return [2, (0, util_1.numToUint8)(this.crc32.digest())];
            });
          });
        };
        AwsCrc322.prototype.reset = function() {
          this.crc32 = new index_1.Crc32();
        };
        return AwsCrc322;
      }()
    );
    exports2.AwsCrc32 = AwsCrc32;
  }
});

// ../../node_modules/.pnpm/@aws-crypto+crc32@3.0.0/node_modules/@aws-crypto/crc32/build/index.js
var require_build3 = __commonJS({
  "../../node_modules/.pnpm/@aws-crypto+crc32@3.0.0/node_modules/@aws-crypto/crc32/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32 = exports2.Crc32 = exports2.crc32 = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var util_1 = require_build();
    function crc32(data) {
      return new Crc323().update(data).digest();
    }
    exports2.crc32 = crc32;
    var Crc323 = (
      /** @class */
      function() {
        function Crc324() {
          this.checksum = 4294967295;
        }
        Crc324.prototype.update = function(data) {
          var e_1, _a3;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a3 = data_1.return))
                _a3.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc324.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc324;
      }()
    );
    exports2.Crc32 = Crc323;
    var a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports2, "AwsCrc32", { enumerable: true, get: function() {
      return aws_crc32_1.AwsCrc32;
    } });
  }
});

// ../../node_modules/.pnpm/@smithy+util-hex-encoding@1.1.0/node_modules/@smithy/util-hex-encoding/dist-es/index.js
function fromHex2(encoded) {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  const out = new Uint8Array(encoded.length / 2);
  for (let i6 = 0; i6 < encoded.length; i6 += 2) {
    const encodedByte = encoded.slice(i6, i6 + 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT2) {
      out[i6 / 2] = HEX_TO_SHORT2[encodedByte];
    } else {
      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
  }
  return out;
}
function toHex2(bytes) {
  let out = "";
  for (let i6 = 0; i6 < bytes.byteLength; i6++) {
    out += SHORT_TO_HEX2[bytes[i6]];
  }
  return out;
}
var SHORT_TO_HEX2, HEX_TO_SHORT2;
var init_dist_es62 = __esm({
  "../../node_modules/.pnpm/@smithy+util-hex-encoding@1.1.0/node_modules/@smithy/util-hex-encoding/dist-es/index.js"() {
    "use strict";
    SHORT_TO_HEX2 = {};
    HEX_TO_SHORT2 = {};
    for (let i6 = 0; i6 < 256; i6++) {
      let encodedByte = i6.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX2[i6] = encodedByte;
      HEX_TO_SHORT2[encodedByte] = i6;
    }
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/Int64.js
function negate2(bytes) {
  for (let i6 = 0; i6 < 8; i6++) {
    bytes[i6] ^= 255;
  }
  for (let i6 = 7; i6 > -1; i6--) {
    bytes[i6]++;
    if (bytes[i6] !== 0)
      break;
  }
}
var Int642;
var init_Int64 = __esm({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/Int64.js"() {
    "use strict";
    init_dist_es62();
    Int642 = class _Int64 {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i6 = 7, remaining = Math.abs(Math.round(number)); i6 > -1 && remaining > 0; i6--, remaining /= 256) {
          bytes[i6] = remaining;
        }
        if (number < 0) {
          negate2(bytes);
        }
        return new _Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate2(bytes);
        }
        return parseInt(toHex2(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js
var HeaderMarshaller, HEADER_VALUE_TYPE2, BOOLEAN_TAG, BYTE_TAG, SHORT_TAG, INT_TAG, LONG_TAG, BINARY_TAG, STRING_TAG, TIMESTAMP_TAG, UUID_TAG, UUID_PATTERN2;
var init_HeaderMarshaller = __esm({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js"() {
    "use strict";
    init_dist_es62();
    init_Int64();
    HeaderMarshaller = class {
      constructor(toUtf86, fromUtf86) {
        this.toUtf8 = toUtf86;
        this.fromUtf8 = fromUtf86;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int642.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN2.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set(fromHex2(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int642(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int642(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${toHex2(uuidBytes.subarray(0, 4))}-${toHex2(uuidBytes.subarray(4, 6))}-${toHex2(uuidBytes.subarray(6, 8))}-${toHex2(uuidBytes.subarray(8, 10))}-${toHex2(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    (function(HEADER_VALUE_TYPE3) {
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["short"] = 3] = "short";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["long"] = 5] = "long";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["string"] = 7] = "string";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE3[HEADER_VALUE_TYPE3["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE2 || (HEADER_VALUE_TYPE2 = {}));
    BOOLEAN_TAG = "boolean";
    BYTE_TAG = "byte";
    SHORT_TAG = "short";
    INT_TAG = "integer";
    LONG_TAG = "long";
    BINARY_TAG = "binary";
    STRING_TAG = "string";
    TIMESTAMP_TAG = "timestamp";
    UUID_TAG = "uuid";
    UUID_PATTERN2 = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js
var import_crc32, PRELUDE_MEMBER_LENGTH, PRELUDE_LENGTH, CHECKSUM_LENGTH, MINIMUM_MESSAGE_LENGTH;
var init_splitMessage = __esm({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js"() {
    "use strict";
    import_crc32 = __toESM(require_build3());
    PRELUDE_MEMBER_LENGTH = 4;
    PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    CHECKSUM_LENGTH = 4;
    MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js
var import_crc322;
var init_EventStreamCodec = __esm({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js"() {
    "use strict";
    import_crc322 = __toESM(require_build3());
    init_HeaderMarshaller();
    init_splitMessage();
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/Message.js
var init_Message = __esm({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/Message.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/MessageDecoderStream.js
var init_MessageDecoderStream = __esm({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/MessageDecoderStream.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/MessageEncoderStream.js
var init_MessageEncoderStream = __esm({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/MessageEncoderStream.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js
var init_SmithyMessageDecoderStream = __esm({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js
var init_SmithyMessageEncoderStream = __esm({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/index.js
var init_dist_es63 = __esm({
  "../../node_modules/.pnpm/@smithy+eventstream-codec@1.1.0/node_modules/@smithy/eventstream-codec/dist-es/index.js"() {
    "use strict";
    init_EventStreamCodec();
    init_HeaderMarshaller();
    init_Int64();
    init_Message();
    init_MessageDecoderStream();
    init_MessageEncoderStream();
    init_SmithyMessageDecoderStream();
    init_SmithyMessageEncoderStream();
  }
});

// ../../node_modules/.pnpm/@smithy+util-middleware@1.1.0/node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js
var normalizeProvider3;
var init_normalizeProvider3 = __esm({
  "../../node_modules/.pnpm/@smithy+util-middleware@1.1.0/node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js"() {
    "use strict";
    normalizeProvider3 = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-middleware@1.1.0/node_modules/@smithy/util-middleware/dist-es/index.js
var init_dist_es64 = __esm({
  "../../node_modules/.pnpm/@smithy+util-middleware@1.1.0/node_modules/@smithy/util-middleware/dist-es/index.js"() {
    "use strict";
    init_normalizeProvider3();
  }
});

// ../../node_modules/.pnpm/@smithy+is-array-buffer@1.1.0/node_modules/@smithy/is-array-buffer/dist-es/index.js
var isArrayBuffer2;
var init_dist_es65 = __esm({
  "../../node_modules/.pnpm/@smithy+is-array-buffer@1.1.0/node_modules/@smithy/is-array-buffer/dist-es/index.js"() {
    "use strict";
    isArrayBuffer2 = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
  }
});

// ../../node_modules/.pnpm/@smithy+util-buffer-from@1.1.0/node_modules/@smithy/util-buffer-from/dist-es/index.js
var import_buffer4, fromArrayBuffer2, fromString2;
var init_dist_es66 = __esm({
  "../../node_modules/.pnpm/@smithy+util-buffer-from@1.1.0/node_modules/@smithy/util-buffer-from/dist-es/index.js"() {
    "use strict";
    init_dist_es65();
    import_buffer4 = require("buffer");
    fromArrayBuffer2 = (input, offset = 0, length = input.byteLength - offset) => {
      if (!isArrayBuffer2(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return import_buffer4.Buffer.from(input, offset, length);
    };
    fromString2 = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? import_buffer4.Buffer.from(input, encoding) : import_buffer4.Buffer.from(input);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-utf8@1.1.0/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js
var fromUtf85;
var init_fromUtf82 = __esm({
  "../../node_modules/.pnpm/@smithy+util-utf8@1.1.0/node_modules/@smithy/util-utf8/dist-es/fromUtf8.js"() {
    "use strict";
    init_dist_es66();
    fromUtf85 = (input) => {
      const buf = fromString2(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-utf8@1.1.0/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js
var toUint8Array2;
var init_toUint8Array2 = __esm({
  "../../node_modules/.pnpm/@smithy+util-utf8@1.1.0/node_modules/@smithy/util-utf8/dist-es/toUint8Array.js"() {
    "use strict";
    init_fromUtf82();
    toUint8Array2 = (data) => {
      if (typeof data === "string") {
        return fromUtf85(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-utf8@1.1.0/node_modules/@smithy/util-utf8/dist-es/toUtf8.js
var toUtf85;
var init_toUtf82 = __esm({
  "../../node_modules/.pnpm/@smithy+util-utf8@1.1.0/node_modules/@smithy/util-utf8/dist-es/toUtf8.js"() {
    "use strict";
    init_dist_es66();
    toUtf85 = (input) => fromArrayBuffer2(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
  }
});

// ../../node_modules/.pnpm/@smithy+util-utf8@1.1.0/node_modules/@smithy/util-utf8/dist-es/index.js
var init_dist_es67 = __esm({
  "../../node_modules/.pnpm/@smithy+util-utf8@1.1.0/node_modules/@smithy/util-utf8/dist-es/index.js"() {
    "use strict";
    init_fromUtf82();
    init_toUint8Array2();
    init_toUtf82();
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/constants.js
var ALGORITHM_QUERY_PARAM2, CREDENTIAL_QUERY_PARAM2, AMZ_DATE_QUERY_PARAM2, SIGNED_HEADERS_QUERY_PARAM2, EXPIRES_QUERY_PARAM2, SIGNATURE_QUERY_PARAM2, TOKEN_QUERY_PARAM2, AUTH_HEADER2, AMZ_DATE_HEADER2, DATE_HEADER2, GENERATED_HEADERS2, SIGNATURE_HEADER2, SHA256_HEADER2, TOKEN_HEADER2, ALWAYS_UNSIGNABLE_HEADERS2, PROXY_HEADER_PATTERN2, SEC_HEADER_PATTERN2, ALGORITHM_IDENTIFIER2, EVENT_ALGORITHM_IDENTIFIER2, UNSIGNED_PAYLOAD2, MAX_CACHE_SIZE2, KEY_TYPE_IDENTIFIER2, MAX_PRESIGNED_TTL2;
var init_constants9 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/constants.js"() {
    "use strict";
    ALGORITHM_QUERY_PARAM2 = "X-Amz-Algorithm";
    CREDENTIAL_QUERY_PARAM2 = "X-Amz-Credential";
    AMZ_DATE_QUERY_PARAM2 = "X-Amz-Date";
    SIGNED_HEADERS_QUERY_PARAM2 = "X-Amz-SignedHeaders";
    EXPIRES_QUERY_PARAM2 = "X-Amz-Expires";
    SIGNATURE_QUERY_PARAM2 = "X-Amz-Signature";
    TOKEN_QUERY_PARAM2 = "X-Amz-Security-Token";
    AUTH_HEADER2 = "authorization";
    AMZ_DATE_HEADER2 = AMZ_DATE_QUERY_PARAM2.toLowerCase();
    DATE_HEADER2 = "date";
    GENERATED_HEADERS2 = [AUTH_HEADER2, AMZ_DATE_HEADER2, DATE_HEADER2];
    SIGNATURE_HEADER2 = SIGNATURE_QUERY_PARAM2.toLowerCase();
    SHA256_HEADER2 = "x-amz-content-sha256";
    TOKEN_HEADER2 = TOKEN_QUERY_PARAM2.toLowerCase();
    ALWAYS_UNSIGNABLE_HEADERS2 = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    PROXY_HEADER_PATTERN2 = /^proxy-/;
    SEC_HEADER_PATTERN2 = /^sec-/;
    ALGORITHM_IDENTIFIER2 = "AWS4-HMAC-SHA256";
    EVENT_ALGORITHM_IDENTIFIER2 = "AWS4-HMAC-SHA256-PAYLOAD";
    UNSIGNED_PAYLOAD2 = "UNSIGNED-PAYLOAD";
    MAX_CACHE_SIZE2 = 50;
    KEY_TYPE_IDENTIFIER2 = "aws4_request";
    MAX_PRESIGNED_TTL2 = 60 * 60 * 24 * 7;
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js
var signingKeyCache2, cacheQueue2, createScope2, getSigningKey2, clearCredentialCache, hmac2;
var init_credentialDerivation2 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js"() {
    "use strict";
    init_dist_es62();
    init_dist_es67();
    init_constants9();
    signingKeyCache2 = {};
    cacheQueue2 = [];
    createScope2 = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER2}`;
    getSigningKey2 = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac2(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${toHex2(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache2) {
        return signingKeyCache2[cacheKey];
      }
      cacheQueue2.push(cacheKey);
      while (cacheQueue2.length > MAX_CACHE_SIZE2) {
        delete signingKeyCache2[cacheQueue2.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER2]) {
        key = await hmac2(sha256Constructor, key, signable);
      }
      return signingKeyCache2[cacheKey] = key;
    };
    clearCredentialCache = () => {
      cacheQueue2.length = 0;
      Object.keys(signingKeyCache2).forEach((cacheKey) => {
        delete signingKeyCache2[cacheKey];
      });
    };
    hmac2 = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(toUint8Array2(data));
      return hash.digest();
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js
var getCanonicalHeaders2;
var init_getCanonicalHeaders2 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js"() {
    "use strict";
    init_constants9();
    getCanonicalHeaders2 = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS2 || unsignableHeaders?.has(canonicalHeaderName) || PROXY_HEADER_PATTERN2.test(canonicalHeaderName) || SEC_HEADER_PATTERN2.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+util-uri-escape@1.1.0/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js
var escapeUri2, hexEncode2;
var init_escape_uri2 = __esm({
  "../../node_modules/.pnpm/@smithy+util-uri-escape@1.1.0/node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js"() {
    "use strict";
    escapeUri2 = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode2);
    hexEncode2 = (c6) => `%${c6.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// ../../node_modules/.pnpm/@smithy+util-uri-escape@1.1.0/node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js
var init_escape_uri_path2 = __esm({
  "../../node_modules/.pnpm/@smithy+util-uri-escape@1.1.0/node_modules/@smithy/util-uri-escape/dist-es/escape-uri-path.js"() {
    "use strict";
    init_escape_uri2();
  }
});

// ../../node_modules/.pnpm/@smithy+util-uri-escape@1.1.0/node_modules/@smithy/util-uri-escape/dist-es/index.js
var init_dist_es68 = __esm({
  "../../node_modules/.pnpm/@smithy+util-uri-escape@1.1.0/node_modules/@smithy/util-uri-escape/dist-es/index.js"() {
    "use strict";
    init_escape_uri2();
    init_escape_uri_path2();
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js
var getCanonicalQuery2;
var init_getCanonicalQuery2 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js"() {
    "use strict";
    init_dist_es68();
    init_constants9();
    getCanonicalQuery2 = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === SIGNATURE_HEADER2) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${escapeUri2(key)}=${escapeUri2(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${escapeUri2(key)}=${escapeUri2(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js
var getPayloadHash2;
var init_getPayloadHash2 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js"() {
    "use strict";
    init_dist_es65();
    init_dist_es62();
    init_dist_es67();
    init_constants9();
    getPayloadHash2 = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER2) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer2(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(toUint8Array2(body));
        return toHex2(await hashCtor.digest());
      }
      return UNSIGNED_PAYLOAD2;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/headerUtil.js
var hasHeader2;
var init_headerUtil2 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/headerUtil.js"() {
    "use strict";
    hasHeader2 = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/cloneRequest.js
var cloneRequest2, cloneQuery4;
var init_cloneRequest2 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/cloneRequest.js"() {
    "use strict";
    cloneRequest2 = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? cloneQuery4(query) : void 0
    });
    cloneQuery4 = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js
var moveHeadersToQuery2;
var init_moveHeadersToQuery2 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js"() {
    "use strict";
    init_cloneRequest2();
    moveHeadersToQuery2 = (request2, options = {}) => {
      const { headers, query = {} } = typeof request2.clone === "function" ? request2.clone() : cloneRequest2(request2);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname)) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request2,
        headers,
        query
      };
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/prepareRequest.js
var prepareRequest2;
var init_prepareRequest2 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/prepareRequest.js"() {
    "use strict";
    init_cloneRequest2();
    init_constants9();
    prepareRequest2 = (request2) => {
      request2 = typeof request2.clone === "function" ? request2.clone() : cloneRequest2(request2);
      for (const headerName of Object.keys(request2.headers)) {
        if (GENERATED_HEADERS2.indexOf(headerName.toLowerCase()) > -1) {
          delete request2.headers[headerName];
        }
      }
      return request2;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/utilDate.js
var iso86012, toDate2;
var init_utilDate2 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/utilDate.js"() {
    "use strict";
    iso86012 = (time) => toDate2(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    toDate2 = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/SignatureV4.js
var SignatureV42, formatDate2, getCanonicalHeaderList2;
var init_SignatureV42 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/SignatureV4.js"() {
    "use strict";
    init_dist_es63();
    init_dist_es62();
    init_dist_es64();
    init_dist_es67();
    init_constants9();
    init_credentialDerivation2();
    init_getCanonicalHeaders2();
    init_getCanonicalQuery2();
    init_getPayloadHash2();
    init_headerUtil2();
    init_moveHeadersToQuery2();
    init_prepareRequest2();
    init_utilDate2();
    SignatureV42 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.headerMarshaller = new HeaderMarshaller(toUtf85, fromUtf85);
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = normalizeProvider3(region);
        this.credentialProvider = normalizeProvider3(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate, shortDate } = formatDate2(signingDate);
        if (expiresIn > MAX_PRESIGNED_TTL2) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = createScope2(shortDate, region, signingService ?? this.service);
        const request2 = moveHeadersToQuery2(prepareRequest2(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request2.query[TOKEN_QUERY_PARAM2] = credentials.sessionToken;
        }
        request2.query[ALGORITHM_QUERY_PARAM2] = ALGORITHM_IDENTIFIER2;
        request2.query[CREDENTIAL_QUERY_PARAM2] = `${credentials.accessKeyId}/${scope}`;
        request2.query[AMZ_DATE_QUERY_PARAM2] = longDate;
        request2.query[EXPIRES_QUERY_PARAM2] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders2(request2, unsignableHeaders, signableHeaders);
        request2.query[SIGNED_HEADERS_QUERY_PARAM2] = getCanonicalHeaderList2(canonicalHeaders);
        request2.query[SIGNATURE_QUERY_PARAM2] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request2, canonicalHeaders, await getPayloadHash2(originalRequest, this.sha256)));
        return request2;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else if (toSign.message) {
          return this.signMessage(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate, longDate } = formatDate2(signingDate);
        const scope = createScope2(shortDate, region, signingService ?? this.service);
        const hashedPayload = await getPayloadHash2({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = toHex2(await hash.digest());
        const stringToSign = [
          EVENT_ALGORITHM_IDENTIFIER2,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signMessage(signableMessage, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
          headers: this.headerMarshaller.format(signableMessage.message.headers),
          payload: signableMessage.message.body
        }, {
          signingDate,
          signingRegion,
          signingService,
          priorSignature: signableMessage.priorSignature
        });
        return promise.then((signature) => {
          return { message: signableMessage.message, signature };
        });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate } = formatDate2(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(toUint8Array2(stringToSign));
        return toHex2(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request2 = prepareRequest2(requestToSign);
        const { longDate, shortDate } = formatDate2(signingDate);
        const scope = createScope2(shortDate, region, signingService ?? this.service);
        request2.headers[AMZ_DATE_HEADER2] = longDate;
        if (credentials.sessionToken) {
          request2.headers[TOKEN_HEADER2] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash2(request2, this.sha256);
        if (!hasHeader2(SHA256_HEADER2, request2.headers) && this.applyChecksum) {
          request2.headers[SHA256_HEADER2] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders2(request2, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request2, canonicalHeaders, payloadHash));
        request2.headers[AUTH_HEADER2] = `${ALGORITHM_IDENTIFIER2} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList2(canonicalHeaders)}, Signature=${signature}`;
        return request2;
      }
      createCanonicalRequest(request2, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request2.method}
${this.getCanonicalPath(request2)}
${getCanonicalQuery2(request2)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(toUint8Array2(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${ALGORITHM_IDENTIFIER2}
${longDate}
${credentialScope}
${toHex2(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if (pathSegment?.length === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(toUint8Array2(stringToSign));
        return toHex2(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey2(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    formatDate2 = (now) => {
      const longDate = iso86012(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    getCanonicalHeaderList2 = (headers) => Object.keys(headers).sort().join(";");
  }
});

// ../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/index.js
var init_dist_es69 = __esm({
  "../../node_modules/.pnpm/@smithy+signature-v4@1.1.0/node_modules/@smithy/signature-v4/dist-es/index.js"() {
    "use strict";
    init_SignatureV42();
    init_getCanonicalHeaders2();
    init_getCanonicalQuery2();
    init_getPayloadHash2();
    init_moveHeadersToQuery2();
    init_prepareRequest2();
    init_credentialDerivation2();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.374.0/node_modules/@aws-sdk/signature-v4/dist-es/index.js
var dist_es_exports13 = {};
__export(dist_es_exports13, {
  SignatureV4: () => SignatureV42,
  clearCredentialCache: () => clearCredentialCache,
  createScope: () => createScope2,
  getCanonicalHeaders: () => getCanonicalHeaders2,
  getCanonicalQuery: () => getCanonicalQuery2,
  getPayloadHash: () => getPayloadHash2,
  getSigningKey: () => getSigningKey2,
  moveHeadersToQuery: () => moveHeadersToQuery2,
  prepareRequest: () => prepareRequest2
});
var init_dist_es70 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.374.0/node_modules/@aws-sdk/signature-v4/dist-es/index.js"() {
    "use strict";
    init_dist_es69();
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/ours/primordials.js
var require_primordials = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/ours/primordials.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      ArrayIsArray(self2) {
        return Array.isArray(self2);
      },
      ArrayPrototypeIncludes(self2, el) {
        return self2.includes(el);
      },
      ArrayPrototypeIndexOf(self2, el) {
        return self2.indexOf(el);
      },
      ArrayPrototypeJoin(self2, sep2) {
        return self2.join(sep2);
      },
      ArrayPrototypeMap(self2, fn) {
        return self2.map(fn);
      },
      ArrayPrototypePop(self2, el) {
        return self2.pop(el);
      },
      ArrayPrototypePush(self2, el) {
        return self2.push(el);
      },
      ArrayPrototypeSlice(self2, start, end) {
        return self2.slice(start, end);
      },
      Error,
      FunctionPrototypeCall(fn, thisArgs, ...args) {
        return fn.call(thisArgs, ...args);
      },
      FunctionPrototypeSymbolHasInstance(self2, instance) {
        return Function.prototype[Symbol.hasInstance].call(self2, instance);
      },
      MathFloor: Math.floor,
      Number,
      NumberIsInteger: Number.isInteger,
      NumberIsNaN: Number.isNaN,
      NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER,
      NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER,
      NumberParseInt: Number.parseInt,
      ObjectDefineProperties(self2, props) {
        return Object.defineProperties(self2, props);
      },
      ObjectDefineProperty(self2, name, prop) {
        return Object.defineProperty(self2, name, prop);
      },
      ObjectGetOwnPropertyDescriptor(self2, name) {
        return Object.getOwnPropertyDescriptor(self2, name);
      },
      ObjectKeys(obj) {
        return Object.keys(obj);
      },
      ObjectSetPrototypeOf(target, proto) {
        return Object.setPrototypeOf(target, proto);
      },
      Promise,
      PromisePrototypeCatch(self2, fn) {
        return self2.catch(fn);
      },
      PromisePrototypeThen(self2, thenFn, catchFn) {
        return self2.then(thenFn, catchFn);
      },
      PromiseReject(err) {
        return Promise.reject(err);
      },
      PromiseResolve(val2) {
        return Promise.resolve(val2);
      },
      ReflectApply: Reflect.apply,
      RegExpPrototypeTest(self2, value) {
        return self2.test(value);
      },
      SafeSet: Set,
      String,
      StringPrototypeSlice(self2, start, end) {
        return self2.slice(start, end);
      },
      StringPrototypeToLowerCase(self2) {
        return self2.toLowerCase();
      },
      StringPrototypeToUpperCase(self2) {
        return self2.toUpperCase();
      },
      StringPrototypeTrim(self2) {
        return self2.trim();
      },
      Symbol,
      SymbolFor: Symbol.for,
      SymbolAsyncIterator: Symbol.asyncIterator,
      SymbolHasInstance: Symbol.hasInstance,
      SymbolIterator: Symbol.iterator,
      SymbolDispose: Symbol.dispose || Symbol("Symbol.dispose"),
      SymbolAsyncDispose: Symbol.asyncDispose || Symbol("Symbol.asyncDispose"),
      TypedArrayPrototypeSet(self2, buf, len) {
        return self2.set(buf, len);
      },
      Boolean,
      Uint8Array
    };
  }
});

// ../../node_modules/.pnpm/event-target-shim@5.0.1/node_modules/event-target-shim/dist/event-target-shim.js
var require_event_target_shim = __commonJS({
  "../../node_modules/.pnpm/event-target-shim@5.0.1/node_modules/event-target-shim/dist/event-target-shim.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var privateData = /* @__PURE__ */ new WeakMap();
    var wrappers = /* @__PURE__ */ new WeakMap();
    function pd(event) {
      const retv = privateData.get(event);
      console.assert(
        retv != null,
        "'this' is expected an Event object, but got",
        event
      );
      return retv;
    }
    function setCancelFlag(data) {
      if (data.passiveListener != null) {
        if (typeof console !== "undefined" && typeof console.error === "function") {
          console.error(
            "Unable to preventDefault inside passive event listener invocation.",
            data.passiveListener
          );
        }
        return;
      }
      if (!data.event.cancelable) {
        return;
      }
      data.canceled = true;
      if (typeof data.event.preventDefault === "function") {
        data.event.preventDefault();
      }
    }
    function Event(eventTarget, event) {
      privateData.set(this, {
        eventTarget,
        event,
        eventPhase: 2,
        currentTarget: eventTarget,
        canceled: false,
        stopped: false,
        immediateStopped: false,
        passiveListener: null,
        timeStamp: event.timeStamp || Date.now()
      });
      Object.defineProperty(this, "isTrusted", { value: false, enumerable: true });
      const keys = Object.keys(event);
      for (let i6 = 0; i6 < keys.length; ++i6) {
        const key = keys[i6];
        if (!(key in this)) {
          Object.defineProperty(this, key, defineRedirectDescriptor(key));
        }
      }
    }
    Event.prototype = {
      /**
       * The type of this event.
       * @type {string}
       */
      get type() {
        return pd(this).event.type;
      },
      /**
       * The target of this event.
       * @type {EventTarget}
       */
      get target() {
        return pd(this).eventTarget;
      },
      /**
       * The target of this event.
       * @type {EventTarget}
       */
      get currentTarget() {
        return pd(this).currentTarget;
      },
      /**
       * @returns {EventTarget[]} The composed path of this event.
       */
      composedPath() {
        const currentTarget = pd(this).currentTarget;
        if (currentTarget == null) {
          return [];
        }
        return [currentTarget];
      },
      /**
       * Constant of NONE.
       * @type {number}
       */
      get NONE() {
        return 0;
      },
      /**
       * Constant of CAPTURING_PHASE.
       * @type {number}
       */
      get CAPTURING_PHASE() {
        return 1;
      },
      /**
       * Constant of AT_TARGET.
       * @type {number}
       */
      get AT_TARGET() {
        return 2;
      },
      /**
       * Constant of BUBBLING_PHASE.
       * @type {number}
       */
      get BUBBLING_PHASE() {
        return 3;
      },
      /**
       * The target of this event.
       * @type {number}
       */
      get eventPhase() {
        return pd(this).eventPhase;
      },
      /**
       * Stop event bubbling.
       * @returns {void}
       */
      stopPropagation() {
        const data = pd(this);
        data.stopped = true;
        if (typeof data.event.stopPropagation === "function") {
          data.event.stopPropagation();
        }
      },
      /**
       * Stop event bubbling.
       * @returns {void}
       */
      stopImmediatePropagation() {
        const data = pd(this);
        data.stopped = true;
        data.immediateStopped = true;
        if (typeof data.event.stopImmediatePropagation === "function") {
          data.event.stopImmediatePropagation();
        }
      },
      /**
       * The flag to be bubbling.
       * @type {boolean}
       */
      get bubbles() {
        return Boolean(pd(this).event.bubbles);
      },
      /**
       * The flag to be cancelable.
       * @type {boolean}
       */
      get cancelable() {
        return Boolean(pd(this).event.cancelable);
      },
      /**
       * Cancel this event.
       * @returns {void}
       */
      preventDefault() {
        setCancelFlag(pd(this));
      },
      /**
       * The flag to indicate cancellation state.
       * @type {boolean}
       */
      get defaultPrevented() {
        return pd(this).canceled;
      },
      /**
       * The flag to be composed.
       * @type {boolean}
       */
      get composed() {
        return Boolean(pd(this).event.composed);
      },
      /**
       * The unix time of this event.
       * @type {number}
       */
      get timeStamp() {
        return pd(this).timeStamp;
      },
      /**
       * The target of this event.
       * @type {EventTarget}
       * @deprecated
       */
      get srcElement() {
        return pd(this).eventTarget;
      },
      /**
       * The flag to stop event bubbling.
       * @type {boolean}
       * @deprecated
       */
      get cancelBubble() {
        return pd(this).stopped;
      },
      set cancelBubble(value) {
        if (!value) {
          return;
        }
        const data = pd(this);
        data.stopped = true;
        if (typeof data.event.cancelBubble === "boolean") {
          data.event.cancelBubble = true;
        }
      },
      /**
       * The flag to indicate cancellation state.
       * @type {boolean}
       * @deprecated
       */
      get returnValue() {
        return !pd(this).canceled;
      },
      set returnValue(value) {
        if (!value) {
          setCancelFlag(pd(this));
        }
      },
      /**
       * Initialize this event object. But do nothing under event dispatching.
       * @param {string} type The event type.
       * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
       * @param {boolean} [cancelable=false] The flag to be possible to cancel.
       * @deprecated
       */
      initEvent() {
      }
    };
    Object.defineProperty(Event.prototype, "constructor", {
      value: Event,
      configurable: true,
      writable: true
    });
    if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
      Object.setPrototypeOf(Event.prototype, window.Event.prototype);
      wrappers.set(window.Event.prototype, Event);
    }
    function defineRedirectDescriptor(key) {
      return {
        get() {
          return pd(this).event[key];
        },
        set(value) {
          pd(this).event[key] = value;
        },
        configurable: true,
        enumerable: true
      };
    }
    function defineCallDescriptor(key) {
      return {
        value() {
          const event = pd(this).event;
          return event[key].apply(event, arguments);
        },
        configurable: true,
        enumerable: true
      };
    }
    function defineWrapper(BaseEvent, proto) {
      const keys = Object.keys(proto);
      if (keys.length === 0) {
        return BaseEvent;
      }
      function CustomEvent(eventTarget, event) {
        BaseEvent.call(this, eventTarget, event);
      }
      CustomEvent.prototype = Object.create(BaseEvent.prototype, {
        constructor: { value: CustomEvent, configurable: true, writable: true }
      });
      for (let i6 = 0; i6 < keys.length; ++i6) {
        const key = keys[i6];
        if (!(key in BaseEvent.prototype)) {
          const descriptor = Object.getOwnPropertyDescriptor(proto, key);
          const isFunc = typeof descriptor.value === "function";
          Object.defineProperty(
            CustomEvent.prototype,
            key,
            isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key)
          );
        }
      }
      return CustomEvent;
    }
    function getWrapper(proto) {
      if (proto == null || proto === Object.prototype) {
        return Event;
      }
      let wrapper = wrappers.get(proto);
      if (wrapper == null) {
        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
        wrappers.set(proto, wrapper);
      }
      return wrapper;
    }
    function wrapEvent(eventTarget, event) {
      const Wrapper = getWrapper(Object.getPrototypeOf(event));
      return new Wrapper(eventTarget, event);
    }
    function isStopped(event) {
      return pd(event).immediateStopped;
    }
    function setEventPhase(event, eventPhase) {
      pd(event).eventPhase = eventPhase;
    }
    function setCurrentTarget(event, currentTarget) {
      pd(event).currentTarget = currentTarget;
    }
    function setPassiveListener(event, passiveListener) {
      pd(event).passiveListener = passiveListener;
    }
    var listenersMap = /* @__PURE__ */ new WeakMap();
    var CAPTURE = 1;
    var BUBBLE = 2;
    var ATTRIBUTE = 3;
    function isObject(x5) {
      return x5 !== null && typeof x5 === "object";
    }
    function getListeners(eventTarget) {
      const listeners = listenersMap.get(eventTarget);
      if (listeners == null) {
        throw new TypeError(
          "'this' is expected an EventTarget object, but got another value."
        );
      }
      return listeners;
    }
    function defineEventAttributeDescriptor(eventName) {
      return {
        get() {
          const listeners = getListeners(this);
          let node = listeners.get(eventName);
          while (node != null) {
            if (node.listenerType === ATTRIBUTE) {
              return node.listener;
            }
            node = node.next;
          }
          return null;
        },
        set(listener) {
          if (typeof listener !== "function" && !isObject(listener)) {
            listener = null;
          }
          const listeners = getListeners(this);
          let prev = null;
          let node = listeners.get(eventName);
          while (node != null) {
            if (node.listenerType === ATTRIBUTE) {
              if (prev !== null) {
                prev.next = node.next;
              } else if (node.next !== null) {
                listeners.set(eventName, node.next);
              } else {
                listeners.delete(eventName);
              }
            } else {
              prev = node;
            }
            node = node.next;
          }
          if (listener !== null) {
            const newNode = {
              listener,
              listenerType: ATTRIBUTE,
              passive: false,
              once: false,
              next: null
            };
            if (prev === null) {
              listeners.set(eventName, newNode);
            } else {
              prev.next = newNode;
            }
          }
        },
        configurable: true,
        enumerable: true
      };
    }
    function defineEventAttribute(eventTargetPrototype, eventName) {
      Object.defineProperty(
        eventTargetPrototype,
        `on${eventName}`,
        defineEventAttributeDescriptor(eventName)
      );
    }
    function defineCustomEventTarget(eventNames) {
      function CustomEventTarget() {
        EventTarget.call(this);
      }
      CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
        constructor: {
          value: CustomEventTarget,
          configurable: true,
          writable: true
        }
      });
      for (let i6 = 0; i6 < eventNames.length; ++i6) {
        defineEventAttribute(CustomEventTarget.prototype, eventNames[i6]);
      }
      return CustomEventTarget;
    }
    function EventTarget() {
      if (this instanceof EventTarget) {
        listenersMap.set(this, /* @__PURE__ */ new Map());
        return;
      }
      if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(arguments[0]);
      }
      if (arguments.length > 0) {
        const types = new Array(arguments.length);
        for (let i6 = 0; i6 < arguments.length; ++i6) {
          types[i6] = arguments[i6];
        }
        return defineCustomEventTarget(types);
      }
      throw new TypeError("Cannot call a class as a function");
    }
    EventTarget.prototype = {
      /**
       * Add a given listener to this event target.
       * @param {string} eventName The event name to add.
       * @param {Function} listener The listener to add.
       * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
       * @returns {void}
       */
      addEventListener(eventName, listener, options) {
        if (listener == null) {
          return;
        }
        if (typeof listener !== "function" && !isObject(listener)) {
          throw new TypeError("'listener' should be a function or an object.");
        }
        const listeners = getListeners(this);
        const optionsIsObj = isObject(options);
        const capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
        const listenerType = capture ? CAPTURE : BUBBLE;
        const newNode = {
          listener,
          listenerType,
          passive: optionsIsObj && Boolean(options.passive),
          once: optionsIsObj && Boolean(options.once),
          next: null
        };
        let node = listeners.get(eventName);
        if (node === void 0) {
          listeners.set(eventName, newNode);
          return;
        }
        let prev = null;
        while (node != null) {
          if (node.listener === listener && node.listenerType === listenerType) {
            return;
          }
          prev = node;
          node = node.next;
        }
        prev.next = newNode;
      },
      /**
       * Remove a given listener from this event target.
       * @param {string} eventName The event name to remove.
       * @param {Function} listener The listener to remove.
       * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
       * @returns {void}
       */
      removeEventListener(eventName, listener, options) {
        if (listener == null) {
          return;
        }
        const listeners = getListeners(this);
        const capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
        const listenerType = capture ? CAPTURE : BUBBLE;
        let prev = null;
        let node = listeners.get(eventName);
        while (node != null) {
          if (node.listener === listener && node.listenerType === listenerType) {
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
            return;
          }
          prev = node;
          node = node.next;
        }
      },
      /**
       * Dispatch a given event.
       * @param {Event|{type:string}} event The event to dispatch.
       * @returns {boolean} `false` if canceled.
       */
      dispatchEvent(event) {
        if (event == null || typeof event.type !== "string") {
          throw new TypeError('"event.type" should be a string.');
        }
        const listeners = getListeners(this);
        const eventName = event.type;
        let node = listeners.get(eventName);
        if (node == null) {
          return true;
        }
        const wrappedEvent = wrapEvent(this, event);
        let prev = null;
        while (node != null) {
          if (node.once) {
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
          } else {
            prev = node;
          }
          setPassiveListener(
            wrappedEvent,
            node.passive ? node.listener : null
          );
          if (typeof node.listener === "function") {
            try {
              node.listener.call(this, wrappedEvent);
            } catch (err) {
              if (typeof console !== "undefined" && typeof console.error === "function") {
                console.error(err);
              }
            }
          } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
            node.listener.handleEvent(wrappedEvent);
          }
          if (isStopped(wrappedEvent)) {
            break;
          }
          node = node.next;
        }
        setPassiveListener(wrappedEvent, null);
        setEventPhase(wrappedEvent, 0);
        setCurrentTarget(wrappedEvent, null);
        return !wrappedEvent.defaultPrevented;
      }
    };
    Object.defineProperty(EventTarget.prototype, "constructor", {
      value: EventTarget,
      configurable: true,
      writable: true
    });
    if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
      Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
    }
    exports2.defineEventAttribute = defineEventAttribute;
    exports2.EventTarget = EventTarget;
    exports2.default = EventTarget;
    module2.exports = EventTarget;
    module2.exports.EventTarget = module2.exports["default"] = EventTarget;
    module2.exports.defineEventAttribute = defineEventAttribute;
  }
});

// ../../node_modules/.pnpm/abort-controller@3.0.0/node_modules/abort-controller/dist/abort-controller.js
var require_abort_controller = __commonJS({
  "../../node_modules/.pnpm/abort-controller@3.0.0/node_modules/abort-controller/dist/abort-controller.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var eventTargetShim = require_event_target_shim();
    var AbortSignal = class extends eventTargetShim.EventTarget {
      /**
       * AbortSignal cannot be constructed directly.
       */
      constructor() {
        super();
        throw new TypeError("AbortSignal cannot be constructed directly");
      }
      /**
       * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
       */
      get aborted() {
        const aborted = abortedFlags.get(this);
        if (typeof aborted !== "boolean") {
          throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
        }
        return aborted;
      }
    };
    eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");
    function createAbortSignal() {
      const signal = Object.create(AbortSignal.prototype);
      eventTargetShim.EventTarget.call(signal);
      abortedFlags.set(signal, false);
      return signal;
    }
    function abortSignal(signal) {
      if (abortedFlags.get(signal) !== false) {
        return;
      }
      abortedFlags.set(signal, true);
      signal.dispatchEvent({ type: "abort" });
    }
    var abortedFlags = /* @__PURE__ */ new WeakMap();
    Object.defineProperties(AbortSignal.prototype, {
      aborted: { enumerable: true }
    });
    if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
      Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortSignal"
      });
    }
    var AbortController2 = class {
      /**
       * Initialize this controller.
       */
      constructor() {
        signals.set(this, createAbortSignal());
      }
      /**
       * Returns the `AbortSignal` object associated with this object.
       */
      get signal() {
        return getSignal(this);
      }
      /**
       * Abort and signal to any observers that the associated activity is to be aborted.
       */
      abort() {
        abortSignal(getSignal(this));
      }
    };
    var signals = /* @__PURE__ */ new WeakMap();
    function getSignal(controller) {
      const signal = signals.get(controller);
      if (signal == null) {
        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
      }
      return signal;
    }
    Object.defineProperties(AbortController2.prototype, {
      signal: { enumerable: true },
      abort: { enumerable: true }
    });
    if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
      Object.defineProperty(AbortController2.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortController"
      });
    }
    exports2.AbortController = AbortController2;
    exports2.AbortSignal = AbortSignal;
    exports2.default = AbortController2;
    module2.exports = AbortController2;
    module2.exports.AbortController = module2.exports["default"] = AbortController2;
    module2.exports.AbortSignal = AbortSignal;
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/ours/util.js
var require_util2 = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/ours/util.js"(exports2, module2) {
    "use strict";
    var bufferModule = require("buffer");
    var { kResistStopPropagation, SymbolDispose } = require_primordials();
    var AbortSignal = globalThis.AbortSignal || require_abort_controller().AbortSignal;
    var AbortController2 = globalThis.AbortController || require_abort_controller().AbortController;
    var AsyncFunction = Object.getPrototypeOf(async function() {
    }).constructor;
    var Blob5 = globalThis.Blob || bufferModule.Blob;
    var isBlob3 = typeof Blob5 !== "undefined" ? function isBlob4(b6) {
      return b6 instanceof Blob5;
    } : function isBlob4(b6) {
      return false;
    };
    var validateAbortSignal = (signal, name) => {
      if (signal !== void 0 && (signal === null || typeof signal !== "object" || !("aborted" in signal))) {
        throw new ERR_INVALID_ARG_TYPE(name, "AbortSignal", signal);
      }
    };
    var validateFunction = (value, name) => {
      if (typeof value !== "function")
        throw new ERR_INVALID_ARG_TYPE(name, "Function", value);
    };
    var AggregateError2 = class extends Error {
      constructor(errors2) {
        if (!Array.isArray(errors2)) {
          throw new TypeError(`Expected input to be an Array, got ${typeof errors2}`);
        }
        let message = "";
        for (let i6 = 0; i6 < errors2.length; i6++) {
          message += `    ${errors2[i6].stack}
`;
        }
        super(message);
        this.name = "AggregateError";
        this.errors = errors2;
      }
    };
    module2.exports = {
      AggregateError: AggregateError2,
      kEmptyObject: Object.freeze({}),
      once(callback) {
        let called = false;
        return function(...args) {
          if (called) {
            return;
          }
          called = true;
          callback.apply(this, args);
        };
      },
      createDeferredPromise: function() {
        let resolve2;
        let reject;
        const promise = new Promise((res, rej) => {
          resolve2 = res;
          reject = rej;
        });
        return {
          promise,
          resolve: resolve2,
          reject
        };
      },
      promisify(fn) {
        return new Promise((resolve2, reject) => {
          fn((err, ...args) => {
            if (err) {
              return reject(err);
            }
            return resolve2(...args);
          });
        });
      },
      debuglog() {
        return function() {
        };
      },
      format(format, ...args) {
        return format.replace(/%([sdifj])/g, function(...[_unused, type]) {
          const replacement = args.shift();
          if (type === "f") {
            return replacement.toFixed(6);
          } else if (type === "j") {
            return JSON.stringify(replacement);
          } else if (type === "s" && typeof replacement === "object") {
            const ctor = replacement.constructor !== Object ? replacement.constructor.name : "";
            return `${ctor} {}`.trim();
          } else {
            return replacement.toString();
          }
        });
      },
      inspect(value) {
        switch (typeof value) {
          case "string":
            if (value.includes("'")) {
              if (!value.includes('"')) {
                return `"${value}"`;
              } else if (!value.includes("`") && !value.includes("${")) {
                return `\`${value}\``;
              }
            }
            return `'${value}'`;
          case "number":
            if (isNaN(value)) {
              return "NaN";
            } else if (Object.is(value, -0)) {
              return String(value);
            }
            return value;
          case "bigint":
            return `${String(value)}n`;
          case "boolean":
          case "undefined":
            return String(value);
          case "object":
            return "{}";
        }
      },
      types: {
        isAsyncFunction(fn) {
          return fn instanceof AsyncFunction;
        },
        isArrayBufferView(arr) {
          return ArrayBuffer.isView(arr);
        }
      },
      isBlob: isBlob3,
      deprecate(fn, message) {
        return fn;
      },
      addAbortListener: require("events").addAbortListener || function addAbortListener(signal, listener) {
        if (signal === void 0) {
          throw new ERR_INVALID_ARG_TYPE("signal", "AbortSignal", signal);
        }
        validateAbortSignal(signal, "signal");
        validateFunction(listener, "listener");
        let removeEventListener;
        if (signal.aborted) {
          queueMicrotask(() => listener());
        } else {
          signal.addEventListener("abort", listener, {
            __proto__: null,
            once: true,
            [kResistStopPropagation]: true
          });
          removeEventListener = () => {
            signal.removeEventListener("abort", listener);
          };
        }
        return {
          __proto__: null,
          [SymbolDispose]() {
            var _removeEventListener;
            (_removeEventListener = removeEventListener) === null || _removeEventListener === void 0 ? void 0 : _removeEventListener();
          }
        };
      },
      AbortSignalAny: AbortSignal.any || function AbortSignalAny(signals) {
        if (signals.length === 1) {
          return signals[0];
        }
        const ac = new AbortController2();
        const abort = () => ac.abort();
        signals.forEach((signal) => {
          validateAbortSignal(signal, "signals");
          signal.addEventListener("abort", abort, {
            once: true
          });
        });
        ac.signal.addEventListener(
          "abort",
          () => {
            signals.forEach((signal) => signal.removeEventListener("abort", abort));
          },
          {
            once: true
          }
        );
        return ac.signal;
      }
    };
    module2.exports.promisify.custom = Symbol.for("nodejs.util.promisify.custom");
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/ours/errors.js
var require_errors = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/ours/errors.js"(exports2, module2) {
    "use strict";
    var { format, inspect: inspect2, AggregateError: CustomAggregateError } = require_util2();
    var AggregateError2 = globalThis.AggregateError || CustomAggregateError;
    var kIsNodeError = Symbol("kIsNodeError");
    var kTypes = [
      "string",
      "function",
      "number",
      "object",
      // Accept 'Function' and 'Object' as alternative to the lower cased version.
      "Function",
      "Object",
      "boolean",
      "bigint",
      "symbol"
    ];
    var classRegExp = /^([A-Z][a-z0-9]*)+$/;
    var nodeInternalPrefix = "__node_internal_";
    var codes = {};
    function assert(value, message) {
      if (!value) {
        throw new codes.ERR_INTERNAL_ASSERTION(message);
      }
    }
    function addNumericalSeparator(val2) {
      let res = "";
      let i6 = val2.length;
      const start = val2[0] === "-" ? 1 : 0;
      for (; i6 >= start + 4; i6 -= 3) {
        res = `_${val2.slice(i6 - 3, i6)}${res}`;
      }
      return `${val2.slice(0, i6)}${res}`;
    }
    function getMessage(key, msg, args) {
      if (typeof msg === "function") {
        assert(
          msg.length <= args.length,
          // Default options do not count.
          `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`
        );
        return msg(...args);
      }
      const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length;
      assert(
        expectedLength === args.length,
        `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`
      );
      if (args.length === 0) {
        return msg;
      }
      return format(msg, ...args);
    }
    function E3(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      class NodeError extends Base {
        constructor(...args) {
          super(getMessage(code, message, args));
        }
        toString() {
          return `${this.name} [${code}]: ${this.message}`;
        }
      }
      Object.defineProperties(NodeError.prototype, {
        name: {
          value: Base.name,
          writable: true,
          enumerable: false,
          configurable: true
        },
        toString: {
          value() {
            return `${this.name} [${code}]: ${this.message}`;
          },
          writable: true,
          enumerable: false,
          configurable: true
        }
      });
      NodeError.prototype.code = code;
      NodeError.prototype[kIsNodeError] = true;
      codes[code] = NodeError;
    }
    function hideStackFrames(fn) {
      const hidden = nodeInternalPrefix + fn.name;
      Object.defineProperty(fn, "name", {
        value: hidden
      });
      return fn;
    }
    function aggregateTwoErrors(innerError, outerError) {
      if (innerError && outerError && innerError !== outerError) {
        if (Array.isArray(outerError.errors)) {
          outerError.errors.push(innerError);
          return outerError;
        }
        const err = new AggregateError2([outerError, innerError], outerError.message);
        err.code = outerError.code;
        return err;
      }
      return innerError || outerError;
    }
    var AbortError2 = class extends Error {
      constructor(message = "The operation was aborted", options = void 0) {
        if (options !== void 0 && typeof options !== "object") {
          throw new codes.ERR_INVALID_ARG_TYPE("options", "Object", options);
        }
        super(message, options);
        this.code = "ABORT_ERR";
        this.name = "AbortError";
      }
    };
    E3("ERR_ASSERTION", "%s", Error);
    E3(
      "ERR_INVALID_ARG_TYPE",
      (name, expected, actual) => {
        assert(typeof name === "string", "'name' must be a string");
        if (!Array.isArray(expected)) {
          expected = [expected];
        }
        let msg = "The ";
        if (name.endsWith(" argument")) {
          msg += `${name} `;
        } else {
          msg += `"${name}" ${name.includes(".") ? "property" : "argument"} `;
        }
        msg += "must be ";
        const types = [];
        const instances = [];
        const other = [];
        for (const value of expected) {
          assert(typeof value === "string", "All expected entries have to be of type string");
          if (kTypes.includes(value)) {
            types.push(value.toLowerCase());
          } else if (classRegExp.test(value)) {
            instances.push(value);
          } else {
            assert(value !== "object", 'The value "object" should be written as "Object"');
            other.push(value);
          }
        }
        if (instances.length > 0) {
          const pos = types.indexOf("object");
          if (pos !== -1) {
            types.splice(types, pos, 1);
            instances.push("Object");
          }
        }
        if (types.length > 0) {
          switch (types.length) {
            case 1:
              msg += `of type ${types[0]}`;
              break;
            case 2:
              msg += `one of type ${types[0]} or ${types[1]}`;
              break;
            default: {
              const last = types.pop();
              msg += `one of type ${types.join(", ")}, or ${last}`;
            }
          }
          if (instances.length > 0 || other.length > 0) {
            msg += " or ";
          }
        }
        if (instances.length > 0) {
          switch (instances.length) {
            case 1:
              msg += `an instance of ${instances[0]}`;
              break;
            case 2:
              msg += `an instance of ${instances[0]} or ${instances[1]}`;
              break;
            default: {
              const last = instances.pop();
              msg += `an instance of ${instances.join(", ")}, or ${last}`;
            }
          }
          if (other.length > 0) {
            msg += " or ";
          }
        }
        switch (other.length) {
          case 0:
            break;
          case 1:
            if (other[0].toLowerCase() !== other[0]) {
              msg += "an ";
            }
            msg += `${other[0]}`;
            break;
          case 2:
            msg += `one of ${other[0]} or ${other[1]}`;
            break;
          default: {
            const last = other.pop();
            msg += `one of ${other.join(", ")}, or ${last}`;
          }
        }
        if (actual == null) {
          msg += `. Received ${actual}`;
        } else if (typeof actual === "function" && actual.name) {
          msg += `. Received function ${actual.name}`;
        } else if (typeof actual === "object") {
          var _actual$constructor;
          if ((_actual$constructor = actual.constructor) !== null && _actual$constructor !== void 0 && _actual$constructor.name) {
            msg += `. Received an instance of ${actual.constructor.name}`;
          } else {
            const inspected = inspect2(actual, {
              depth: -1
            });
            msg += `. Received ${inspected}`;
          }
        } else {
          let inspected = inspect2(actual, {
            colors: false
          });
          if (inspected.length > 25) {
            inspected = `${inspected.slice(0, 25)}...`;
          }
          msg += `. Received type ${typeof actual} (${inspected})`;
        }
        return msg;
      },
      TypeError
    );
    E3(
      "ERR_INVALID_ARG_VALUE",
      (name, value, reason = "is invalid") => {
        let inspected = inspect2(value);
        if (inspected.length > 128) {
          inspected = inspected.slice(0, 128) + "...";
        }
        const type = name.includes(".") ? "property" : "argument";
        return `The ${type} '${name}' ${reason}. Received ${inspected}`;
      },
      TypeError
    );
    E3(
      "ERR_INVALID_RETURN_VALUE",
      (input, name, value) => {
        var _value$constructor;
        const type = value !== null && value !== void 0 && (_value$constructor = value.constructor) !== null && _value$constructor !== void 0 && _value$constructor.name ? `instance of ${value.constructor.name}` : `type ${typeof value}`;
        return `Expected ${input} to be returned from the "${name}" function but got ${type}.`;
      },
      TypeError
    );
    E3(
      "ERR_MISSING_ARGS",
      (...args) => {
        assert(args.length > 0, "At least one arg needs to be specified");
        let msg;
        const len = args.length;
        args = (Array.isArray(args) ? args : [args]).map((a6) => `"${a6}"`).join(" or ");
        switch (len) {
          case 1:
            msg += `The ${args[0]} argument`;
            break;
          case 2:
            msg += `The ${args[0]} and ${args[1]} arguments`;
            break;
          default:
            {
              const last = args.pop();
              msg += `The ${args.join(", ")}, and ${last} arguments`;
            }
            break;
        }
        return `${msg} must be specified`;
      },
      TypeError
    );
    E3(
      "ERR_OUT_OF_RANGE",
      (str2, range, input) => {
        assert(range, 'Missing "range" argument');
        let received;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > 2n ** 32n || input < -(2n ** 32n)) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        } else {
          received = inspect2(input);
        }
        return `The value of "${str2}" is out of range. It must be ${range}. Received ${received}`;
      },
      RangeError
    );
    E3("ERR_MULTIPLE_CALLBACK", "Callback called multiple times", Error);
    E3("ERR_METHOD_NOT_IMPLEMENTED", "The %s method is not implemented", Error);
    E3("ERR_STREAM_ALREADY_FINISHED", "Cannot call %s after a stream was finished", Error);
    E3("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable", Error);
    E3("ERR_STREAM_DESTROYED", "Cannot call %s after a stream was destroyed", Error);
    E3("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    E3("ERR_STREAM_PREMATURE_CLOSE", "Premature close", Error);
    E3("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF", Error);
    E3("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event", Error);
    E3("ERR_STREAM_WRITE_AFTER_END", "write after end", Error);
    E3("ERR_UNKNOWN_ENCODING", "Unknown encoding: %s", TypeError);
    module2.exports = {
      AbortError: AbortError2,
      aggregateTwoErrors: hideStackFrames(aggregateTwoErrors),
      hideStackFrames,
      codes
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/validators.js
var require_validators = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/validators.js"(exports2, module2) {
    "use strict";
    var {
      ArrayIsArray,
      ArrayPrototypeIncludes,
      ArrayPrototypeJoin,
      ArrayPrototypeMap,
      NumberIsInteger,
      NumberIsNaN,
      NumberMAX_SAFE_INTEGER,
      NumberMIN_SAFE_INTEGER,
      NumberParseInt,
      ObjectPrototypeHasOwnProperty,
      RegExpPrototypeExec,
      String: String2,
      StringPrototypeToUpperCase,
      StringPrototypeTrim
    } = require_primordials();
    var {
      hideStackFrames,
      codes: { ERR_SOCKET_BAD_PORT, ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_INVALID_ARG_VALUE, ERR_OUT_OF_RANGE, ERR_UNKNOWN_SIGNAL }
    } = require_errors();
    var { normalizeEncoding } = require_util2();
    var { isAsyncFunction, isArrayBufferView } = require_util2().types;
    var signals = {};
    function isInt32(value) {
      return value === (value | 0);
    }
    function isUint32(value) {
      return value === value >>> 0;
    }
    var octalReg = /^[0-7]+$/;
    var modeDesc = "must be a 32-bit unsigned integer or an octal string";
    function parseFileMode(value, name, def) {
      if (typeof value === "undefined") {
        value = def;
      }
      if (typeof value === "string") {
        if (RegExpPrototypeExec(octalReg, value) === null) {
          throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc);
        }
        value = NumberParseInt(value, 8);
      }
      validateUint32(value, name);
      return value;
    }
    var validateInteger = hideStackFrames((value, name, min = NumberMIN_SAFE_INTEGER, max = NumberMAX_SAFE_INTEGER) => {
      if (typeof value !== "number")
        throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
      if (!NumberIsInteger(value))
        throw new ERR_OUT_OF_RANGE(name, "an integer", value);
      if (value < min || value > max)
        throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
    });
    var validateInt32 = hideStackFrames((value, name, min = -2147483648, max = 2147483647) => {
      if (typeof value !== "number") {
        throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
      }
      if (!NumberIsInteger(value)) {
        throw new ERR_OUT_OF_RANGE(name, "an integer", value);
      }
      if (value < min || value > max) {
        throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
      }
    });
    var validateUint32 = hideStackFrames((value, name, positive = false) => {
      if (typeof value !== "number") {
        throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
      }
      if (!NumberIsInteger(value)) {
        throw new ERR_OUT_OF_RANGE(name, "an integer", value);
      }
      const min = positive ? 1 : 0;
      const max = 4294967295;
      if (value < min || value > max) {
        throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
      }
    });
    function validateString(value, name) {
      if (typeof value !== "string")
        throw new ERR_INVALID_ARG_TYPE2(name, "string", value);
    }
    function validateNumber(value, name, min = void 0, max) {
      if (typeof value !== "number")
        throw new ERR_INVALID_ARG_TYPE2(name, "number", value);
      if (min != null && value < min || max != null && value > max || (min != null || max != null) && NumberIsNaN(value)) {
        throw new ERR_OUT_OF_RANGE(
          name,
          `${min != null ? `>= ${min}` : ""}${min != null && max != null ? " && " : ""}${max != null ? `<= ${max}` : ""}`,
          value
        );
      }
    }
    var validateOneOf = hideStackFrames((value, name, oneOf) => {
      if (!ArrayPrototypeIncludes(oneOf, value)) {
        const allowed = ArrayPrototypeJoin(
          ArrayPrototypeMap(oneOf, (v7) => typeof v7 === "string" ? `'${v7}'` : String2(v7)),
          ", "
        );
        const reason = "must be one of: " + allowed;
        throw new ERR_INVALID_ARG_VALUE(name, value, reason);
      }
    });
    function validateBoolean(value, name) {
      if (typeof value !== "boolean")
        throw new ERR_INVALID_ARG_TYPE2(name, "boolean", value);
    }
    function getOwnPropertyValueOrDefault(options, key, defaultValue) {
      return options == null || !ObjectPrototypeHasOwnProperty(options, key) ? defaultValue : options[key];
    }
    var validateObject = hideStackFrames((value, name, options = null) => {
      const allowArray = getOwnPropertyValueOrDefault(options, "allowArray", false);
      const allowFunction = getOwnPropertyValueOrDefault(options, "allowFunction", false);
      const nullable = getOwnPropertyValueOrDefault(options, "nullable", false);
      if (!nullable && value === null || !allowArray && ArrayIsArray(value) || typeof value !== "object" && (!allowFunction || typeof value !== "function")) {
        throw new ERR_INVALID_ARG_TYPE2(name, "Object", value);
      }
    });
    var validateDictionary = hideStackFrames((value, name) => {
      if (value != null && typeof value !== "object" && typeof value !== "function") {
        throw new ERR_INVALID_ARG_TYPE2(name, "a dictionary", value);
      }
    });
    var validateArray = hideStackFrames((value, name, minLength = 0) => {
      if (!ArrayIsArray(value)) {
        throw new ERR_INVALID_ARG_TYPE2(name, "Array", value);
      }
      if (value.length < minLength) {
        const reason = `must be longer than ${minLength}`;
        throw new ERR_INVALID_ARG_VALUE(name, value, reason);
      }
    });
    function validateStringArray(value, name) {
      validateArray(value, name);
      for (let i6 = 0; i6 < value.length; i6++) {
        validateString(value[i6], `${name}[${i6}]`);
      }
    }
    function validateBooleanArray(value, name) {
      validateArray(value, name);
      for (let i6 = 0; i6 < value.length; i6++) {
        validateBoolean(value[i6], `${name}[${i6}]`);
      }
    }
    function validateAbortSignalArray(value, name) {
      validateArray(value, name);
      for (let i6 = 0; i6 < value.length; i6++) {
        const signal = value[i6];
        const indexedName = `${name}[${i6}]`;
        if (signal == null) {
          throw new ERR_INVALID_ARG_TYPE2(indexedName, "AbortSignal", signal);
        }
        validateAbortSignal(signal, indexedName);
      }
    }
    function validateSignalName(signal, name = "signal") {
      validateString(signal, name);
      if (signals[signal] === void 0) {
        if (signals[StringPrototypeToUpperCase(signal)] !== void 0) {
          throw new ERR_UNKNOWN_SIGNAL(signal + " (signals must use all capital letters)");
        }
        throw new ERR_UNKNOWN_SIGNAL(signal);
      }
    }
    var validateBuffer = hideStackFrames((buffer, name = "buffer") => {
      if (!isArrayBufferView(buffer)) {
        throw new ERR_INVALID_ARG_TYPE2(name, ["Buffer", "TypedArray", "DataView"], buffer);
      }
    });
    function validateEncoding(data, encoding) {
      const normalizedEncoding = normalizeEncoding(encoding);
      const length = data.length;
      if (normalizedEncoding === "hex" && length % 2 !== 0) {
        throw new ERR_INVALID_ARG_VALUE("encoding", encoding, `is invalid for data of length ${length}`);
      }
    }
    function validatePort(port, name = "Port", allowZero = true) {
      if (typeof port !== "number" && typeof port !== "string" || typeof port === "string" && StringPrototypeTrim(port).length === 0 || +port !== +port >>> 0 || port > 65535 || port === 0 && !allowZero) {
        throw new ERR_SOCKET_BAD_PORT(name, port, allowZero);
      }
      return port | 0;
    }
    var validateAbortSignal = hideStackFrames((signal, name) => {
      if (signal !== void 0 && (signal === null || typeof signal !== "object" || !("aborted" in signal))) {
        throw new ERR_INVALID_ARG_TYPE2(name, "AbortSignal", signal);
      }
    });
    var validateFunction = hideStackFrames((value, name) => {
      if (typeof value !== "function")
        throw new ERR_INVALID_ARG_TYPE2(name, "Function", value);
    });
    var validatePlainFunction = hideStackFrames((value, name) => {
      if (typeof value !== "function" || isAsyncFunction(value))
        throw new ERR_INVALID_ARG_TYPE2(name, "Function", value);
    });
    var validateUndefined = hideStackFrames((value, name) => {
      if (value !== void 0)
        throw new ERR_INVALID_ARG_TYPE2(name, "undefined", value);
    });
    function validateUnion(value, name, union) {
      if (!ArrayPrototypeIncludes(union, value)) {
        throw new ERR_INVALID_ARG_TYPE2(name, `('${ArrayPrototypeJoin(union, "|")}')`, value);
      }
    }
    var linkValueRegExp = /^(?:<[^>]*>)(?:\s*;\s*[^;"\s]+(?:=(")?[^;"\s]*\1)?)*$/;
    function validateLinkHeaderFormat(value, name) {
      if (typeof value === "undefined" || !RegExpPrototypeExec(linkValueRegExp, value)) {
        throw new ERR_INVALID_ARG_VALUE(
          name,
          value,
          'must be an array or string of format "</styles.css>; rel=preload; as=style"'
        );
      }
    }
    function validateLinkHeaderValue(hints) {
      if (typeof hints === "string") {
        validateLinkHeaderFormat(hints, "hints");
        return hints;
      } else if (ArrayIsArray(hints)) {
        const hintsLength = hints.length;
        let result = "";
        if (hintsLength === 0) {
          return result;
        }
        for (let i6 = 0; i6 < hintsLength; i6++) {
          const link = hints[i6];
          validateLinkHeaderFormat(link, "hints");
          result += link;
          if (i6 !== hintsLength - 1) {
            result += ", ";
          }
        }
        return result;
      }
      throw new ERR_INVALID_ARG_VALUE(
        "hints",
        hints,
        'must be an array or string of format "</styles.css>; rel=preload; as=style"'
      );
    }
    module2.exports = {
      isInt32,
      isUint32,
      parseFileMode,
      validateArray,
      validateStringArray,
      validateBooleanArray,
      validateAbortSignalArray,
      validateBoolean,
      validateBuffer,
      validateDictionary,
      validateEncoding,
      validateFunction,
      validateInt32,
      validateInteger,
      validateNumber,
      validateObject,
      validateOneOf,
      validatePlainFunction,
      validatePort,
      validateSignalName,
      validateString,
      validateUint32,
      validateUndefined,
      validateUnion,
      validateAbortSignal,
      validateLinkHeaderValue
    };
  }
});

// ../../node_modules/.pnpm/process@0.11.10/node_modules/process/index.js
var require_process = __commonJS({
  "../../node_modules/.pnpm/process@0.11.10/node_modules/process/index.js"(exports2, module2) {
    "use strict";
    module2.exports = global.process;
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/utils.js
var require_utils2 = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/utils.js"(exports2, module2) {
    "use strict";
    var { SymbolAsyncIterator, SymbolIterator, SymbolFor } = require_primordials();
    var kIsDestroyed = SymbolFor("nodejs.stream.destroyed");
    var kIsErrored = SymbolFor("nodejs.stream.errored");
    var kIsReadable = SymbolFor("nodejs.stream.readable");
    var kIsWritable = SymbolFor("nodejs.stream.writable");
    var kIsDisturbed = SymbolFor("nodejs.stream.disturbed");
    var kIsClosedPromise = SymbolFor("nodejs.webstream.isClosedPromise");
    var kControllerErrorFunction = SymbolFor("nodejs.webstream.controllerErrorFunction");
    function isReadableNodeStream(obj, strict = false) {
      var _obj$_readableState;
      return !!(obj && typeof obj.pipe === "function" && typeof obj.on === "function" && (!strict || typeof obj.pause === "function" && typeof obj.resume === "function") && (!obj._writableState || ((_obj$_readableState = obj._readableState) === null || _obj$_readableState === void 0 ? void 0 : _obj$_readableState.readable) !== false) && // Duplex
      (!obj._writableState || obj._readableState));
    }
    function isWritableNodeStream(obj) {
      var _obj$_writableState;
      return !!(obj && typeof obj.write === "function" && typeof obj.on === "function" && (!obj._readableState || ((_obj$_writableState = obj._writableState) === null || _obj$_writableState === void 0 ? void 0 : _obj$_writableState.writable) !== false));
    }
    function isDuplexNodeStream(obj) {
      return !!(obj && typeof obj.pipe === "function" && obj._readableState && typeof obj.on === "function" && typeof obj.write === "function");
    }
    function isNodeStream(obj) {
      return obj && (obj._readableState || obj._writableState || typeof obj.write === "function" && typeof obj.on === "function" || typeof obj.pipe === "function" && typeof obj.on === "function");
    }
    function isReadableStream(obj) {
      return !!(obj && !isNodeStream(obj) && typeof obj.pipeThrough === "function" && typeof obj.getReader === "function" && typeof obj.cancel === "function");
    }
    function isWritableStream(obj) {
      return !!(obj && !isNodeStream(obj) && typeof obj.getWriter === "function" && typeof obj.abort === "function");
    }
    function isTransformStream(obj) {
      return !!(obj && !isNodeStream(obj) && typeof obj.readable === "object" && typeof obj.writable === "object");
    }
    function isWebStream(obj) {
      return isReadableStream(obj) || isWritableStream(obj) || isTransformStream(obj);
    }
    function isIterable(obj, isAsync) {
      if (obj == null)
        return false;
      if (isAsync === true)
        return typeof obj[SymbolAsyncIterator] === "function";
      if (isAsync === false)
        return typeof obj[SymbolIterator] === "function";
      return typeof obj[SymbolAsyncIterator] === "function" || typeof obj[SymbolIterator] === "function";
    }
    function isDestroyed(stream) {
      if (!isNodeStream(stream))
        return null;
      const wState = stream._writableState;
      const rState = stream._readableState;
      const state = wState || rState;
      return !!(stream.destroyed || stream[kIsDestroyed] || state !== null && state !== void 0 && state.destroyed);
    }
    function isWritableEnded(stream) {
      if (!isWritableNodeStream(stream))
        return null;
      if (stream.writableEnded === true)
        return true;
      const wState = stream._writableState;
      if (wState !== null && wState !== void 0 && wState.errored)
        return false;
      if (typeof (wState === null || wState === void 0 ? void 0 : wState.ended) !== "boolean")
        return null;
      return wState.ended;
    }
    function isWritableFinished(stream, strict) {
      if (!isWritableNodeStream(stream))
        return null;
      if (stream.writableFinished === true)
        return true;
      const wState = stream._writableState;
      if (wState !== null && wState !== void 0 && wState.errored)
        return false;
      if (typeof (wState === null || wState === void 0 ? void 0 : wState.finished) !== "boolean")
        return null;
      return !!(wState.finished || strict === false && wState.ended === true && wState.length === 0);
    }
    function isReadableEnded(stream) {
      if (!isReadableNodeStream(stream))
        return null;
      if (stream.readableEnded === true)
        return true;
      const rState = stream._readableState;
      if (!rState || rState.errored)
        return false;
      if (typeof (rState === null || rState === void 0 ? void 0 : rState.ended) !== "boolean")
        return null;
      return rState.ended;
    }
    function isReadableFinished(stream, strict) {
      if (!isReadableNodeStream(stream))
        return null;
      const rState = stream._readableState;
      if (rState !== null && rState !== void 0 && rState.errored)
        return false;
      if (typeof (rState === null || rState === void 0 ? void 0 : rState.endEmitted) !== "boolean")
        return null;
      return !!(rState.endEmitted || strict === false && rState.ended === true && rState.length === 0);
    }
    function isReadable(stream) {
      if (stream && stream[kIsReadable] != null)
        return stream[kIsReadable];
      if (typeof (stream === null || stream === void 0 ? void 0 : stream.readable) !== "boolean")
        return null;
      if (isDestroyed(stream))
        return false;
      return isReadableNodeStream(stream) && stream.readable && !isReadableFinished(stream);
    }
    function isWritable(stream) {
      if (stream && stream[kIsWritable] != null)
        return stream[kIsWritable];
      if (typeof (stream === null || stream === void 0 ? void 0 : stream.writable) !== "boolean")
        return null;
      if (isDestroyed(stream))
        return false;
      return isWritableNodeStream(stream) && stream.writable && !isWritableEnded(stream);
    }
    function isFinished(stream, opts) {
      if (!isNodeStream(stream)) {
        return null;
      }
      if (isDestroyed(stream)) {
        return true;
      }
      if ((opts === null || opts === void 0 ? void 0 : opts.readable) !== false && isReadable(stream)) {
        return false;
      }
      if ((opts === null || opts === void 0 ? void 0 : opts.writable) !== false && isWritable(stream)) {
        return false;
      }
      return true;
    }
    function isWritableErrored(stream) {
      var _stream$_writableStat, _stream$_writableStat2;
      if (!isNodeStream(stream)) {
        return null;
      }
      if (stream.writableErrored) {
        return stream.writableErrored;
      }
      return (_stream$_writableStat = (_stream$_writableStat2 = stream._writableState) === null || _stream$_writableStat2 === void 0 ? void 0 : _stream$_writableStat2.errored) !== null && _stream$_writableStat !== void 0 ? _stream$_writableStat : null;
    }
    function isReadableErrored(stream) {
      var _stream$_readableStat, _stream$_readableStat2;
      if (!isNodeStream(stream)) {
        return null;
      }
      if (stream.readableErrored) {
        return stream.readableErrored;
      }
      return (_stream$_readableStat = (_stream$_readableStat2 = stream._readableState) === null || _stream$_readableStat2 === void 0 ? void 0 : _stream$_readableStat2.errored) !== null && _stream$_readableStat !== void 0 ? _stream$_readableStat : null;
    }
    function isClosed(stream) {
      if (!isNodeStream(stream)) {
        return null;
      }
      if (typeof stream.closed === "boolean") {
        return stream.closed;
      }
      const wState = stream._writableState;
      const rState = stream._readableState;
      if (typeof (wState === null || wState === void 0 ? void 0 : wState.closed) === "boolean" || typeof (rState === null || rState === void 0 ? void 0 : rState.closed) === "boolean") {
        return (wState === null || wState === void 0 ? void 0 : wState.closed) || (rState === null || rState === void 0 ? void 0 : rState.closed);
      }
      if (typeof stream._closed === "boolean" && isOutgoingMessage(stream)) {
        return stream._closed;
      }
      return null;
    }
    function isOutgoingMessage(stream) {
      return typeof stream._closed === "boolean" && typeof stream._defaultKeepAlive === "boolean" && typeof stream._removedConnection === "boolean" && typeof stream._removedContLen === "boolean";
    }
    function isServerResponse(stream) {
      return typeof stream._sent100 === "boolean" && isOutgoingMessage(stream);
    }
    function isServerRequest(stream) {
      var _stream$req;
      return typeof stream._consuming === "boolean" && typeof stream._dumped === "boolean" && ((_stream$req = stream.req) === null || _stream$req === void 0 ? void 0 : _stream$req.upgradeOrConnect) === void 0;
    }
    function willEmitClose(stream) {
      if (!isNodeStream(stream))
        return null;
      const wState = stream._writableState;
      const rState = stream._readableState;
      const state = wState || rState;
      return !state && isServerResponse(stream) || !!(state && state.autoDestroy && state.emitClose && state.closed === false);
    }
    function isDisturbed(stream) {
      var _stream$kIsDisturbed;
      return !!(stream && ((_stream$kIsDisturbed = stream[kIsDisturbed]) !== null && _stream$kIsDisturbed !== void 0 ? _stream$kIsDisturbed : stream.readableDidRead || stream.readableAborted));
    }
    function isErrored(stream) {
      var _ref, _ref2, _ref3, _ref4, _ref5, _stream$kIsErrored, _stream$_readableStat3, _stream$_writableStat3, _stream$_readableStat4, _stream$_writableStat4;
      return !!(stream && ((_ref = (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_stream$kIsErrored = stream[kIsErrored]) !== null && _stream$kIsErrored !== void 0 ? _stream$kIsErrored : stream.readableErrored) !== null && _ref5 !== void 0 ? _ref5 : stream.writableErrored) !== null && _ref4 !== void 0 ? _ref4 : (_stream$_readableStat3 = stream._readableState) === null || _stream$_readableStat3 === void 0 ? void 0 : _stream$_readableStat3.errorEmitted) !== null && _ref3 !== void 0 ? _ref3 : (_stream$_writableStat3 = stream._writableState) === null || _stream$_writableStat3 === void 0 ? void 0 : _stream$_writableStat3.errorEmitted) !== null && _ref2 !== void 0 ? _ref2 : (_stream$_readableStat4 = stream._readableState) === null || _stream$_readableStat4 === void 0 ? void 0 : _stream$_readableStat4.errored) !== null && _ref !== void 0 ? _ref : (_stream$_writableStat4 = stream._writableState) === null || _stream$_writableStat4 === void 0 ? void 0 : _stream$_writableStat4.errored));
    }
    module2.exports = {
      isDestroyed,
      kIsDestroyed,
      isDisturbed,
      kIsDisturbed,
      isErrored,
      kIsErrored,
      isReadable,
      kIsReadable,
      kIsClosedPromise,
      kControllerErrorFunction,
      kIsWritable,
      isClosed,
      isDuplexNodeStream,
      isFinished,
      isIterable,
      isReadableNodeStream,
      isReadableStream,
      isReadableEnded,
      isReadableFinished,
      isReadableErrored,
      isNodeStream,
      isWebStream,
      isWritable,
      isWritableNodeStream,
      isWritableStream,
      isWritableEnded,
      isWritableFinished,
      isWritableErrored,
      isServerRequest,
      isServerResponse,
      willEmitClose,
      isTransformStream
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports2, module2) {
    "use strict";
    var process2 = require_process();
    var { AbortError: AbortError2, codes } = require_errors();
    var { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_STREAM_PREMATURE_CLOSE } = codes;
    var { kEmptyObject, once } = require_util2();
    var { validateAbortSignal, validateFunction, validateObject, validateBoolean } = require_validators();
    var { Promise: Promise2, PromisePrototypeThen, SymbolDispose } = require_primordials();
    var {
      isClosed,
      isReadable,
      isReadableNodeStream,
      isReadableStream,
      isReadableFinished,
      isReadableErrored,
      isWritable,
      isWritableNodeStream,
      isWritableStream,
      isWritableFinished,
      isWritableErrored,
      isNodeStream,
      willEmitClose: _willEmitClose,
      kIsClosedPromise
    } = require_utils2();
    var addAbortListener;
    function isRequest2(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    var nop = () => {
    };
    function eos(stream, options, callback) {
      var _options$readable, _options$writable;
      if (arguments.length === 2) {
        callback = options;
        options = kEmptyObject;
      } else if (options == null) {
        options = kEmptyObject;
      } else {
        validateObject(options, "options");
      }
      validateFunction(callback, "callback");
      validateAbortSignal(options.signal, "options.signal");
      callback = once(callback);
      if (isReadableStream(stream) || isWritableStream(stream)) {
        return eosWeb(stream, options, callback);
      }
      if (!isNodeStream(stream)) {
        throw new ERR_INVALID_ARG_TYPE2("stream", ["ReadableStream", "WritableStream", "Stream"], stream);
      }
      const readable = (_options$readable = options.readable) !== null && _options$readable !== void 0 ? _options$readable : isReadableNodeStream(stream);
      const writable = (_options$writable = options.writable) !== null && _options$writable !== void 0 ? _options$writable : isWritableNodeStream(stream);
      const wState = stream._writableState;
      const rState = stream._readableState;
      const onlegacyfinish = () => {
        if (!stream.writable) {
          onfinish();
        }
      };
      let willEmitClose = _willEmitClose(stream) && isReadableNodeStream(stream) === readable && isWritableNodeStream(stream) === writable;
      let writableFinished = isWritableFinished(stream, false);
      const onfinish = () => {
        writableFinished = true;
        if (stream.destroyed) {
          willEmitClose = false;
        }
        if (willEmitClose && (!stream.readable || readable)) {
          return;
        }
        if (!readable || readableFinished) {
          callback.call(stream);
        }
      };
      let readableFinished = isReadableFinished(stream, false);
      const onend = () => {
        readableFinished = true;
        if (stream.destroyed) {
          willEmitClose = false;
        }
        if (willEmitClose && (!stream.writable || writable)) {
          return;
        }
        if (!writable || writableFinished) {
          callback.call(stream);
        }
      };
      const onerror = (err) => {
        callback.call(stream, err);
      };
      let closed = isClosed(stream);
      const onclose = () => {
        closed = true;
        const errored = isWritableErrored(stream) || isReadableErrored(stream);
        if (errored && typeof errored !== "boolean") {
          return callback.call(stream, errored);
        }
        if (readable && !readableFinished && isReadableNodeStream(stream, true)) {
          if (!isReadableFinished(stream, false))
            return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
        }
        if (writable && !writableFinished) {
          if (!isWritableFinished(stream, false))
            return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
        }
        callback.call(stream);
      };
      const onclosed = () => {
        closed = true;
        const errored = isWritableErrored(stream) || isReadableErrored(stream);
        if (errored && typeof errored !== "boolean") {
          return callback.call(stream, errored);
        }
        callback.call(stream);
      };
      const onrequest = () => {
        stream.req.on("finish", onfinish);
      };
      if (isRequest2(stream)) {
        stream.on("complete", onfinish);
        if (!willEmitClose) {
          stream.on("abort", onclose);
        }
        if (stream.req) {
          onrequest();
        } else {
          stream.on("request", onrequest);
        }
      } else if (writable && !wState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      if (!willEmitClose && typeof stream.aborted === "boolean") {
        stream.on("aborted", onclose);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (options.error !== false) {
        stream.on("error", onerror);
      }
      stream.on("close", onclose);
      if (closed) {
        process2.nextTick(onclose);
      } else if (wState !== null && wState !== void 0 && wState.errorEmitted || rState !== null && rState !== void 0 && rState.errorEmitted) {
        if (!willEmitClose) {
          process2.nextTick(onclosed);
        }
      } else if (!readable && (!willEmitClose || isReadable(stream)) && (writableFinished || isWritable(stream) === false)) {
        process2.nextTick(onclosed);
      } else if (!writable && (!willEmitClose || isWritable(stream)) && (readableFinished || isReadable(stream) === false)) {
        process2.nextTick(onclosed);
      } else if (rState && stream.req && stream.aborted) {
        process2.nextTick(onclosed);
      }
      const cleanup = () => {
        callback = nop;
        stream.removeListener("aborted", onclose);
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
      if (options.signal && !closed) {
        const abort = () => {
          const endCallback = callback;
          cleanup();
          endCallback.call(
            stream,
            new AbortError2(void 0, {
              cause: options.signal.reason
            })
          );
        };
        if (options.signal.aborted) {
          process2.nextTick(abort);
        } else {
          addAbortListener = addAbortListener || require_util2().addAbortListener;
          const disposable = addAbortListener(options.signal, abort);
          const originalCallback = callback;
          callback = once((...args) => {
            disposable[SymbolDispose]();
            originalCallback.apply(stream, args);
          });
        }
      }
      return cleanup;
    }
    function eosWeb(stream, options, callback) {
      let isAborted = false;
      let abort = nop;
      if (options.signal) {
        abort = () => {
          isAborted = true;
          callback.call(
            stream,
            new AbortError2(void 0, {
              cause: options.signal.reason
            })
          );
        };
        if (options.signal.aborted) {
          process2.nextTick(abort);
        } else {
          addAbortListener = addAbortListener || require_util2().addAbortListener;
          const disposable = addAbortListener(options.signal, abort);
          const originalCallback = callback;
          callback = once((...args) => {
            disposable[SymbolDispose]();
            originalCallback.apply(stream, args);
          });
        }
      }
      const resolverFn = (...args) => {
        if (!isAborted) {
          process2.nextTick(() => callback.apply(stream, args));
        }
      };
      PromisePrototypeThen(stream[kIsClosedPromise].promise, resolverFn, resolverFn);
      return nop;
    }
    function finished(stream, opts) {
      var _opts;
      let autoCleanup = false;
      if (opts === null) {
        opts = kEmptyObject;
      }
      if ((_opts = opts) !== null && _opts !== void 0 && _opts.cleanup) {
        validateBoolean(opts.cleanup, "cleanup");
        autoCleanup = opts.cleanup;
      }
      return new Promise2((resolve2, reject) => {
        const cleanup = eos(stream, opts, (err) => {
          if (autoCleanup) {
            cleanup();
          }
          if (err) {
            reject(err);
          } else {
            resolve2();
          }
        });
      });
    }
    module2.exports = eos;
    module2.exports.finished = finished;
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports2, module2) {
    "use strict";
    var process2 = require_process();
    var {
      aggregateTwoErrors,
      codes: { ERR_MULTIPLE_CALLBACK },
      AbortError: AbortError2
    } = require_errors();
    var { Symbol: Symbol2 } = require_primordials();
    var { kIsDestroyed, isDestroyed, isFinished, isServerRequest } = require_utils2();
    var kDestroy = Symbol2("kDestroy");
    var kConstruct = Symbol2("kConstruct");
    function checkError(err, w5, r6) {
      if (err) {
        err.stack;
        if (w5 && !w5.errored) {
          w5.errored = err;
        }
        if (r6 && !r6.errored) {
          r6.errored = err;
        }
      }
    }
    function destroy(err, cb) {
      const r6 = this._readableState;
      const w5 = this._writableState;
      const s6 = w5 || r6;
      if (w5 !== null && w5 !== void 0 && w5.destroyed || r6 !== null && r6 !== void 0 && r6.destroyed) {
        if (typeof cb === "function") {
          cb();
        }
        return this;
      }
      checkError(err, w5, r6);
      if (w5) {
        w5.destroyed = true;
      }
      if (r6) {
        r6.destroyed = true;
      }
      if (!s6.constructed) {
        this.once(kDestroy, function(er2) {
          _destroy(this, aggregateTwoErrors(er2, err), cb);
        });
      } else {
        _destroy(this, err, cb);
      }
      return this;
    }
    function _destroy(self2, err, cb) {
      let called = false;
      function onDestroy(err2) {
        if (called) {
          return;
        }
        called = true;
        const r6 = self2._readableState;
        const w5 = self2._writableState;
        checkError(err2, w5, r6);
        if (w5) {
          w5.closed = true;
        }
        if (r6) {
          r6.closed = true;
        }
        if (typeof cb === "function") {
          cb(err2);
        }
        if (err2) {
          process2.nextTick(emitErrorCloseNT, self2, err2);
        } else {
          process2.nextTick(emitCloseNT, self2);
        }
      }
      try {
        self2._destroy(err || null, onDestroy);
      } catch (err2) {
        onDestroy(err2);
      }
    }
    function emitErrorCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      const r6 = self2._readableState;
      const w5 = self2._writableState;
      if (w5) {
        w5.closeEmitted = true;
      }
      if (r6) {
        r6.closeEmitted = true;
      }
      if (w5 !== null && w5 !== void 0 && w5.emitClose || r6 !== null && r6 !== void 0 && r6.emitClose) {
        self2.emit("close");
      }
    }
    function emitErrorNT(self2, err) {
      const r6 = self2._readableState;
      const w5 = self2._writableState;
      if (w5 !== null && w5 !== void 0 && w5.errorEmitted || r6 !== null && r6 !== void 0 && r6.errorEmitted) {
        return;
      }
      if (w5) {
        w5.errorEmitted = true;
      }
      if (r6) {
        r6.errorEmitted = true;
      }
      self2.emit("error", err);
    }
    function undestroy() {
      const r6 = this._readableState;
      const w5 = this._writableState;
      if (r6) {
        r6.constructed = true;
        r6.closed = false;
        r6.closeEmitted = false;
        r6.destroyed = false;
        r6.errored = null;
        r6.errorEmitted = false;
        r6.reading = false;
        r6.ended = r6.readable === false;
        r6.endEmitted = r6.readable === false;
      }
      if (w5) {
        w5.constructed = true;
        w5.destroyed = false;
        w5.closed = false;
        w5.closeEmitted = false;
        w5.errored = null;
        w5.errorEmitted = false;
        w5.finalCalled = false;
        w5.prefinished = false;
        w5.ended = w5.writable === false;
        w5.ending = w5.writable === false;
        w5.finished = w5.writable === false;
      }
    }
    function errorOrDestroy(stream, err, sync) {
      const r6 = stream._readableState;
      const w5 = stream._writableState;
      if (w5 !== null && w5 !== void 0 && w5.destroyed || r6 !== null && r6 !== void 0 && r6.destroyed) {
        return this;
      }
      if (r6 !== null && r6 !== void 0 && r6.autoDestroy || w5 !== null && w5 !== void 0 && w5.autoDestroy)
        stream.destroy(err);
      else if (err) {
        err.stack;
        if (w5 && !w5.errored) {
          w5.errored = err;
        }
        if (r6 && !r6.errored) {
          r6.errored = err;
        }
        if (sync) {
          process2.nextTick(emitErrorNT, stream, err);
        } else {
          emitErrorNT(stream, err);
        }
      }
    }
    function construct(stream, cb) {
      if (typeof stream._construct !== "function") {
        return;
      }
      const r6 = stream._readableState;
      const w5 = stream._writableState;
      if (r6) {
        r6.constructed = false;
      }
      if (w5) {
        w5.constructed = false;
      }
      stream.once(kConstruct, cb);
      if (stream.listenerCount(kConstruct) > 1) {
        return;
      }
      process2.nextTick(constructNT, stream);
    }
    function constructNT(stream) {
      let called = false;
      function onConstruct(err) {
        if (called) {
          errorOrDestroy(stream, err !== null && err !== void 0 ? err : new ERR_MULTIPLE_CALLBACK());
          return;
        }
        called = true;
        const r6 = stream._readableState;
        const w5 = stream._writableState;
        const s6 = w5 || r6;
        if (r6) {
          r6.constructed = true;
        }
        if (w5) {
          w5.constructed = true;
        }
        if (s6.destroyed) {
          stream.emit(kDestroy, err);
        } else if (err) {
          errorOrDestroy(stream, err, true);
        } else {
          process2.nextTick(emitConstructNT, stream);
        }
      }
      try {
        stream._construct((err) => {
          process2.nextTick(onConstruct, err);
        });
      } catch (err) {
        process2.nextTick(onConstruct, err);
      }
    }
    function emitConstructNT(stream) {
      stream.emit(kConstruct);
    }
    function isRequest2(stream) {
      return (stream === null || stream === void 0 ? void 0 : stream.setHeader) && typeof stream.abort === "function";
    }
    function emitCloseLegacy(stream) {
      stream.emit("close");
    }
    function emitErrorCloseLegacy(stream, err) {
      stream.emit("error", err);
      process2.nextTick(emitCloseLegacy, stream);
    }
    function destroyer(stream, err) {
      if (!stream || isDestroyed(stream)) {
        return;
      }
      if (!err && !isFinished(stream)) {
        err = new AbortError2();
      }
      if (isServerRequest(stream)) {
        stream.socket = null;
        stream.destroy(err);
      } else if (isRequest2(stream)) {
        stream.abort();
      } else if (isRequest2(stream.req)) {
        stream.req.abort();
      } else if (typeof stream.destroy === "function") {
        stream.destroy(err);
      } else if (typeof stream.close === "function") {
        stream.close();
      } else if (err) {
        process2.nextTick(emitErrorCloseLegacy, stream, err);
      } else {
        process2.nextTick(emitCloseLegacy, stream);
      }
      if (!stream.destroyed) {
        stream[kIsDestroyed] = true;
      }
    }
    module2.exports = {
      construct,
      destroyer,
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/legacy.js
var require_legacy = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/legacy.js"(exports2, module2) {
    "use strict";
    var { ArrayIsArray, ObjectSetPrototypeOf } = require_primordials();
    var { EventEmitter: EE } = require("events");
    function Stream3(opts) {
      EE.call(this, opts);
    }
    ObjectSetPrototypeOf(Stream3.prototype, EE.prototype);
    ObjectSetPrototypeOf(Stream3, EE);
    Stream3.prototype.pipe = function(dest, options) {
      const source = this;
      function ondata(chunk) {
        if (dest.writable && dest.write(chunk) === false && source.pause) {
          source.pause();
        }
      }
      source.on("data", ondata);
      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }
      dest.on("drain", ondrain);
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
      }
      let didOnEnd = false;
      function onend() {
        if (didOnEnd)
          return;
        didOnEnd = true;
        dest.end();
      }
      function onclose() {
        if (didOnEnd)
          return;
        didOnEnd = true;
        if (typeof dest.destroy === "function")
          dest.destroy();
      }
      function onerror(er2) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) {
          this.emit("error", er2);
        }
      }
      prependListener(source, "error", onerror);
      prependListener(dest, "error", onerror);
      function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
      }
      source.on("end", cleanup);
      source.on("close", cleanup);
      dest.on("close", cleanup);
      dest.emit("pipe", source);
      return dest;
    };
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (ArrayIsArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    module2.exports = {
      Stream: Stream3,
      prependListener
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js
var require_add_abort_signal = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js"(exports2, module2) {
    "use strict";
    var { SymbolDispose } = require_primordials();
    var { AbortError: AbortError2, codes } = require_errors();
    var { isNodeStream, isWebStream, kControllerErrorFunction } = require_utils2();
    var eos = require_end_of_stream();
    var { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2 } = codes;
    var addAbortListener;
    var validateAbortSignal = (signal, name) => {
      if (typeof signal !== "object" || !("aborted" in signal)) {
        throw new ERR_INVALID_ARG_TYPE2(name, "AbortSignal", signal);
      }
    };
    module2.exports.addAbortSignal = function addAbortSignal(signal, stream) {
      validateAbortSignal(signal, "signal");
      if (!isNodeStream(stream) && !isWebStream(stream)) {
        throw new ERR_INVALID_ARG_TYPE2("stream", ["ReadableStream", "WritableStream", "Stream"], stream);
      }
      return module2.exports.addAbortSignalNoValidate(signal, stream);
    };
    module2.exports.addAbortSignalNoValidate = function(signal, stream) {
      if (typeof signal !== "object" || !("aborted" in signal)) {
        return stream;
      }
      const onAbort = isNodeStream(stream) ? () => {
        stream.destroy(
          new AbortError2(void 0, {
            cause: signal.reason
          })
        );
      } : () => {
        stream[kControllerErrorFunction](
          new AbortError2(void 0, {
            cause: signal.reason
          })
        );
      };
      if (signal.aborted) {
        onAbort();
      } else {
        addAbortListener = addAbortListener || require_util2().addAbortListener;
        const disposable = addAbortListener(signal, onAbort);
        eos(stream, disposable[SymbolDispose]);
      }
      return stream;
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports2, module2) {
    "use strict";
    var { StringPrototypeSlice, SymbolIterator, TypedArrayPrototypeSet, Uint8Array: Uint8Array2 } = require_primordials();
    var { Buffer: Buffer6 } = require("buffer");
    var { inspect: inspect2 } = require_util2();
    module2.exports = class BufferList {
      constructor() {
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      push(v7) {
        const entry = {
          data: v7,
          next: null
        };
        if (this.length > 0)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
        ++this.length;
      }
      unshift(v7) {
        const entry = {
          data: v7,
          next: this.head
        };
        if (this.length === 0)
          this.tail = entry;
        this.head = entry;
        ++this.length;
      }
      shift() {
        if (this.length === 0)
          return;
        const ret = this.head.data;
        if (this.length === 1)
          this.head = this.tail = null;
        else
          this.head = this.head.next;
        --this.length;
        return ret;
      }
      clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
      join(s6) {
        if (this.length === 0)
          return "";
        let p6 = this.head;
        let ret = "" + p6.data;
        while ((p6 = p6.next) !== null)
          ret += s6 + p6.data;
        return ret;
      }
      concat(n6) {
        if (this.length === 0)
          return Buffer6.alloc(0);
        const ret = Buffer6.allocUnsafe(n6 >>> 0);
        let p6 = this.head;
        let i6 = 0;
        while (p6) {
          TypedArrayPrototypeSet(ret, p6.data, i6);
          i6 += p6.data.length;
          p6 = p6.next;
        }
        return ret;
      }
      // Consumes a specified amount of bytes or characters from the buffered data.
      consume(n6, hasStrings) {
        const data = this.head.data;
        if (n6 < data.length) {
          const slice = data.slice(0, n6);
          this.head.data = data.slice(n6);
          return slice;
        }
        if (n6 === data.length) {
          return this.shift();
        }
        return hasStrings ? this._getString(n6) : this._getBuffer(n6);
      }
      first() {
        return this.head.data;
      }
      *[SymbolIterator]() {
        for (let p6 = this.head; p6; p6 = p6.next) {
          yield p6.data;
        }
      }
      // Consumes a specified amount of characters from the buffered data.
      _getString(n6) {
        let ret = "";
        let p6 = this.head;
        let c6 = 0;
        do {
          const str2 = p6.data;
          if (n6 > str2.length) {
            ret += str2;
            n6 -= str2.length;
          } else {
            if (n6 === str2.length) {
              ret += str2;
              ++c6;
              if (p6.next)
                this.head = p6.next;
              else
                this.head = this.tail = null;
            } else {
              ret += StringPrototypeSlice(str2, 0, n6);
              this.head = p6;
              p6.data = StringPrototypeSlice(str2, n6);
            }
            break;
          }
          ++c6;
        } while ((p6 = p6.next) !== null);
        this.length -= c6;
        return ret;
      }
      // Consumes a specified amount of bytes from the buffered data.
      _getBuffer(n6) {
        const ret = Buffer6.allocUnsafe(n6);
        const retLen = n6;
        let p6 = this.head;
        let c6 = 0;
        do {
          const buf = p6.data;
          if (n6 > buf.length) {
            TypedArrayPrototypeSet(ret, buf, retLen - n6);
            n6 -= buf.length;
          } else {
            if (n6 === buf.length) {
              TypedArrayPrototypeSet(ret, buf, retLen - n6);
              ++c6;
              if (p6.next)
                this.head = p6.next;
              else
                this.head = this.tail = null;
            } else {
              TypedArrayPrototypeSet(ret, new Uint8Array2(buf.buffer, buf.byteOffset, n6), retLen - n6);
              this.head = p6;
              p6.data = buf.slice(n6);
            }
            break;
          }
          ++c6;
        } while ((p6 = p6.next) !== null);
        this.length -= c6;
        return ret;
      }
      // Make sure the linked list only shows the minimal necessary information.
      [Symbol.for("nodejs.util.inspect.custom")](_3, options) {
        return inspect2(this, {
          ...options,
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: false
        });
      }
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/state.js"(exports2, module2) {
    "use strict";
    var { MathFloor, NumberIsInteger } = require_primordials();
    var { validateInteger } = require_validators();
    var { ERR_INVALID_ARG_VALUE } = require_errors().codes;
    var defaultHighWaterMarkBytes = 16 * 1024;
    var defaultHighWaterMarkObjectMode = 16;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getDefaultHighWaterMark(objectMode) {
      return objectMode ? defaultHighWaterMarkObjectMode : defaultHighWaterMarkBytes;
    }
    function setDefaultHighWaterMark(objectMode, value) {
      validateInteger(value, "value", 0);
      if (objectMode) {
        defaultHighWaterMarkObjectMode = value;
      } else {
        defaultHighWaterMarkBytes = value;
      }
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!NumberIsInteger(hwm) || hwm < 0) {
          const name = isDuplex ? `options.${duplexKey}` : "options.highWaterMark";
          throw new ERR_INVALID_ARG_VALUE(name, hwm);
        }
        return MathFloor(hwm);
      }
      return getDefaultHighWaterMark(state.objectMode);
    }
    module2.exports = {
      getHighWaterMark,
      getDefaultHighWaterMark,
      setDefaultHighWaterMark
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/from.js
var require_from = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/from.js"(exports2, module2) {
    "use strict";
    var process2 = require_process();
    var { PromisePrototypeThen, SymbolAsyncIterator, SymbolIterator } = require_primordials();
    var { Buffer: Buffer6 } = require("buffer");
    var { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_STREAM_NULL_VALUES } = require_errors().codes;
    function from(Readable6, iterable, opts) {
      let iterator;
      if (typeof iterable === "string" || iterable instanceof Buffer6) {
        return new Readable6({
          objectMode: true,
          ...opts,
          read() {
            this.push(iterable);
            this.push(null);
          }
        });
      }
      let isAsync;
      if (iterable && iterable[SymbolAsyncIterator]) {
        isAsync = true;
        iterator = iterable[SymbolAsyncIterator]();
      } else if (iterable && iterable[SymbolIterator]) {
        isAsync = false;
        iterator = iterable[SymbolIterator]();
      } else {
        throw new ERR_INVALID_ARG_TYPE2("iterable", ["Iterable"], iterable);
      }
      const readable = new Readable6({
        objectMode: true,
        highWaterMark: 1,
        // TODO(ronag): What options should be allowed?
        ...opts
      });
      let reading = false;
      readable._read = function() {
        if (!reading) {
          reading = true;
          next();
        }
      };
      readable._destroy = function(error2, cb) {
        PromisePrototypeThen(
          close(error2),
          () => process2.nextTick(cb, error2),
          // nextTick is here in case cb throws
          (e6) => process2.nextTick(cb, e6 || error2)
        );
      };
      async function close(error2) {
        const hadError = error2 !== void 0 && error2 !== null;
        const hasThrow = typeof iterator.throw === "function";
        if (hadError && hasThrow) {
          const { value, done } = await iterator.throw(error2);
          await value;
          if (done) {
            return;
          }
        }
        if (typeof iterator.return === "function") {
          const { value } = await iterator.return();
          await value;
        }
      }
      async function next() {
        for (; ; ) {
          try {
            const { value, done } = isAsync ? await iterator.next() : iterator.next();
            if (done) {
              readable.push(null);
            } else {
              const res = value && typeof value.then === "function" ? await value : value;
              if (res === null) {
                reading = false;
                throw new ERR_STREAM_NULL_VALUES();
              } else if (readable.push(res)) {
                continue;
              } else {
                reading = false;
              }
            }
          } catch (err) {
            readable.destroy(err);
          }
          break;
        }
      }
      return readable;
    }
    module2.exports = from;
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/readable.js
var require_readable = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/readable.js"(exports2, module2) {
    "use strict";
    var process2 = require_process();
    var {
      ArrayPrototypeIndexOf,
      NumberIsInteger,
      NumberIsNaN,
      NumberParseInt,
      ObjectDefineProperties,
      ObjectKeys,
      ObjectSetPrototypeOf,
      Promise: Promise2,
      SafeSet,
      SymbolAsyncDispose,
      SymbolAsyncIterator,
      Symbol: Symbol2
    } = require_primordials();
    module2.exports = Readable6;
    Readable6.ReadableState = ReadableState;
    var { EventEmitter: EE } = require("events");
    var { Stream: Stream3, prependListener } = require_legacy();
    var { Buffer: Buffer6 } = require("buffer");
    var { addAbortSignal } = require_add_abort_signal();
    var eos = require_end_of_stream();
    var debug2 = require_util2().debuglog("stream", (fn) => {
      debug2 = fn;
    });
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var { getHighWaterMark, getDefaultHighWaterMark } = require_state();
    var {
      aggregateTwoErrors,
      codes: {
        ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2,
        ERR_METHOD_NOT_IMPLEMENTED,
        ERR_OUT_OF_RANGE,
        ERR_STREAM_PUSH_AFTER_EOF,
        ERR_STREAM_UNSHIFT_AFTER_END_EVENT
      },
      AbortError: AbortError2
    } = require_errors();
    var { validateObject } = require_validators();
    var kPaused = Symbol2("kPaused");
    var { StringDecoder } = require("string_decoder");
    var from = require_from();
    ObjectSetPrototypeOf(Readable6.prototype, Stream3.prototype);
    ObjectSetPrototypeOf(Readable6, Stream3);
    var nop = () => {
    };
    var { errorOrDestroy } = destroyImpl;
    var kObjectMode = 1 << 0;
    var kEnded = 1 << 1;
    var kEndEmitted = 1 << 2;
    var kReading = 1 << 3;
    var kConstructed = 1 << 4;
    var kSync = 1 << 5;
    var kNeedReadable = 1 << 6;
    var kEmittedReadable = 1 << 7;
    var kReadableListening = 1 << 8;
    var kResumeScheduled = 1 << 9;
    var kErrorEmitted = 1 << 10;
    var kEmitClose = 1 << 11;
    var kAutoDestroy = 1 << 12;
    var kDestroyed = 1 << 13;
    var kClosed = 1 << 14;
    var kCloseEmitted = 1 << 15;
    var kMultiAwaitDrain = 1 << 16;
    var kReadingMore = 1 << 17;
    var kDataEmitted = 1 << 18;
    function makeBitMapDescriptor(bit) {
      return {
        enumerable: false,
        get() {
          return (this.state & bit) !== 0;
        },
        set(value) {
          if (value)
            this.state |= bit;
          else
            this.state &= ~bit;
        }
      };
    }
    ObjectDefineProperties(ReadableState.prototype, {
      objectMode: makeBitMapDescriptor(kObjectMode),
      ended: makeBitMapDescriptor(kEnded),
      endEmitted: makeBitMapDescriptor(kEndEmitted),
      reading: makeBitMapDescriptor(kReading),
      // Stream is still being constructed and cannot be
      // destroyed until construction finished or failed.
      // Async construction is opt in, therefore we start as
      // constructed.
      constructed: makeBitMapDescriptor(kConstructed),
      // A flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.
      sync: makeBitMapDescriptor(kSync),
      // Whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      needReadable: makeBitMapDescriptor(kNeedReadable),
      emittedReadable: makeBitMapDescriptor(kEmittedReadable),
      readableListening: makeBitMapDescriptor(kReadableListening),
      resumeScheduled: makeBitMapDescriptor(kResumeScheduled),
      // True if the error was already emitted and should not be thrown again.
      errorEmitted: makeBitMapDescriptor(kErrorEmitted),
      emitClose: makeBitMapDescriptor(kEmitClose),
      autoDestroy: makeBitMapDescriptor(kAutoDestroy),
      // Has it been destroyed.
      destroyed: makeBitMapDescriptor(kDestroyed),
      // Indicates whether the stream has finished destroying.
      closed: makeBitMapDescriptor(kClosed),
      // True if close has been emitted or would have been emitted
      // depending on emitClose.
      closeEmitted: makeBitMapDescriptor(kCloseEmitted),
      multiAwaitDrain: makeBitMapDescriptor(kMultiAwaitDrain),
      // If true, a maybeReadMore has been scheduled.
      readingMore: makeBitMapDescriptor(kReadingMore),
      dataEmitted: makeBitMapDescriptor(kDataEmitted)
    });
    function ReadableState(options, stream, isDuplex) {
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof require_duplex();
      this.state = kEmitClose | kAutoDestroy | kConstructed | kSync;
      if (options && options.objectMode)
        this.state |= kObjectMode;
      if (isDuplex && options && options.readableObjectMode)
        this.state |= kObjectMode;
      this.highWaterMark = options ? getHighWaterMark(this, options, "readableHighWaterMark", isDuplex) : getDefaultHighWaterMark(false);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = [];
      this.flowing = null;
      this[kPaused] = null;
      if (options && options.emitClose === false)
        this.state &= ~kEmitClose;
      if (options && options.autoDestroy === false)
        this.state &= ~kAutoDestroy;
      this.errored = null;
      this.defaultEncoding = options && options.defaultEncoding || "utf8";
      this.awaitDrainWriters = null;
      this.decoder = null;
      this.encoding = null;
      if (options && options.encoding) {
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable6(options) {
      if (!(this instanceof Readable6))
        return new Readable6(options);
      const isDuplex = this instanceof require_duplex();
      this._readableState = new ReadableState(options, this, isDuplex);
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.construct === "function")
          this._construct = options.construct;
        if (options.signal && !isDuplex)
          addAbortSignal(options.signal, this);
      }
      Stream3.call(this, options);
      destroyImpl.construct(this, () => {
        if (this._readableState.needReadable) {
          maybeReadMore(this, this._readableState);
        }
      });
    }
    Readable6.prototype.destroy = destroyImpl.destroy;
    Readable6.prototype._undestroy = destroyImpl.undestroy;
    Readable6.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable6.prototype[EE.captureRejectionSymbol] = function(err) {
      this.destroy(err);
    };
    Readable6.prototype[SymbolAsyncDispose] = function() {
      let error2;
      if (!this.destroyed) {
        error2 = this.readableEnded ? null : new AbortError2();
        this.destroy(error2);
      }
      return new Promise2((resolve2, reject) => eos(this, (err) => err && err !== error2 ? reject(err) : resolve2(null)));
    };
    Readable6.prototype.push = function(chunk, encoding) {
      return readableAddChunk(this, chunk, encoding, false);
    };
    Readable6.prototype.unshift = function(chunk, encoding) {
      return readableAddChunk(this, chunk, encoding, true);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront) {
      debug2("readableAddChunk", chunk);
      const state = stream._readableState;
      let err;
      if ((state.state & kObjectMode) === 0) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (state.encoding !== encoding) {
            if (addToFront && state.encoding) {
              chunk = Buffer6.from(chunk, encoding).toString(state.encoding);
            } else {
              chunk = Buffer6.from(chunk, encoding);
              encoding = "";
            }
          }
        } else if (chunk instanceof Buffer6) {
          encoding = "";
        } else if (Stream3._isUint8Array(chunk)) {
          chunk = Stream3._uint8ArrayToBuffer(chunk);
          encoding = "";
        } else if (chunk != null) {
          err = new ERR_INVALID_ARG_TYPE2("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
      }
      if (err) {
        errorOrDestroy(stream, err);
      } else if (chunk === null) {
        state.state &= ~kReading;
        onEofChunk(stream, state);
      } else if ((state.state & kObjectMode) !== 0 || chunk && chunk.length > 0) {
        if (addToFront) {
          if ((state.state & kEndEmitted) !== 0)
            errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
          else if (state.destroyed || state.errored)
            return false;
          else
            addChunk(stream, state, chunk, true);
        } else if (state.ended) {
          errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state.destroyed || state.errored) {
          return false;
        } else {
          state.state &= ~kReading;
          if (state.decoder && !encoding) {
            chunk = state.decoder.write(chunk);
            if (state.objectMode || chunk.length !== 0)
              addChunk(stream, state, chunk, false);
            else
              maybeReadMore(stream, state);
          } else {
            addChunk(stream, state, chunk, false);
          }
        }
      } else if (!addToFront) {
        state.state &= ~kReading;
        maybeReadMore(stream, state);
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync && stream.listenerCount("data") > 0) {
        if ((state.state & kMultiAwaitDrain) !== 0) {
          state.awaitDrainWriters.clear();
        } else {
          state.awaitDrainWriters = null;
        }
        state.dataEmitted = true;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if ((state.state & kNeedReadable) !== 0)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    Readable6.prototype.isPaused = function() {
      const state = this._readableState;
      return state[kPaused] === true || state.flowing === false;
    };
    Readable6.prototype.setEncoding = function(enc) {
      const decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      const buffer = this._readableState.buffer;
      let content = "";
      for (const data of buffer) {
        content += decoder.write(data);
      }
      buffer.clear();
      if (content !== "")
        buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n6) {
      if (n6 > MAX_HWM) {
        throw new ERR_OUT_OF_RANGE("size", "<= 1GiB", n6);
      } else {
        n6--;
        n6 |= n6 >>> 1;
        n6 |= n6 >>> 2;
        n6 |= n6 >>> 4;
        n6 |= n6 >>> 8;
        n6 |= n6 >>> 16;
        n6++;
      }
      return n6;
    }
    function howMuchToRead(n6, state) {
      if (n6 <= 0 || state.length === 0 && state.ended)
        return 0;
      if ((state.state & kObjectMode) !== 0)
        return 1;
      if (NumberIsNaN(n6)) {
        if (state.flowing && state.length)
          return state.buffer.first().length;
        return state.length;
      }
      if (n6 <= state.length)
        return n6;
      return state.ended ? state.length : 0;
    }
    Readable6.prototype.read = function(n6) {
      debug2("read", n6);
      if (n6 === void 0) {
        n6 = NaN;
      } else if (!NumberIsInteger(n6)) {
        n6 = NumberParseInt(n6, 10);
      }
      const state = this._readableState;
      const nOrig = n6;
      if (n6 > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n6);
      if (n6 !== 0)
        state.state &= ~kEmittedReadable;
      if (n6 === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug2("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n6 = howMuchToRead(n6, state);
      if (n6 === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      let doRead = (state.state & kNeedReadable) !== 0;
      debug2("need readable", doRead);
      if (state.length === 0 || state.length - n6 < state.highWaterMark) {
        doRead = true;
        debug2("length less than watermark", doRead);
      }
      if (state.ended || state.reading || state.destroyed || state.errored || !state.constructed) {
        doRead = false;
        debug2("reading, ended or constructing", doRead);
      } else if (doRead) {
        debug2("do read");
        state.state |= kReading | kSync;
        if (state.length === 0)
          state.state |= kNeedReadable;
        try {
          this._read(state.highWaterMark);
        } catch (err) {
          errorOrDestroy(this, err);
        }
        state.state &= ~kSync;
        if (!state.reading)
          n6 = howMuchToRead(nOrig, state);
      }
      let ret;
      if (n6 > 0)
        ret = fromList(n6, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n6 = 0;
      } else {
        state.length -= n6;
        if (state.multiAwaitDrain) {
          state.awaitDrainWriters.clear();
        } else {
          state.awaitDrainWriters = null;
        }
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n6 && state.ended)
          endReadable(this);
      }
      if (ret !== null && !state.errorEmitted && !state.closeEmitted) {
        state.dataEmitted = true;
        this.emit("data", ret);
      }
      return ret;
    };
    function onEofChunk(stream, state) {
      debug2("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        const chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        state.emittedReadable = true;
        emitReadable_(stream);
      }
    }
    function emitReadable(stream) {
      const state = stream._readableState;
      debug2("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug2("emitReadable", state.flowing);
        state.emittedReadable = true;
        process2.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      const state = stream._readableState;
      debug2("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && !state.errored && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore && state.constructed) {
        state.readingMore = true;
        process2.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        const len = state.length;
        debug2("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable6.prototype._read = function(n6) {
      throw new ERR_METHOD_NOT_IMPLEMENTED("_read()");
    };
    Readable6.prototype.pipe = function(dest, pipeOpts) {
      const src = this;
      const state = this._readableState;
      if (state.pipes.length === 1) {
        if (!state.multiAwaitDrain) {
          state.multiAwaitDrain = true;
          state.awaitDrainWriters = new SafeSet(state.awaitDrainWriters ? [state.awaitDrainWriters] : []);
        }
      }
      state.pipes.push(dest);
      debug2("pipe count=%d opts=%j", state.pipes.length, pipeOpts);
      const doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process2.stdout && dest !== process2.stderr;
      const endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process2.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug2("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug2("onend");
        dest.end();
      }
      let ondrain;
      let cleanedUp = false;
      function cleanup() {
        debug2("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        if (ondrain) {
          dest.removeListener("drain", ondrain);
        }
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (ondrain && state.awaitDrainWriters && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      function pause() {
        if (!cleanedUp) {
          if (state.pipes.length === 1 && state.pipes[0] === dest) {
            debug2("false write response, pause", 0);
            state.awaitDrainWriters = dest;
            state.multiAwaitDrain = false;
          } else if (state.pipes.length > 1 && state.pipes.includes(dest)) {
            debug2("false write response, pause", state.awaitDrainWriters.size);
            state.awaitDrainWriters.add(dest);
          }
          src.pause();
        }
        if (!ondrain) {
          ondrain = pipeOnDrain(src, dest);
          dest.on("drain", ondrain);
        }
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug2("ondata");
        const ret = dest.write(chunk);
        debug2("dest.write", ret);
        if (ret === false) {
          pause();
        }
      }
      function onerror(er2) {
        debug2("onerror", er2);
        unpipe();
        dest.removeListener("error", onerror);
        if (dest.listenerCount("error") === 0) {
          const s6 = dest._writableState || dest._readableState;
          if (s6 && !s6.errorEmitted) {
            errorOrDestroy(dest, er2);
          } else {
            dest.emit("error", er2);
          }
        }
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug2("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug2("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (dest.writableNeedDrain === true) {
        pause();
      } else if (!state.flowing) {
        debug2("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src, dest) {
      return function pipeOnDrainFunctionResult() {
        const state = src._readableState;
        if (state.awaitDrainWriters === dest) {
          debug2("pipeOnDrain", 1);
          state.awaitDrainWriters = null;
        } else if (state.multiAwaitDrain) {
          debug2("pipeOnDrain", state.awaitDrainWriters.size);
          state.awaitDrainWriters.delete(dest);
        }
        if ((!state.awaitDrainWriters || state.awaitDrainWriters.size === 0) && src.listenerCount("data")) {
          src.resume();
        }
      };
    }
    Readable6.prototype.unpipe = function(dest) {
      const state = this._readableState;
      const unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipes.length === 0)
        return this;
      if (!dest) {
        const dests = state.pipes;
        state.pipes = [];
        this.pause();
        for (let i6 = 0; i6 < dests.length; i6++)
          dests[i6].emit("unpipe", this, {
            hasUnpiped: false
          });
        return this;
      }
      const index2 = ArrayPrototypeIndexOf(state.pipes, dest);
      if (index2 === -1)
        return this;
      state.pipes.splice(index2, 1);
      if (state.pipes.length === 0)
        this.pause();
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable6.prototype.on = function(ev, fn) {
      const res = Stream3.prototype.on.call(this, ev, fn);
      const state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug2("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process2.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable6.prototype.addListener = Readable6.prototype.on;
    Readable6.prototype.removeListener = function(ev, fn) {
      const res = Stream3.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process2.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable6.prototype.off = Readable6.prototype.removeListener;
    Readable6.prototype.removeAllListeners = function(ev) {
      const res = Stream3.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process2.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      const state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && state[kPaused] === false) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      } else if (!state.readableListening) {
        state.flowing = null;
      }
    }
    function nReadingNextTick(self2) {
      debug2("readable nexttick read 0");
      self2.read(0);
    }
    Readable6.prototype.resume = function() {
      const state = this._readableState;
      if (!state.flowing) {
        debug2("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state[kPaused] = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process2.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug2("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable6.prototype.pause = function() {
      debug2("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug2("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState[kPaused] = true;
      return this;
    };
    function flow(stream) {
      const state = stream._readableState;
      debug2("flow", state.flowing);
      while (state.flowing && stream.read() !== null)
        ;
    }
    Readable6.prototype.wrap = function(stream) {
      let paused = false;
      stream.on("data", (chunk) => {
        if (!this.push(chunk) && stream.pause) {
          paused = true;
          stream.pause();
        }
      });
      stream.on("end", () => {
        this.push(null);
      });
      stream.on("error", (err) => {
        errorOrDestroy(this, err);
      });
      stream.on("close", () => {
        this.destroy();
      });
      stream.on("destroy", () => {
        this.destroy();
      });
      this._read = () => {
        if (paused && stream.resume) {
          paused = false;
          stream.resume();
        }
      };
      const streamKeys = ObjectKeys(stream);
      for (let j6 = 1; j6 < streamKeys.length; j6++) {
        const i6 = streamKeys[j6];
        if (this[i6] === void 0 && typeof stream[i6] === "function") {
          this[i6] = stream[i6].bind(stream);
        }
      }
      return this;
    };
    Readable6.prototype[SymbolAsyncIterator] = function() {
      return streamToAsyncIterator(this);
    };
    Readable6.prototype.iterator = function(options) {
      if (options !== void 0) {
        validateObject(options, "options");
      }
      return streamToAsyncIterator(this, options);
    };
    function streamToAsyncIterator(stream, options) {
      if (typeof stream.read !== "function") {
        stream = Readable6.wrap(stream, {
          objectMode: true
        });
      }
      const iter = createAsyncIterator(stream, options);
      iter.stream = stream;
      return iter;
    }
    async function* createAsyncIterator(stream, options) {
      let callback = nop;
      function next(resolve2) {
        if (this === stream) {
          callback();
          callback = nop;
        } else {
          callback = resolve2;
        }
      }
      stream.on("readable", next);
      let error2;
      const cleanup = eos(
        stream,
        {
          writable: false
        },
        (err) => {
          error2 = err ? aggregateTwoErrors(error2, err) : null;
          callback();
          callback = nop;
        }
      );
      try {
        while (true) {
          const chunk = stream.destroyed ? null : stream.read();
          if (chunk !== null) {
            yield chunk;
          } else if (error2) {
            throw error2;
          } else if (error2 === null) {
            return;
          } else {
            await new Promise2(next);
          }
        }
      } catch (err) {
        error2 = aggregateTwoErrors(error2, err);
        throw error2;
      } finally {
        if ((error2 || (options === null || options === void 0 ? void 0 : options.destroyOnReturn) !== false) && (error2 === void 0 || stream._readableState.autoDestroy)) {
          destroyImpl.destroyer(stream, null);
        } else {
          stream.off("readable", next);
          cleanup();
        }
      }
    }
    ObjectDefineProperties(Readable6.prototype, {
      readable: {
        __proto__: null,
        get() {
          const r6 = this._readableState;
          return !!r6 && r6.readable !== false && !r6.destroyed && !r6.errorEmitted && !r6.endEmitted;
        },
        set(val2) {
          if (this._readableState) {
            this._readableState.readable = !!val2;
          }
        }
      },
      readableDidRead: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return this._readableState.dataEmitted;
        }
      },
      readableAborted: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return !!(this._readableState.readable !== false && (this._readableState.destroyed || this._readableState.errored) && !this._readableState.endEmitted);
        }
      },
      readableHighWaterMark: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return this._readableState.highWaterMark;
        }
      },
      readableBuffer: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return this._readableState && this._readableState.buffer;
        }
      },
      readableFlowing: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return this._readableState.flowing;
        },
        set: function(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        }
      },
      readableLength: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState.length;
        }
      },
      readableObjectMode: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState ? this._readableState.objectMode : false;
        }
      },
      readableEncoding: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState ? this._readableState.encoding : null;
        }
      },
      errored: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState ? this._readableState.errored : null;
        }
      },
      closed: {
        __proto__: null,
        get() {
          return this._readableState ? this._readableState.closed : false;
        }
      },
      destroyed: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState ? this._readableState.destroyed : false;
        },
        set(value) {
          if (!this._readableState) {
            return;
          }
          this._readableState.destroyed = value;
        }
      },
      readableEnded: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._readableState ? this._readableState.endEmitted : false;
        }
      }
    });
    ObjectDefineProperties(ReadableState.prototype, {
      // Legacy getter for `pipesCount`.
      pipesCount: {
        __proto__: null,
        get() {
          return this.pipes.length;
        }
      },
      // Legacy property for `paused`.
      paused: {
        __proto__: null,
        get() {
          return this[kPaused] !== false;
        },
        set(value) {
          this[kPaused] = !!value;
        }
      }
    });
    Readable6._fromList = fromList;
    function fromList(n6, state) {
      if (state.length === 0)
        return null;
      let ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n6 || n6 >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n6, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      const state = stream._readableState;
      debug2("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process2.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug2("endReadableNT", state.endEmitted, state.length);
      if (!state.errored && !state.closeEmitted && !state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.emit("end");
        if (stream.writable && stream.allowHalfOpen === false) {
          process2.nextTick(endWritableNT, stream);
        } else if (state.autoDestroy) {
          const wState = stream._writableState;
          const autoDestroy = !wState || wState.autoDestroy && // We don't expect the writable to ever 'finish'
          // if writable is explicitly set to false.
          (wState.finished || wState.writable === false);
          if (autoDestroy) {
            stream.destroy();
          }
        }
      }
    }
    function endWritableNT(stream) {
      const writable = stream.writable && !stream.writableEnded && !stream.destroyed;
      if (writable) {
        stream.end();
      }
    }
    Readable6.from = function(iterable, opts) {
      return from(Readable6, iterable, opts);
    };
    var webStreamsAdapters;
    function lazyWebStreams() {
      if (webStreamsAdapters === void 0)
        webStreamsAdapters = {};
      return webStreamsAdapters;
    }
    Readable6.fromWeb = function(readableStream, options) {
      return lazyWebStreams().newStreamReadableFromReadableStream(readableStream, options);
    };
    Readable6.toWeb = function(streamReadable, options) {
      return lazyWebStreams().newReadableStreamFromStreamReadable(streamReadable, options);
    };
    Readable6.wrap = function(src, options) {
      var _ref, _src$readableObjectMo;
      return new Readable6({
        objectMode: (_ref = (_src$readableObjectMo = src.readableObjectMode) !== null && _src$readableObjectMo !== void 0 ? _src$readableObjectMo : src.objectMode) !== null && _ref !== void 0 ? _ref : true,
        ...options,
        destroy(err, callback) {
          destroyImpl.destroyer(src, err);
          callback(err);
        }
      }).wrap(src);
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/writable.js
var require_writable = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/writable.js"(exports2, module2) {
    "use strict";
    var process2 = require_process();
    var {
      ArrayPrototypeSlice,
      Error: Error2,
      FunctionPrototypeSymbolHasInstance,
      ObjectDefineProperty,
      ObjectDefineProperties,
      ObjectSetPrototypeOf,
      StringPrototypeToLowerCase,
      Symbol: Symbol2,
      SymbolHasInstance
    } = require_primordials();
    module2.exports = Writable2;
    Writable2.WritableState = WritableState;
    var { EventEmitter: EE } = require("events");
    var Stream3 = require_legacy().Stream;
    var { Buffer: Buffer6 } = require("buffer");
    var destroyImpl = require_destroy();
    var { addAbortSignal } = require_add_abort_signal();
    var { getHighWaterMark, getDefaultHighWaterMark } = require_state();
    var {
      ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2,
      ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK,
      ERR_STREAM_CANNOT_PIPE,
      ERR_STREAM_DESTROYED,
      ERR_STREAM_ALREADY_FINISHED,
      ERR_STREAM_NULL_VALUES,
      ERR_STREAM_WRITE_AFTER_END,
      ERR_UNKNOWN_ENCODING
    } = require_errors().codes;
    var { errorOrDestroy } = destroyImpl;
    ObjectSetPrototypeOf(Writable2.prototype, Stream3.prototype);
    ObjectSetPrototypeOf(Writable2, Stream3);
    function nop() {
    }
    var kOnFinished = Symbol2("kOnFinished");
    function WritableState(options, stream, isDuplex) {
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof require_duplex();
      this.objectMode = !!(options && options.objectMode);
      if (isDuplex)
        this.objectMode = this.objectMode || !!(options && options.writableObjectMode);
      this.highWaterMark = options ? getHighWaterMark(this, options, "writableHighWaterMark", isDuplex) : getDefaultHighWaterMark(false);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      const noDecode = !!(options && options.decodeStrings === false);
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options && options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = onwrite.bind(void 0, stream);
      this.writecb = null;
      this.writelen = 0;
      this.afterWriteTickInfo = null;
      resetBuffer(this);
      this.pendingcb = 0;
      this.constructed = true;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = !options || options.emitClose !== false;
      this.autoDestroy = !options || options.autoDestroy !== false;
      this.errored = null;
      this.closed = false;
      this.closeEmitted = false;
      this[kOnFinished] = [];
    }
    function resetBuffer(state) {
      state.buffered = [];
      state.bufferedIndex = 0;
      state.allBuffers = true;
      state.allNoop = true;
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      return ArrayPrototypeSlice(this.buffered, this.bufferedIndex);
    };
    ObjectDefineProperty(WritableState.prototype, "bufferedRequestCount", {
      __proto__: null,
      get() {
        return this.buffered.length - this.bufferedIndex;
      }
    });
    function Writable2(options) {
      const isDuplex = this instanceof require_duplex();
      if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable2, this))
        return new Writable2(options);
      this._writableState = new WritableState(options, this, isDuplex);
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
        if (typeof options.construct === "function")
          this._construct = options.construct;
        if (options.signal)
          addAbortSignal(options.signal, this);
      }
      Stream3.call(this, options);
      destroyImpl.construct(this, () => {
        const state = this._writableState;
        if (!state.writing) {
          clearBuffer(this, state);
        }
        finishMaybe(this, state);
      });
    }
    ObjectDefineProperty(Writable2, SymbolHasInstance, {
      __proto__: null,
      value: function(object) {
        if (FunctionPrototypeSymbolHasInstance(this, object))
          return true;
        if (this !== Writable2)
          return false;
        return object && object._writableState instanceof WritableState;
      }
    });
    Writable2.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function _write(stream, chunk, encoding, cb) {
      const state = stream._writableState;
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = state.defaultEncoding;
      } else {
        if (!encoding)
          encoding = state.defaultEncoding;
        else if (encoding !== "buffer" && !Buffer6.isEncoding(encoding))
          throw new ERR_UNKNOWN_ENCODING(encoding);
        if (typeof cb !== "function")
          cb = nop;
      }
      if (chunk === null) {
        throw new ERR_STREAM_NULL_VALUES();
      } else if (!state.objectMode) {
        if (typeof chunk === "string") {
          if (state.decodeStrings !== false) {
            chunk = Buffer6.from(chunk, encoding);
            encoding = "buffer";
          }
        } else if (chunk instanceof Buffer6) {
          encoding = "buffer";
        } else if (Stream3._isUint8Array(chunk)) {
          chunk = Stream3._uint8ArrayToBuffer(chunk);
          encoding = "buffer";
        } else {
          throw new ERR_INVALID_ARG_TYPE2("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }
      }
      let err;
      if (state.ending) {
        err = new ERR_STREAM_WRITE_AFTER_END();
      } else if (state.destroyed) {
        err = new ERR_STREAM_DESTROYED("write");
      }
      if (err) {
        process2.nextTick(cb, err);
        errorOrDestroy(stream, err, true);
        return err;
      }
      state.pendingcb++;
      return writeOrBuffer(stream, state, chunk, encoding, cb);
    }
    Writable2.prototype.write = function(chunk, encoding, cb) {
      return _write(this, chunk, encoding, cb) === true;
    };
    Writable2.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable2.prototype.uncork = function() {
      const state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing)
          clearBuffer(this, state);
      }
    };
    Writable2.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = StringPrototypeToLowerCase(encoding);
      if (!Buffer6.isEncoding(encoding))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    function writeOrBuffer(stream, state, chunk, encoding, callback) {
      const len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      const ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked || state.errored || !state.constructed) {
        state.buffered.push({
          chunk,
          encoding,
          callback
        });
        if (state.allBuffers && encoding !== "buffer") {
          state.allBuffers = false;
        }
        if (state.allNoop && callback !== nop) {
          state.allNoop = false;
        }
      } else {
        state.writelen = len;
        state.writecb = callback;
        state.writing = true;
        state.sync = true;
        stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }
      return ret && !state.errored && !state.destroyed;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, er2, cb) {
      --state.pendingcb;
      cb(er2);
      errorBuffer(state);
      errorOrDestroy(stream, er2);
    }
    function onwrite(stream, er2) {
      const state = stream._writableState;
      const sync = state.sync;
      const cb = state.writecb;
      if (typeof cb !== "function") {
        errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK());
        return;
      }
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
      if (er2) {
        er2.stack;
        if (!state.errored) {
          state.errored = er2;
        }
        if (stream._readableState && !stream._readableState.errored) {
          stream._readableState.errored = er2;
        }
        if (sync) {
          process2.nextTick(onwriteError, stream, state, er2, cb);
        } else {
          onwriteError(stream, state, er2, cb);
        }
      } else {
        if (state.buffered.length > state.bufferedIndex) {
          clearBuffer(stream, state);
        }
        if (sync) {
          if (state.afterWriteTickInfo !== null && state.afterWriteTickInfo.cb === cb) {
            state.afterWriteTickInfo.count++;
          } else {
            state.afterWriteTickInfo = {
              count: 1,
              cb,
              stream,
              state
            };
            process2.nextTick(afterWriteTick, state.afterWriteTickInfo);
          }
        } else {
          afterWrite(stream, state, 1, cb);
        }
      }
    }
    function afterWriteTick({ stream, state, count, cb }) {
      state.afterWriteTickInfo = null;
      return afterWrite(stream, state, count, cb);
    }
    function afterWrite(stream, state, count, cb) {
      const needDrain = !state.ending && !stream.destroyed && state.length === 0 && state.needDrain;
      if (needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
      while (count-- > 0) {
        state.pendingcb--;
        cb();
      }
      if (state.destroyed) {
        errorBuffer(state);
      }
      finishMaybe(stream, state);
    }
    function errorBuffer(state) {
      if (state.writing) {
        return;
      }
      for (let n6 = state.bufferedIndex; n6 < state.buffered.length; ++n6) {
        var _state$errored;
        const { chunk, callback } = state.buffered[n6];
        const len = state.objectMode ? 1 : chunk.length;
        state.length -= len;
        callback(
          (_state$errored = state.errored) !== null && _state$errored !== void 0 ? _state$errored : new ERR_STREAM_DESTROYED("write")
        );
      }
      const onfinishCallbacks = state[kOnFinished].splice(0);
      for (let i6 = 0; i6 < onfinishCallbacks.length; i6++) {
        var _state$errored2;
        onfinishCallbacks[i6](
          (_state$errored2 = state.errored) !== null && _state$errored2 !== void 0 ? _state$errored2 : new ERR_STREAM_DESTROYED("end")
        );
      }
      resetBuffer(state);
    }
    function clearBuffer(stream, state) {
      if (state.corked || state.bufferProcessing || state.destroyed || !state.constructed) {
        return;
      }
      const { buffered, bufferedIndex, objectMode } = state;
      const bufferedLength = buffered.length - bufferedIndex;
      if (!bufferedLength) {
        return;
      }
      let i6 = bufferedIndex;
      state.bufferProcessing = true;
      if (bufferedLength > 1 && stream._writev) {
        state.pendingcb -= bufferedLength - 1;
        const callback = state.allNoop ? nop : (err) => {
          for (let n6 = i6; n6 < buffered.length; ++n6) {
            buffered[n6].callback(err);
          }
        };
        const chunks = state.allNoop && i6 === 0 ? buffered : ArrayPrototypeSlice(buffered, i6);
        chunks.allBuffers = state.allBuffers;
        doWrite(stream, state, true, state.length, chunks, "", callback);
        resetBuffer(state);
      } else {
        do {
          const { chunk, encoding, callback } = buffered[i6];
          buffered[i6++] = null;
          const len = objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, callback);
        } while (i6 < buffered.length && !state.writing);
        if (i6 === buffered.length) {
          resetBuffer(state);
        } else if (i6 > 256) {
          buffered.splice(0, i6);
          state.bufferedIndex = 0;
        } else {
          state.bufferedIndex = i6;
        }
      }
      state.bufferProcessing = false;
    }
    Writable2.prototype._write = function(chunk, encoding, cb) {
      if (this._writev) {
        this._writev(
          [
            {
              chunk,
              encoding
            }
          ],
          cb
        );
      } else {
        throw new ERR_METHOD_NOT_IMPLEMENTED("_write()");
      }
    };
    Writable2.prototype._writev = null;
    Writable2.prototype.end = function(chunk, encoding, cb) {
      const state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      let err;
      if (chunk !== null && chunk !== void 0) {
        const ret = _write(this, chunk, encoding);
        if (ret instanceof Error2) {
          err = ret;
        }
      }
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (err) {
      } else if (!state.errored && !state.ending) {
        state.ending = true;
        finishMaybe(this, state, true);
        state.ended = true;
      } else if (state.finished) {
        err = new ERR_STREAM_ALREADY_FINISHED("end");
      } else if (state.destroyed) {
        err = new ERR_STREAM_DESTROYED("end");
      }
      if (typeof cb === "function") {
        if (err || state.finished) {
          process2.nextTick(cb, err);
        } else {
          state[kOnFinished].push(cb);
        }
      }
      return this;
    };
    function needFinish(state) {
      return state.ending && !state.destroyed && state.constructed && state.length === 0 && !state.errored && state.buffered.length === 0 && !state.finished && !state.writing && !state.errorEmitted && !state.closeEmitted;
    }
    function callFinal(stream, state) {
      let called = false;
      function onFinish(err) {
        if (called) {
          errorOrDestroy(stream, err !== null && err !== void 0 ? err : ERR_MULTIPLE_CALLBACK());
          return;
        }
        called = true;
        state.pendingcb--;
        if (err) {
          const onfinishCallbacks = state[kOnFinished].splice(0);
          for (let i6 = 0; i6 < onfinishCallbacks.length; i6++) {
            onfinishCallbacks[i6](err);
          }
          errorOrDestroy(stream, err, state.sync);
        } else if (needFinish(state)) {
          state.prefinished = true;
          stream.emit("prefinish");
          state.pendingcb++;
          process2.nextTick(finish, stream, state);
        }
      }
      state.sync = true;
      state.pendingcb++;
      try {
        stream._final(onFinish);
      } catch (err) {
        onFinish(err);
      }
      state.sync = false;
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.finalCalled = true;
          callFinal(stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state, sync) {
      if (needFinish(state)) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          if (sync) {
            state.pendingcb++;
            process2.nextTick(
              (stream2, state2) => {
                if (needFinish(state2)) {
                  finish(stream2, state2);
                } else {
                  state2.pendingcb--;
                }
              },
              stream,
              state
            );
          } else if (needFinish(state)) {
            state.pendingcb++;
            finish(stream, state);
          }
        }
      }
    }
    function finish(stream, state) {
      state.pendingcb--;
      state.finished = true;
      const onfinishCallbacks = state[kOnFinished].splice(0);
      for (let i6 = 0; i6 < onfinishCallbacks.length; i6++) {
        onfinishCallbacks[i6]();
      }
      stream.emit("finish");
      if (state.autoDestroy) {
        const rState = stream._readableState;
        const autoDestroy = !rState || rState.autoDestroy && // We don't expect the readable to ever 'end'
        // if readable is explicitly set to false.
        (rState.endEmitted || rState.readable === false);
        if (autoDestroy) {
          stream.destroy();
        }
      }
    }
    ObjectDefineProperties(Writable2.prototype, {
      closed: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.closed : false;
        }
      },
      destroyed: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.destroyed : false;
        },
        set(value) {
          if (this._writableState) {
            this._writableState.destroyed = value;
          }
        }
      },
      writable: {
        __proto__: null,
        get() {
          const w5 = this._writableState;
          return !!w5 && w5.writable !== false && !w5.destroyed && !w5.errored && !w5.ending && !w5.ended;
        },
        set(val2) {
          if (this._writableState) {
            this._writableState.writable = !!val2;
          }
        }
      },
      writableFinished: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.finished : false;
        }
      },
      writableObjectMode: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.objectMode : false;
        }
      },
      writableBuffer: {
        __proto__: null,
        get() {
          return this._writableState && this._writableState.getBuffer();
        }
      },
      writableEnded: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.ending : false;
        }
      },
      writableNeedDrain: {
        __proto__: null,
        get() {
          const wState = this._writableState;
          if (!wState)
            return false;
          return !wState.destroyed && !wState.ending && wState.needDrain;
        }
      },
      writableHighWaterMark: {
        __proto__: null,
        get() {
          return this._writableState && this._writableState.highWaterMark;
        }
      },
      writableCorked: {
        __proto__: null,
        get() {
          return this._writableState ? this._writableState.corked : 0;
        }
      },
      writableLength: {
        __proto__: null,
        get() {
          return this._writableState && this._writableState.length;
        }
      },
      errored: {
        __proto__: null,
        enumerable: false,
        get() {
          return this._writableState ? this._writableState.errored : null;
        }
      },
      writableAborted: {
        __proto__: null,
        enumerable: false,
        get: function() {
          return !!(this._writableState.writable !== false && (this._writableState.destroyed || this._writableState.errored) && !this._writableState.finished);
        }
      }
    });
    var destroy = destroyImpl.destroy;
    Writable2.prototype.destroy = function(err, cb) {
      const state = this._writableState;
      if (!state.destroyed && (state.bufferedIndex < state.buffered.length || state[kOnFinished].length)) {
        process2.nextTick(errorBuffer, state);
      }
      destroy.call(this, err, cb);
      return this;
    };
    Writable2.prototype._undestroy = destroyImpl.undestroy;
    Writable2.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Writable2.prototype[EE.captureRejectionSymbol] = function(err) {
      this.destroy(err);
    };
    var webStreamsAdapters;
    function lazyWebStreams() {
      if (webStreamsAdapters === void 0)
        webStreamsAdapters = {};
      return webStreamsAdapters;
    }
    Writable2.fromWeb = function(writableStream, options) {
      return lazyWebStreams().newStreamWritableFromWritableStream(writableStream, options);
    };
    Writable2.toWeb = function(streamWritable) {
      return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable);
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/duplexify.js
var require_duplexify = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/duplexify.js"(exports2, module2) {
    "use strict";
    var process2 = require_process();
    var bufferModule = require("buffer");
    var {
      isReadable,
      isWritable,
      isIterable,
      isNodeStream,
      isReadableNodeStream,
      isWritableNodeStream,
      isDuplexNodeStream,
      isReadableStream,
      isWritableStream
    } = require_utils2();
    var eos = require_end_of_stream();
    var {
      AbortError: AbortError2,
      codes: { ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_INVALID_RETURN_VALUE }
    } = require_errors();
    var { destroyer } = require_destroy();
    var Duplex = require_duplex();
    var Readable6 = require_readable();
    var Writable2 = require_writable();
    var { createDeferredPromise } = require_util2();
    var from = require_from();
    var Blob5 = globalThis.Blob || bufferModule.Blob;
    var isBlob3 = typeof Blob5 !== "undefined" ? function isBlob4(b6) {
      return b6 instanceof Blob5;
    } : function isBlob4(b6) {
      return false;
    };
    var AbortController2 = globalThis.AbortController || require_abort_controller().AbortController;
    var { FunctionPrototypeCall } = require_primordials();
    var Duplexify = class extends Duplex {
      constructor(options) {
        super(options);
        if ((options === null || options === void 0 ? void 0 : options.readable) === false) {
          this._readableState.readable = false;
          this._readableState.ended = true;
          this._readableState.endEmitted = true;
        }
        if ((options === null || options === void 0 ? void 0 : options.writable) === false) {
          this._writableState.writable = false;
          this._writableState.ending = true;
          this._writableState.ended = true;
          this._writableState.finished = true;
        }
      }
    };
    module2.exports = function duplexify(body, name) {
      if (isDuplexNodeStream(body)) {
        return body;
      }
      if (isReadableNodeStream(body)) {
        return _duplexify({
          readable: body
        });
      }
      if (isWritableNodeStream(body)) {
        return _duplexify({
          writable: body
        });
      }
      if (isNodeStream(body)) {
        return _duplexify({
          writable: false,
          readable: false
        });
      }
      if (isReadableStream(body)) {
        return _duplexify({
          readable: Readable6.fromWeb(body)
        });
      }
      if (isWritableStream(body)) {
        return _duplexify({
          writable: Writable2.fromWeb(body)
        });
      }
      if (typeof body === "function") {
        const { value, write, final, destroy } = fromAsyncGen(body);
        if (isIterable(value)) {
          return from(Duplexify, value, {
            // TODO (ronag): highWaterMark?
            objectMode: true,
            write,
            final,
            destroy
          });
        }
        const then2 = value === null || value === void 0 ? void 0 : value.then;
        if (typeof then2 === "function") {
          let d6;
          const promise = FunctionPrototypeCall(
            then2,
            value,
            (val2) => {
              if (val2 != null) {
                throw new ERR_INVALID_RETURN_VALUE("nully", "body", val2);
              }
            },
            (err) => {
              destroyer(d6, err);
            }
          );
          return d6 = new Duplexify({
            // TODO (ronag): highWaterMark?
            objectMode: true,
            readable: false,
            write,
            final(cb) {
              final(async () => {
                try {
                  await promise;
                  process2.nextTick(cb, null);
                } catch (err) {
                  process2.nextTick(cb, err);
                }
              });
            },
            destroy
          });
        }
        throw new ERR_INVALID_RETURN_VALUE("Iterable, AsyncIterable or AsyncFunction", name, value);
      }
      if (isBlob3(body)) {
        return duplexify(body.arrayBuffer());
      }
      if (isIterable(body)) {
        return from(Duplexify, body, {
          // TODO (ronag): highWaterMark?
          objectMode: true,
          writable: false
        });
      }
      if (isReadableStream(body === null || body === void 0 ? void 0 : body.readable) && isWritableStream(body === null || body === void 0 ? void 0 : body.writable)) {
        return Duplexify.fromWeb(body);
      }
      if (typeof (body === null || body === void 0 ? void 0 : body.writable) === "object" || typeof (body === null || body === void 0 ? void 0 : body.readable) === "object") {
        const readable = body !== null && body !== void 0 && body.readable ? isReadableNodeStream(body === null || body === void 0 ? void 0 : body.readable) ? body === null || body === void 0 ? void 0 : body.readable : duplexify(body.readable) : void 0;
        const writable = body !== null && body !== void 0 && body.writable ? isWritableNodeStream(body === null || body === void 0 ? void 0 : body.writable) ? body === null || body === void 0 ? void 0 : body.writable : duplexify(body.writable) : void 0;
        return _duplexify({
          readable,
          writable
        });
      }
      const then = body === null || body === void 0 ? void 0 : body.then;
      if (typeof then === "function") {
        let d6;
        FunctionPrototypeCall(
          then,
          body,
          (val2) => {
            if (val2 != null) {
              d6.push(val2);
            }
            d6.push(null);
          },
          (err) => {
            destroyer(d6, err);
          }
        );
        return d6 = new Duplexify({
          objectMode: true,
          writable: false,
          read() {
          }
        });
      }
      throw new ERR_INVALID_ARG_TYPE2(
        name,
        [
          "Blob",
          "ReadableStream",
          "WritableStream",
          "Stream",
          "Iterable",
          "AsyncIterable",
          "Function",
          "{ readable, writable } pair",
          "Promise"
        ],
        body
      );
    };
    function fromAsyncGen(fn) {
      let { promise, resolve: resolve2 } = createDeferredPromise();
      const ac = new AbortController2();
      const signal = ac.signal;
      const value = fn(
        async function* () {
          while (true) {
            const _promise = promise;
            promise = null;
            const { chunk, done, cb } = await _promise;
            process2.nextTick(cb);
            if (done)
              return;
            if (signal.aborted)
              throw new AbortError2(void 0, {
                cause: signal.reason
              });
            ({ promise, resolve: resolve2 } = createDeferredPromise());
            yield chunk;
          }
        }(),
        {
          signal
        }
      );
      return {
        value,
        write(chunk, encoding, cb) {
          const _resolve = resolve2;
          resolve2 = null;
          _resolve({
            chunk,
            done: false,
            cb
          });
        },
        final(cb) {
          const _resolve = resolve2;
          resolve2 = null;
          _resolve({
            done: true,
            cb
          });
        },
        destroy(err, cb) {
          ac.abort();
          cb(err);
        }
      };
    }
    function _duplexify(pair) {
      const r6 = pair.readable && typeof pair.readable.read !== "function" ? Readable6.wrap(pair.readable) : pair.readable;
      const w5 = pair.writable;
      let readable = !!isReadable(r6);
      let writable = !!isWritable(w5);
      let ondrain;
      let onfinish;
      let onreadable;
      let onclose;
      let d6;
      function onfinished(err) {
        const cb = onclose;
        onclose = null;
        if (cb) {
          cb(err);
        } else if (err) {
          d6.destroy(err);
        }
      }
      d6 = new Duplexify({
        // TODO (ronag): highWaterMark?
        readableObjectMode: !!(r6 !== null && r6 !== void 0 && r6.readableObjectMode),
        writableObjectMode: !!(w5 !== null && w5 !== void 0 && w5.writableObjectMode),
        readable,
        writable
      });
      if (writable) {
        eos(w5, (err) => {
          writable = false;
          if (err) {
            destroyer(r6, err);
          }
          onfinished(err);
        });
        d6._write = function(chunk, encoding, callback) {
          if (w5.write(chunk, encoding)) {
            callback();
          } else {
            ondrain = callback;
          }
        };
        d6._final = function(callback) {
          w5.end();
          onfinish = callback;
        };
        w5.on("drain", function() {
          if (ondrain) {
            const cb = ondrain;
            ondrain = null;
            cb();
          }
        });
        w5.on("finish", function() {
          if (onfinish) {
            const cb = onfinish;
            onfinish = null;
            cb();
          }
        });
      }
      if (readable) {
        eos(r6, (err) => {
          readable = false;
          if (err) {
            destroyer(r6, err);
          }
          onfinished(err);
        });
        r6.on("readable", function() {
          if (onreadable) {
            const cb = onreadable;
            onreadable = null;
            cb();
          }
        });
        r6.on("end", function() {
          d6.push(null);
        });
        d6._read = function() {
          while (true) {
            const buf = r6.read();
            if (buf === null) {
              onreadable = d6._read;
              return;
            }
            if (!d6.push(buf)) {
              return;
            }
          }
        };
      }
      d6._destroy = function(err, callback) {
        if (!err && onclose !== null) {
          err = new AbortError2();
        }
        onreadable = null;
        ondrain = null;
        onfinish = null;
        if (onclose === null) {
          callback(err);
        } else {
          onclose = callback;
          destroyer(w5, err);
          destroyer(r6, err);
        }
      };
      return d6;
    }
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/duplex.js
var require_duplex = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/duplex.js"(exports2, module2) {
    "use strict";
    var {
      ObjectDefineProperties,
      ObjectGetOwnPropertyDescriptor,
      ObjectKeys,
      ObjectSetPrototypeOf
    } = require_primordials();
    module2.exports = Duplex;
    var Readable6 = require_readable();
    var Writable2 = require_writable();
    ObjectSetPrototypeOf(Duplex.prototype, Readable6.prototype);
    ObjectSetPrototypeOf(Duplex, Readable6);
    {
      const keys = ObjectKeys(Writable2.prototype);
      for (let i6 = 0; i6 < keys.length; i6++) {
        const method = keys[i6];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable2.prototype[method];
      }
    }
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable6.call(this, options);
      Writable2.call(this, options);
      if (options) {
        this.allowHalfOpen = options.allowHalfOpen !== false;
        if (options.readable === false) {
          this._readableState.readable = false;
          this._readableState.ended = true;
          this._readableState.endEmitted = true;
        }
        if (options.writable === false) {
          this._writableState.writable = false;
          this._writableState.ending = true;
          this._writableState.ended = true;
          this._writableState.finished = true;
        }
      } else {
        this.allowHalfOpen = true;
      }
    }
    ObjectDefineProperties(Duplex.prototype, {
      writable: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writable")
      },
      writableHighWaterMark: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableHighWaterMark")
      },
      writableObjectMode: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableObjectMode")
      },
      writableBuffer: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableBuffer")
      },
      writableLength: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableLength")
      },
      writableFinished: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableFinished")
      },
      writableCorked: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableCorked")
      },
      writableEnded: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableEnded")
      },
      writableNeedDrain: {
        __proto__: null,
        ...ObjectGetOwnPropertyDescriptor(Writable2.prototype, "writableNeedDrain")
      },
      destroyed: {
        __proto__: null,
        get() {
          if (this._readableState === void 0 || this._writableState === void 0) {
            return false;
          }
          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set(value) {
          if (this._readableState && this._writableState) {
            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        }
      }
    });
    var webStreamsAdapters;
    function lazyWebStreams() {
      if (webStreamsAdapters === void 0)
        webStreamsAdapters = {};
      return webStreamsAdapters;
    }
    Duplex.fromWeb = function(pair, options) {
      return lazyWebStreams().newStreamDuplexFromReadableWritablePair(pair, options);
    };
    Duplex.toWeb = function(duplex) {
      return lazyWebStreams().newReadableWritablePairFromDuplex(duplex);
    };
    var duplexify;
    Duplex.from = function(body) {
      if (!duplexify) {
        duplexify = require_duplexify();
      }
      return duplexify(body, "body");
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/transform.js
var require_transform = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/transform.js"(exports2, module2) {
    "use strict";
    var { ObjectSetPrototypeOf, Symbol: Symbol2 } = require_primordials();
    module2.exports = Transform;
    var { ERR_METHOD_NOT_IMPLEMENTED } = require_errors().codes;
    var Duplex = require_duplex();
    var { getHighWaterMark } = require_state();
    ObjectSetPrototypeOf(Transform.prototype, Duplex.prototype);
    ObjectSetPrototypeOf(Transform, Duplex);
    var kCallback = Symbol2("kCallback");
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      const readableHighWaterMark = options ? getHighWaterMark(this, options, "readableHighWaterMark", true) : null;
      if (readableHighWaterMark === 0) {
        options = {
          ...options,
          highWaterMark: null,
          readableHighWaterMark,
          // TODO (ronag): 0 is not optimal since we have
          // a "bug" where we check needDrain before calling _write and not after.
          // Refs: https://github.com/nodejs/node/pull/32887
          // Refs: https://github.com/nodejs/node/pull/35941
          writableHighWaterMark: options.writableHighWaterMark || 0
        };
      }
      Duplex.call(this, options);
      this._readableState.sync = false;
      this[kCallback] = null;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function final(cb) {
      if (typeof this._flush === "function" && !this.destroyed) {
        this._flush((er2, data) => {
          if (er2) {
            if (cb) {
              cb(er2);
            } else {
              this.destroy(er2);
            }
            return;
          }
          if (data != null) {
            this.push(data);
          }
          this.push(null);
          if (cb) {
            cb();
          }
        });
      } else {
        this.push(null);
        if (cb) {
          cb();
        }
      }
    }
    function prefinish() {
      if (this._final !== final) {
        final.call(this);
      }
    }
    Transform.prototype._final = final;
    Transform.prototype._transform = function(chunk, encoding, callback) {
      throw new ERR_METHOD_NOT_IMPLEMENTED("_transform()");
    };
    Transform.prototype._write = function(chunk, encoding, callback) {
      const rState = this._readableState;
      const wState = this._writableState;
      const length = rState.length;
      this._transform(chunk, encoding, (err, val2) => {
        if (err) {
          callback(err);
          return;
        }
        if (val2 != null) {
          this.push(val2);
        }
        if (wState.ended || // Backwards compat.
        length === rState.length || // Backwards compat.
        rState.length < rState.highWaterMark) {
          callback();
        } else {
          this[kCallback] = callback;
        }
      });
    };
    Transform.prototype._read = function() {
      if (this[kCallback]) {
        const callback = this[kCallback];
        this[kCallback] = null;
        callback();
      }
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/passthrough.js
var require_passthrough = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/passthrough.js"(exports2, module2) {
    "use strict";
    var { ObjectSetPrototypeOf } = require_primordials();
    module2.exports = PassThrough2;
    var Transform = require_transform();
    ObjectSetPrototypeOf(PassThrough2.prototype, Transform.prototype);
    ObjectSetPrototypeOf(PassThrough2, Transform);
    function PassThrough2(options) {
      if (!(this instanceof PassThrough2))
        return new PassThrough2(options);
      Transform.call(this, options);
    }
    PassThrough2.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports2, module2) {
    "use strict";
    var process2 = require_process();
    var { ArrayIsArray, Promise: Promise2, SymbolAsyncIterator, SymbolDispose } = require_primordials();
    var eos = require_end_of_stream();
    var { once } = require_util2();
    var destroyImpl = require_destroy();
    var Duplex = require_duplex();
    var {
      aggregateTwoErrors,
      codes: {
        ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2,
        ERR_INVALID_RETURN_VALUE,
        ERR_MISSING_ARGS,
        ERR_STREAM_DESTROYED,
        ERR_STREAM_PREMATURE_CLOSE
      },
      AbortError: AbortError2
    } = require_errors();
    var { validateFunction, validateAbortSignal } = require_validators();
    var {
      isIterable,
      isReadable,
      isReadableNodeStream,
      isNodeStream,
      isTransformStream,
      isWebStream,
      isReadableStream,
      isReadableFinished
    } = require_utils2();
    var AbortController2 = globalThis.AbortController || require_abort_controller().AbortController;
    var PassThrough2;
    var Readable6;
    var addAbortListener;
    function destroyer(stream, reading, writing) {
      let finished = false;
      stream.on("close", () => {
        finished = true;
      });
      const cleanup = eos(
        stream,
        {
          readable: reading,
          writable: writing
        },
        (err) => {
          finished = !err;
        }
      );
      return {
        destroy: (err) => {
          if (finished)
            return;
          finished = true;
          destroyImpl.destroyer(stream, err || new ERR_STREAM_DESTROYED("pipe"));
        },
        cleanup
      };
    }
    function popCallback(streams) {
      validateFunction(streams[streams.length - 1], "streams[stream.length - 1]");
      return streams.pop();
    }
    function makeAsyncIterable(val2) {
      if (isIterable(val2)) {
        return val2;
      } else if (isReadableNodeStream(val2)) {
        return fromReadable(val2);
      }
      throw new ERR_INVALID_ARG_TYPE2("val", ["Readable", "Iterable", "AsyncIterable"], val2);
    }
    async function* fromReadable(val2) {
      if (!Readable6) {
        Readable6 = require_readable();
      }
      yield* Readable6.prototype[SymbolAsyncIterator].call(val2);
    }
    async function pumpToNode(iterable, writable, finish, { end }) {
      let error2;
      let onresolve = null;
      const resume = (err) => {
        if (err) {
          error2 = err;
        }
        if (onresolve) {
          const callback = onresolve;
          onresolve = null;
          callback();
        }
      };
      const wait = () => new Promise2((resolve2, reject) => {
        if (error2) {
          reject(error2);
        } else {
          onresolve = () => {
            if (error2) {
              reject(error2);
            } else {
              resolve2();
            }
          };
        }
      });
      writable.on("drain", resume);
      const cleanup = eos(
        writable,
        {
          readable: false
        },
        resume
      );
      try {
        if (writable.writableNeedDrain) {
          await wait();
        }
        for await (const chunk of iterable) {
          if (!writable.write(chunk)) {
            await wait();
          }
        }
        if (end) {
          writable.end();
          await wait();
        }
        finish();
      } catch (err) {
        finish(error2 !== err ? aggregateTwoErrors(error2, err) : err);
      } finally {
        cleanup();
        writable.off("drain", resume);
      }
    }
    async function pumpToWeb(readable, writable, finish, { end }) {
      if (isTransformStream(writable)) {
        writable = writable.writable;
      }
      const writer = writable.getWriter();
      try {
        for await (const chunk of readable) {
          await writer.ready;
          writer.write(chunk).catch(() => {
          });
        }
        await writer.ready;
        if (end) {
          await writer.close();
        }
        finish();
      } catch (err) {
        try {
          await writer.abort(err);
          finish(err);
        } catch (err2) {
          finish(err2);
        }
      }
    }
    function pipeline(...streams) {
      return pipelineImpl(streams, once(popCallback(streams)));
    }
    function pipelineImpl(streams, callback, opts) {
      if (streams.length === 1 && ArrayIsArray(streams[0])) {
        streams = streams[0];
      }
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      const ac = new AbortController2();
      const signal = ac.signal;
      const outerSignal = opts === null || opts === void 0 ? void 0 : opts.signal;
      const lastStreamCleanup = [];
      validateAbortSignal(outerSignal, "options.signal");
      function abort() {
        finishImpl(new AbortError2());
      }
      addAbortListener = addAbortListener || require_util2().addAbortListener;
      let disposable;
      if (outerSignal) {
        disposable = addAbortListener(outerSignal, abort);
      }
      let error2;
      let value;
      const destroys = [];
      let finishCount = 0;
      function finish(err) {
        finishImpl(err, --finishCount === 0);
      }
      function finishImpl(err, final) {
        var _disposable;
        if (err && (!error2 || error2.code === "ERR_STREAM_PREMATURE_CLOSE")) {
          error2 = err;
        }
        if (!error2 && !final) {
          return;
        }
        while (destroys.length) {
          destroys.shift()(error2);
        }
        ;
        (_disposable = disposable) === null || _disposable === void 0 ? void 0 : _disposable[SymbolDispose]();
        ac.abort();
        if (final) {
          if (!error2) {
            lastStreamCleanup.forEach((fn) => fn());
          }
          process2.nextTick(callback, error2, value);
        }
      }
      let ret;
      for (let i6 = 0; i6 < streams.length; i6++) {
        const stream = streams[i6];
        const reading = i6 < streams.length - 1;
        const writing = i6 > 0;
        const end = reading || (opts === null || opts === void 0 ? void 0 : opts.end) !== false;
        const isLastStream = i6 === streams.length - 1;
        if (isNodeStream(stream)) {
          let onError2 = function(err) {
            if (err && err.name !== "AbortError" && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
              finish(err);
            }
          };
          var onError = onError2;
          if (end) {
            const { destroy, cleanup } = destroyer(stream, reading, writing);
            destroys.push(destroy);
            if (isReadable(stream) && isLastStream) {
              lastStreamCleanup.push(cleanup);
            }
          }
          stream.on("error", onError2);
          if (isReadable(stream) && isLastStream) {
            lastStreamCleanup.push(() => {
              stream.removeListener("error", onError2);
            });
          }
        }
        if (i6 === 0) {
          if (typeof stream === "function") {
            ret = stream({
              signal
            });
            if (!isIterable(ret)) {
              throw new ERR_INVALID_RETURN_VALUE("Iterable, AsyncIterable or Stream", "source", ret);
            }
          } else if (isIterable(stream) || isReadableNodeStream(stream) || isTransformStream(stream)) {
            ret = stream;
          } else {
            ret = Duplex.from(stream);
          }
        } else if (typeof stream === "function") {
          if (isTransformStream(ret)) {
            var _ret;
            ret = makeAsyncIterable((_ret = ret) === null || _ret === void 0 ? void 0 : _ret.readable);
          } else {
            ret = makeAsyncIterable(ret);
          }
          ret = stream(ret, {
            signal
          });
          if (reading) {
            if (!isIterable(ret, true)) {
              throw new ERR_INVALID_RETURN_VALUE("AsyncIterable", `transform[${i6 - 1}]`, ret);
            }
          } else {
            var _ret2;
            if (!PassThrough2) {
              PassThrough2 = require_passthrough();
            }
            const pt2 = new PassThrough2({
              objectMode: true
            });
            const then = (_ret2 = ret) === null || _ret2 === void 0 ? void 0 : _ret2.then;
            if (typeof then === "function") {
              finishCount++;
              then.call(
                ret,
                (val2) => {
                  value = val2;
                  if (val2 != null) {
                    pt2.write(val2);
                  }
                  if (end) {
                    pt2.end();
                  }
                  process2.nextTick(finish);
                },
                (err) => {
                  pt2.destroy(err);
                  process2.nextTick(finish, err);
                }
              );
            } else if (isIterable(ret, true)) {
              finishCount++;
              pumpToNode(ret, pt2, finish, {
                end
              });
            } else if (isReadableStream(ret) || isTransformStream(ret)) {
              const toRead = ret.readable || ret;
              finishCount++;
              pumpToNode(toRead, pt2, finish, {
                end
              });
            } else {
              throw new ERR_INVALID_RETURN_VALUE("AsyncIterable or Promise", "destination", ret);
            }
            ret = pt2;
            const { destroy, cleanup } = destroyer(ret, false, true);
            destroys.push(destroy);
            if (isLastStream) {
              lastStreamCleanup.push(cleanup);
            }
          }
        } else if (isNodeStream(stream)) {
          if (isReadableNodeStream(ret)) {
            finishCount += 2;
            const cleanup = pipe(ret, stream, finish, {
              end
            });
            if (isReadable(stream) && isLastStream) {
              lastStreamCleanup.push(cleanup);
            }
          } else if (isTransformStream(ret) || isReadableStream(ret)) {
            const toRead = ret.readable || ret;
            finishCount++;
            pumpToNode(toRead, stream, finish, {
              end
            });
          } else if (isIterable(ret)) {
            finishCount++;
            pumpToNode(ret, stream, finish, {
              end
            });
          } else {
            throw new ERR_INVALID_ARG_TYPE2(
              "val",
              ["Readable", "Iterable", "AsyncIterable", "ReadableStream", "TransformStream"],
              ret
            );
          }
          ret = stream;
        } else if (isWebStream(stream)) {
          if (isReadableNodeStream(ret)) {
            finishCount++;
            pumpToWeb(makeAsyncIterable(ret), stream, finish, {
              end
            });
          } else if (isReadableStream(ret) || isIterable(ret)) {
            finishCount++;
            pumpToWeb(ret, stream, finish, {
              end
            });
          } else if (isTransformStream(ret)) {
            finishCount++;
            pumpToWeb(ret.readable, stream, finish, {
              end
            });
          } else {
            throw new ERR_INVALID_ARG_TYPE2(
              "val",
              ["Readable", "Iterable", "AsyncIterable", "ReadableStream", "TransformStream"],
              ret
            );
          }
          ret = stream;
        } else {
          ret = Duplex.from(stream);
        }
      }
      if (signal !== null && signal !== void 0 && signal.aborted || outerSignal !== null && outerSignal !== void 0 && outerSignal.aborted) {
        process2.nextTick(abort);
      }
      return ret;
    }
    function pipe(src, dst, finish, { end }) {
      let ended = false;
      dst.on("close", () => {
        if (!ended) {
          finish(new ERR_STREAM_PREMATURE_CLOSE());
        }
      });
      src.pipe(dst, {
        end: false
      });
      if (end) {
        let endFn2 = function() {
          ended = true;
          dst.end();
        };
        var endFn = endFn2;
        if (isReadableFinished(src)) {
          process2.nextTick(endFn2);
        } else {
          src.once("end", endFn2);
        }
      } else {
        finish();
      }
      eos(
        src,
        {
          readable: true,
          writable: false
        },
        (err) => {
          const rState = src._readableState;
          if (err && err.code === "ERR_STREAM_PREMATURE_CLOSE" && rState && rState.ended && !rState.errored && !rState.errorEmitted) {
            src.once("end", finish).once("error", finish);
          } else {
            finish(err);
          }
        }
      );
      return eos(
        dst,
        {
          readable: false,
          writable: true
        },
        finish
      );
    }
    module2.exports = {
      pipelineImpl,
      pipeline
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/compose.js
var require_compose = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/compose.js"(exports2, module2) {
    "use strict";
    var { pipeline } = require_pipeline();
    var Duplex = require_duplex();
    var { destroyer } = require_destroy();
    var {
      isNodeStream,
      isReadable,
      isWritable,
      isWebStream,
      isTransformStream,
      isWritableStream,
      isReadableStream
    } = require_utils2();
    var {
      AbortError: AbortError2,
      codes: { ERR_INVALID_ARG_VALUE, ERR_MISSING_ARGS }
    } = require_errors();
    var eos = require_end_of_stream();
    module2.exports = function compose(...streams) {
      if (streams.length === 0) {
        throw new ERR_MISSING_ARGS("streams");
      }
      if (streams.length === 1) {
        return Duplex.from(streams[0]);
      }
      const orgStreams = [...streams];
      if (typeof streams[0] === "function") {
        streams[0] = Duplex.from(streams[0]);
      }
      if (typeof streams[streams.length - 1] === "function") {
        const idx = streams.length - 1;
        streams[idx] = Duplex.from(streams[idx]);
      }
      for (let n6 = 0; n6 < streams.length; ++n6) {
        if (!isNodeStream(streams[n6]) && !isWebStream(streams[n6])) {
          continue;
        }
        if (n6 < streams.length - 1 && !(isReadable(streams[n6]) || isReadableStream(streams[n6]) || isTransformStream(streams[n6]))) {
          throw new ERR_INVALID_ARG_VALUE(`streams[${n6}]`, orgStreams[n6], "must be readable");
        }
        if (n6 > 0 && !(isWritable(streams[n6]) || isWritableStream(streams[n6]) || isTransformStream(streams[n6]))) {
          throw new ERR_INVALID_ARG_VALUE(`streams[${n6}]`, orgStreams[n6], "must be writable");
        }
      }
      let ondrain;
      let onfinish;
      let onreadable;
      let onclose;
      let d6;
      function onfinished(err) {
        const cb = onclose;
        onclose = null;
        if (cb) {
          cb(err);
        } else if (err) {
          d6.destroy(err);
        } else if (!readable && !writable) {
          d6.destroy();
        }
      }
      const head = streams[0];
      const tail = pipeline(streams, onfinished);
      const writable = !!(isWritable(head) || isWritableStream(head) || isTransformStream(head));
      const readable = !!(isReadable(tail) || isReadableStream(tail) || isTransformStream(tail));
      d6 = new Duplex({
        // TODO (ronag): highWaterMark?
        writableObjectMode: !!(head !== null && head !== void 0 && head.writableObjectMode),
        readableObjectMode: !!(tail !== null && tail !== void 0 && tail.readableObjectMode),
        writable,
        readable
      });
      if (writable) {
        if (isNodeStream(head)) {
          d6._write = function(chunk, encoding, callback) {
            if (head.write(chunk, encoding)) {
              callback();
            } else {
              ondrain = callback;
            }
          };
          d6._final = function(callback) {
            head.end();
            onfinish = callback;
          };
          head.on("drain", function() {
            if (ondrain) {
              const cb = ondrain;
              ondrain = null;
              cb();
            }
          });
        } else if (isWebStream(head)) {
          const writable2 = isTransformStream(head) ? head.writable : head;
          const writer = writable2.getWriter();
          d6._write = async function(chunk, encoding, callback) {
            try {
              await writer.ready;
              writer.write(chunk).catch(() => {
              });
              callback();
            } catch (err) {
              callback(err);
            }
          };
          d6._final = async function(callback) {
            try {
              await writer.ready;
              writer.close().catch(() => {
              });
              onfinish = callback;
            } catch (err) {
              callback(err);
            }
          };
        }
        const toRead = isTransformStream(tail) ? tail.readable : tail;
        eos(toRead, () => {
          if (onfinish) {
            const cb = onfinish;
            onfinish = null;
            cb();
          }
        });
      }
      if (readable) {
        if (isNodeStream(tail)) {
          tail.on("readable", function() {
            if (onreadable) {
              const cb = onreadable;
              onreadable = null;
              cb();
            }
          });
          tail.on("end", function() {
            d6.push(null);
          });
          d6._read = function() {
            while (true) {
              const buf = tail.read();
              if (buf === null) {
                onreadable = d6._read;
                return;
              }
              if (!d6.push(buf)) {
                return;
              }
            }
          };
        } else if (isWebStream(tail)) {
          const readable2 = isTransformStream(tail) ? tail.readable : tail;
          const reader = readable2.getReader();
          d6._read = async function() {
            while (true) {
              try {
                const { value, done } = await reader.read();
                if (!d6.push(value)) {
                  return;
                }
                if (done) {
                  d6.push(null);
                  return;
                }
              } catch {
                return;
              }
            }
          };
        }
      }
      d6._destroy = function(err, callback) {
        if (!err && onclose !== null) {
          err = new AbortError2();
        }
        onreadable = null;
        ondrain = null;
        onfinish = null;
        if (onclose === null) {
          callback(err);
        } else {
          onclose = callback;
          if (isNodeStream(tail)) {
            destroyer(tail, err);
          }
        }
      };
      return d6;
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/operators.js
var require_operators = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/internal/streams/operators.js"(exports2, module2) {
    "use strict";
    var AbortController2 = globalThis.AbortController || require_abort_controller().AbortController;
    var {
      codes: { ERR_INVALID_ARG_VALUE, ERR_INVALID_ARG_TYPE: ERR_INVALID_ARG_TYPE2, ERR_MISSING_ARGS, ERR_OUT_OF_RANGE },
      AbortError: AbortError2
    } = require_errors();
    var { validateAbortSignal, validateInteger, validateObject } = require_validators();
    var kWeakHandler = require_primordials().Symbol("kWeak");
    var kResistStopPropagation = require_primordials().Symbol("kResistStopPropagation");
    var { finished } = require_end_of_stream();
    var staticCompose = require_compose();
    var { addAbortSignalNoValidate } = require_add_abort_signal();
    var { isWritable, isNodeStream } = require_utils2();
    var { deprecate: deprecate2 } = require_util2();
    var {
      ArrayPrototypePush,
      Boolean: Boolean2,
      MathFloor,
      Number: Number2,
      NumberIsNaN,
      Promise: Promise2,
      PromiseReject,
      PromiseResolve,
      PromisePrototypeThen,
      Symbol: Symbol2
    } = require_primordials();
    var kEmpty = Symbol2("kEmpty");
    var kEof = Symbol2("kEof");
    function compose(stream, options) {
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      if (isNodeStream(stream) && !isWritable(stream)) {
        throw new ERR_INVALID_ARG_VALUE("stream", stream, "must be writable");
      }
      const composedStream = staticCompose(this, stream);
      if (options !== null && options !== void 0 && options.signal) {
        addAbortSignalNoValidate(options.signal, composedStream);
      }
      return composedStream;
    }
    function map3(fn, options) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
      }
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      let concurrency = 1;
      if ((options === null || options === void 0 ? void 0 : options.concurrency) != null) {
        concurrency = MathFloor(options.concurrency);
      }
      let highWaterMark = concurrency - 1;
      if ((options === null || options === void 0 ? void 0 : options.highWaterMark) != null) {
        highWaterMark = MathFloor(options.highWaterMark);
      }
      validateInteger(concurrency, "options.concurrency", 1);
      validateInteger(highWaterMark, "options.highWaterMark", 0);
      highWaterMark += concurrency;
      return async function* map4() {
        const signal = require_util2().AbortSignalAny(
          [options === null || options === void 0 ? void 0 : options.signal].filter(Boolean2)
        );
        const stream = this;
        const queue = [];
        const signalOpt = {
          signal
        };
        let next;
        let resume;
        let done = false;
        let cnt = 0;
        function onCatch() {
          done = true;
          afterItemProcessed();
        }
        function afterItemProcessed() {
          cnt -= 1;
          maybeResume();
        }
        function maybeResume() {
          if (resume && !done && cnt < concurrency && queue.length < highWaterMark) {
            resume();
            resume = null;
          }
        }
        async function pump() {
          try {
            for await (let val2 of stream) {
              if (done) {
                return;
              }
              if (signal.aborted) {
                throw new AbortError2();
              }
              try {
                val2 = fn(val2, signalOpt);
                if (val2 === kEmpty) {
                  continue;
                }
                val2 = PromiseResolve(val2);
              } catch (err) {
                val2 = PromiseReject(err);
              }
              cnt += 1;
              PromisePrototypeThen(val2, afterItemProcessed, onCatch);
              queue.push(val2);
              if (next) {
                next();
                next = null;
              }
              if (!done && (queue.length >= highWaterMark || cnt >= concurrency)) {
                await new Promise2((resolve2) => {
                  resume = resolve2;
                });
              }
            }
            queue.push(kEof);
          } catch (err) {
            const val2 = PromiseReject(err);
            PromisePrototypeThen(val2, afterItemProcessed, onCatch);
            queue.push(val2);
          } finally {
            done = true;
            if (next) {
              next();
              next = null;
            }
          }
        }
        pump();
        try {
          while (true) {
            while (queue.length > 0) {
              const val2 = await queue[0];
              if (val2 === kEof) {
                return;
              }
              if (signal.aborted) {
                throw new AbortError2();
              }
              if (val2 !== kEmpty) {
                yield val2;
              }
              queue.shift();
              maybeResume();
            }
            await new Promise2((resolve2) => {
              next = resolve2;
            });
          }
        } finally {
          done = true;
          if (resume) {
            resume();
            resume = null;
          }
        }
      }.call(this);
    }
    function asIndexedPairs(options = void 0) {
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      return async function* asIndexedPairs2() {
        let index2 = 0;
        for await (const val2 of this) {
          var _options$signal;
          if (options !== null && options !== void 0 && (_options$signal = options.signal) !== null && _options$signal !== void 0 && _options$signal.aborted) {
            throw new AbortError2({
              cause: options.signal.reason
            });
          }
          yield [index2++, val2];
        }
      }.call(this);
    }
    async function some(fn, options = void 0) {
      for await (const unused of filter.call(this, fn, options)) {
        return true;
      }
      return false;
    }
    async function every(fn, options = void 0) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
      }
      return !await some.call(
        this,
        async (...args) => {
          return !await fn(...args);
        },
        options
      );
    }
    async function find2(fn, options) {
      for await (const result of filter.call(this, fn, options)) {
        return result;
      }
      return void 0;
    }
    async function forEach(fn, options) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
      }
      async function forEachFn(value, options2) {
        await fn(value, options2);
        return kEmpty;
      }
      for await (const unused of map3.call(this, forEachFn, options))
        ;
    }
    function filter(fn, options) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE2("fn", ["Function", "AsyncFunction"], fn);
      }
      async function filterFn(value, options2) {
        if (await fn(value, options2)) {
          return value;
        }
        return kEmpty;
      }
      return map3.call(this, filterFn, options);
    }
    var ReduceAwareErrMissingArgs = class extends ERR_MISSING_ARGS {
      constructor() {
        super("reduce");
        this.message = "Reduce of an empty stream requires an initial value";
      }
    };
    async function reduce(reducer, initialValue, options) {
      var _options$signal2;
      if (typeof reducer !== "function") {
        throw new ERR_INVALID_ARG_TYPE2("reducer", ["Function", "AsyncFunction"], reducer);
      }
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      let hasInitialValue = arguments.length > 1;
      if (options !== null && options !== void 0 && (_options$signal2 = options.signal) !== null && _options$signal2 !== void 0 && _options$signal2.aborted) {
        const err = new AbortError2(void 0, {
          cause: options.signal.reason
        });
        this.once("error", () => {
        });
        await finished(this.destroy(err));
        throw err;
      }
      const ac = new AbortController2();
      const signal = ac.signal;
      if (options !== null && options !== void 0 && options.signal) {
        const opts = {
          once: true,
          [kWeakHandler]: this,
          [kResistStopPropagation]: true
        };
        options.signal.addEventListener("abort", () => ac.abort(), opts);
      }
      let gotAnyItemFromStream = false;
      try {
        for await (const value of this) {
          var _options$signal3;
          gotAnyItemFromStream = true;
          if (options !== null && options !== void 0 && (_options$signal3 = options.signal) !== null && _options$signal3 !== void 0 && _options$signal3.aborted) {
            throw new AbortError2();
          }
          if (!hasInitialValue) {
            initialValue = value;
            hasInitialValue = true;
          } else {
            initialValue = await reducer(initialValue, value, {
              signal
            });
          }
        }
        if (!gotAnyItemFromStream && !hasInitialValue) {
          throw new ReduceAwareErrMissingArgs();
        }
      } finally {
        ac.abort();
      }
      return initialValue;
    }
    async function toArray2(options) {
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      const result = [];
      for await (const val2 of this) {
        var _options$signal4;
        if (options !== null && options !== void 0 && (_options$signal4 = options.signal) !== null && _options$signal4 !== void 0 && _options$signal4.aborted) {
          throw new AbortError2(void 0, {
            cause: options.signal.reason
          });
        }
        ArrayPrototypePush(result, val2);
      }
      return result;
    }
    function flatMap(fn, options) {
      const values = map3.call(this, fn, options);
      return async function* flatMap2() {
        for await (const val2 of values) {
          yield* val2;
        }
      }.call(this);
    }
    function toIntegerOrInfinity(number) {
      number = Number2(number);
      if (NumberIsNaN(number)) {
        return 0;
      }
      if (number < 0) {
        throw new ERR_OUT_OF_RANGE("number", ">= 0", number);
      }
      return number;
    }
    function drop(number, options = void 0) {
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      number = toIntegerOrInfinity(number);
      return async function* drop2() {
        var _options$signal5;
        if (options !== null && options !== void 0 && (_options$signal5 = options.signal) !== null && _options$signal5 !== void 0 && _options$signal5.aborted) {
          throw new AbortError2();
        }
        for await (const val2 of this) {
          var _options$signal6;
          if (options !== null && options !== void 0 && (_options$signal6 = options.signal) !== null && _options$signal6 !== void 0 && _options$signal6.aborted) {
            throw new AbortError2();
          }
          if (number-- <= 0) {
            yield val2;
          }
        }
      }.call(this);
    }
    function take2(number, options = void 0) {
      if (options != null) {
        validateObject(options, "options");
      }
      if ((options === null || options === void 0 ? void 0 : options.signal) != null) {
        validateAbortSignal(options.signal, "options.signal");
      }
      number = toIntegerOrInfinity(number);
      return async function* take3() {
        var _options$signal7;
        if (options !== null && options !== void 0 && (_options$signal7 = options.signal) !== null && _options$signal7 !== void 0 && _options$signal7.aborted) {
          throw new AbortError2();
        }
        for await (const val2 of this) {
          var _options$signal8;
          if (options !== null && options !== void 0 && (_options$signal8 = options.signal) !== null && _options$signal8 !== void 0 && _options$signal8.aborted) {
            throw new AbortError2();
          }
          if (number-- > 0) {
            yield val2;
          }
          if (number <= 0) {
            return;
          }
        }
      }.call(this);
    }
    module2.exports.streamReturningOperators = {
      asIndexedPairs: deprecate2(asIndexedPairs, "readable.asIndexedPairs will be removed in a future version."),
      drop,
      filter,
      flatMap,
      map: map3,
      take: take2,
      compose
    };
    module2.exports.promiseReturningOperators = {
      every,
      forEach,
      reduce,
      toArray: toArray2,
      some,
      find: find2
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/stream/promises.js
var require_promises = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/stream/promises.js"(exports2, module2) {
    "use strict";
    var { ArrayPrototypePop, Promise: Promise2 } = require_primordials();
    var { isIterable, isNodeStream, isWebStream } = require_utils2();
    var { pipelineImpl: pl } = require_pipeline();
    var { finished } = require_end_of_stream();
    require_stream();
    function pipeline(...streams) {
      return new Promise2((resolve2, reject) => {
        let signal;
        let end;
        const lastArg = streams[streams.length - 1];
        if (lastArg && typeof lastArg === "object" && !isNodeStream(lastArg) && !isIterable(lastArg) && !isWebStream(lastArg)) {
          const options = ArrayPrototypePop(streams);
          signal = options.signal;
          end = options.end;
        }
        pl(
          streams,
          (err, value) => {
            if (err) {
              reject(err);
            } else {
              resolve2(value);
            }
          },
          {
            signal,
            end
          }
        );
      });
    }
    module2.exports = {
      finished,
      pipeline
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/stream.js
var require_stream = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/stream.js"(exports2, module2) {
    "use strict";
    var { Buffer: Buffer6 } = require("buffer");
    var { ObjectDefineProperty, ObjectKeys, ReflectApply } = require_primordials();
    var {
      promisify: { custom: customPromisify }
    } = require_util2();
    var { streamReturningOperators, promiseReturningOperators } = require_operators();
    var {
      codes: { ERR_ILLEGAL_CONSTRUCTOR }
    } = require_errors();
    var compose = require_compose();
    var { setDefaultHighWaterMark, getDefaultHighWaterMark } = require_state();
    var { pipeline } = require_pipeline();
    var { destroyer } = require_destroy();
    var eos = require_end_of_stream();
    var promises2 = require_promises();
    var utils = require_utils2();
    var Stream3 = module2.exports = require_legacy().Stream;
    Stream3.isDestroyed = utils.isDestroyed;
    Stream3.isDisturbed = utils.isDisturbed;
    Stream3.isErrored = utils.isErrored;
    Stream3.isReadable = utils.isReadable;
    Stream3.isWritable = utils.isWritable;
    Stream3.Readable = require_readable();
    for (const key of ObjectKeys(streamReturningOperators)) {
      let fn2 = function(...args) {
        if (new.target) {
          throw ERR_ILLEGAL_CONSTRUCTOR();
        }
        return Stream3.Readable.from(ReflectApply(op, this, args));
      };
      fn = fn2;
      const op = streamReturningOperators[key];
      ObjectDefineProperty(fn2, "name", {
        __proto__: null,
        value: op.name
      });
      ObjectDefineProperty(fn2, "length", {
        __proto__: null,
        value: op.length
      });
      ObjectDefineProperty(Stream3.Readable.prototype, key, {
        __proto__: null,
        value: fn2,
        enumerable: false,
        configurable: true,
        writable: true
      });
    }
    var fn;
    for (const key of ObjectKeys(promiseReturningOperators)) {
      let fn2 = function(...args) {
        if (new.target) {
          throw ERR_ILLEGAL_CONSTRUCTOR();
        }
        return ReflectApply(op, this, args);
      };
      fn = fn2;
      const op = promiseReturningOperators[key];
      ObjectDefineProperty(fn2, "name", {
        __proto__: null,
        value: op.name
      });
      ObjectDefineProperty(fn2, "length", {
        __proto__: null,
        value: op.length
      });
      ObjectDefineProperty(Stream3.Readable.prototype, key, {
        __proto__: null,
        value: fn2,
        enumerable: false,
        configurable: true,
        writable: true
      });
    }
    var fn;
    Stream3.Writable = require_writable();
    Stream3.Duplex = require_duplex();
    Stream3.Transform = require_transform();
    Stream3.PassThrough = require_passthrough();
    Stream3.pipeline = pipeline;
    var { addAbortSignal } = require_add_abort_signal();
    Stream3.addAbortSignal = addAbortSignal;
    Stream3.finished = eos;
    Stream3.destroy = destroyer;
    Stream3.compose = compose;
    Stream3.setDefaultHighWaterMark = setDefaultHighWaterMark;
    Stream3.getDefaultHighWaterMark = getDefaultHighWaterMark;
    ObjectDefineProperty(Stream3, "promises", {
      __proto__: null,
      configurable: true,
      enumerable: true,
      get() {
        return promises2;
      }
    });
    ObjectDefineProperty(pipeline, customPromisify, {
      __proto__: null,
      enumerable: true,
      get() {
        return promises2.pipeline;
      }
    });
    ObjectDefineProperty(eos, customPromisify, {
      __proto__: null,
      enumerable: true,
      get() {
        return promises2.finished;
      }
    });
    Stream3.Stream = Stream3;
    Stream3._isUint8Array = function isUint8Array(value) {
      return value instanceof Uint8Array;
    };
    Stream3._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {
      return Buffer6.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/ours/index.js
var require_ours = __commonJS({
  "../../node_modules/.pnpm/readable-stream@4.5.2/node_modules/readable-stream/lib/ours/index.js"(exports2, module2) {
    "use strict";
    var Stream3 = require("stream");
    if (Stream3 && process.env.READABLE_STREAM === "disable") {
      const promises2 = Stream3.promises;
      module2.exports._uint8ArrayToBuffer = Stream3._uint8ArrayToBuffer;
      module2.exports._isUint8Array = Stream3._isUint8Array;
      module2.exports.isDisturbed = Stream3.isDisturbed;
      module2.exports.isErrored = Stream3.isErrored;
      module2.exports.isReadable = Stream3.isReadable;
      module2.exports.Readable = Stream3.Readable;
      module2.exports.Writable = Stream3.Writable;
      module2.exports.Duplex = Stream3.Duplex;
      module2.exports.Transform = Stream3.Transform;
      module2.exports.PassThrough = Stream3.PassThrough;
      module2.exports.addAbortSignal = Stream3.addAbortSignal;
      module2.exports.finished = Stream3.finished;
      module2.exports.destroy = Stream3.destroy;
      module2.exports.pipeline = Stream3.pipeline;
      module2.exports.compose = Stream3.compose;
      Object.defineProperty(Stream3, "promises", {
        configurable: true,
        enumerable: true,
        get() {
          return promises2;
        }
      });
      module2.exports.Stream = Stream3.Stream;
    } else {
      const CustomStream = require_stream();
      const promises2 = require_promises();
      const originalDestroy = CustomStream.Readable.destroy;
      module2.exports = CustomStream.Readable;
      module2.exports._uint8ArrayToBuffer = CustomStream._uint8ArrayToBuffer;
      module2.exports._isUint8Array = CustomStream._isUint8Array;
      module2.exports.isDisturbed = CustomStream.isDisturbed;
      module2.exports.isErrored = CustomStream.isErrored;
      module2.exports.isReadable = CustomStream.isReadable;
      module2.exports.Readable = CustomStream.Readable;
      module2.exports.Writable = CustomStream.Writable;
      module2.exports.Duplex = CustomStream.Duplex;
      module2.exports.Transform = CustomStream.Transform;
      module2.exports.PassThrough = CustomStream.PassThrough;
      module2.exports.addAbortSignal = CustomStream.addAbortSignal;
      module2.exports.finished = CustomStream.finished;
      module2.exports.destroy = CustomStream.destroy;
      module2.exports.destroy = originalDestroy;
      module2.exports.pipeline = CustomStream.pipeline;
      module2.exports.compose = CustomStream.compose;
      Object.defineProperty(CustomStream, "promises", {
        configurable: true,
        enumerable: true,
        get() {
          return promises2;
        }
      });
      module2.exports.Stream = CustomStream.Stream;
    }
    module2.exports.default = module2.exports;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js"(exports2, module2) {
    "use strict";
    module2.exports = Error;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js"(exports2, module2) {
    "use strict";
    module2.exports = EvalError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js
var require_range = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js"(exports2, module2) {
    "use strict";
    module2.exports = RangeError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js"(exports2, module2) {
    "use strict";
    module2.exports = ReferenceError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js"(exports2, module2) {
    "use strict";
    module2.exports = SyntaxError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js
var require_type = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js"(exports2, module2) {
    "use strict";
    module2.exports = TypeError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js"(exports2, module2) {
    "use strict";
    module2.exports = URIError;
  }
});

// ../../node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "../../node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/shams.js"(exports2, module2) {
    "use strict";
    module2.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// ../../node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "../../node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/index.js"(exports2, module2) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module2.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// ../../node_modules/.pnpm/has-proto@1.0.3/node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "../../node_modules/.pnpm/has-proto@1.0.3/node_modules/has-proto/index.js"(exports2, module2) {
    "use strict";
    var test = {
      __proto__: null,
      foo: {}
    };
    var $Object = Object;
    module2.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
    };
  }
});

// ../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js"(exports2, module2) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a6, b6) {
      var arr = [];
      for (var i6 = 0; i6 < a6.length; i6 += 1) {
        arr[i6] = a6[i6];
      }
      for (var j6 = 0; j6 < b6.length; j6 += 1) {
        arr[j6 + a6.length] = b6[j6];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i6 = offset || 0, j6 = 0; i6 < arrLike.length; i6 += 1, j6 += 1) {
        arr[j6] = arrLike[i6];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str2 = "";
      for (var i6 = 0; i6 < arr.length; i6 += 1) {
        str2 += arr[i6];
        if (i6 + 1 < arr.length) {
          str2 += joiner;
        }
      }
      return str2;
    };
    module2.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i6 = 0; i6 < boundLength; i6++) {
        boundArgs[i6] = "$" + i6;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// ../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js"(exports2, module2) {
    "use strict";
    var implementation = require_implementation();
    module2.exports = Function.prototype.bind || implementation;
  }
});

// ../../node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js
var require_hasown = __commonJS({
  "../../node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js"(exports2, module2) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module2.exports = bind.call(call, $hasOwn);
  }
});

// ../../node_modules/.pnpm/get-intrinsic@1.2.4/node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "../../node_modules/.pnpm/get-intrinsic@1.2.4/node_modules/get-intrinsic/index.js"(exports2, module2) {
    "use strict";
    var undefined2;
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e6) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e6) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x5) {
      return x5.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e6) {
        errorProto = getProto(getProto(e6));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn2 = require_hasown();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn2(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn2(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module2.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i6 = 1, isOwn = true; i6 < parts.length; i6 += 1) {
        var part = parts[i6];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn2(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i6 + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn2(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// ../../node_modules/.pnpm/es-define-property@1.0.0/node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "../../node_modules/.pnpm/es-define-property@1.0.0/node_modules/es-define-property/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e6) {
        $defineProperty = false;
      }
    }
    module2.exports = $defineProperty;
  }
});

// ../../node_modules/.pnpm/gopd@1.0.1/node_modules/gopd/index.js
var require_gopd = __commonJS({
  "../../node_modules/.pnpm/gopd@1.0.1/node_modules/gopd/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e6) {
        $gOPD = null;
      }
    }
    module2.exports = $gOPD;
  }
});

// ../../node_modules/.pnpm/define-data-property@1.1.4/node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "../../node_modules/.pnpm/define-data-property@1.1.4/node_modules/define-data-property/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module2.exports = function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// ../../node_modules/.pnpm/has-property-descriptors@1.0.2/node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "../../node_modules/.pnpm/has-property-descriptors@1.0.2/node_modules/has-property-descriptors/index.js"(exports2, module2) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e6) {
        return true;
      }
    };
    module2.exports = hasPropertyDescriptors;
  }
});

// ../../node_modules/.pnpm/set-function-length@1.2.2/node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "../../node_modules/.pnpm/set-function-length@1.2.2/node_modules/set-function-length/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module2.exports = function setFunctionLength(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    };
  }
});

// ../../node_modules/.pnpm/call-bind@1.0.7/node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "../../node_modules/.pnpm/call-bind@1.0.7/node_modules/call-bind/index.js"(exports2, module2) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var setFunctionLength = require_set_function_length();
    var $TypeError = require_type();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $defineProperty = require_es_define_property();
    var $max = GetIntrinsic("%Math.max%");
    module2.exports = function callBind(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError("a function is required");
      }
      var func = $reflectApply(bind, $call, arguments);
      return setFunctionLength(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  }
});

// ../../node_modules/.pnpm/call-bind@1.0.7/node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "../../node_modules/.pnpm/call-bind@1.0.7/node_modules/call-bind/callBound.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module2.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// ../../node_modules/.pnpm/object-inspect@1.13.1/node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS({
  "../../node_modules/.pnpm/object-inspect@1.13.1/node_modules/object-inspect/util.inspect.js"(exports2, module2) {
    "use strict";
    module2.exports = require("util").inspect;
  }
});

// ../../node_modules/.pnpm/object-inspect@1.13.1/node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "../../node_modules/.pnpm/object-inspect@1.13.1/node_modules/object-inspect/index.js"(exports2, module2) {
    "use strict";
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O2) {
      return O2.__proto__;
    } : null);
    function addNumericSeparator(num, str2) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str2)) {
        return str2;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str2, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str2, sepRegex, "$&_");
    }
    var utilInspect = require_util_inspect();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    module2.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str2 = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str2) : str2;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect2(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect2);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s6 = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i6 = 0; i6 < attrs.length; i6++) {
          s6 += " " + attrs[i6].name + "=" + wrapQuotes(quote(attrs[i6].value), "double", opts);
        }
        s6 += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s6 += "...";
        }
        s6 += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s6;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect2);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect2);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect2(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect2(key, obj, true) + " => " + inspect2(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet2(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect2(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect2(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect2(bigIntValueOf.call(obj)));
      }
      if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect2(String(obj)));
      }
      if (typeof window !== "undefined" && obj === window) {
        return "{ [object Window] }";
      }
      if (obj === global) {
        return "{ [object globalThis] }";
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect2);
        var isPlainObject3 = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject3 && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject3 || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s6, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s6 + quoteChar;
    }
    function quote(s6) {
      return $replace.call(String(s6), /"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e6) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e6) {
      }
      return false;
    }
    var hasOwn2 = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn2.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f6) {
      if (f6.name) {
        return f6.name;
      }
      var m6 = $match.call(functionToString.call(f6), /^function\s*([\w$]+)/);
      if (m6) {
        return m6[1];
      }
      return null;
    }
    function indexOf(xs, x5) {
      if (xs.indexOf) {
        return xs.indexOf(x5);
      }
      for (var i6 = 0, l6 = xs.length; i6 < l6; i6++) {
        if (xs[i6] === x5) {
          return i6;
        }
      }
      return -1;
    }
    function isMap(x5) {
      if (!mapSize || !x5 || typeof x5 !== "object") {
        return false;
      }
      try {
        mapSize.call(x5);
        try {
          setSize.call(x5);
        } catch (s6) {
          return true;
        }
        return x5 instanceof Map;
      } catch (e6) {
      }
      return false;
    }
    function isWeakMap(x5) {
      if (!weakMapHas || !x5 || typeof x5 !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x5, weakMapHas);
        try {
          weakSetHas.call(x5, weakSetHas);
        } catch (s6) {
          return true;
        }
        return x5 instanceof WeakMap;
      } catch (e6) {
      }
      return false;
    }
    function isWeakRef(x5) {
      if (!weakRefDeref || !x5 || typeof x5 !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x5);
        return true;
      } catch (e6) {
      }
      return false;
    }
    function isSet2(x5) {
      if (!setSize || !x5 || typeof x5 !== "object") {
        return false;
      }
      try {
        setSize.call(x5);
        try {
          mapSize.call(x5);
        } catch (m6) {
          return true;
        }
        return x5 instanceof Set;
      } catch (e6) {
      }
      return false;
    }
    function isWeakSet(x5) {
      if (!weakSetHas || !x5 || typeof x5 !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x5, weakSetHas);
        try {
          weakMapHas.call(x5, weakMapHas);
        } catch (s6) {
          return true;
        }
        return x5 instanceof WeakSet;
      } catch (e6) {
      }
      return false;
    }
    function isElement(x5) {
      if (!x5 || typeof x5 !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x5 instanceof HTMLElement) {
        return true;
      }
      return typeof x5.nodeName === "string" && typeof x5.getAttribute === "function";
    }
    function inspectString(str2, opts) {
      if (str2.length > opts.maxStringLength) {
        var remaining = str2.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str2, 0, opts.maxStringLength), opts) + trailer;
      }
      var s6 = $replace.call($replace.call(str2, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s6, "single", opts);
    }
    function lowbyte(c6) {
      var n6 = c6.charCodeAt(0);
      var x5 = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n6];
      if (x5) {
        return "\\" + x5;
      }
      return "\\x" + (n6 < 16 ? "0" : "") + $toUpperCase.call(n6.toString(16));
    }
    function markBoxed(str2) {
      return "Object(" + str2 + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i6 = 0; i6 < xs.length; i6++) {
        if (indexOf(xs[i6], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect2) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i6 = 0; i6 < obj.length; i6++) {
          xs[i6] = has(obj, i6) ? inspect2(obj[i6], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k6 = 0; k6 < syms.length; k6++) {
          symMap["$" + syms[k6]] = syms[k6];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect2(key, obj) + ": " + inspect2(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect2(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j6 = 0; j6 < syms.length; j6++) {
          if (isEnumerable.call(obj, syms[j6])) {
            xs.push("[" + inspect2(syms[j6]) + "]: " + inspect2(obj[syms[j6]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// ../../node_modules/.pnpm/side-channel@1.0.6/node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "../../node_modules/.pnpm/side-channel@1.0.6/node_modules/side-channel/index.js"(exports2, module2) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect2 = require_object_inspect();
    var $TypeError = require_type();
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      var prev = list;
      var curr;
      for (; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = /** @type {NonNullable<typeof list.next>} */
          list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = /** @type {import('.').ListNode<typeof value>} */
        {
          // eslint-disable-line no-param-reassign, no-extra-parens
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module2.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect2(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              return listGet($o, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              return listHas($o, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// ../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/formats.js"(exports2, module2) {
    "use strict";
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module2.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// ../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/utils.js
var require_utils3 = __commonJS({
  "../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/utils.js"(exports2, module2) {
    "use strict";
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i6 = 0; i6 < 256; ++i6) {
        array.push("%" + ((i6 < 16 ? "0" : "") + i6.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j6 = 0; j6 < obj.length; ++j6) {
            if (typeof obj[j6] !== "undefined") {
              compacted.push(obj[j6]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject = function arrayToObject2(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i6 = 0; i6 < source.length; ++i6) {
        if (typeof source[i6] !== "undefined") {
          obj[i6] = source[i6];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i6) {
          if (has.call(target, i6)) {
            var targetItem = target[i6];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i6] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i6] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode3 = function(str2, decoder, charset) {
      var strWithoutPlus = str2.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e6) {
        return strWithoutPlus;
      }
    };
    var encode2 = function encode3(str2, defaultEncoder, charset, kind2, format) {
      if (str2.length === 0) {
        return str2;
      }
      var string = str2;
      if (typeof str2 === "symbol") {
        string = Symbol.prototype.toString.call(str2);
      } else if (typeof str2 !== "string") {
        string = String(str2);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i6 = 0; i6 < string.length; ++i6) {
        var c6 = string.charCodeAt(i6);
        if (c6 === 45 || c6 === 46 || c6 === 95 || c6 === 126 || c6 >= 48 && c6 <= 57 || c6 >= 65 && c6 <= 90 || c6 >= 97 && c6 <= 122 || format === formats.RFC1738 && (c6 === 40 || c6 === 41)) {
          out += string.charAt(i6);
          continue;
        }
        if (c6 < 128) {
          out = out + hexTable[c6];
          continue;
        }
        if (c6 < 2048) {
          out = out + (hexTable[192 | c6 >> 6] + hexTable[128 | c6 & 63]);
          continue;
        }
        if (c6 < 55296 || c6 >= 57344) {
          out = out + (hexTable[224 | c6 >> 12] + hexTable[128 | c6 >> 6 & 63] + hexTable[128 | c6 & 63]);
          continue;
        }
        i6 += 1;
        c6 = 65536 + ((c6 & 1023) << 10 | string.charCodeAt(i6) & 1023);
        out += hexTable[240 | c6 >> 18] + hexTable[128 | c6 >> 12 & 63] + hexTable[128 | c6 >> 6 & 63] + hexTable[128 | c6 & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i6 = 0; i6 < queue.length; ++i6) {
        var item = queue[i6];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j6 = 0; j6 < keys.length; ++j6) {
          var key = keys[j6];
          var val2 = obj[key];
          if (typeof val2 === "object" && val2 !== null && refs.indexOf(val2) === -1) {
            queue.push({ obj, prop: key });
            refs.push(val2);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a6, b6) {
      return [].concat(a6, b6);
    };
    var maybeMap = function maybeMap2(val2, fn) {
      if (isArray(val2)) {
        var mapped = [];
        for (var i6 = 0; i6 < val2.length; i6 += 1) {
          mapped.push(fn(val2[i6]));
        }
        return mapped;
      }
      return fn(val2);
    };
    module2.exports = {
      arrayToObject,
      assign,
      combine,
      compact,
      decode: decode3,
      encode: encode2,
      isBuffer,
      isRegExp,
      maybeMap,
      merge
    };
  }
});

// ../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/stringify.js"(exports2, module2) {
    "use strict";
    var getSideChannel = require_side_channel();
    var utils = require_utils3();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v7) {
      return typeof v7 === "string" || typeof v7 === "number" || typeof v7 === "boolean" || typeof v7 === "symbol" || typeof v7 === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter === "function") {
        obj = filter(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray(filter)) {
        objKeys = filter;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
      for (var j6 = 0; j6 < objKeys.length; ++j6) {
        var key = objKeys[j6];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          strictNullHandling,
          skipNulls,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          format,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter = defaults.filter;
      if (typeof opts.filter === "function" || isArray(opts.filter)) {
        filter = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter,
        format,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter;
      if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
      } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i6 = 0; i6 < objKeys.length; ++i6) {
        var key = objKeys[i6];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// ../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/parse.js"(exports2, module2) {
    "use strict";
    var utils = require_utils3();
    var has = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str2) {
      return str2.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val2, options) {
      if (val2 && typeof val2 === "string" && options.comma && val2.indexOf(",") > -1) {
        return val2.split(",");
      }
      return val2;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str2, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str2.replace(/^\?/, "") : str2;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i6;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i6 = 0; i6 < parts.length; ++i6) {
          if (parts[i6].indexOf("utf8=") === 0) {
            if (parts[i6] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i6] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i6;
            i6 = parts.length;
          }
        }
      }
      for (i6 = 0; i6 < parts.length; ++i6) {
        if (i6 === skipIndex) {
          continue;
        }
        var part = parts[i6];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val2;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, "key");
          val2 = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
          val2 = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults.decoder, charset, "value");
            }
          );
        }
        if (val2 && options.interpretNumericEntities && charset === "iso-8859-1") {
          val2 = interpretNumericEntities(val2);
        }
        if (part.indexOf("[]=") > -1) {
          val2 = isArray(val2) ? [val2] : val2;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val2);
        } else {
          obj[key] = val2;
        }
      }
      return obj;
    };
    var parseObject = function(chain2, val2, options, valuesParsed) {
      var leaf = valuesParsed ? val2 : parseArrayValue(val2, options);
      for (var i6 = chain2.length - 1; i6 >= 0; --i6) {
        var obj;
        var root = chain2[i6];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index2 = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index2) && root !== cleanRoot && String(index2) === cleanRoot && index2 >= 0 && (options.parseArrays && index2 <= options.arrayLimit)) {
            obj = [];
            obj[index2] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val2, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i6 = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i6 < options.depth) {
        i6 += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val2, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
      };
    };
    module2.exports = function(str2, opts) {
      var options = normalizeParseOptions(opts);
      if (str2 === "" || str2 === null || typeof str2 === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str2 === "string" ? parseValues(str2, options) : str2;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i6 = 0; i6 < keys.length; ++i6) {
        var key = keys[i6];
        var newObj = parseKeys(key, tempObj[key], options, typeof str2 === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// ../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/index.js
var require_lib2 = __commonJS({
  "../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/index.js"(exports2, module2) {
    "use strict";
    var stringify = require_stringify();
    var parse2 = require_parse();
    var formats = require_formats();
    module2.exports = {
      formats,
      parse: parse2,
      stringify
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/runtime/runtime.js
var require_runtime = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/runtime/runtime.js"(exports2) {
    "use strict";
    var _a3;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RUNTIME = void 0;
    var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
    var isWebWorker = typeof self === "object" && // @ts-ignore
    typeof (self === null || self === void 0 ? void 0 : self.importScripts) === "function" && (((_a3 = self.constructor) === null || _a3 === void 0 ? void 0 : _a3.name) === "DedicatedWorkerGlobalScope" || ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === "ServiceWorkerGlobalScope" || ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === "SharedWorkerGlobalScope");
    var isDeno = typeof Deno !== "undefined" && typeof Deno.version !== "undefined" && typeof Deno.version.deno !== "undefined";
    var isBun = typeof Bun !== "undefined" && typeof Bun.version !== "undefined";
    var isNode = typeof process !== "undefined" && Boolean(process.version) && Boolean((_d = process.versions) === null || _d === void 0 ? void 0 : _d.node) && // Deno spoofs process.versions.node, see https://deno.land/std@0.177.0/node/process.ts?s=versions
    !isDeno && !isBun;
    var isReactNative = typeof navigator !== "undefined" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === "ReactNative";
    exports2.RUNTIME = evaluateRuntime();
    function evaluateRuntime() {
      if (isBrowser) {
        return {
          type: "browser",
          version: window.navigator.userAgent
        };
      }
      if (isWebWorker) {
        return {
          type: "web-worker"
        };
      }
      if (isDeno) {
        return {
          type: "deno",
          version: Deno.version.deno
        };
      }
      if (isBun) {
        return {
          type: "bun",
          version: Bun.version
        };
      }
      if (isNode) {
        return {
          type: "node",
          version: process.versions.node
        };
      }
      if (isReactNative) {
        return {
          type: "react-native"
        };
      }
      return {
        type: "unknown"
      };
    }
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/runtime/index.js
var require_runtime2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/runtime/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RUNTIME = void 0;
    var runtime_1 = require_runtime();
    Object.defineProperty(exports2, "RUNTIME", { enumerable: true, get: function() {
      return runtime_1.RUNTIME;
    } });
  }
});

// ../../node_modules/.pnpm/formdata-node@6.0.3/node_modules/formdata-node/lib/form-data.cjs
var require_form_data = __commonJS({
  "../../node_modules/.pnpm/formdata-node@6.0.3/node_modules/formdata-node/lib/form-data.cjs"(exports2, module2) {
    "use strict";
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp3({}, "__esModule", { value: true }), mod);
    var __accessCheck = (obj, member, msg) => {
      if (!member.has(obj))
        throw TypeError("Cannot " + msg);
    };
    var __privateGet = (obj, member, getter) => {
      __accessCheck(obj, member, "read from private field");
      return getter ? getter.call(obj) : member.get(obj);
    };
    var __privateAdd = (obj, member, value) => {
      if (member.has(obj))
        throw TypeError("Cannot add the same private member more than once");
      member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    };
    var __privateSet = (obj, member, value, setter) => {
      __accessCheck(obj, member, "write to private field");
      setter ? setter.call(obj, value) : member.set(obj, value);
      return value;
    };
    var __privateMethod = (obj, member, method) => {
      __accessCheck(obj, member, "access private method");
      return method;
    };
    var src_exports2 = {};
    __export2(src_exports2, {
      Blob: () => Blob5,
      File: () => File3,
      FormData: () => FormData4
    });
    module2.exports = __toCommonJS2(src_exports2);
    var isFunction4 = (value) => typeof value === "function";
    var isObject = (value) => typeof value === "object" && value != null && !Array.isArray(value);
    var isAsyncIterable = (value) => isObject(value) && isFunction4(value[Symbol.asyncIterator]);
    var MAX_CHUNK_SIZE = 65536;
    async function* clonePart2(value) {
      if (value.byteLength <= MAX_CHUNK_SIZE) {
        yield value;
        return;
      }
      let offset = 0;
      while (offset < value.byteLength) {
        const size = Math.min(value.byteLength - offset, MAX_CHUNK_SIZE);
        const buffer = value.buffer.slice(offset, offset + size);
        offset += buffer.byteLength;
        yield new Uint8Array(buffer);
      }
    }
    async function* readStream(readable) {
      const reader = readable.getReader();
      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        yield value;
      }
    }
    async function* chunkStream(stream) {
      for await (const value of stream) {
        yield* clonePart2(value);
      }
    }
    var getStreamIterator = (source) => {
      if (isAsyncIterable(source)) {
        return chunkStream(source);
      }
      if (isFunction4(source.getReader)) {
        return chunkStream(readStream(source));
      }
      throw new TypeError(
        "Unsupported data source: Expected either ReadableStream or async iterable."
      );
    };
    async function* consumeNodeBlob2(blob) {
      let position = 0;
      while (position !== blob.size) {
        const chunk = blob.slice(
          position,
          Math.min(blob.size, position + MAX_CHUNK_SIZE)
        );
        const buffer = await chunk.arrayBuffer();
        position += buffer.byteLength;
        yield new Uint8Array(buffer);
      }
    }
    async function* consumeBlobParts2(parts, clone2 = false) {
      for (const part of parts) {
        if (ArrayBuffer.isView(part)) {
          if (clone2) {
            yield* clonePart2(part);
          } else {
            yield part;
          }
        } else if (isFunction4(part.stream)) {
          yield* getStreamIterator(part.stream());
        } else {
          yield* consumeNodeBlob2(part);
        }
      }
    }
    function* sliceBlob2(blobParts, blobSize, start = 0, end) {
      end ?? (end = blobSize);
      let relativeStart = start < 0 ? Math.max(blobSize + start, 0) : Math.min(start, blobSize);
      let relativeEnd = end < 0 ? Math.max(blobSize + end, 0) : Math.min(end, blobSize);
      const span = Math.max(relativeEnd - relativeStart, 0);
      let added = 0;
      for (const part of blobParts) {
        if (added >= span) {
          break;
        }
        const partSize = ArrayBuffer.isView(part) ? part.byteLength : part.size;
        if (relativeStart && partSize <= relativeStart) {
          relativeStart -= partSize;
          relativeEnd -= partSize;
        } else {
          let chunk;
          if (ArrayBuffer.isView(part)) {
            chunk = part.subarray(relativeStart, Math.min(partSize, relativeEnd));
            added += chunk.byteLength;
          } else {
            chunk = part.slice(relativeStart, Math.min(partSize, relativeEnd));
            added += chunk.size;
          }
          relativeEnd -= partSize;
          relativeStart = 0;
          yield chunk;
        }
      }
    }
    var _parts;
    var _type;
    var _size;
    var _Blob = class _Blob2 {
      /**
       * Returns a new [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) object.
       * The content of the blob consists of the concatenation of the values given in the parameter array.
       *
       * @param blobParts An `Array` strings, or [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), [`ArrayBufferView`](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView), [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) objects, or a mix of any of such objects, that will be put inside the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob).
       * @param options An optional object of type `BlobPropertyBag`.
       */
      constructor(blobParts = [], options = {}) {
        __privateAdd(this, _parts, []);
        __privateAdd(this, _type, "");
        __privateAdd(this, _size, 0);
        options ?? (options = {});
        if (typeof blobParts !== "object" || blobParts === null) {
          throw new TypeError(
            "Failed to construct 'Blob': The provided value cannot be converted to a sequence."
          );
        }
        if (!isFunction4(blobParts[Symbol.iterator])) {
          throw new TypeError(
            "Failed to construct 'Blob': The object must have a callable @@iterator property."
          );
        }
        if (typeof options !== "object" && !isFunction4(options)) {
          throw new TypeError(
            "Failed to construct 'Blob': parameter 2 cannot convert to dictionary."
          );
        }
        const encoder = new TextEncoder();
        for (const raw of blobParts) {
          let part;
          if (ArrayBuffer.isView(raw)) {
            part = new Uint8Array(raw.buffer.slice(
              raw.byteOffset,
              raw.byteOffset + raw.byteLength
            ));
          } else if (raw instanceof ArrayBuffer) {
            part = new Uint8Array(raw.slice(0));
          } else if (raw instanceof _Blob2) {
            part = raw;
          } else {
            part = encoder.encode(String(raw));
          }
          __privateSet(this, _size, __privateGet(this, _size) + (ArrayBuffer.isView(part) ? part.byteLength : part.size));
          __privateGet(this, _parts).push(part);
        }
        const type = options.type === void 0 ? "" : String(options.type);
        __privateSet(this, _type, /^[\x20-\x7E]*$/.test(type) ? type : "");
      }
      static [Symbol.hasInstance](value) {
        return Boolean(
          value && typeof value === "object" && isFunction4(value.constructor) && (isFunction4(value.stream) || isFunction4(value.arrayBuffer)) && /^(Blob|File)$/.test(value[Symbol.toStringTag])
        );
      }
      /**
       * Returns the [`MIME type`](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type) of the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File).
       */
      get type() {
        return __privateGet(this, _type);
      }
      /**
       * Returns the size of the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) in bytes.
       */
      get size() {
        return __privateGet(this, _size);
      }
      /**
       * Creates and returns a new [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) object which contains data from a subset of the blob on which it's called.
       *
       * @param start An index into the Blob indicating the first byte to include in the new Blob. If you specify a negative value, it's treated as an offset from the end of the Blob toward the beginning. For example, -10 would be the 10th from last byte in the Blob. The default value is 0. If you specify a value for start that is larger than the size of the source Blob, the returned Blob has size 0 and contains no data.
       * @param end An index into the Blob indicating the first byte that will *not* be included in the new Blob (i.e. the byte exactly at this index is not included). If you specify a negative value, it's treated as an offset from the end of the Blob toward the beginning. For example, -10 would be the 10th from last byte in the Blob. The default value is size.
       * @param contentType The content type to assign to the new Blob; this will be the value of its type property. The default value is an empty string.
       */
      slice(start, end, contentType) {
        return new _Blob2(sliceBlob2(__privateGet(this, _parts), this.size, start, end), {
          type: contentType
        });
      }
      /**
       * Returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that resolves with a string containing the contents of the blob, interpreted as UTF-8.
       */
      async text() {
        const decoder = new TextDecoder();
        let result = "";
        for await (const chunk of consumeBlobParts2(__privateGet(this, _parts))) {
          result += decoder.decode(chunk, { stream: true });
        }
        result += decoder.decode();
        return result;
      }
      /**
       * Returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) that resolves with the contents of the blob as binary data contained in an [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer).
       */
      async arrayBuffer() {
        const view = new Uint8Array(this.size);
        let offset = 0;
        for await (const chunk of consumeBlobParts2(__privateGet(this, _parts))) {
          view.set(chunk, offset);
          offset += chunk.length;
        }
        return view.buffer;
      }
      /**
       * Returns a [`ReadableStream`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream) which upon reading returns the data contained within the [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob).
       */
      stream() {
        const iterator = consumeBlobParts2(__privateGet(this, _parts), true);
        return new ReadableStream({
          async pull(controller) {
            const { value, done } = await iterator.next();
            if (done) {
              return queueMicrotask(() => controller.close());
            }
            controller.enqueue(value);
          },
          async cancel() {
            await iterator.return();
          }
        });
      }
      get [Symbol.toStringTag]() {
        return "Blob";
      }
    };
    _parts = /* @__PURE__ */ new WeakMap();
    _type = /* @__PURE__ */ new WeakMap();
    _size = /* @__PURE__ */ new WeakMap();
    var Blob5 = _Blob;
    Object.defineProperties(Blob5.prototype, {
      type: { enumerable: true },
      size: { enumerable: true },
      slice: { enumerable: true },
      stream: { enumerable: true },
      text: { enumerable: true },
      arrayBuffer: { enumerable: true }
    });
    var isBlob3 = (value) => value instanceof Blob5;
    var _name;
    var _lastModified;
    var File3 = class extends Blob5 {
      /**
       * Creates a new File instance.
       *
       * @param fileBits An `Array` strings, or [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), [`ArrayBufferView`](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView), [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) objects, or a mix of any of such objects, that will be put inside the [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File).
       * @param name The name of the file.
       * @param options An options object containing optional attributes for the file.
       */
      constructor(fileBits, name, options = {}) {
        super(fileBits, options);
        __privateAdd(this, _name, void 0);
        __privateAdd(this, _lastModified, 0);
        if (arguments.length < 2) {
          throw new TypeError(
            `Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`
          );
        }
        __privateSet(this, _name, String(name));
        const lastModified = options.lastModified === void 0 ? Date.now() : Number(options.lastModified);
        if (!Number.isNaN(lastModified)) {
          __privateSet(this, _lastModified, lastModified);
        }
      }
      static [Symbol.hasInstance](value) {
        return value instanceof Blob5 && value[Symbol.toStringTag] === "File" && typeof value.name === "string";
      }
      /**
       * Name of the file referenced by the File object.
       */
      get name() {
        return __privateGet(this, _name);
      }
      /* c8 ignore next 3 */
      get webkitRelativePath() {
        return "";
      }
      /**
       * The last modified date of the file as the number of milliseconds since the Unix epoch (January 1, 1970 at midnight). Files without a known last modified date return the current date.
       */
      get lastModified() {
        return __privateGet(this, _lastModified);
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
    };
    _name = /* @__PURE__ */ new WeakMap();
    _lastModified = /* @__PURE__ */ new WeakMap();
    var isFile2 = (value) => value instanceof File3;
    var _entries;
    var _setEntry;
    var setEntry_fn;
    var FormData4 = class {
      constructor() {
        __privateAdd(this, _setEntry);
        __privateAdd(this, _entries, /* @__PURE__ */ new Map());
      }
      static [Symbol.hasInstance](value) {
        if (!value) {
          return false;
        }
        const val2 = value;
        return Boolean(
          isFunction4(val2.constructor) && val2[Symbol.toStringTag] === "FormData" && isFunction4(val2.append) && isFunction4(val2.set) && isFunction4(val2.get) && isFunction4(val2.getAll) && isFunction4(val2.has) && isFunction4(val2.delete) && isFunction4(val2.entries) && isFunction4(val2.values) && isFunction4(val2.keys) && isFunction4(val2[Symbol.iterator]) && isFunction4(val2.forEach)
        );
      }
      /**
       * Appends a new value onto an existing key inside a FormData object,
       * or adds the key if it does not already exist.
       *
       * The difference between `set()` and `append()` is that if the specified key already exists, `set()` will overwrite all existing values with the new one, whereas `append()` will append the new value onto the end of the existing set of values.
       *
       * @param name The name of the field whose data is contained in `value`.
       * @param value The field's value. This can be [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob)
        or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File). If none of these are specified the value is converted to a string.
       * @param fileName The filename reported to the server, when a Blob or File is passed as the second parameter. The default filename for Blob objects is "blob". The default filename for File objects is the file's filename.
       */
      append(name, value, fileName) {
        __privateMethod(this, _setEntry, setEntry_fn).call(this, {
          name,
          fileName,
          append: true,
          rawValue: value,
          argsLength: arguments.length
        });
      }
      /**
       * Set a new value for an existing key inside FormData,
       * or add the new field if it does not already exist.
       *
       * @param name The name of the field whose data is contained in `value`.
       * @param value The field's value. This can be [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob)
        or [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File). If none of these are specified the value is converted to a string.
       * @param fileName The filename reported to the server, when a Blob or File is passed as the second parameter. The default filename for Blob objects is "blob". The default filename for File objects is the file's filename.
       *
       */
      set(name, value, fileName) {
        __privateMethod(this, _setEntry, setEntry_fn).call(this, {
          name,
          fileName,
          append: false,
          rawValue: value,
          argsLength: arguments.length
        });
      }
      /**
       * Returns the first value associated with a given key from within a `FormData` object.
       * If you expect multiple values and want all of them, use the `getAll()` method instead.
       *
       * @param {string} name A name of the value you want to retrieve.
       *
       * @returns A `FormDataEntryValue` containing the value. If the key doesn't exist, the method returns null.
       */
      get(name) {
        const field = __privateGet(this, _entries).get(String(name));
        if (!field) {
          return null;
        }
        return field[0];
      }
      /**
       * Returns all the values associated with a given key from within a `FormData` object.
       *
       * @param {string} name A name of the value you want to retrieve.
       *
       * @returns An array of `FormDataEntryValue` whose key matches the value passed in the `name` parameter. If the key doesn't exist, the method returns an empty list.
       */
      getAll(name) {
        const field = __privateGet(this, _entries).get(String(name));
        if (!field) {
          return [];
        }
        return field.slice();
      }
      /**
       * Returns a boolean stating whether a `FormData` object contains a certain key.
       *
       * @param name A string representing the name of the key you want to test for.
       *
       * @return A boolean value.
       */
      has(name) {
        return __privateGet(this, _entries).has(String(name));
      }
      /**
       * Deletes a key and its value(s) from a `FormData` object.
       *
       * @param name The name of the key you want to delete.
       */
      delete(name) {
        __privateGet(this, _entries).delete(String(name));
      }
      /**
       * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through all keys contained in this `FormData` object.
       * Each key is a `string`.
       */
      *keys() {
        for (const key of __privateGet(this, _entries).keys()) {
          yield key;
        }
      }
      /**
       * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through the `FormData` key/value pairs.
       * The key of each pair is a string; the value is a [`FormDataValue`](https://developer.mozilla.org/en-US/docs/Web/API/FormDataEntryValue).
       */
      *entries() {
        for (const name of this.keys()) {
          const values = this.getAll(name);
          for (const value of values) {
            yield [name, value];
          }
        }
      }
      /**
       * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through all values contained in this object `FormData` object.
       * Each value is a [`FormDataValue`](https://developer.mozilla.org/en-US/docs/Web/API/FormDataEntryValue).
       */
      *values() {
        for (const [, value] of this) {
          yield value;
        }
      }
      /**
       * An alias for FormData#entries()
       */
      [Symbol.iterator]() {
        return this.entries();
      }
      /**
       * Executes given callback function for each field of the FormData instance
       */
      forEach(callback, thisArg) {
        for (const [name, value] of this) {
          callback.call(thisArg, value, name, this);
        }
      }
      get [Symbol.toStringTag]() {
        return "FormData";
      }
    };
    _entries = /* @__PURE__ */ new WeakMap();
    _setEntry = /* @__PURE__ */ new WeakSet();
    setEntry_fn = function({
      name,
      rawValue,
      append,
      fileName,
      argsLength
    }) {
      const methodName = append ? "append" : "set";
      if (argsLength < 2) {
        throw new TypeError(
          `Failed to execute '${methodName}' on 'FormData': 2 arguments required, but only ${argsLength} present.`
        );
      }
      name = String(name);
      let value;
      if (isFile2(rawValue)) {
        value = fileName === void 0 ? rawValue : new File3([rawValue], fileName, {
          // otherwise, create new File with given fileName
          type: rawValue.type,
          lastModified: rawValue.lastModified
        });
      } else if (isBlob3(rawValue)) {
        value = new File3([rawValue], fileName === void 0 ? "blob" : fileName, {
          type: rawValue.type
        });
      } else if (fileName) {
        throw new TypeError(
          `Failed to execute '${methodName}' on 'FormData': parameter 2 is not of type 'Blob'.`
        );
      } else {
        value = String(rawValue);
      }
      const values = __privateGet(this, _entries).get(name);
      if (!values) {
        return void __privateGet(this, _entries).set(name, [value]);
      }
      if (!append) {
        return void __privateGet(this, _entries).set(name, [value]);
      }
      values.push(value);
    };
  }
});

// ../../node_modules/.pnpm/delayed-stream@1.0.0/node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({
  "../../node_modules/.pnpm/delayed-stream@1.0.0/node_modules/delayed-stream/lib/delayed_stream.js"(exports2, module2) {
    "use strict";
    var Stream3 = require("stream").Stream;
    var util = require("util");
    module2.exports = DelayedStream;
    function DelayedStream() {
      this.source = null;
      this.dataSize = 0;
      this.maxDataSize = 1024 * 1024;
      this.pauseStream = true;
      this._maxDataSizeExceeded = false;
      this._released = false;
      this._bufferedEvents = [];
    }
    util.inherits(DelayedStream, Stream3);
    DelayedStream.create = function(source, options) {
      var delayedStream = new this();
      options = options || {};
      for (var option in options) {
        delayedStream[option] = options[option];
      }
      delayedStream.source = source;
      var realEmit = source.emit;
      source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
      };
      source.on("error", function() {
      });
      if (delayedStream.pauseStream) {
        source.pause();
      }
      return delayedStream;
    };
    Object.defineProperty(DelayedStream.prototype, "readable", {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.source.readable;
      }
    });
    DelayedStream.prototype.setEncoding = function() {
      return this.source.setEncoding.apply(this.source, arguments);
    };
    DelayedStream.prototype.resume = function() {
      if (!this._released) {
        this.release();
      }
      this.source.resume();
    };
    DelayedStream.prototype.pause = function() {
      this.source.pause();
    };
    DelayedStream.prototype.release = function() {
      this._released = true;
      this._bufferedEvents.forEach(function(args) {
        this.emit.apply(this, args);
      }.bind(this));
      this._bufferedEvents = [];
    };
    DelayedStream.prototype.pipe = function() {
      var r6 = Stream3.prototype.pipe.apply(this, arguments);
      this.resume();
      return r6;
    };
    DelayedStream.prototype._handleEmit = function(args) {
      if (this._released) {
        this.emit.apply(this, args);
        return;
      }
      if (args[0] === "data") {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
      }
      this._bufferedEvents.push(args);
    };
    DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
      if (this._maxDataSizeExceeded) {
        return;
      }
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      this._maxDataSizeExceeded = true;
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this.emit("error", new Error(message));
    };
  }
});

// ../../node_modules/.pnpm/combined-stream@1.0.8/node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({
  "../../node_modules/.pnpm/combined-stream@1.0.8/node_modules/combined-stream/lib/combined_stream.js"(exports2, module2) {
    "use strict";
    var util = require("util");
    var Stream3 = require("stream").Stream;
    var DelayedStream = require_delayed_stream();
    module2.exports = CombinedStream;
    function CombinedStream() {
      this.writable = false;
      this.readable = true;
      this.dataSize = 0;
      this.maxDataSize = 2 * 1024 * 1024;
      this.pauseStreams = true;
      this._released = false;
      this._streams = [];
      this._currentStream = null;
      this._insideLoop = false;
      this._pendingNext = false;
    }
    util.inherits(CombinedStream, Stream3);
    CombinedStream.create = function(options) {
      var combinedStream = new this();
      options = options || {};
      for (var option in options) {
        combinedStream[option] = options[option];
      }
      return combinedStream;
    };
    CombinedStream.isStreamLike = function(stream) {
      return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
    };
    CombinedStream.prototype.append = function(stream) {
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        if (!(stream instanceof DelayedStream)) {
          var newStream = DelayedStream.create(stream, {
            maxDataSize: Infinity,
            pauseStream: this.pauseStreams
          });
          stream.on("data", this._checkDataSize.bind(this));
          stream = newStream;
        }
        this._handleErrors(stream);
        if (this.pauseStreams) {
          stream.pause();
        }
      }
      this._streams.push(stream);
      return this;
    };
    CombinedStream.prototype.pipe = function(dest, options) {
      Stream3.prototype.pipe.call(this, dest, options);
      this.resume();
      return dest;
    };
    CombinedStream.prototype._getNext = function() {
      this._currentStream = null;
      if (this._insideLoop) {
        this._pendingNext = true;
        return;
      }
      this._insideLoop = true;
      try {
        do {
          this._pendingNext = false;
          this._realGetNext();
        } while (this._pendingNext);
      } finally {
        this._insideLoop = false;
      }
    };
    CombinedStream.prototype._realGetNext = function() {
      var stream = this._streams.shift();
      if (typeof stream == "undefined") {
        this.end();
        return;
      }
      if (typeof stream !== "function") {
        this._pipeNext(stream);
        return;
      }
      var getStream = stream;
      getStream(function(stream2) {
        var isStreamLike = CombinedStream.isStreamLike(stream2);
        if (isStreamLike) {
          stream2.on("data", this._checkDataSize.bind(this));
          this._handleErrors(stream2);
        }
        this._pipeNext(stream2);
      }.bind(this));
    };
    CombinedStream.prototype._pipeNext = function(stream) {
      this._currentStream = stream;
      var isStreamLike = CombinedStream.isStreamLike(stream);
      if (isStreamLike) {
        stream.on("end", this._getNext.bind(this));
        stream.pipe(this, { end: false });
        return;
      }
      var value = stream;
      this.write(value);
      this._getNext();
    };
    CombinedStream.prototype._handleErrors = function(stream) {
      var self2 = this;
      stream.on("error", function(err) {
        self2._emitError(err);
      });
    };
    CombinedStream.prototype.write = function(data) {
      this.emit("data", data);
    };
    CombinedStream.prototype.pause = function() {
      if (!this.pauseStreams) {
        return;
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function")
        this._currentStream.pause();
      this.emit("pause");
    };
    CombinedStream.prototype.resume = function() {
      if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
      }
      if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function")
        this._currentStream.resume();
      this.emit("resume");
    };
    CombinedStream.prototype.end = function() {
      this._reset();
      this.emit("end");
    };
    CombinedStream.prototype.destroy = function() {
      this._reset();
      this.emit("close");
    };
    CombinedStream.prototype._reset = function() {
      this.writable = false;
      this._streams = [];
      this._currentStream = null;
    };
    CombinedStream.prototype._checkDataSize = function() {
      this._updateDataSize();
      if (this.dataSize <= this.maxDataSize) {
        return;
      }
      var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
      this._emitError(new Error(message));
    };
    CombinedStream.prototype._updateDataSize = function() {
      this.dataSize = 0;
      var self2 = this;
      this._streams.forEach(function(stream) {
        if (!stream.dataSize) {
          return;
        }
        self2.dataSize += stream.dataSize;
      });
      if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
      }
    };
    CombinedStream.prototype._emitError = function(err) {
      this._reset();
      this.emit("error", err);
    };
  }
});

// ../../node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/db.json
var require_db = __commonJS({
  "../../node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/db.json"(exports2, module2) {
    module2.exports = {
      "application/1d-interleaved-parityfec": {
        source: "iana"
      },
      "application/3gpdash-qoe-report+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/3gpp-ims+xml": {
        source: "iana",
        compressible: true
      },
      "application/3gpphal+json": {
        source: "iana",
        compressible: true
      },
      "application/3gpphalforms+json": {
        source: "iana",
        compressible: true
      },
      "application/a2l": {
        source: "iana"
      },
      "application/ace+cbor": {
        source: "iana"
      },
      "application/activemessage": {
        source: "iana"
      },
      "application/activity+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-costmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-directory+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcost+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointcostparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointprop+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-endpointpropparams+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-error+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmap+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-networkmapfilter+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamcontrol+json": {
        source: "iana",
        compressible: true
      },
      "application/alto-updatestreamparams+json": {
        source: "iana",
        compressible: true
      },
      "application/aml": {
        source: "iana"
      },
      "application/andrew-inset": {
        source: "iana",
        extensions: ["ez"]
      },
      "application/applefile": {
        source: "iana"
      },
      "application/applixware": {
        source: "apache",
        extensions: ["aw"]
      },
      "application/at+jwt": {
        source: "iana"
      },
      "application/atf": {
        source: "iana"
      },
      "application/atfx": {
        source: "iana"
      },
      "application/atom+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atom"]
      },
      "application/atomcat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomcat"]
      },
      "application/atomdeleted+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomdeleted"]
      },
      "application/atomicmail": {
        source: "iana"
      },
      "application/atomsvc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["atomsvc"]
      },
      "application/atsc-dwd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dwd"]
      },
      "application/atsc-dynamic-event-message": {
        source: "iana"
      },
      "application/atsc-held+xml": {
        source: "iana",
        compressible: true,
        extensions: ["held"]
      },
      "application/atsc-rdt+json": {
        source: "iana",
        compressible: true
      },
      "application/atsc-rsat+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsat"]
      },
      "application/atxml": {
        source: "iana"
      },
      "application/auth-policy+xml": {
        source: "iana",
        compressible: true
      },
      "application/bacnet-xdd+zip": {
        source: "iana",
        compressible: false
      },
      "application/batch-smtp": {
        source: "iana"
      },
      "application/bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/beep+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/calendar+json": {
        source: "iana",
        compressible: true
      },
      "application/calendar+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xcs"]
      },
      "application/call-completion": {
        source: "iana"
      },
      "application/cals-1840": {
        source: "iana"
      },
      "application/captive+json": {
        source: "iana",
        compressible: true
      },
      "application/cbor": {
        source: "iana"
      },
      "application/cbor-seq": {
        source: "iana"
      },
      "application/cccex": {
        source: "iana"
      },
      "application/ccmp+xml": {
        source: "iana",
        compressible: true
      },
      "application/ccxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ccxml"]
      },
      "application/cdfx+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdfx"]
      },
      "application/cdmi-capability": {
        source: "iana",
        extensions: ["cdmia"]
      },
      "application/cdmi-container": {
        source: "iana",
        extensions: ["cdmic"]
      },
      "application/cdmi-domain": {
        source: "iana",
        extensions: ["cdmid"]
      },
      "application/cdmi-object": {
        source: "iana",
        extensions: ["cdmio"]
      },
      "application/cdmi-queue": {
        source: "iana",
        extensions: ["cdmiq"]
      },
      "application/cdni": {
        source: "iana"
      },
      "application/cea": {
        source: "iana"
      },
      "application/cea-2018+xml": {
        source: "iana",
        compressible: true
      },
      "application/cellml+xml": {
        source: "iana",
        compressible: true
      },
      "application/cfw": {
        source: "iana"
      },
      "application/city+json": {
        source: "iana",
        compressible: true
      },
      "application/clr": {
        source: "iana"
      },
      "application/clue+xml": {
        source: "iana",
        compressible: true
      },
      "application/clue_info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cms": {
        source: "iana"
      },
      "application/cnrp+xml": {
        source: "iana",
        compressible: true
      },
      "application/coap-group+json": {
        source: "iana",
        compressible: true
      },
      "application/coap-payload": {
        source: "iana"
      },
      "application/commonground": {
        source: "iana"
      },
      "application/conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/cose": {
        source: "iana"
      },
      "application/cose-key": {
        source: "iana"
      },
      "application/cose-key-set": {
        source: "iana"
      },
      "application/cpl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cpl"]
      },
      "application/csrattrs": {
        source: "iana"
      },
      "application/csta+xml": {
        source: "iana",
        compressible: true
      },
      "application/cstadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/csvm+json": {
        source: "iana",
        compressible: true
      },
      "application/cu-seeme": {
        source: "apache",
        extensions: ["cu"]
      },
      "application/cwt": {
        source: "iana"
      },
      "application/cybercash": {
        source: "iana"
      },
      "application/dart": {
        compressible: true
      },
      "application/dash+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpd"]
      },
      "application/dash-patch+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpp"]
      },
      "application/dashdelta": {
        source: "iana"
      },
      "application/davmount+xml": {
        source: "iana",
        compressible: true,
        extensions: ["davmount"]
      },
      "application/dca-rft": {
        source: "iana"
      },
      "application/dcd": {
        source: "iana"
      },
      "application/dec-dx": {
        source: "iana"
      },
      "application/dialog-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/dicom": {
        source: "iana"
      },
      "application/dicom+json": {
        source: "iana",
        compressible: true
      },
      "application/dicom+xml": {
        source: "iana",
        compressible: true
      },
      "application/dii": {
        source: "iana"
      },
      "application/dit": {
        source: "iana"
      },
      "application/dns": {
        source: "iana"
      },
      "application/dns+json": {
        source: "iana",
        compressible: true
      },
      "application/dns-message": {
        source: "iana"
      },
      "application/docbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dbk"]
      },
      "application/dots+cbor": {
        source: "iana"
      },
      "application/dskpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/dssc+der": {
        source: "iana",
        extensions: ["dssc"]
      },
      "application/dssc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdssc"]
      },
      "application/dvcs": {
        source: "iana"
      },
      "application/ecmascript": {
        source: "iana",
        compressible: true,
        extensions: ["es", "ecma"]
      },
      "application/edi-consent": {
        source: "iana"
      },
      "application/edi-x12": {
        source: "iana",
        compressible: false
      },
      "application/edifact": {
        source: "iana",
        compressible: false
      },
      "application/efi": {
        source: "iana"
      },
      "application/elm+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/elm+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.cap+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/emergencycalldata.comment+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.control+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.deviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.ecall.msd": {
        source: "iana"
      },
      "application/emergencycalldata.providerinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.serviceinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.subscriberinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/emergencycalldata.veds+xml": {
        source: "iana",
        compressible: true
      },
      "application/emma+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emma"]
      },
      "application/emotionml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["emotionml"]
      },
      "application/encaprtp": {
        source: "iana"
      },
      "application/epp+xml": {
        source: "iana",
        compressible: true
      },
      "application/epub+zip": {
        source: "iana",
        compressible: false,
        extensions: ["epub"]
      },
      "application/eshop": {
        source: "iana"
      },
      "application/exi": {
        source: "iana",
        extensions: ["exi"]
      },
      "application/expect-ct-report+json": {
        source: "iana",
        compressible: true
      },
      "application/express": {
        source: "iana",
        extensions: ["exp"]
      },
      "application/fastinfoset": {
        source: "iana"
      },
      "application/fastsoap": {
        source: "iana"
      },
      "application/fdt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fdt"]
      },
      "application/fhir+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fhir+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/fido.trusted-apps+json": {
        compressible: true
      },
      "application/fits": {
        source: "iana"
      },
      "application/flexfec": {
        source: "iana"
      },
      "application/font-sfnt": {
        source: "iana"
      },
      "application/font-tdpfr": {
        source: "iana",
        extensions: ["pfr"]
      },
      "application/font-woff": {
        source: "iana",
        compressible: false
      },
      "application/framework-attributes+xml": {
        source: "iana",
        compressible: true
      },
      "application/geo+json": {
        source: "iana",
        compressible: true,
        extensions: ["geojson"]
      },
      "application/geo+json-seq": {
        source: "iana"
      },
      "application/geopackage+sqlite3": {
        source: "iana"
      },
      "application/geoxacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/gltf-buffer": {
        source: "iana"
      },
      "application/gml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["gml"]
      },
      "application/gpx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["gpx"]
      },
      "application/gxf": {
        source: "apache",
        extensions: ["gxf"]
      },
      "application/gzip": {
        source: "iana",
        compressible: false,
        extensions: ["gz"]
      },
      "application/h224": {
        source: "iana"
      },
      "application/held+xml": {
        source: "iana",
        compressible: true
      },
      "application/hjson": {
        extensions: ["hjson"]
      },
      "application/http": {
        source: "iana"
      },
      "application/hyperstudio": {
        source: "iana",
        extensions: ["stk"]
      },
      "application/ibe-key-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pkg-reply+xml": {
        source: "iana",
        compressible: true
      },
      "application/ibe-pp-data": {
        source: "iana"
      },
      "application/iges": {
        source: "iana"
      },
      "application/im-iscomposing+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/index": {
        source: "iana"
      },
      "application/index.cmd": {
        source: "iana"
      },
      "application/index.obj": {
        source: "iana"
      },
      "application/index.response": {
        source: "iana"
      },
      "application/index.vnd": {
        source: "iana"
      },
      "application/inkml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ink", "inkml"]
      },
      "application/iotp": {
        source: "iana"
      },
      "application/ipfix": {
        source: "iana",
        extensions: ["ipfix"]
      },
      "application/ipp": {
        source: "iana"
      },
      "application/isup": {
        source: "iana"
      },
      "application/its+xml": {
        source: "iana",
        compressible: true,
        extensions: ["its"]
      },
      "application/java-archive": {
        source: "apache",
        compressible: false,
        extensions: ["jar", "war", "ear"]
      },
      "application/java-serialized-object": {
        source: "apache",
        compressible: false,
        extensions: ["ser"]
      },
      "application/java-vm": {
        source: "apache",
        compressible: false,
        extensions: ["class"]
      },
      "application/javascript": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["js", "mjs"]
      },
      "application/jf2feed+json": {
        source: "iana",
        compressible: true
      },
      "application/jose": {
        source: "iana"
      },
      "application/jose+json": {
        source: "iana",
        compressible: true
      },
      "application/jrd+json": {
        source: "iana",
        compressible: true
      },
      "application/jscalendar+json": {
        source: "iana",
        compressible: true
      },
      "application/json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["json", "map"]
      },
      "application/json-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/json-seq": {
        source: "iana"
      },
      "application/json5": {
        extensions: ["json5"]
      },
      "application/jsonml+json": {
        source: "apache",
        compressible: true,
        extensions: ["jsonml"]
      },
      "application/jwk+json": {
        source: "iana",
        compressible: true
      },
      "application/jwk-set+json": {
        source: "iana",
        compressible: true
      },
      "application/jwt": {
        source: "iana"
      },
      "application/kpml-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/kpml-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/ld+json": {
        source: "iana",
        compressible: true,
        extensions: ["jsonld"]
      },
      "application/lgr+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lgr"]
      },
      "application/link-format": {
        source: "iana"
      },
      "application/load-control+xml": {
        source: "iana",
        compressible: true
      },
      "application/lost+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lostxml"]
      },
      "application/lostsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/lpf+zip": {
        source: "iana",
        compressible: false
      },
      "application/lxf": {
        source: "iana"
      },
      "application/mac-binhex40": {
        source: "iana",
        extensions: ["hqx"]
      },
      "application/mac-compactpro": {
        source: "apache",
        extensions: ["cpt"]
      },
      "application/macwriteii": {
        source: "iana"
      },
      "application/mads+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mads"]
      },
      "application/manifest+json": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["webmanifest"]
      },
      "application/marc": {
        source: "iana",
        extensions: ["mrc"]
      },
      "application/marcxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mrcx"]
      },
      "application/mathematica": {
        source: "iana",
        extensions: ["ma", "nb", "mb"]
      },
      "application/mathml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mathml"]
      },
      "application/mathml-content+xml": {
        source: "iana",
        compressible: true
      },
      "application/mathml-presentation+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-associated-procedure-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-deregister+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-envelope+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-msk-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-protection-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-reception-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-register-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-schedule+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbms-user-service-description+xml": {
        source: "iana",
        compressible: true
      },
      "application/mbox": {
        source: "iana",
        extensions: ["mbox"]
      },
      "application/media-policy-dataset+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpf"]
      },
      "application/media_control+xml": {
        source: "iana",
        compressible: true
      },
      "application/mediaservercontrol+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mscml"]
      },
      "application/merge-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/metalink+xml": {
        source: "apache",
        compressible: true,
        extensions: ["metalink"]
      },
      "application/metalink4+xml": {
        source: "iana",
        compressible: true,
        extensions: ["meta4"]
      },
      "application/mets+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mets"]
      },
      "application/mf4": {
        source: "iana"
      },
      "application/mikey": {
        source: "iana"
      },
      "application/mipc": {
        source: "iana"
      },
      "application/missing-blocks+cbor-seq": {
        source: "iana"
      },
      "application/mmt-aei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["maei"]
      },
      "application/mmt-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musd"]
      },
      "application/mods+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mods"]
      },
      "application/moss-keys": {
        source: "iana"
      },
      "application/moss-signature": {
        source: "iana"
      },
      "application/mosskey-data": {
        source: "iana"
      },
      "application/mosskey-request": {
        source: "iana"
      },
      "application/mp21": {
        source: "iana",
        extensions: ["m21", "mp21"]
      },
      "application/mp4": {
        source: "iana",
        extensions: ["mp4s", "m4p"]
      },
      "application/mpeg4-generic": {
        source: "iana"
      },
      "application/mpeg4-iod": {
        source: "iana"
      },
      "application/mpeg4-iod-xmt": {
        source: "iana"
      },
      "application/mrb-consumer+xml": {
        source: "iana",
        compressible: true
      },
      "application/mrb-publish+xml": {
        source: "iana",
        compressible: true
      },
      "application/msc-ivr+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msc-mixer+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/msword": {
        source: "iana",
        compressible: false,
        extensions: ["doc", "dot"]
      },
      "application/mud+json": {
        source: "iana",
        compressible: true
      },
      "application/multipart-core": {
        source: "iana"
      },
      "application/mxf": {
        source: "iana",
        extensions: ["mxf"]
      },
      "application/n-quads": {
        source: "iana",
        extensions: ["nq"]
      },
      "application/n-triples": {
        source: "iana",
        extensions: ["nt"]
      },
      "application/nasdata": {
        source: "iana"
      },
      "application/news-checkgroups": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-groupinfo": {
        source: "iana",
        charset: "US-ASCII"
      },
      "application/news-transmission": {
        source: "iana"
      },
      "application/nlsml+xml": {
        source: "iana",
        compressible: true
      },
      "application/node": {
        source: "iana",
        extensions: ["cjs"]
      },
      "application/nss": {
        source: "iana"
      },
      "application/oauth-authz-req+jwt": {
        source: "iana"
      },
      "application/oblivious-dns-message": {
        source: "iana"
      },
      "application/ocsp-request": {
        source: "iana"
      },
      "application/ocsp-response": {
        source: "iana"
      },
      "application/octet-stream": {
        source: "iana",
        compressible: false,
        extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
      },
      "application/oda": {
        source: "iana",
        extensions: ["oda"]
      },
      "application/odm+xml": {
        source: "iana",
        compressible: true
      },
      "application/odx": {
        source: "iana"
      },
      "application/oebps-package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["opf"]
      },
      "application/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogx"]
      },
      "application/omdoc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["omdoc"]
      },
      "application/onenote": {
        source: "apache",
        extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
      },
      "application/opc-nodeset+xml": {
        source: "iana",
        compressible: true
      },
      "application/oscore": {
        source: "iana"
      },
      "application/oxps": {
        source: "iana",
        extensions: ["oxps"]
      },
      "application/p21": {
        source: "iana"
      },
      "application/p21+zip": {
        source: "iana",
        compressible: false
      },
      "application/p2p-overlay+xml": {
        source: "iana",
        compressible: true,
        extensions: ["relo"]
      },
      "application/parityfec": {
        source: "iana"
      },
      "application/passport": {
        source: "iana"
      },
      "application/patch-ops-error+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xer"]
      },
      "application/pdf": {
        source: "iana",
        compressible: false,
        extensions: ["pdf"]
      },
      "application/pdx": {
        source: "iana"
      },
      "application/pem-certificate-chain": {
        source: "iana"
      },
      "application/pgp-encrypted": {
        source: "iana",
        compressible: false,
        extensions: ["pgp"]
      },
      "application/pgp-keys": {
        source: "iana",
        extensions: ["asc"]
      },
      "application/pgp-signature": {
        source: "iana",
        extensions: ["asc", "sig"]
      },
      "application/pics-rules": {
        source: "apache",
        extensions: ["prf"]
      },
      "application/pidf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pidf-diff+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/pkcs10": {
        source: "iana",
        extensions: ["p10"]
      },
      "application/pkcs12": {
        source: "iana"
      },
      "application/pkcs7-mime": {
        source: "iana",
        extensions: ["p7m", "p7c"]
      },
      "application/pkcs7-signature": {
        source: "iana",
        extensions: ["p7s"]
      },
      "application/pkcs8": {
        source: "iana",
        extensions: ["p8"]
      },
      "application/pkcs8-encrypted": {
        source: "iana"
      },
      "application/pkix-attr-cert": {
        source: "iana",
        extensions: ["ac"]
      },
      "application/pkix-cert": {
        source: "iana",
        extensions: ["cer"]
      },
      "application/pkix-crl": {
        source: "iana",
        extensions: ["crl"]
      },
      "application/pkix-pkipath": {
        source: "iana",
        extensions: ["pkipath"]
      },
      "application/pkixcmp": {
        source: "iana",
        extensions: ["pki"]
      },
      "application/pls+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pls"]
      },
      "application/poc-settings+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/postscript": {
        source: "iana",
        compressible: true,
        extensions: ["ai", "eps", "ps"]
      },
      "application/ppsp-tracker+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+json": {
        source: "iana",
        compressible: true
      },
      "application/problem+xml": {
        source: "iana",
        compressible: true
      },
      "application/provenance+xml": {
        source: "iana",
        compressible: true,
        extensions: ["provx"]
      },
      "application/prs.alvestrand.titrax-sheet": {
        source: "iana"
      },
      "application/prs.cww": {
        source: "iana",
        extensions: ["cww"]
      },
      "application/prs.cyn": {
        source: "iana",
        charset: "7-BIT"
      },
      "application/prs.hpub+zip": {
        source: "iana",
        compressible: false
      },
      "application/prs.nprend": {
        source: "iana"
      },
      "application/prs.plucker": {
        source: "iana"
      },
      "application/prs.rdf-xml-crypt": {
        source: "iana"
      },
      "application/prs.xsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/pskc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["pskcxml"]
      },
      "application/pvd+json": {
        source: "iana",
        compressible: true
      },
      "application/qsig": {
        source: "iana"
      },
      "application/raml+yaml": {
        compressible: true,
        extensions: ["raml"]
      },
      "application/raptorfec": {
        source: "iana"
      },
      "application/rdap+json": {
        source: "iana",
        compressible: true
      },
      "application/rdf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rdf", "owl"]
      },
      "application/reginfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rif"]
      },
      "application/relax-ng-compact-syntax": {
        source: "iana",
        extensions: ["rnc"]
      },
      "application/remote-printing": {
        source: "iana"
      },
      "application/reputon+json": {
        source: "iana",
        compressible: true
      },
      "application/resource-lists+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rl"]
      },
      "application/resource-lists-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rld"]
      },
      "application/rfc+xml": {
        source: "iana",
        compressible: true
      },
      "application/riscos": {
        source: "iana"
      },
      "application/rlmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/rls-services+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rs"]
      },
      "application/route-apd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rapd"]
      },
      "application/route-s-tsid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sls"]
      },
      "application/route-usd+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rusd"]
      },
      "application/rpki-ghostbusters": {
        source: "iana",
        extensions: ["gbr"]
      },
      "application/rpki-manifest": {
        source: "iana",
        extensions: ["mft"]
      },
      "application/rpki-publication": {
        source: "iana"
      },
      "application/rpki-roa": {
        source: "iana",
        extensions: ["roa"]
      },
      "application/rpki-updown": {
        source: "iana"
      },
      "application/rsd+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rsd"]
      },
      "application/rss+xml": {
        source: "apache",
        compressible: true,
        extensions: ["rss"]
      },
      "application/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "application/rtploopback": {
        source: "iana"
      },
      "application/rtx": {
        source: "iana"
      },
      "application/samlassertion+xml": {
        source: "iana",
        compressible: true
      },
      "application/samlmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/sarif+json": {
        source: "iana",
        compressible: true
      },
      "application/sarif-external-properties+json": {
        source: "iana",
        compressible: true
      },
      "application/sbe": {
        source: "iana"
      },
      "application/sbml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sbml"]
      },
      "application/scaip+xml": {
        source: "iana",
        compressible: true
      },
      "application/scim+json": {
        source: "iana",
        compressible: true
      },
      "application/scvp-cv-request": {
        source: "iana",
        extensions: ["scq"]
      },
      "application/scvp-cv-response": {
        source: "iana",
        extensions: ["scs"]
      },
      "application/scvp-vp-request": {
        source: "iana",
        extensions: ["spq"]
      },
      "application/scvp-vp-response": {
        source: "iana",
        extensions: ["spp"]
      },
      "application/sdp": {
        source: "iana",
        extensions: ["sdp"]
      },
      "application/secevent+jwt": {
        source: "iana"
      },
      "application/senml+cbor": {
        source: "iana"
      },
      "application/senml+json": {
        source: "iana",
        compressible: true
      },
      "application/senml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["senmlx"]
      },
      "application/senml-etch+cbor": {
        source: "iana"
      },
      "application/senml-etch+json": {
        source: "iana",
        compressible: true
      },
      "application/senml-exi": {
        source: "iana"
      },
      "application/sensml+cbor": {
        source: "iana"
      },
      "application/sensml+json": {
        source: "iana",
        compressible: true
      },
      "application/sensml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sensmlx"]
      },
      "application/sensml-exi": {
        source: "iana"
      },
      "application/sep+xml": {
        source: "iana",
        compressible: true
      },
      "application/sep-exi": {
        source: "iana"
      },
      "application/session-info": {
        source: "iana"
      },
      "application/set-payment": {
        source: "iana"
      },
      "application/set-payment-initiation": {
        source: "iana",
        extensions: ["setpay"]
      },
      "application/set-registration": {
        source: "iana"
      },
      "application/set-registration-initiation": {
        source: "iana",
        extensions: ["setreg"]
      },
      "application/sgml": {
        source: "iana"
      },
      "application/sgml-open-catalog": {
        source: "iana"
      },
      "application/shf+xml": {
        source: "iana",
        compressible: true,
        extensions: ["shf"]
      },
      "application/sieve": {
        source: "iana",
        extensions: ["siv", "sieve"]
      },
      "application/simple-filter+xml": {
        source: "iana",
        compressible: true
      },
      "application/simple-message-summary": {
        source: "iana"
      },
      "application/simplesymbolcontainer": {
        source: "iana"
      },
      "application/sipc": {
        source: "iana"
      },
      "application/slate": {
        source: "iana"
      },
      "application/smil": {
        source: "iana"
      },
      "application/smil+xml": {
        source: "iana",
        compressible: true,
        extensions: ["smi", "smil"]
      },
      "application/smpte336m": {
        source: "iana"
      },
      "application/soap+fastinfoset": {
        source: "iana"
      },
      "application/soap+xml": {
        source: "iana",
        compressible: true
      },
      "application/sparql-query": {
        source: "iana",
        extensions: ["rq"]
      },
      "application/sparql-results+xml": {
        source: "iana",
        compressible: true,
        extensions: ["srx"]
      },
      "application/spdx+json": {
        source: "iana",
        compressible: true
      },
      "application/spirits-event+xml": {
        source: "iana",
        compressible: true
      },
      "application/sql": {
        source: "iana"
      },
      "application/srgs": {
        source: "iana",
        extensions: ["gram"]
      },
      "application/srgs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["grxml"]
      },
      "application/sru+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sru"]
      },
      "application/ssdl+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ssdl"]
      },
      "application/ssml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ssml"]
      },
      "application/stix+json": {
        source: "iana",
        compressible: true
      },
      "application/swid+xml": {
        source: "iana",
        compressible: true,
        extensions: ["swidtag"]
      },
      "application/tamp-apex-update": {
        source: "iana"
      },
      "application/tamp-apex-update-confirm": {
        source: "iana"
      },
      "application/tamp-community-update": {
        source: "iana"
      },
      "application/tamp-community-update-confirm": {
        source: "iana"
      },
      "application/tamp-error": {
        source: "iana"
      },
      "application/tamp-sequence-adjust": {
        source: "iana"
      },
      "application/tamp-sequence-adjust-confirm": {
        source: "iana"
      },
      "application/tamp-status-query": {
        source: "iana"
      },
      "application/tamp-status-response": {
        source: "iana"
      },
      "application/tamp-update": {
        source: "iana"
      },
      "application/tamp-update-confirm": {
        source: "iana"
      },
      "application/tar": {
        compressible: true
      },
      "application/taxii+json": {
        source: "iana",
        compressible: true
      },
      "application/td+json": {
        source: "iana",
        compressible: true
      },
      "application/tei+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tei", "teicorpus"]
      },
      "application/tetra_isi": {
        source: "iana"
      },
      "application/thraud+xml": {
        source: "iana",
        compressible: true,
        extensions: ["tfi"]
      },
      "application/timestamp-query": {
        source: "iana"
      },
      "application/timestamp-reply": {
        source: "iana"
      },
      "application/timestamped-data": {
        source: "iana",
        extensions: ["tsd"]
      },
      "application/tlsrpt+gzip": {
        source: "iana"
      },
      "application/tlsrpt+json": {
        source: "iana",
        compressible: true
      },
      "application/tnauthlist": {
        source: "iana"
      },
      "application/token-introspection+jwt": {
        source: "iana"
      },
      "application/toml": {
        compressible: true,
        extensions: ["toml"]
      },
      "application/trickle-ice-sdpfrag": {
        source: "iana"
      },
      "application/trig": {
        source: "iana",
        extensions: ["trig"]
      },
      "application/ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ttml"]
      },
      "application/tve-trigger": {
        source: "iana"
      },
      "application/tzif": {
        source: "iana"
      },
      "application/tzif-leap": {
        source: "iana"
      },
      "application/ubjson": {
        compressible: false,
        extensions: ["ubj"]
      },
      "application/ulpfec": {
        source: "iana"
      },
      "application/urc-grpsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/urc-ressheet+xml": {
        source: "iana",
        compressible: true,
        extensions: ["rsheet"]
      },
      "application/urc-targetdesc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["td"]
      },
      "application/urc-uisocketdesc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vcard+json": {
        source: "iana",
        compressible: true
      },
      "application/vcard+xml": {
        source: "iana",
        compressible: true
      },
      "application/vemmi": {
        source: "iana"
      },
      "application/vividence.scriptfile": {
        source: "apache"
      },
      "application/vnd.1000minds.decision-model+xml": {
        source: "iana",
        compressible: true,
        extensions: ["1km"]
      },
      "application/vnd.3gpp-prose+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-prose-pc3ch+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp-v2x-local-service-information": {
        source: "iana"
      },
      "application/vnd.3gpp.5gnas": {
        source: "iana"
      },
      "application/vnd.3gpp.access-transfer-events+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.bsf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gmop+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.gtpc": {
        source: "iana"
      },
      "application/vnd.3gpp.interworking-data": {
        source: "iana"
      },
      "application/vnd.3gpp.lpp": {
        source: "iana"
      },
      "application/vnd.3gpp.mc-signalling-ear": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-payload": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-signalling": {
        source: "iana"
      },
      "application/vnd.3gpp.mcdata-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcdata-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-floor-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-signed+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-ue-init-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcptt-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-location-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-service-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-transmission-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-ue-config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mcvideo-user-profile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.mid-call+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ngap": {
        source: "iana"
      },
      "application/vnd.3gpp.pfcp": {
        source: "iana"
      },
      "application/vnd.3gpp.pic-bw-large": {
        source: "iana",
        extensions: ["plb"]
      },
      "application/vnd.3gpp.pic-bw-small": {
        source: "iana",
        extensions: ["psb"]
      },
      "application/vnd.3gpp.pic-bw-var": {
        source: "iana",
        extensions: ["pvb"]
      },
      "application/vnd.3gpp.s1ap": {
        source: "iana"
      },
      "application/vnd.3gpp.sms": {
        source: "iana"
      },
      "application/vnd.3gpp.sms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-ext+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.srvcc-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.state-and-event-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp.ussd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.bcmcsinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.3gpp2.sms": {
        source: "iana"
      },
      "application/vnd.3gpp2.tcap": {
        source: "iana",
        extensions: ["tcap"]
      },
      "application/vnd.3lightssoftware.imagescal": {
        source: "iana"
      },
      "application/vnd.3m.post-it-notes": {
        source: "iana",
        extensions: ["pwn"]
      },
      "application/vnd.accpac.simply.aso": {
        source: "iana",
        extensions: ["aso"]
      },
      "application/vnd.accpac.simply.imp": {
        source: "iana",
        extensions: ["imp"]
      },
      "application/vnd.acucobol": {
        source: "iana",
        extensions: ["acu"]
      },
      "application/vnd.acucorp": {
        source: "iana",
        extensions: ["atc", "acutc"]
      },
      "application/vnd.adobe.air-application-installer-package+zip": {
        source: "apache",
        compressible: false,
        extensions: ["air"]
      },
      "application/vnd.adobe.flash.movie": {
        source: "iana"
      },
      "application/vnd.adobe.formscentral.fcdt": {
        source: "iana",
        extensions: ["fcdt"]
      },
      "application/vnd.adobe.fxp": {
        source: "iana",
        extensions: ["fxp", "fxpl"]
      },
      "application/vnd.adobe.partial-upload": {
        source: "iana"
      },
      "application/vnd.adobe.xdp+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdp"]
      },
      "application/vnd.adobe.xfdf": {
        source: "iana",
        extensions: ["xfdf"]
      },
      "application/vnd.aether.imp": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata": {
        source: "iana"
      },
      "application/vnd.afpc.afplinedata-pagedef": {
        source: "iana"
      },
      "application/vnd.afpc.cmoca-cmresource": {
        source: "iana"
      },
      "application/vnd.afpc.foca-charset": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codedfont": {
        source: "iana"
      },
      "application/vnd.afpc.foca-codepage": {
        source: "iana"
      },
      "application/vnd.afpc.modca": {
        source: "iana"
      },
      "application/vnd.afpc.modca-cmtable": {
        source: "iana"
      },
      "application/vnd.afpc.modca-formdef": {
        source: "iana"
      },
      "application/vnd.afpc.modca-mediummap": {
        source: "iana"
      },
      "application/vnd.afpc.modca-objectcontainer": {
        source: "iana"
      },
      "application/vnd.afpc.modca-overlay": {
        source: "iana"
      },
      "application/vnd.afpc.modca-pagesegment": {
        source: "iana"
      },
      "application/vnd.age": {
        source: "iana",
        extensions: ["age"]
      },
      "application/vnd.ah-barcode": {
        source: "iana"
      },
      "application/vnd.ahead.space": {
        source: "iana",
        extensions: ["ahead"]
      },
      "application/vnd.airzip.filesecure.azf": {
        source: "iana",
        extensions: ["azf"]
      },
      "application/vnd.airzip.filesecure.azs": {
        source: "iana",
        extensions: ["azs"]
      },
      "application/vnd.amadeus+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.amazon.ebook": {
        source: "apache",
        extensions: ["azw"]
      },
      "application/vnd.amazon.mobi8-ebook": {
        source: "iana"
      },
      "application/vnd.americandynamics.acc": {
        source: "iana",
        extensions: ["acc"]
      },
      "application/vnd.amiga.ami": {
        source: "iana",
        extensions: ["ami"]
      },
      "application/vnd.amundsen.maze+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.android.ota": {
        source: "iana"
      },
      "application/vnd.android.package-archive": {
        source: "apache",
        compressible: false,
        extensions: ["apk"]
      },
      "application/vnd.anki": {
        source: "iana"
      },
      "application/vnd.anser-web-certificate-issue-initiation": {
        source: "iana",
        extensions: ["cii"]
      },
      "application/vnd.anser-web-funds-transfer-initiation": {
        source: "apache",
        extensions: ["fti"]
      },
      "application/vnd.antix.game-component": {
        source: "iana",
        extensions: ["atx"]
      },
      "application/vnd.apache.arrow.file": {
        source: "iana"
      },
      "application/vnd.apache.arrow.stream": {
        source: "iana"
      },
      "application/vnd.apache.thrift.binary": {
        source: "iana"
      },
      "application/vnd.apache.thrift.compact": {
        source: "iana"
      },
      "application/vnd.apache.thrift.json": {
        source: "iana"
      },
      "application/vnd.api+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.aplextor.warrp+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apothekende.reservation+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.apple.installer+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mpkg"]
      },
      "application/vnd.apple.keynote": {
        source: "iana",
        extensions: ["key"]
      },
      "application/vnd.apple.mpegurl": {
        source: "iana",
        extensions: ["m3u8"]
      },
      "application/vnd.apple.numbers": {
        source: "iana",
        extensions: ["numbers"]
      },
      "application/vnd.apple.pages": {
        source: "iana",
        extensions: ["pages"]
      },
      "application/vnd.apple.pkpass": {
        compressible: false,
        extensions: ["pkpass"]
      },
      "application/vnd.arastra.swi": {
        source: "iana"
      },
      "application/vnd.aristanetworks.swi": {
        source: "iana",
        extensions: ["swi"]
      },
      "application/vnd.artisan+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.artsquare": {
        source: "iana"
      },
      "application/vnd.astraea-software.iota": {
        source: "iana",
        extensions: ["iota"]
      },
      "application/vnd.audiograph": {
        source: "iana",
        extensions: ["aep"]
      },
      "application/vnd.autopackage": {
        source: "iana"
      },
      "application/vnd.avalon+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.avistar+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.balsamiq.bmml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["bmml"]
      },
      "application/vnd.balsamiq.bmpr": {
        source: "iana"
      },
      "application/vnd.banana-accounting": {
        source: "iana"
      },
      "application/vnd.bbf.usp.error": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg": {
        source: "iana"
      },
      "application/vnd.bbf.usp.msg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bekitzur-stech+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.bint.med-content": {
        source: "iana"
      },
      "application/vnd.biopax.rdf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.blink-idb-value-wrapper": {
        source: "iana"
      },
      "application/vnd.blueice.multipass": {
        source: "iana",
        extensions: ["mpm"]
      },
      "application/vnd.bluetooth.ep.oob": {
        source: "iana"
      },
      "application/vnd.bluetooth.le.oob": {
        source: "iana"
      },
      "application/vnd.bmi": {
        source: "iana",
        extensions: ["bmi"]
      },
      "application/vnd.bpf": {
        source: "iana"
      },
      "application/vnd.bpf3": {
        source: "iana"
      },
      "application/vnd.businessobjects": {
        source: "iana",
        extensions: ["rep"]
      },
      "application/vnd.byu.uapi+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cab-jscript": {
        source: "iana"
      },
      "application/vnd.canon-cpdl": {
        source: "iana"
      },
      "application/vnd.canon-lips": {
        source: "iana"
      },
      "application/vnd.capasystems-pg+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cendio.thinlinc.clientconf": {
        source: "iana"
      },
      "application/vnd.century-systems.tcp_stream": {
        source: "iana"
      },
      "application/vnd.chemdraw+xml": {
        source: "iana",
        compressible: true,
        extensions: ["cdxml"]
      },
      "application/vnd.chess-pgn": {
        source: "iana"
      },
      "application/vnd.chipnuts.karaoke-mmd": {
        source: "iana",
        extensions: ["mmd"]
      },
      "application/vnd.ciedi": {
        source: "iana"
      },
      "application/vnd.cinderella": {
        source: "iana",
        extensions: ["cdy"]
      },
      "application/vnd.cirpack.isdn-ext": {
        source: "iana"
      },
      "application/vnd.citationstyles.style+xml": {
        source: "iana",
        compressible: true,
        extensions: ["csl"]
      },
      "application/vnd.claymore": {
        source: "iana",
        extensions: ["cla"]
      },
      "application/vnd.cloanto.rp9": {
        source: "iana",
        extensions: ["rp9"]
      },
      "application/vnd.clonk.c4group": {
        source: "iana",
        extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
      },
      "application/vnd.cluetrust.cartomobile-config": {
        source: "iana",
        extensions: ["c11amc"]
      },
      "application/vnd.cluetrust.cartomobile-config-pkg": {
        source: "iana",
        extensions: ["c11amz"]
      },
      "application/vnd.coffeescript": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.document-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.presentation-template": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet": {
        source: "iana"
      },
      "application/vnd.collabio.xodocuments.spreadsheet-template": {
        source: "iana"
      },
      "application/vnd.collection+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.doc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.collection.next+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.comicbook+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.comicbook-rar": {
        source: "iana"
      },
      "application/vnd.commerce-battelle": {
        source: "iana"
      },
      "application/vnd.commonspace": {
        source: "iana",
        extensions: ["csp"]
      },
      "application/vnd.contact.cmsg": {
        source: "iana",
        extensions: ["cdbcmsg"]
      },
      "application/vnd.coreos.ignition+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cosmocaller": {
        source: "iana",
        extensions: ["cmc"]
      },
      "application/vnd.crick.clicker": {
        source: "iana",
        extensions: ["clkx"]
      },
      "application/vnd.crick.clicker.keyboard": {
        source: "iana",
        extensions: ["clkk"]
      },
      "application/vnd.crick.clicker.palette": {
        source: "iana",
        extensions: ["clkp"]
      },
      "application/vnd.crick.clicker.template": {
        source: "iana",
        extensions: ["clkt"]
      },
      "application/vnd.crick.clicker.wordbank": {
        source: "iana",
        extensions: ["clkw"]
      },
      "application/vnd.criticaltools.wbs+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wbs"]
      },
      "application/vnd.cryptii.pipe+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.crypto-shade-file": {
        source: "iana"
      },
      "application/vnd.cryptomator.encrypted": {
        source: "iana"
      },
      "application/vnd.cryptomator.vault": {
        source: "iana"
      },
      "application/vnd.ctc-posml": {
        source: "iana",
        extensions: ["pml"]
      },
      "application/vnd.ctct.ws+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cups-pdf": {
        source: "iana"
      },
      "application/vnd.cups-postscript": {
        source: "iana"
      },
      "application/vnd.cups-ppd": {
        source: "iana",
        extensions: ["ppd"]
      },
      "application/vnd.cups-raster": {
        source: "iana"
      },
      "application/vnd.cups-raw": {
        source: "iana"
      },
      "application/vnd.curl": {
        source: "iana"
      },
      "application/vnd.curl.car": {
        source: "apache",
        extensions: ["car"]
      },
      "application/vnd.curl.pcurl": {
        source: "apache",
        extensions: ["pcurl"]
      },
      "application/vnd.cyan.dean.root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cybank": {
        source: "iana"
      },
      "application/vnd.cyclonedx+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.cyclonedx+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.d2l.coursepackage1p0+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.d3m-dataset": {
        source: "iana"
      },
      "application/vnd.d3m-problem": {
        source: "iana"
      },
      "application/vnd.dart": {
        source: "iana",
        compressible: true,
        extensions: ["dart"]
      },
      "application/vnd.data-vision.rdz": {
        source: "iana",
        extensions: ["rdz"]
      },
      "application/vnd.datapackage+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dataresource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dbf": {
        source: "iana",
        extensions: ["dbf"]
      },
      "application/vnd.debian.binary-package": {
        source: "iana"
      },
      "application/vnd.dece.data": {
        source: "iana",
        extensions: ["uvf", "uvvf", "uvd", "uvvd"]
      },
      "application/vnd.dece.ttml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uvt", "uvvt"]
      },
      "application/vnd.dece.unspecified": {
        source: "iana",
        extensions: ["uvx", "uvvx"]
      },
      "application/vnd.dece.zip": {
        source: "iana",
        extensions: ["uvz", "uvvz"]
      },
      "application/vnd.denovo.fcselayout-link": {
        source: "iana",
        extensions: ["fe_launch"]
      },
      "application/vnd.desmume.movie": {
        source: "iana"
      },
      "application/vnd.dir-bi.plate-dl-nosuffix": {
        source: "iana"
      },
      "application/vnd.dm.delegation+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dna": {
        source: "iana",
        extensions: ["dna"]
      },
      "application/vnd.document+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dolby.mlp": {
        source: "apache",
        extensions: ["mlp"]
      },
      "application/vnd.dolby.mobile.1": {
        source: "iana"
      },
      "application/vnd.dolby.mobile.2": {
        source: "iana"
      },
      "application/vnd.doremir.scorecloud-binary-document": {
        source: "iana"
      },
      "application/vnd.dpgraph": {
        source: "iana",
        extensions: ["dpg"]
      },
      "application/vnd.dreamfactory": {
        source: "iana",
        extensions: ["dfac"]
      },
      "application/vnd.drive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ds-keypoint": {
        source: "apache",
        extensions: ["kpxx"]
      },
      "application/vnd.dtg.local": {
        source: "iana"
      },
      "application/vnd.dtg.local.flash": {
        source: "iana"
      },
      "application/vnd.dtg.local.html": {
        source: "iana"
      },
      "application/vnd.dvb.ait": {
        source: "iana",
        extensions: ["ait"]
      },
      "application/vnd.dvb.dvbisl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.dvbj": {
        source: "iana"
      },
      "application/vnd.dvb.esgcontainer": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcdftnotifaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgaccess2": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcesgpdd": {
        source: "iana"
      },
      "application/vnd.dvb.ipdcroaming": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-base": {
        source: "iana"
      },
      "application/vnd.dvb.iptv.alfec-enhancement": {
        source: "iana"
      },
      "application/vnd.dvb.notif-aggregate-root+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-container+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-generic+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-msglist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-ia-registration-response+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.notif-init+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.dvb.pfr": {
        source: "iana"
      },
      "application/vnd.dvb.service": {
        source: "iana",
        extensions: ["svc"]
      },
      "application/vnd.dxr": {
        source: "iana"
      },
      "application/vnd.dynageo": {
        source: "iana",
        extensions: ["geo"]
      },
      "application/vnd.dzr": {
        source: "iana"
      },
      "application/vnd.easykaraoke.cdgdownload": {
        source: "iana"
      },
      "application/vnd.ecdis-update": {
        source: "iana"
      },
      "application/vnd.ecip.rlp": {
        source: "iana"
      },
      "application/vnd.eclipse.ditto+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ecowin.chart": {
        source: "iana",
        extensions: ["mag"]
      },
      "application/vnd.ecowin.filerequest": {
        source: "iana"
      },
      "application/vnd.ecowin.fileupdate": {
        source: "iana"
      },
      "application/vnd.ecowin.series": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesrequest": {
        source: "iana"
      },
      "application/vnd.ecowin.seriesupdate": {
        source: "iana"
      },
      "application/vnd.efi.img": {
        source: "iana"
      },
      "application/vnd.efi.iso": {
        source: "iana"
      },
      "application/vnd.emclient.accessrequest+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.enliven": {
        source: "iana",
        extensions: ["nml"]
      },
      "application/vnd.enphase.envoy": {
        source: "iana"
      },
      "application/vnd.eprints.data+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.epson.esf": {
        source: "iana",
        extensions: ["esf"]
      },
      "application/vnd.epson.msf": {
        source: "iana",
        extensions: ["msf"]
      },
      "application/vnd.epson.quickanime": {
        source: "iana",
        extensions: ["qam"]
      },
      "application/vnd.epson.salt": {
        source: "iana",
        extensions: ["slt"]
      },
      "application/vnd.epson.ssf": {
        source: "iana",
        extensions: ["ssf"]
      },
      "application/vnd.ericsson.quickcall": {
        source: "iana"
      },
      "application/vnd.espass-espass+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.eszigno3+xml": {
        source: "iana",
        compressible: true,
        extensions: ["es3", "et3"]
      },
      "application/vnd.etsi.aoc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.asic-e+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.asic-s+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.etsi.cug+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvcommand+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-bc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-cod+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsad-npvr+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvservice+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvsync+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.iptvueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mcid+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.mheg5": {
        source: "iana"
      },
      "application/vnd.etsi.overload-control-policy-dataset+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.pstn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.sci+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.simservs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.timestamp-token": {
        source: "iana"
      },
      "application/vnd.etsi.tsl+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.etsi.tsl.der": {
        source: "iana"
      },
      "application/vnd.eu.kasparian.car+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.eudora.data": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.profile": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.settings": {
        source: "iana"
      },
      "application/vnd.evolv.ecig.theme": {
        source: "iana"
      },
      "application/vnd.exstream-empower+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.exstream-package": {
        source: "iana"
      },
      "application/vnd.ezpix-album": {
        source: "iana",
        extensions: ["ez2"]
      },
      "application/vnd.ezpix-package": {
        source: "iana",
        extensions: ["ez3"]
      },
      "application/vnd.f-secure.mobile": {
        source: "iana"
      },
      "application/vnd.familysearch.gedcom+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.fastcopy-disk-image": {
        source: "iana"
      },
      "application/vnd.fdf": {
        source: "iana",
        extensions: ["fdf"]
      },
      "application/vnd.fdsn.mseed": {
        source: "iana",
        extensions: ["mseed"]
      },
      "application/vnd.fdsn.seed": {
        source: "iana",
        extensions: ["seed", "dataless"]
      },
      "application/vnd.ffsns": {
        source: "iana"
      },
      "application/vnd.ficlab.flb+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.filmit.zfc": {
        source: "iana"
      },
      "application/vnd.fints": {
        source: "iana"
      },
      "application/vnd.firemonkeys.cloudcell": {
        source: "iana"
      },
      "application/vnd.flographit": {
        source: "iana",
        extensions: ["gph"]
      },
      "application/vnd.fluxtime.clip": {
        source: "iana",
        extensions: ["ftc"]
      },
      "application/vnd.font-fontforge-sfd": {
        source: "iana"
      },
      "application/vnd.framemaker": {
        source: "iana",
        extensions: ["fm", "frame", "maker", "book"]
      },
      "application/vnd.frogans.fnc": {
        source: "iana",
        extensions: ["fnc"]
      },
      "application/vnd.frogans.ltf": {
        source: "iana",
        extensions: ["ltf"]
      },
      "application/vnd.fsc.weblaunch": {
        source: "iana",
        extensions: ["fsc"]
      },
      "application/vnd.fujifilm.fb.docuworks": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.binder": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujifilm.fb.jfi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fujitsu.oasys": {
        source: "iana",
        extensions: ["oas"]
      },
      "application/vnd.fujitsu.oasys2": {
        source: "iana",
        extensions: ["oa2"]
      },
      "application/vnd.fujitsu.oasys3": {
        source: "iana",
        extensions: ["oa3"]
      },
      "application/vnd.fujitsu.oasysgp": {
        source: "iana",
        extensions: ["fg5"]
      },
      "application/vnd.fujitsu.oasysprs": {
        source: "iana",
        extensions: ["bh2"]
      },
      "application/vnd.fujixerox.art-ex": {
        source: "iana"
      },
      "application/vnd.fujixerox.art4": {
        source: "iana"
      },
      "application/vnd.fujixerox.ddd": {
        source: "iana",
        extensions: ["ddd"]
      },
      "application/vnd.fujixerox.docuworks": {
        source: "iana",
        extensions: ["xdw"]
      },
      "application/vnd.fujixerox.docuworks.binder": {
        source: "iana",
        extensions: ["xbd"]
      },
      "application/vnd.fujixerox.docuworks.container": {
        source: "iana"
      },
      "application/vnd.fujixerox.hbpl": {
        source: "iana"
      },
      "application/vnd.fut-misnet": {
        source: "iana"
      },
      "application/vnd.futoin+cbor": {
        source: "iana"
      },
      "application/vnd.futoin+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.fuzzysheet": {
        source: "iana",
        extensions: ["fzs"]
      },
      "application/vnd.genomatix.tuxedo": {
        source: "iana",
        extensions: ["txd"]
      },
      "application/vnd.gentics.grd+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geo+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geocube+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.geogebra.file": {
        source: "iana",
        extensions: ["ggb"]
      },
      "application/vnd.geogebra.slides": {
        source: "iana"
      },
      "application/vnd.geogebra.tool": {
        source: "iana",
        extensions: ["ggt"]
      },
      "application/vnd.geometry-explorer": {
        source: "iana",
        extensions: ["gex", "gre"]
      },
      "application/vnd.geonext": {
        source: "iana",
        extensions: ["gxt"]
      },
      "application/vnd.geoplan": {
        source: "iana",
        extensions: ["g2w"]
      },
      "application/vnd.geospace": {
        source: "iana",
        extensions: ["g3w"]
      },
      "application/vnd.gerber": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt": {
        source: "iana"
      },
      "application/vnd.globalplatform.card-content-mgt-response": {
        source: "iana"
      },
      "application/vnd.gmx": {
        source: "iana",
        extensions: ["gmx"]
      },
      "application/vnd.google-apps.document": {
        compressible: false,
        extensions: ["gdoc"]
      },
      "application/vnd.google-apps.presentation": {
        compressible: false,
        extensions: ["gslides"]
      },
      "application/vnd.google-apps.spreadsheet": {
        compressible: false,
        extensions: ["gsheet"]
      },
      "application/vnd.google-earth.kml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["kml"]
      },
      "application/vnd.google-earth.kmz": {
        source: "iana",
        compressible: false,
        extensions: ["kmz"]
      },
      "application/vnd.gov.sk.e-form+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.gov.sk.e-form+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.gov.sk.xmldatacontainer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.grafeq": {
        source: "iana",
        extensions: ["gqf", "gqs"]
      },
      "application/vnd.gridmp": {
        source: "iana"
      },
      "application/vnd.groove-account": {
        source: "iana",
        extensions: ["gac"]
      },
      "application/vnd.groove-help": {
        source: "iana",
        extensions: ["ghf"]
      },
      "application/vnd.groove-identity-message": {
        source: "iana",
        extensions: ["gim"]
      },
      "application/vnd.groove-injector": {
        source: "iana",
        extensions: ["grv"]
      },
      "application/vnd.groove-tool-message": {
        source: "iana",
        extensions: ["gtm"]
      },
      "application/vnd.groove-tool-template": {
        source: "iana",
        extensions: ["tpl"]
      },
      "application/vnd.groove-vcard": {
        source: "iana",
        extensions: ["vcg"]
      },
      "application/vnd.hal+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hal+xml": {
        source: "iana",
        compressible: true,
        extensions: ["hal"]
      },
      "application/vnd.handheld-entertainment+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zmm"]
      },
      "application/vnd.hbci": {
        source: "iana",
        extensions: ["hbci"]
      },
      "application/vnd.hc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hcl-bireports": {
        source: "iana"
      },
      "application/vnd.hdt": {
        source: "iana"
      },
      "application/vnd.heroku+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hhe.lesson-player": {
        source: "iana",
        extensions: ["les"]
      },
      "application/vnd.hl7cda+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hl7v2+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.hp-hpgl": {
        source: "iana",
        extensions: ["hpgl"]
      },
      "application/vnd.hp-hpid": {
        source: "iana",
        extensions: ["hpid"]
      },
      "application/vnd.hp-hps": {
        source: "iana",
        extensions: ["hps"]
      },
      "application/vnd.hp-jlyt": {
        source: "iana",
        extensions: ["jlt"]
      },
      "application/vnd.hp-pcl": {
        source: "iana",
        extensions: ["pcl"]
      },
      "application/vnd.hp-pclxl": {
        source: "iana",
        extensions: ["pclxl"]
      },
      "application/vnd.httphone": {
        source: "iana"
      },
      "application/vnd.hydrostatix.sof-data": {
        source: "iana",
        extensions: ["sfd-hdstx"]
      },
      "application/vnd.hyper+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyper-item+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hyperdrive+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.hzn-3d-crossword": {
        source: "iana"
      },
      "application/vnd.ibm.afplinedata": {
        source: "iana"
      },
      "application/vnd.ibm.electronic-media": {
        source: "iana"
      },
      "application/vnd.ibm.minipay": {
        source: "iana",
        extensions: ["mpy"]
      },
      "application/vnd.ibm.modcap": {
        source: "iana",
        extensions: ["afp", "listafp", "list3820"]
      },
      "application/vnd.ibm.rights-management": {
        source: "iana",
        extensions: ["irm"]
      },
      "application/vnd.ibm.secure-container": {
        source: "iana",
        extensions: ["sc"]
      },
      "application/vnd.iccprofile": {
        source: "iana",
        extensions: ["icc", "icm"]
      },
      "application/vnd.ieee.1905": {
        source: "iana"
      },
      "application/vnd.igloader": {
        source: "iana",
        extensions: ["igl"]
      },
      "application/vnd.imagemeter.folder+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.imagemeter.image+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.immervision-ivp": {
        source: "iana",
        extensions: ["ivp"]
      },
      "application/vnd.immervision-ivu": {
        source: "iana",
        extensions: ["ivu"]
      },
      "application/vnd.ims.imsccv1p1": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p2": {
        source: "iana"
      },
      "application/vnd.ims.imsccv1p3": {
        source: "iana"
      },
      "application/vnd.ims.lis.v2.result+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolproxy.id+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ims.lti.v2.toolsettings.simple+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informedcontrol.rms+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.informix-visionary": {
        source: "iana"
      },
      "application/vnd.infotech.project": {
        source: "iana"
      },
      "application/vnd.infotech.project+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.innopath.wamp.notification": {
        source: "iana"
      },
      "application/vnd.insors.igm": {
        source: "iana",
        extensions: ["igm"]
      },
      "application/vnd.intercon.formnet": {
        source: "iana",
        extensions: ["xpw", "xpx"]
      },
      "application/vnd.intergeo": {
        source: "iana",
        extensions: ["i2g"]
      },
      "application/vnd.intertrust.digibox": {
        source: "iana"
      },
      "application/vnd.intertrust.nncp": {
        source: "iana"
      },
      "application/vnd.intu.qbo": {
        source: "iana",
        extensions: ["qbo"]
      },
      "application/vnd.intu.qfx": {
        source: "iana",
        extensions: ["qfx"]
      },
      "application/vnd.iptc.g2.catalogitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.conceptitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.knowledgeitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.newsmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.packageitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.iptc.g2.planningitem+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ipunplugged.rcprofile": {
        source: "iana",
        extensions: ["rcprofile"]
      },
      "application/vnd.irepository.package+xml": {
        source: "iana",
        compressible: true,
        extensions: ["irp"]
      },
      "application/vnd.is-xpr": {
        source: "iana",
        extensions: ["xpr"]
      },
      "application/vnd.isac.fcs": {
        source: "iana",
        extensions: ["fcs"]
      },
      "application/vnd.iso11783-10+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.jam": {
        source: "iana",
        extensions: ["jam"]
      },
      "application/vnd.japannet-directory-service": {
        source: "iana"
      },
      "application/vnd.japannet-jpnstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-payment-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-registration": {
        source: "iana"
      },
      "application/vnd.japannet-registration-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-setstore-wakeup": {
        source: "iana"
      },
      "application/vnd.japannet-verification": {
        source: "iana"
      },
      "application/vnd.japannet-verification-wakeup": {
        source: "iana"
      },
      "application/vnd.jcp.javame.midlet-rms": {
        source: "iana",
        extensions: ["rms"]
      },
      "application/vnd.jisp": {
        source: "iana",
        extensions: ["jisp"]
      },
      "application/vnd.joost.joda-archive": {
        source: "iana",
        extensions: ["joda"]
      },
      "application/vnd.jsk.isdn-ngn": {
        source: "iana"
      },
      "application/vnd.kahootz": {
        source: "iana",
        extensions: ["ktz", "ktr"]
      },
      "application/vnd.kde.karbon": {
        source: "iana",
        extensions: ["karbon"]
      },
      "application/vnd.kde.kchart": {
        source: "iana",
        extensions: ["chrt"]
      },
      "application/vnd.kde.kformula": {
        source: "iana",
        extensions: ["kfo"]
      },
      "application/vnd.kde.kivio": {
        source: "iana",
        extensions: ["flw"]
      },
      "application/vnd.kde.kontour": {
        source: "iana",
        extensions: ["kon"]
      },
      "application/vnd.kde.kpresenter": {
        source: "iana",
        extensions: ["kpr", "kpt"]
      },
      "application/vnd.kde.kspread": {
        source: "iana",
        extensions: ["ksp"]
      },
      "application/vnd.kde.kword": {
        source: "iana",
        extensions: ["kwd", "kwt"]
      },
      "application/vnd.kenameaapp": {
        source: "iana",
        extensions: ["htke"]
      },
      "application/vnd.kidspiration": {
        source: "iana",
        extensions: ["kia"]
      },
      "application/vnd.kinar": {
        source: "iana",
        extensions: ["kne", "knp"]
      },
      "application/vnd.koan": {
        source: "iana",
        extensions: ["skp", "skd", "skt", "skm"]
      },
      "application/vnd.kodak-descriptor": {
        source: "iana",
        extensions: ["sse"]
      },
      "application/vnd.las": {
        source: "iana"
      },
      "application/vnd.las.las+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.las.las+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lasxml"]
      },
      "application/vnd.laszip": {
        source: "iana"
      },
      "application/vnd.leap+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.liberty-request+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.llamagraphics.life-balance.desktop": {
        source: "iana",
        extensions: ["lbd"]
      },
      "application/vnd.llamagraphics.life-balance.exchange+xml": {
        source: "iana",
        compressible: true,
        extensions: ["lbe"]
      },
      "application/vnd.logipipe.circuit+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.loom": {
        source: "iana"
      },
      "application/vnd.lotus-1-2-3": {
        source: "iana",
        extensions: ["123"]
      },
      "application/vnd.lotus-approach": {
        source: "iana",
        extensions: ["apr"]
      },
      "application/vnd.lotus-freelance": {
        source: "iana",
        extensions: ["pre"]
      },
      "application/vnd.lotus-notes": {
        source: "iana",
        extensions: ["nsf"]
      },
      "application/vnd.lotus-organizer": {
        source: "iana",
        extensions: ["org"]
      },
      "application/vnd.lotus-screencam": {
        source: "iana",
        extensions: ["scm"]
      },
      "application/vnd.lotus-wordpro": {
        source: "iana",
        extensions: ["lwp"]
      },
      "application/vnd.macports.portpkg": {
        source: "iana",
        extensions: ["portpkg"]
      },
      "application/vnd.mapbox-vector-tile": {
        source: "iana",
        extensions: ["mvt"]
      },
      "application/vnd.marlin.drm.actiontoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.conftoken+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.license+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.marlin.drm.mdcf": {
        source: "iana"
      },
      "application/vnd.mason+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.maxar.archive.3tz+zip": {
        source: "iana",
        compressible: false
      },
      "application/vnd.maxmind.maxmind-db": {
        source: "iana"
      },
      "application/vnd.mcd": {
        source: "iana",
        extensions: ["mcd"]
      },
      "application/vnd.medcalcdata": {
        source: "iana",
        extensions: ["mc1"]
      },
      "application/vnd.mediastation.cdkey": {
        source: "iana",
        extensions: ["cdkey"]
      },
      "application/vnd.meridian-slingshot": {
        source: "iana"
      },
      "application/vnd.mfer": {
        source: "iana",
        extensions: ["mwf"]
      },
      "application/vnd.mfmp": {
        source: "iana",
        extensions: ["mfm"]
      },
      "application/vnd.micro+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.micrografx.flo": {
        source: "iana",
        extensions: ["flo"]
      },
      "application/vnd.micrografx.igx": {
        source: "iana",
        extensions: ["igx"]
      },
      "application/vnd.microsoft.portable-executable": {
        source: "iana"
      },
      "application/vnd.microsoft.windows.thumbnail-cache": {
        source: "iana"
      },
      "application/vnd.miele+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.mif": {
        source: "iana",
        extensions: ["mif"]
      },
      "application/vnd.minisoft-hp3000-save": {
        source: "iana"
      },
      "application/vnd.mitsubishi.misty-guard.trustweb": {
        source: "iana"
      },
      "application/vnd.mobius.daf": {
        source: "iana",
        extensions: ["daf"]
      },
      "application/vnd.mobius.dis": {
        source: "iana",
        extensions: ["dis"]
      },
      "application/vnd.mobius.mbk": {
        source: "iana",
        extensions: ["mbk"]
      },
      "application/vnd.mobius.mqy": {
        source: "iana",
        extensions: ["mqy"]
      },
      "application/vnd.mobius.msl": {
        source: "iana",
        extensions: ["msl"]
      },
      "application/vnd.mobius.plc": {
        source: "iana",
        extensions: ["plc"]
      },
      "application/vnd.mobius.txf": {
        source: "iana",
        extensions: ["txf"]
      },
      "application/vnd.mophun.application": {
        source: "iana",
        extensions: ["mpn"]
      },
      "application/vnd.mophun.certificate": {
        source: "iana",
        extensions: ["mpc"]
      },
      "application/vnd.motorola.flexsuite": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.adsi": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.fis": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.gotap": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.kmr": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.ttc": {
        source: "iana"
      },
      "application/vnd.motorola.flexsuite.wem": {
        source: "iana"
      },
      "application/vnd.motorola.iprm": {
        source: "iana"
      },
      "application/vnd.mozilla.xul+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xul"]
      },
      "application/vnd.ms-3mfdocument": {
        source: "iana"
      },
      "application/vnd.ms-artgalry": {
        source: "iana",
        extensions: ["cil"]
      },
      "application/vnd.ms-asf": {
        source: "iana"
      },
      "application/vnd.ms-cab-compressed": {
        source: "iana",
        extensions: ["cab"]
      },
      "application/vnd.ms-color.iccprofile": {
        source: "apache"
      },
      "application/vnd.ms-excel": {
        source: "iana",
        compressible: false,
        extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
      },
      "application/vnd.ms-excel.addin.macroenabled.12": {
        source: "iana",
        extensions: ["xlam"]
      },
      "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
        source: "iana",
        extensions: ["xlsb"]
      },
      "application/vnd.ms-excel.sheet.macroenabled.12": {
        source: "iana",
        extensions: ["xlsm"]
      },
      "application/vnd.ms-excel.template.macroenabled.12": {
        source: "iana",
        extensions: ["xltm"]
      },
      "application/vnd.ms-fontobject": {
        source: "iana",
        compressible: true,
        extensions: ["eot"]
      },
      "application/vnd.ms-htmlhelp": {
        source: "iana",
        extensions: ["chm"]
      },
      "application/vnd.ms-ims": {
        source: "iana",
        extensions: ["ims"]
      },
      "application/vnd.ms-lrm": {
        source: "iana",
        extensions: ["lrm"]
      },
      "application/vnd.ms-office.activex+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-officetheme": {
        source: "iana",
        extensions: ["thmx"]
      },
      "application/vnd.ms-opentype": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-outlook": {
        compressible: false,
        extensions: ["msg"]
      },
      "application/vnd.ms-package.obfuscated-opentype": {
        source: "apache"
      },
      "application/vnd.ms-pki.seccat": {
        source: "apache",
        extensions: ["cat"]
      },
      "application/vnd.ms-pki.stl": {
        source: "apache",
        extensions: ["stl"]
      },
      "application/vnd.ms-playready.initiator+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-powerpoint": {
        source: "iana",
        compressible: false,
        extensions: ["ppt", "pps", "pot"]
      },
      "application/vnd.ms-powerpoint.addin.macroenabled.12": {
        source: "iana",
        extensions: ["ppam"]
      },
      "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
        source: "iana",
        extensions: ["pptm"]
      },
      "application/vnd.ms-powerpoint.slide.macroenabled.12": {
        source: "iana",
        extensions: ["sldm"]
      },
      "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
        source: "iana",
        extensions: ["ppsm"]
      },
      "application/vnd.ms-powerpoint.template.macroenabled.12": {
        source: "iana",
        extensions: ["potm"]
      },
      "application/vnd.ms-printdevicecapabilities+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-printing.printticket+xml": {
        source: "apache",
        compressible: true
      },
      "application/vnd.ms-printschematicket+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ms-project": {
        source: "iana",
        extensions: ["mpp", "mpt"]
      },
      "application/vnd.ms-tnef": {
        source: "iana"
      },
      "application/vnd.ms-windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.nwprinting.oob": {
        source: "iana"
      },
      "application/vnd.ms-windows.printerpairing": {
        source: "iana"
      },
      "application/vnd.ms-windows.wsd.oob": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.lic-resp": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-chlg-req": {
        source: "iana"
      },
      "application/vnd.ms-wmdrm.meter-resp": {
        source: "iana"
      },
      "application/vnd.ms-word.document.macroenabled.12": {
        source: "iana",
        extensions: ["docm"]
      },
      "application/vnd.ms-word.template.macroenabled.12": {
        source: "iana",
        extensions: ["dotm"]
      },
      "application/vnd.ms-works": {
        source: "iana",
        extensions: ["wps", "wks", "wcm", "wdb"]
      },
      "application/vnd.ms-wpl": {
        source: "iana",
        extensions: ["wpl"]
      },
      "application/vnd.ms-xpsdocument": {
        source: "iana",
        compressible: false,
        extensions: ["xps"]
      },
      "application/vnd.msa-disk-image": {
        source: "iana"
      },
      "application/vnd.mseq": {
        source: "iana",
        extensions: ["mseq"]
      },
      "application/vnd.msign": {
        source: "iana"
      },
      "application/vnd.multiad.creator": {
        source: "iana"
      },
      "application/vnd.multiad.creator.cif": {
        source: "iana"
      },
      "application/vnd.music-niff": {
        source: "iana"
      },
      "application/vnd.musician": {
        source: "iana",
        extensions: ["mus"]
      },
      "application/vnd.muvee.style": {
        source: "iana",
        extensions: ["msty"]
      },
      "application/vnd.mynfc": {
        source: "iana",
        extensions: ["taglet"]
      },
      "application/vnd.nacamar.ybrid+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.ncd.control": {
        source: "iana"
      },
      "application/vnd.ncd.reference": {
        source: "iana"
      },
      "application/vnd.nearst.inv+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nebumind.line": {
        source: "iana"
      },
      "application/vnd.nervana": {
        source: "iana"
      },
      "application/vnd.netfpx": {
        source: "iana"
      },
      "application/vnd.neurolanguage.nlu": {
        source: "iana",
        extensions: ["nlu"]
      },
      "application/vnd.nimn": {
        source: "iana"
      },
      "application/vnd.nintendo.nitro.rom": {
        source: "iana"
      },
      "application/vnd.nintendo.snes.rom": {
        source: "iana"
      },
      "application/vnd.nitf": {
        source: "iana",
        extensions: ["ntf", "nitf"]
      },
      "application/vnd.noblenet-directory": {
        source: "iana",
        extensions: ["nnd"]
      },
      "application/vnd.noblenet-sealer": {
        source: "iana",
        extensions: ["nns"]
      },
      "application/vnd.noblenet-web": {
        source: "iana",
        extensions: ["nnw"]
      },
      "application/vnd.nokia.catalogs": {
        source: "iana"
      },
      "application/vnd.nokia.conml+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.conml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.iptv.config+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.isds-radio-presets": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.landmark+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.landmarkcollection+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.n-gage.ac+xml": {
        source: "iana",
        compressible: true,
        extensions: ["ac"]
      },
      "application/vnd.nokia.n-gage.data": {
        source: "iana",
        extensions: ["ngdat"]
      },
      "application/vnd.nokia.n-gage.symbian.install": {
        source: "iana",
        extensions: ["n-gage"]
      },
      "application/vnd.nokia.ncd": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+wbxml": {
        source: "iana"
      },
      "application/vnd.nokia.pcd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.nokia.radio-preset": {
        source: "iana",
        extensions: ["rpst"]
      },
      "application/vnd.nokia.radio-presets": {
        source: "iana",
        extensions: ["rpss"]
      },
      "application/vnd.novadigm.edm": {
        source: "iana",
        extensions: ["edm"]
      },
      "application/vnd.novadigm.edx": {
        source: "iana",
        extensions: ["edx"]
      },
      "application/vnd.novadigm.ext": {
        source: "iana",
        extensions: ["ext"]
      },
      "application/vnd.ntt-local.content-share": {
        source: "iana"
      },
      "application/vnd.ntt-local.file-transfer": {
        source: "iana"
      },
      "application/vnd.ntt-local.ogw_remote-access": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_remote": {
        source: "iana"
      },
      "application/vnd.ntt-local.sip-ta_tcp_stream": {
        source: "iana"
      },
      "application/vnd.oasis.opendocument.chart": {
        source: "iana",
        extensions: ["odc"]
      },
      "application/vnd.oasis.opendocument.chart-template": {
        source: "iana",
        extensions: ["otc"]
      },
      "application/vnd.oasis.opendocument.database": {
        source: "iana",
        extensions: ["odb"]
      },
      "application/vnd.oasis.opendocument.formula": {
        source: "iana",
        extensions: ["odf"]
      },
      "application/vnd.oasis.opendocument.formula-template": {
        source: "iana",
        extensions: ["odft"]
      },
      "application/vnd.oasis.opendocument.graphics": {
        source: "iana",
        compressible: false,
        extensions: ["odg"]
      },
      "application/vnd.oasis.opendocument.graphics-template": {
        source: "iana",
        extensions: ["otg"]
      },
      "application/vnd.oasis.opendocument.image": {
        source: "iana",
        extensions: ["odi"]
      },
      "application/vnd.oasis.opendocument.image-template": {
        source: "iana",
        extensions: ["oti"]
      },
      "application/vnd.oasis.opendocument.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["odp"]
      },
      "application/vnd.oasis.opendocument.presentation-template": {
        source: "iana",
        extensions: ["otp"]
      },
      "application/vnd.oasis.opendocument.spreadsheet": {
        source: "iana",
        compressible: false,
        extensions: ["ods"]
      },
      "application/vnd.oasis.opendocument.spreadsheet-template": {
        source: "iana",
        extensions: ["ots"]
      },
      "application/vnd.oasis.opendocument.text": {
        source: "iana",
        compressible: false,
        extensions: ["odt"]
      },
      "application/vnd.oasis.opendocument.text-master": {
        source: "iana",
        extensions: ["odm"]
      },
      "application/vnd.oasis.opendocument.text-template": {
        source: "iana",
        extensions: ["ott"]
      },
      "application/vnd.oasis.opendocument.text-web": {
        source: "iana",
        extensions: ["oth"]
      },
      "application/vnd.obn": {
        source: "iana"
      },
      "application/vnd.ocf+cbor": {
        source: "iana"
      },
      "application/vnd.oci.image.manifest.v1+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oftn.l10n+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessdownload+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.contentaccessstreaming+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.cspg-hexbinary": {
        source: "iana"
      },
      "application/vnd.oipf.dae.svg+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.dae.xhtml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.mippvcontrolmessage+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.pae.gem": {
        source: "iana"
      },
      "application/vnd.oipf.spdiscovery+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.spdlist+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.ueprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oipf.userprofile+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.olpc-sugar": {
        source: "iana",
        extensions: ["xo"]
      },
      "application/vnd.oma-scws-config": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-request": {
        source: "iana"
      },
      "application/vnd.oma-scws-http-response": {
        source: "iana"
      },
      "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.drm-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.imd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.ltkm": {
        source: "iana"
      },
      "application/vnd.oma.bcast.notification+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.provisioningtrigger": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgboot": {
        source: "iana"
      },
      "application/vnd.oma.bcast.sgdd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sgdu": {
        source: "iana"
      },
      "application/vnd.oma.bcast.simple-symbol-container": {
        source: "iana"
      },
      "application/vnd.oma.bcast.smartcard-trigger+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.sprov+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.bcast.stkm": {
        source: "iana"
      },
      "application/vnd.oma.cab-address-book+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-feature-handler+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-pcc+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-subs-invite+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.cab-user-prefs+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.dcd": {
        source: "iana"
      },
      "application/vnd.oma.dcdc": {
        source: "iana"
      },
      "application/vnd.oma.dd2+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dd2"]
      },
      "application/vnd.oma.drm.risd+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.group-usage-list+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+cbor": {
        source: "iana"
      },
      "application/vnd.oma.lwm2m+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.lwm2m+tlv": {
        source: "iana"
      },
      "application/vnd.oma.pal+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.detailed-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.final-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.groups+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.invocation-descriptor+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.poc.optimized-progress-report+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.push": {
        source: "iana"
      },
      "application/vnd.oma.scidm.messages+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oma.xcap-directory+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.omads-email+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-file+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omads-folder+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.omaloc-supl-init": {
        source: "iana"
      },
      "application/vnd.onepager": {
        source: "iana"
      },
      "application/vnd.onepagertamp": {
        source: "iana"
      },
      "application/vnd.onepagertamx": {
        source: "iana"
      },
      "application/vnd.onepagertat": {
        source: "iana"
      },
      "application/vnd.onepagertatp": {
        source: "iana"
      },
      "application/vnd.onepagertatx": {
        source: "iana"
      },
      "application/vnd.openblox.game+xml": {
        source: "iana",
        compressible: true,
        extensions: ["obgx"]
      },
      "application/vnd.openblox.game-binary": {
        source: "iana"
      },
      "application/vnd.openeye.oeb": {
        source: "iana"
      },
      "application/vnd.openofficeorg.extension": {
        source: "apache",
        extensions: ["oxt"]
      },
      "application/vnd.openstreetmap.data+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osm"]
      },
      "application/vnd.opentimestamps.ots": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawing+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
        source: "iana",
        compressible: false,
        extensions: ["pptx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide": {
        source: "iana",
        extensions: ["sldx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
        source: "iana",
        extensions: ["ppsx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template": {
        source: "iana",
        extensions: ["potx"]
      },
      "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
        source: "iana",
        compressible: false,
        extensions: ["xlsx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
        source: "iana",
        extensions: ["xltx"]
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.theme+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.vmldrawing": {
        source: "iana"
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
        source: "iana",
        compressible: false,
        extensions: ["docx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
        source: "iana",
        extensions: ["dotx"]
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.core-properties+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.openxmlformats-package.relationships+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oracle.resource+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.orange.indata": {
        source: "iana"
      },
      "application/vnd.osa.netdeploy": {
        source: "iana"
      },
      "application/vnd.osgeo.mapguide.package": {
        source: "iana",
        extensions: ["mgp"]
      },
      "application/vnd.osgi.bundle": {
        source: "iana"
      },
      "application/vnd.osgi.dp": {
        source: "iana",
        extensions: ["dp"]
      },
      "application/vnd.osgi.subsystem": {
        source: "iana",
        extensions: ["esa"]
      },
      "application/vnd.otps.ct-kip+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.oxli.countgraph": {
        source: "iana"
      },
      "application/vnd.pagerduty+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.palm": {
        source: "iana",
        extensions: ["pdb", "pqa", "oprc"]
      },
      "application/vnd.panoply": {
        source: "iana"
      },
      "application/vnd.paos.xml": {
        source: "iana"
      },
      "application/vnd.patentdive": {
        source: "iana"
      },
      "application/vnd.patientecommsdoc": {
        source: "iana"
      },
      "application/vnd.pawaafile": {
        source: "iana",
        extensions: ["paw"]
      },
      "application/vnd.pcos": {
        source: "iana"
      },
      "application/vnd.pg.format": {
        source: "iana",
        extensions: ["str"]
      },
      "application/vnd.pg.osasli": {
        source: "iana",
        extensions: ["ei6"]
      },
      "application/vnd.piaccess.application-licence": {
        source: "iana"
      },
      "application/vnd.picsel": {
        source: "iana",
        extensions: ["efif"]
      },
      "application/vnd.pmi.widget": {
        source: "iana",
        extensions: ["wg"]
      },
      "application/vnd.poc.group-advertisement+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.pocketlearn": {
        source: "iana",
        extensions: ["plf"]
      },
      "application/vnd.powerbuilder6": {
        source: "iana",
        extensions: ["pbd"]
      },
      "application/vnd.powerbuilder6-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder7": {
        source: "iana"
      },
      "application/vnd.powerbuilder7-s": {
        source: "iana"
      },
      "application/vnd.powerbuilder75": {
        source: "iana"
      },
      "application/vnd.powerbuilder75-s": {
        source: "iana"
      },
      "application/vnd.preminet": {
        source: "iana"
      },
      "application/vnd.previewsystems.box": {
        source: "iana",
        extensions: ["box"]
      },
      "application/vnd.proteus.magazine": {
        source: "iana",
        extensions: ["mgz"]
      },
      "application/vnd.psfs": {
        source: "iana"
      },
      "application/vnd.publishare-delta-tree": {
        source: "iana",
        extensions: ["qps"]
      },
      "application/vnd.pvi.ptid1": {
        source: "iana",
        extensions: ["ptid"]
      },
      "application/vnd.pwg-multiplexed": {
        source: "iana"
      },
      "application/vnd.pwg-xhtml-print+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.qualcomm.brew-app-res": {
        source: "iana"
      },
      "application/vnd.quarantainenet": {
        source: "iana"
      },
      "application/vnd.quark.quarkxpress": {
        source: "iana",
        extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
      },
      "application/vnd.quobject-quoxdocument": {
        source: "iana"
      },
      "application/vnd.radisys.moml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-conn+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-audit-stream+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-conf+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-base+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-detect+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-group+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-speech+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.radisys.msml-dialog-transform+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rainstor.data": {
        source: "iana"
      },
      "application/vnd.rapid": {
        source: "iana"
      },
      "application/vnd.rar": {
        source: "iana",
        extensions: ["rar"]
      },
      "application/vnd.realvnc.bed": {
        source: "iana",
        extensions: ["bed"]
      },
      "application/vnd.recordare.musicxml": {
        source: "iana",
        extensions: ["mxl"]
      },
      "application/vnd.recordare.musicxml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["musicxml"]
      },
      "application/vnd.renlearn.rlprint": {
        source: "iana"
      },
      "application/vnd.resilient.logic": {
        source: "iana"
      },
      "application/vnd.restful+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.rig.cryptonote": {
        source: "iana",
        extensions: ["cryptonote"]
      },
      "application/vnd.rim.cod": {
        source: "apache",
        extensions: ["cod"]
      },
      "application/vnd.rn-realmedia": {
        source: "apache",
        extensions: ["rm"]
      },
      "application/vnd.rn-realmedia-vbr": {
        source: "apache",
        extensions: ["rmvb"]
      },
      "application/vnd.route66.link66+xml": {
        source: "iana",
        compressible: true,
        extensions: ["link66"]
      },
      "application/vnd.rs-274x": {
        source: "iana"
      },
      "application/vnd.ruckus.download": {
        source: "iana"
      },
      "application/vnd.s3sms": {
        source: "iana"
      },
      "application/vnd.sailingtracker.track": {
        source: "iana",
        extensions: ["st"]
      },
      "application/vnd.sar": {
        source: "iana"
      },
      "application/vnd.sbm.cid": {
        source: "iana"
      },
      "application/vnd.sbm.mid2": {
        source: "iana"
      },
      "application/vnd.scribus": {
        source: "iana"
      },
      "application/vnd.sealed.3df": {
        source: "iana"
      },
      "application/vnd.sealed.csf": {
        source: "iana"
      },
      "application/vnd.sealed.doc": {
        source: "iana"
      },
      "application/vnd.sealed.eml": {
        source: "iana"
      },
      "application/vnd.sealed.mht": {
        source: "iana"
      },
      "application/vnd.sealed.net": {
        source: "iana"
      },
      "application/vnd.sealed.ppt": {
        source: "iana"
      },
      "application/vnd.sealed.tiff": {
        source: "iana"
      },
      "application/vnd.sealed.xls": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.html": {
        source: "iana"
      },
      "application/vnd.sealedmedia.softseal.pdf": {
        source: "iana"
      },
      "application/vnd.seemail": {
        source: "iana",
        extensions: ["see"]
      },
      "application/vnd.seis+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.sema": {
        source: "iana",
        extensions: ["sema"]
      },
      "application/vnd.semd": {
        source: "iana",
        extensions: ["semd"]
      },
      "application/vnd.semf": {
        source: "iana",
        extensions: ["semf"]
      },
      "application/vnd.shade-save-file": {
        source: "iana"
      },
      "application/vnd.shana.informed.formdata": {
        source: "iana",
        extensions: ["ifm"]
      },
      "application/vnd.shana.informed.formtemplate": {
        source: "iana",
        extensions: ["itp"]
      },
      "application/vnd.shana.informed.interchange": {
        source: "iana",
        extensions: ["iif"]
      },
      "application/vnd.shana.informed.package": {
        source: "iana",
        extensions: ["ipk"]
      },
      "application/vnd.shootproof+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shopkick+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.shp": {
        source: "iana"
      },
      "application/vnd.shx": {
        source: "iana"
      },
      "application/vnd.sigrok.session": {
        source: "iana"
      },
      "application/vnd.simtech-mindmapper": {
        source: "iana",
        extensions: ["twd", "twds"]
      },
      "application/vnd.siren+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.smaf": {
        source: "iana",
        extensions: ["mmf"]
      },
      "application/vnd.smart.notebook": {
        source: "iana"
      },
      "application/vnd.smart.teacher": {
        source: "iana",
        extensions: ["teacher"]
      },
      "application/vnd.snesdev-page-table": {
        source: "iana"
      },
      "application/vnd.software602.filler.form+xml": {
        source: "iana",
        compressible: true,
        extensions: ["fo"]
      },
      "application/vnd.software602.filler.form-xml-zip": {
        source: "iana"
      },
      "application/vnd.solent.sdkm+xml": {
        source: "iana",
        compressible: true,
        extensions: ["sdkm", "sdkd"]
      },
      "application/vnd.spotfire.dxp": {
        source: "iana",
        extensions: ["dxp"]
      },
      "application/vnd.spotfire.sfs": {
        source: "iana",
        extensions: ["sfs"]
      },
      "application/vnd.sqlite3": {
        source: "iana"
      },
      "application/vnd.sss-cod": {
        source: "iana"
      },
      "application/vnd.sss-dtf": {
        source: "iana"
      },
      "application/vnd.sss-ntf": {
        source: "iana"
      },
      "application/vnd.stardivision.calc": {
        source: "apache",
        extensions: ["sdc"]
      },
      "application/vnd.stardivision.draw": {
        source: "apache",
        extensions: ["sda"]
      },
      "application/vnd.stardivision.impress": {
        source: "apache",
        extensions: ["sdd"]
      },
      "application/vnd.stardivision.math": {
        source: "apache",
        extensions: ["smf"]
      },
      "application/vnd.stardivision.writer": {
        source: "apache",
        extensions: ["sdw", "vor"]
      },
      "application/vnd.stardivision.writer-global": {
        source: "apache",
        extensions: ["sgl"]
      },
      "application/vnd.stepmania.package": {
        source: "iana",
        extensions: ["smzip"]
      },
      "application/vnd.stepmania.stepchart": {
        source: "iana",
        extensions: ["sm"]
      },
      "application/vnd.street-stream": {
        source: "iana"
      },
      "application/vnd.sun.wadl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wadl"]
      },
      "application/vnd.sun.xml.calc": {
        source: "apache",
        extensions: ["sxc"]
      },
      "application/vnd.sun.xml.calc.template": {
        source: "apache",
        extensions: ["stc"]
      },
      "application/vnd.sun.xml.draw": {
        source: "apache",
        extensions: ["sxd"]
      },
      "application/vnd.sun.xml.draw.template": {
        source: "apache",
        extensions: ["std"]
      },
      "application/vnd.sun.xml.impress": {
        source: "apache",
        extensions: ["sxi"]
      },
      "application/vnd.sun.xml.impress.template": {
        source: "apache",
        extensions: ["sti"]
      },
      "application/vnd.sun.xml.math": {
        source: "apache",
        extensions: ["sxm"]
      },
      "application/vnd.sun.xml.writer": {
        source: "apache",
        extensions: ["sxw"]
      },
      "application/vnd.sun.xml.writer.global": {
        source: "apache",
        extensions: ["sxg"]
      },
      "application/vnd.sun.xml.writer.template": {
        source: "apache",
        extensions: ["stw"]
      },
      "application/vnd.sus-calendar": {
        source: "iana",
        extensions: ["sus", "susp"]
      },
      "application/vnd.svd": {
        source: "iana",
        extensions: ["svd"]
      },
      "application/vnd.swiftview-ics": {
        source: "iana"
      },
      "application/vnd.sycle+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.syft+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.symbian.install": {
        source: "apache",
        extensions: ["sis", "sisx"]
      },
      "application/vnd.syncml+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xsm"]
      },
      "application/vnd.syncml.dm+wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["bdm"]
      },
      "application/vnd.syncml.dm+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["xdm"]
      },
      "application/vnd.syncml.dm.notification": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmddf+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["ddf"]
      },
      "application/vnd.syncml.dmtnds+wbxml": {
        source: "iana"
      },
      "application/vnd.syncml.dmtnds+xml": {
        source: "iana",
        charset: "UTF-8",
        compressible: true
      },
      "application/vnd.syncml.ds.notification": {
        source: "iana"
      },
      "application/vnd.tableschema+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tao.intent-module-archive": {
        source: "iana",
        extensions: ["tao"]
      },
      "application/vnd.tcpdump.pcap": {
        source: "iana",
        extensions: ["pcap", "cap", "dmp"]
      },
      "application/vnd.think-cell.ppttc+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tmd.mediaflex.api+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.tml": {
        source: "iana"
      },
      "application/vnd.tmobile-livetv": {
        source: "iana",
        extensions: ["tmo"]
      },
      "application/vnd.tri.onesource": {
        source: "iana"
      },
      "application/vnd.trid.tpt": {
        source: "iana",
        extensions: ["tpt"]
      },
      "application/vnd.triscape.mxs": {
        source: "iana",
        extensions: ["mxs"]
      },
      "application/vnd.trueapp": {
        source: "iana",
        extensions: ["tra"]
      },
      "application/vnd.truedoc": {
        source: "iana"
      },
      "application/vnd.ubisoft.webplayer": {
        source: "iana"
      },
      "application/vnd.ufdl": {
        source: "iana",
        extensions: ["ufd", "ufdl"]
      },
      "application/vnd.uiq.theme": {
        source: "iana",
        extensions: ["utz"]
      },
      "application/vnd.umajin": {
        source: "iana",
        extensions: ["umj"]
      },
      "application/vnd.unity": {
        source: "iana",
        extensions: ["unityweb"]
      },
      "application/vnd.uoml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["uoml"]
      },
      "application/vnd.uplanet.alert": {
        source: "iana"
      },
      "application/vnd.uplanet.alert-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice": {
        source: "iana"
      },
      "application/vnd.uplanet.bearer-choice-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop": {
        source: "iana"
      },
      "application/vnd.uplanet.cacheop-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.channel": {
        source: "iana"
      },
      "application/vnd.uplanet.channel-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.list": {
        source: "iana"
      },
      "application/vnd.uplanet.list-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd": {
        source: "iana"
      },
      "application/vnd.uplanet.listcmd-wbxml": {
        source: "iana"
      },
      "application/vnd.uplanet.signal": {
        source: "iana"
      },
      "application/vnd.uri-map": {
        source: "iana"
      },
      "application/vnd.valve.source.material": {
        source: "iana"
      },
      "application/vnd.vcx": {
        source: "iana",
        extensions: ["vcx"]
      },
      "application/vnd.vd-study": {
        source: "iana"
      },
      "application/vnd.vectorworks": {
        source: "iana"
      },
      "application/vnd.vel+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.verimatrix.vcas": {
        source: "iana"
      },
      "application/vnd.veritone.aion+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.veryant.thin": {
        source: "iana"
      },
      "application/vnd.ves.encrypted": {
        source: "iana"
      },
      "application/vnd.vidsoft.vidconference": {
        source: "iana"
      },
      "application/vnd.visio": {
        source: "iana",
        extensions: ["vsd", "vst", "vss", "vsw"]
      },
      "application/vnd.visionary": {
        source: "iana",
        extensions: ["vis"]
      },
      "application/vnd.vividence.scriptfile": {
        source: "iana"
      },
      "application/vnd.vsf": {
        source: "iana",
        extensions: ["vsf"]
      },
      "application/vnd.wap.sic": {
        source: "iana"
      },
      "application/vnd.wap.slc": {
        source: "iana"
      },
      "application/vnd.wap.wbxml": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["wbxml"]
      },
      "application/vnd.wap.wmlc": {
        source: "iana",
        extensions: ["wmlc"]
      },
      "application/vnd.wap.wmlscriptc": {
        source: "iana",
        extensions: ["wmlsc"]
      },
      "application/vnd.webturbo": {
        source: "iana",
        extensions: ["wtb"]
      },
      "application/vnd.wfa.dpp": {
        source: "iana"
      },
      "application/vnd.wfa.p2p": {
        source: "iana"
      },
      "application/vnd.wfa.wsc": {
        source: "iana"
      },
      "application/vnd.windows.devicepairing": {
        source: "iana"
      },
      "application/vnd.wmc": {
        source: "iana"
      },
      "application/vnd.wmf.bootstrap": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica": {
        source: "iana"
      },
      "application/vnd.wolfram.mathematica.package": {
        source: "iana"
      },
      "application/vnd.wolfram.player": {
        source: "iana",
        extensions: ["nbp"]
      },
      "application/vnd.wordperfect": {
        source: "iana",
        extensions: ["wpd"]
      },
      "application/vnd.wqd": {
        source: "iana",
        extensions: ["wqd"]
      },
      "application/vnd.wrq-hp3000-labelled": {
        source: "iana"
      },
      "application/vnd.wt.stf": {
        source: "iana",
        extensions: ["stf"]
      },
      "application/vnd.wv.csp+wbxml": {
        source: "iana"
      },
      "application/vnd.wv.csp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.wv.ssp+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xacml+json": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xara": {
        source: "iana",
        extensions: ["xar"]
      },
      "application/vnd.xfdl": {
        source: "iana",
        extensions: ["xfdl"]
      },
      "application/vnd.xfdl.webform": {
        source: "iana"
      },
      "application/vnd.xmi+xml": {
        source: "iana",
        compressible: true
      },
      "application/vnd.xmpie.cpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.dpkg": {
        source: "iana"
      },
      "application/vnd.xmpie.plan": {
        source: "iana"
      },
      "application/vnd.xmpie.ppkg": {
        source: "iana"
      },
      "application/vnd.xmpie.xlim": {
        source: "iana"
      },
      "application/vnd.yamaha.hv-dic": {
        source: "iana",
        extensions: ["hvd"]
      },
      "application/vnd.yamaha.hv-script": {
        source: "iana",
        extensions: ["hvs"]
      },
      "application/vnd.yamaha.hv-voice": {
        source: "iana",
        extensions: ["hvp"]
      },
      "application/vnd.yamaha.openscoreformat": {
        source: "iana",
        extensions: ["osf"]
      },
      "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["osfpvg"]
      },
      "application/vnd.yamaha.remote-setup": {
        source: "iana"
      },
      "application/vnd.yamaha.smaf-audio": {
        source: "iana",
        extensions: ["saf"]
      },
      "application/vnd.yamaha.smaf-phrase": {
        source: "iana",
        extensions: ["spf"]
      },
      "application/vnd.yamaha.through-ngn": {
        source: "iana"
      },
      "application/vnd.yamaha.tunnel-udpencap": {
        source: "iana"
      },
      "application/vnd.yaoweme": {
        source: "iana"
      },
      "application/vnd.yellowriver-custom-menu": {
        source: "iana",
        extensions: ["cmp"]
      },
      "application/vnd.youtube.yt": {
        source: "iana"
      },
      "application/vnd.zul": {
        source: "iana",
        extensions: ["zir", "zirz"]
      },
      "application/vnd.zzazz.deck+xml": {
        source: "iana",
        compressible: true,
        extensions: ["zaz"]
      },
      "application/voicexml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["vxml"]
      },
      "application/voucher-cms+json": {
        source: "iana",
        compressible: true
      },
      "application/vq-rtcpxr": {
        source: "iana"
      },
      "application/wasm": {
        source: "iana",
        compressible: true,
        extensions: ["wasm"]
      },
      "application/watcherinfo+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wif"]
      },
      "application/webpush-options+json": {
        source: "iana",
        compressible: true
      },
      "application/whoispp-query": {
        source: "iana"
      },
      "application/whoispp-response": {
        source: "iana"
      },
      "application/widget": {
        source: "iana",
        extensions: ["wgt"]
      },
      "application/winhlp": {
        source: "apache",
        extensions: ["hlp"]
      },
      "application/wita": {
        source: "iana"
      },
      "application/wordperfect5.1": {
        source: "iana"
      },
      "application/wsdl+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wsdl"]
      },
      "application/wspolicy+xml": {
        source: "iana",
        compressible: true,
        extensions: ["wspolicy"]
      },
      "application/x-7z-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["7z"]
      },
      "application/x-abiword": {
        source: "apache",
        extensions: ["abw"]
      },
      "application/x-ace-compressed": {
        source: "apache",
        extensions: ["ace"]
      },
      "application/x-amf": {
        source: "apache"
      },
      "application/x-apple-diskimage": {
        source: "apache",
        extensions: ["dmg"]
      },
      "application/x-arj": {
        compressible: false,
        extensions: ["arj"]
      },
      "application/x-authorware-bin": {
        source: "apache",
        extensions: ["aab", "x32", "u32", "vox"]
      },
      "application/x-authorware-map": {
        source: "apache",
        extensions: ["aam"]
      },
      "application/x-authorware-seg": {
        source: "apache",
        extensions: ["aas"]
      },
      "application/x-bcpio": {
        source: "apache",
        extensions: ["bcpio"]
      },
      "application/x-bdoc": {
        compressible: false,
        extensions: ["bdoc"]
      },
      "application/x-bittorrent": {
        source: "apache",
        extensions: ["torrent"]
      },
      "application/x-blorb": {
        source: "apache",
        extensions: ["blb", "blorb"]
      },
      "application/x-bzip": {
        source: "apache",
        compressible: false,
        extensions: ["bz"]
      },
      "application/x-bzip2": {
        source: "apache",
        compressible: false,
        extensions: ["bz2", "boz"]
      },
      "application/x-cbr": {
        source: "apache",
        extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
      },
      "application/x-cdlink": {
        source: "apache",
        extensions: ["vcd"]
      },
      "application/x-cfs-compressed": {
        source: "apache",
        extensions: ["cfs"]
      },
      "application/x-chat": {
        source: "apache",
        extensions: ["chat"]
      },
      "application/x-chess-pgn": {
        source: "apache",
        extensions: ["pgn"]
      },
      "application/x-chrome-extension": {
        extensions: ["crx"]
      },
      "application/x-cocoa": {
        source: "nginx",
        extensions: ["cco"]
      },
      "application/x-compress": {
        source: "apache"
      },
      "application/x-conference": {
        source: "apache",
        extensions: ["nsc"]
      },
      "application/x-cpio": {
        source: "apache",
        extensions: ["cpio"]
      },
      "application/x-csh": {
        source: "apache",
        extensions: ["csh"]
      },
      "application/x-deb": {
        compressible: false
      },
      "application/x-debian-package": {
        source: "apache",
        extensions: ["deb", "udeb"]
      },
      "application/x-dgc-compressed": {
        source: "apache",
        extensions: ["dgc"]
      },
      "application/x-director": {
        source: "apache",
        extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
      },
      "application/x-doom": {
        source: "apache",
        extensions: ["wad"]
      },
      "application/x-dtbncx+xml": {
        source: "apache",
        compressible: true,
        extensions: ["ncx"]
      },
      "application/x-dtbook+xml": {
        source: "apache",
        compressible: true,
        extensions: ["dtb"]
      },
      "application/x-dtbresource+xml": {
        source: "apache",
        compressible: true,
        extensions: ["res"]
      },
      "application/x-dvi": {
        source: "apache",
        compressible: false,
        extensions: ["dvi"]
      },
      "application/x-envoy": {
        source: "apache",
        extensions: ["evy"]
      },
      "application/x-eva": {
        source: "apache",
        extensions: ["eva"]
      },
      "application/x-font-bdf": {
        source: "apache",
        extensions: ["bdf"]
      },
      "application/x-font-dos": {
        source: "apache"
      },
      "application/x-font-framemaker": {
        source: "apache"
      },
      "application/x-font-ghostscript": {
        source: "apache",
        extensions: ["gsf"]
      },
      "application/x-font-libgrx": {
        source: "apache"
      },
      "application/x-font-linux-psf": {
        source: "apache",
        extensions: ["psf"]
      },
      "application/x-font-pcf": {
        source: "apache",
        extensions: ["pcf"]
      },
      "application/x-font-snf": {
        source: "apache",
        extensions: ["snf"]
      },
      "application/x-font-speedo": {
        source: "apache"
      },
      "application/x-font-sunos-news": {
        source: "apache"
      },
      "application/x-font-type1": {
        source: "apache",
        extensions: ["pfa", "pfb", "pfm", "afm"]
      },
      "application/x-font-vfont": {
        source: "apache"
      },
      "application/x-freearc": {
        source: "apache",
        extensions: ["arc"]
      },
      "application/x-futuresplash": {
        source: "apache",
        extensions: ["spl"]
      },
      "application/x-gca-compressed": {
        source: "apache",
        extensions: ["gca"]
      },
      "application/x-glulx": {
        source: "apache",
        extensions: ["ulx"]
      },
      "application/x-gnumeric": {
        source: "apache",
        extensions: ["gnumeric"]
      },
      "application/x-gramps-xml": {
        source: "apache",
        extensions: ["gramps"]
      },
      "application/x-gtar": {
        source: "apache",
        extensions: ["gtar"]
      },
      "application/x-gzip": {
        source: "apache"
      },
      "application/x-hdf": {
        source: "apache",
        extensions: ["hdf"]
      },
      "application/x-httpd-php": {
        compressible: true,
        extensions: ["php"]
      },
      "application/x-install-instructions": {
        source: "apache",
        extensions: ["install"]
      },
      "application/x-iso9660-image": {
        source: "apache",
        extensions: ["iso"]
      },
      "application/x-iwork-keynote-sffkey": {
        extensions: ["key"]
      },
      "application/x-iwork-numbers-sffnumbers": {
        extensions: ["numbers"]
      },
      "application/x-iwork-pages-sffpages": {
        extensions: ["pages"]
      },
      "application/x-java-archive-diff": {
        source: "nginx",
        extensions: ["jardiff"]
      },
      "application/x-java-jnlp-file": {
        source: "apache",
        compressible: false,
        extensions: ["jnlp"]
      },
      "application/x-javascript": {
        compressible: true
      },
      "application/x-keepass2": {
        extensions: ["kdbx"]
      },
      "application/x-latex": {
        source: "apache",
        compressible: false,
        extensions: ["latex"]
      },
      "application/x-lua-bytecode": {
        extensions: ["luac"]
      },
      "application/x-lzh-compressed": {
        source: "apache",
        extensions: ["lzh", "lha"]
      },
      "application/x-makeself": {
        source: "nginx",
        extensions: ["run"]
      },
      "application/x-mie": {
        source: "apache",
        extensions: ["mie"]
      },
      "application/x-mobipocket-ebook": {
        source: "apache",
        extensions: ["prc", "mobi"]
      },
      "application/x-mpegurl": {
        compressible: false
      },
      "application/x-ms-application": {
        source: "apache",
        extensions: ["application"]
      },
      "application/x-ms-shortcut": {
        source: "apache",
        extensions: ["lnk"]
      },
      "application/x-ms-wmd": {
        source: "apache",
        extensions: ["wmd"]
      },
      "application/x-ms-wmz": {
        source: "apache",
        extensions: ["wmz"]
      },
      "application/x-ms-xbap": {
        source: "apache",
        extensions: ["xbap"]
      },
      "application/x-msaccess": {
        source: "apache",
        extensions: ["mdb"]
      },
      "application/x-msbinder": {
        source: "apache",
        extensions: ["obd"]
      },
      "application/x-mscardfile": {
        source: "apache",
        extensions: ["crd"]
      },
      "application/x-msclip": {
        source: "apache",
        extensions: ["clp"]
      },
      "application/x-msdos-program": {
        extensions: ["exe"]
      },
      "application/x-msdownload": {
        source: "apache",
        extensions: ["exe", "dll", "com", "bat", "msi"]
      },
      "application/x-msmediaview": {
        source: "apache",
        extensions: ["mvb", "m13", "m14"]
      },
      "application/x-msmetafile": {
        source: "apache",
        extensions: ["wmf", "wmz", "emf", "emz"]
      },
      "application/x-msmoney": {
        source: "apache",
        extensions: ["mny"]
      },
      "application/x-mspublisher": {
        source: "apache",
        extensions: ["pub"]
      },
      "application/x-msschedule": {
        source: "apache",
        extensions: ["scd"]
      },
      "application/x-msterminal": {
        source: "apache",
        extensions: ["trm"]
      },
      "application/x-mswrite": {
        source: "apache",
        extensions: ["wri"]
      },
      "application/x-netcdf": {
        source: "apache",
        extensions: ["nc", "cdf"]
      },
      "application/x-ns-proxy-autoconfig": {
        compressible: true,
        extensions: ["pac"]
      },
      "application/x-nzb": {
        source: "apache",
        extensions: ["nzb"]
      },
      "application/x-perl": {
        source: "nginx",
        extensions: ["pl", "pm"]
      },
      "application/x-pilot": {
        source: "nginx",
        extensions: ["prc", "pdb"]
      },
      "application/x-pkcs12": {
        source: "apache",
        compressible: false,
        extensions: ["p12", "pfx"]
      },
      "application/x-pkcs7-certificates": {
        source: "apache",
        extensions: ["p7b", "spc"]
      },
      "application/x-pkcs7-certreqresp": {
        source: "apache",
        extensions: ["p7r"]
      },
      "application/x-pki-message": {
        source: "iana"
      },
      "application/x-rar-compressed": {
        source: "apache",
        compressible: false,
        extensions: ["rar"]
      },
      "application/x-redhat-package-manager": {
        source: "nginx",
        extensions: ["rpm"]
      },
      "application/x-research-info-systems": {
        source: "apache",
        extensions: ["ris"]
      },
      "application/x-sea": {
        source: "nginx",
        extensions: ["sea"]
      },
      "application/x-sh": {
        source: "apache",
        compressible: true,
        extensions: ["sh"]
      },
      "application/x-shar": {
        source: "apache",
        extensions: ["shar"]
      },
      "application/x-shockwave-flash": {
        source: "apache",
        compressible: false,
        extensions: ["swf"]
      },
      "application/x-silverlight-app": {
        source: "apache",
        extensions: ["xap"]
      },
      "application/x-sql": {
        source: "apache",
        extensions: ["sql"]
      },
      "application/x-stuffit": {
        source: "apache",
        compressible: false,
        extensions: ["sit"]
      },
      "application/x-stuffitx": {
        source: "apache",
        extensions: ["sitx"]
      },
      "application/x-subrip": {
        source: "apache",
        extensions: ["srt"]
      },
      "application/x-sv4cpio": {
        source: "apache",
        extensions: ["sv4cpio"]
      },
      "application/x-sv4crc": {
        source: "apache",
        extensions: ["sv4crc"]
      },
      "application/x-t3vm-image": {
        source: "apache",
        extensions: ["t3"]
      },
      "application/x-tads": {
        source: "apache",
        extensions: ["gam"]
      },
      "application/x-tar": {
        source: "apache",
        compressible: true,
        extensions: ["tar"]
      },
      "application/x-tcl": {
        source: "apache",
        extensions: ["tcl", "tk"]
      },
      "application/x-tex": {
        source: "apache",
        extensions: ["tex"]
      },
      "application/x-tex-tfm": {
        source: "apache",
        extensions: ["tfm"]
      },
      "application/x-texinfo": {
        source: "apache",
        extensions: ["texinfo", "texi"]
      },
      "application/x-tgif": {
        source: "apache",
        extensions: ["obj"]
      },
      "application/x-ustar": {
        source: "apache",
        extensions: ["ustar"]
      },
      "application/x-virtualbox-hdd": {
        compressible: true,
        extensions: ["hdd"]
      },
      "application/x-virtualbox-ova": {
        compressible: true,
        extensions: ["ova"]
      },
      "application/x-virtualbox-ovf": {
        compressible: true,
        extensions: ["ovf"]
      },
      "application/x-virtualbox-vbox": {
        compressible: true,
        extensions: ["vbox"]
      },
      "application/x-virtualbox-vbox-extpack": {
        compressible: false,
        extensions: ["vbox-extpack"]
      },
      "application/x-virtualbox-vdi": {
        compressible: true,
        extensions: ["vdi"]
      },
      "application/x-virtualbox-vhd": {
        compressible: true,
        extensions: ["vhd"]
      },
      "application/x-virtualbox-vmdk": {
        compressible: true,
        extensions: ["vmdk"]
      },
      "application/x-wais-source": {
        source: "apache",
        extensions: ["src"]
      },
      "application/x-web-app-manifest+json": {
        compressible: true,
        extensions: ["webapp"]
      },
      "application/x-www-form-urlencoded": {
        source: "iana",
        compressible: true
      },
      "application/x-x509-ca-cert": {
        source: "iana",
        extensions: ["der", "crt", "pem"]
      },
      "application/x-x509-ca-ra-cert": {
        source: "iana"
      },
      "application/x-x509-next-ca-cert": {
        source: "iana"
      },
      "application/x-xfig": {
        source: "apache",
        extensions: ["fig"]
      },
      "application/x-xliff+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/x-xpinstall": {
        source: "apache",
        compressible: false,
        extensions: ["xpi"]
      },
      "application/x-xz": {
        source: "apache",
        extensions: ["xz"]
      },
      "application/x-zmachine": {
        source: "apache",
        extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
      },
      "application/x400-bp": {
        source: "iana"
      },
      "application/xacml+xml": {
        source: "iana",
        compressible: true
      },
      "application/xaml+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xaml"]
      },
      "application/xcap-att+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xav"]
      },
      "application/xcap-caps+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xca"]
      },
      "application/xcap-diff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xdf"]
      },
      "application/xcap-el+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xel"]
      },
      "application/xcap-error+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcap-ns+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xns"]
      },
      "application/xcon-conference-info+xml": {
        source: "iana",
        compressible: true
      },
      "application/xcon-conference-info-diff+xml": {
        source: "iana",
        compressible: true
      },
      "application/xenc+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xenc"]
      },
      "application/xhtml+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xhtml", "xht"]
      },
      "application/xhtml-voice+xml": {
        source: "apache",
        compressible: true
      },
      "application/xliff+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xlf"]
      },
      "application/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml", "xsl", "xsd", "rng"]
      },
      "application/xml-dtd": {
        source: "iana",
        compressible: true,
        extensions: ["dtd"]
      },
      "application/xml-external-parsed-entity": {
        source: "iana"
      },
      "application/xml-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/xmpp+xml": {
        source: "iana",
        compressible: true
      },
      "application/xop+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xop"]
      },
      "application/xproc+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xpl"]
      },
      "application/xslt+xml": {
        source: "iana",
        compressible: true,
        extensions: ["xsl", "xslt"]
      },
      "application/xspf+xml": {
        source: "apache",
        compressible: true,
        extensions: ["xspf"]
      },
      "application/xv+xml": {
        source: "iana",
        compressible: true,
        extensions: ["mxml", "xhvml", "xvml", "xvm"]
      },
      "application/yang": {
        source: "iana",
        extensions: ["yang"]
      },
      "application/yang-data+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-data+xml": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+json": {
        source: "iana",
        compressible: true
      },
      "application/yang-patch+xml": {
        source: "iana",
        compressible: true
      },
      "application/yin+xml": {
        source: "iana",
        compressible: true,
        extensions: ["yin"]
      },
      "application/zip": {
        source: "iana",
        compressible: false,
        extensions: ["zip"]
      },
      "application/zlib": {
        source: "iana"
      },
      "application/zstd": {
        source: "iana"
      },
      "audio/1d-interleaved-parityfec": {
        source: "iana"
      },
      "audio/32kadpcm": {
        source: "iana"
      },
      "audio/3gpp": {
        source: "iana",
        compressible: false,
        extensions: ["3gpp"]
      },
      "audio/3gpp2": {
        source: "iana"
      },
      "audio/aac": {
        source: "iana"
      },
      "audio/ac3": {
        source: "iana"
      },
      "audio/adpcm": {
        source: "apache",
        extensions: ["adp"]
      },
      "audio/amr": {
        source: "iana",
        extensions: ["amr"]
      },
      "audio/amr-wb": {
        source: "iana"
      },
      "audio/amr-wb+": {
        source: "iana"
      },
      "audio/aptx": {
        source: "iana"
      },
      "audio/asc": {
        source: "iana"
      },
      "audio/atrac-advanced-lossless": {
        source: "iana"
      },
      "audio/atrac-x": {
        source: "iana"
      },
      "audio/atrac3": {
        source: "iana"
      },
      "audio/basic": {
        source: "iana",
        compressible: false,
        extensions: ["au", "snd"]
      },
      "audio/bv16": {
        source: "iana"
      },
      "audio/bv32": {
        source: "iana"
      },
      "audio/clearmode": {
        source: "iana"
      },
      "audio/cn": {
        source: "iana"
      },
      "audio/dat12": {
        source: "iana"
      },
      "audio/dls": {
        source: "iana"
      },
      "audio/dsr-es201108": {
        source: "iana"
      },
      "audio/dsr-es202050": {
        source: "iana"
      },
      "audio/dsr-es202211": {
        source: "iana"
      },
      "audio/dsr-es202212": {
        source: "iana"
      },
      "audio/dv": {
        source: "iana"
      },
      "audio/dvi4": {
        source: "iana"
      },
      "audio/eac3": {
        source: "iana"
      },
      "audio/encaprtp": {
        source: "iana"
      },
      "audio/evrc": {
        source: "iana"
      },
      "audio/evrc-qcp": {
        source: "iana"
      },
      "audio/evrc0": {
        source: "iana"
      },
      "audio/evrc1": {
        source: "iana"
      },
      "audio/evrcb": {
        source: "iana"
      },
      "audio/evrcb0": {
        source: "iana"
      },
      "audio/evrcb1": {
        source: "iana"
      },
      "audio/evrcnw": {
        source: "iana"
      },
      "audio/evrcnw0": {
        source: "iana"
      },
      "audio/evrcnw1": {
        source: "iana"
      },
      "audio/evrcwb": {
        source: "iana"
      },
      "audio/evrcwb0": {
        source: "iana"
      },
      "audio/evrcwb1": {
        source: "iana"
      },
      "audio/evs": {
        source: "iana"
      },
      "audio/flexfec": {
        source: "iana"
      },
      "audio/fwdred": {
        source: "iana"
      },
      "audio/g711-0": {
        source: "iana"
      },
      "audio/g719": {
        source: "iana"
      },
      "audio/g722": {
        source: "iana"
      },
      "audio/g7221": {
        source: "iana"
      },
      "audio/g723": {
        source: "iana"
      },
      "audio/g726-16": {
        source: "iana"
      },
      "audio/g726-24": {
        source: "iana"
      },
      "audio/g726-32": {
        source: "iana"
      },
      "audio/g726-40": {
        source: "iana"
      },
      "audio/g728": {
        source: "iana"
      },
      "audio/g729": {
        source: "iana"
      },
      "audio/g7291": {
        source: "iana"
      },
      "audio/g729d": {
        source: "iana"
      },
      "audio/g729e": {
        source: "iana"
      },
      "audio/gsm": {
        source: "iana"
      },
      "audio/gsm-efr": {
        source: "iana"
      },
      "audio/gsm-hr-08": {
        source: "iana"
      },
      "audio/ilbc": {
        source: "iana"
      },
      "audio/ip-mr_v2.5": {
        source: "iana"
      },
      "audio/isac": {
        source: "apache"
      },
      "audio/l16": {
        source: "iana"
      },
      "audio/l20": {
        source: "iana"
      },
      "audio/l24": {
        source: "iana",
        compressible: false
      },
      "audio/l8": {
        source: "iana"
      },
      "audio/lpc": {
        source: "iana"
      },
      "audio/melp": {
        source: "iana"
      },
      "audio/melp1200": {
        source: "iana"
      },
      "audio/melp2400": {
        source: "iana"
      },
      "audio/melp600": {
        source: "iana"
      },
      "audio/mhas": {
        source: "iana"
      },
      "audio/midi": {
        source: "apache",
        extensions: ["mid", "midi", "kar", "rmi"]
      },
      "audio/mobile-xmf": {
        source: "iana",
        extensions: ["mxmf"]
      },
      "audio/mp3": {
        compressible: false,
        extensions: ["mp3"]
      },
      "audio/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["m4a", "mp4a"]
      },
      "audio/mp4a-latm": {
        source: "iana"
      },
      "audio/mpa": {
        source: "iana"
      },
      "audio/mpa-robust": {
        source: "iana"
      },
      "audio/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
      },
      "audio/mpeg4-generic": {
        source: "iana"
      },
      "audio/musepack": {
        source: "apache"
      },
      "audio/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["oga", "ogg", "spx", "opus"]
      },
      "audio/opus": {
        source: "iana"
      },
      "audio/parityfec": {
        source: "iana"
      },
      "audio/pcma": {
        source: "iana"
      },
      "audio/pcma-wb": {
        source: "iana"
      },
      "audio/pcmu": {
        source: "iana"
      },
      "audio/pcmu-wb": {
        source: "iana"
      },
      "audio/prs.sid": {
        source: "iana"
      },
      "audio/qcelp": {
        source: "iana"
      },
      "audio/raptorfec": {
        source: "iana"
      },
      "audio/red": {
        source: "iana"
      },
      "audio/rtp-enc-aescm128": {
        source: "iana"
      },
      "audio/rtp-midi": {
        source: "iana"
      },
      "audio/rtploopback": {
        source: "iana"
      },
      "audio/rtx": {
        source: "iana"
      },
      "audio/s3m": {
        source: "apache",
        extensions: ["s3m"]
      },
      "audio/scip": {
        source: "iana"
      },
      "audio/silk": {
        source: "apache",
        extensions: ["sil"]
      },
      "audio/smv": {
        source: "iana"
      },
      "audio/smv-qcp": {
        source: "iana"
      },
      "audio/smv0": {
        source: "iana"
      },
      "audio/sofa": {
        source: "iana"
      },
      "audio/sp-midi": {
        source: "iana"
      },
      "audio/speex": {
        source: "iana"
      },
      "audio/t140c": {
        source: "iana"
      },
      "audio/t38": {
        source: "iana"
      },
      "audio/telephone-event": {
        source: "iana"
      },
      "audio/tetra_acelp": {
        source: "iana"
      },
      "audio/tetra_acelp_bb": {
        source: "iana"
      },
      "audio/tone": {
        source: "iana"
      },
      "audio/tsvcis": {
        source: "iana"
      },
      "audio/uemclip": {
        source: "iana"
      },
      "audio/ulpfec": {
        source: "iana"
      },
      "audio/usac": {
        source: "iana"
      },
      "audio/vdvi": {
        source: "iana"
      },
      "audio/vmr-wb": {
        source: "iana"
      },
      "audio/vnd.3gpp.iufp": {
        source: "iana"
      },
      "audio/vnd.4sb": {
        source: "iana"
      },
      "audio/vnd.audiokoz": {
        source: "iana"
      },
      "audio/vnd.celp": {
        source: "iana"
      },
      "audio/vnd.cisco.nse": {
        source: "iana"
      },
      "audio/vnd.cmles.radio-events": {
        source: "iana"
      },
      "audio/vnd.cns.anp1": {
        source: "iana"
      },
      "audio/vnd.cns.inf1": {
        source: "iana"
      },
      "audio/vnd.dece.audio": {
        source: "iana",
        extensions: ["uva", "uvva"]
      },
      "audio/vnd.digital-winds": {
        source: "iana",
        extensions: ["eol"]
      },
      "audio/vnd.dlna.adts": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.1": {
        source: "iana"
      },
      "audio/vnd.dolby.heaac.2": {
        source: "iana"
      },
      "audio/vnd.dolby.mlp": {
        source: "iana"
      },
      "audio/vnd.dolby.mps": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2x": {
        source: "iana"
      },
      "audio/vnd.dolby.pl2z": {
        source: "iana"
      },
      "audio/vnd.dolby.pulse.1": {
        source: "iana"
      },
      "audio/vnd.dra": {
        source: "iana",
        extensions: ["dra"]
      },
      "audio/vnd.dts": {
        source: "iana",
        extensions: ["dts"]
      },
      "audio/vnd.dts.hd": {
        source: "iana",
        extensions: ["dtshd"]
      },
      "audio/vnd.dts.uhd": {
        source: "iana"
      },
      "audio/vnd.dvb.file": {
        source: "iana"
      },
      "audio/vnd.everad.plj": {
        source: "iana"
      },
      "audio/vnd.hns.audio": {
        source: "iana"
      },
      "audio/vnd.lucent.voice": {
        source: "iana",
        extensions: ["lvp"]
      },
      "audio/vnd.ms-playready.media.pya": {
        source: "iana",
        extensions: ["pya"]
      },
      "audio/vnd.nokia.mobile-xmf": {
        source: "iana"
      },
      "audio/vnd.nortel.vbk": {
        source: "iana"
      },
      "audio/vnd.nuera.ecelp4800": {
        source: "iana",
        extensions: ["ecelp4800"]
      },
      "audio/vnd.nuera.ecelp7470": {
        source: "iana",
        extensions: ["ecelp7470"]
      },
      "audio/vnd.nuera.ecelp9600": {
        source: "iana",
        extensions: ["ecelp9600"]
      },
      "audio/vnd.octel.sbc": {
        source: "iana"
      },
      "audio/vnd.presonus.multitrack": {
        source: "iana"
      },
      "audio/vnd.qcelp": {
        source: "iana"
      },
      "audio/vnd.rhetorex.32kadpcm": {
        source: "iana"
      },
      "audio/vnd.rip": {
        source: "iana",
        extensions: ["rip"]
      },
      "audio/vnd.rn-realaudio": {
        compressible: false
      },
      "audio/vnd.sealedmedia.softseal.mpeg": {
        source: "iana"
      },
      "audio/vnd.vmx.cvsd": {
        source: "iana"
      },
      "audio/vnd.wave": {
        compressible: false
      },
      "audio/vorbis": {
        source: "iana",
        compressible: false
      },
      "audio/vorbis-config": {
        source: "iana"
      },
      "audio/wav": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/wave": {
        compressible: false,
        extensions: ["wav"]
      },
      "audio/webm": {
        source: "apache",
        compressible: false,
        extensions: ["weba"]
      },
      "audio/x-aac": {
        source: "apache",
        compressible: false,
        extensions: ["aac"]
      },
      "audio/x-aiff": {
        source: "apache",
        extensions: ["aif", "aiff", "aifc"]
      },
      "audio/x-caf": {
        source: "apache",
        compressible: false,
        extensions: ["caf"]
      },
      "audio/x-flac": {
        source: "apache",
        extensions: ["flac"]
      },
      "audio/x-m4a": {
        source: "nginx",
        extensions: ["m4a"]
      },
      "audio/x-matroska": {
        source: "apache",
        extensions: ["mka"]
      },
      "audio/x-mpegurl": {
        source: "apache",
        extensions: ["m3u"]
      },
      "audio/x-ms-wax": {
        source: "apache",
        extensions: ["wax"]
      },
      "audio/x-ms-wma": {
        source: "apache",
        extensions: ["wma"]
      },
      "audio/x-pn-realaudio": {
        source: "apache",
        extensions: ["ram", "ra"]
      },
      "audio/x-pn-realaudio-plugin": {
        source: "apache",
        extensions: ["rmp"]
      },
      "audio/x-realaudio": {
        source: "nginx",
        extensions: ["ra"]
      },
      "audio/x-tta": {
        source: "apache"
      },
      "audio/x-wav": {
        source: "apache",
        extensions: ["wav"]
      },
      "audio/xm": {
        source: "apache",
        extensions: ["xm"]
      },
      "chemical/x-cdx": {
        source: "apache",
        extensions: ["cdx"]
      },
      "chemical/x-cif": {
        source: "apache",
        extensions: ["cif"]
      },
      "chemical/x-cmdf": {
        source: "apache",
        extensions: ["cmdf"]
      },
      "chemical/x-cml": {
        source: "apache",
        extensions: ["cml"]
      },
      "chemical/x-csml": {
        source: "apache",
        extensions: ["csml"]
      },
      "chemical/x-pdb": {
        source: "apache"
      },
      "chemical/x-xyz": {
        source: "apache",
        extensions: ["xyz"]
      },
      "font/collection": {
        source: "iana",
        extensions: ["ttc"]
      },
      "font/otf": {
        source: "iana",
        compressible: true,
        extensions: ["otf"]
      },
      "font/sfnt": {
        source: "iana"
      },
      "font/ttf": {
        source: "iana",
        compressible: true,
        extensions: ["ttf"]
      },
      "font/woff": {
        source: "iana",
        extensions: ["woff"]
      },
      "font/woff2": {
        source: "iana",
        extensions: ["woff2"]
      },
      "image/aces": {
        source: "iana",
        extensions: ["exr"]
      },
      "image/apng": {
        compressible: false,
        extensions: ["apng"]
      },
      "image/avci": {
        source: "iana",
        extensions: ["avci"]
      },
      "image/avcs": {
        source: "iana",
        extensions: ["avcs"]
      },
      "image/avif": {
        source: "iana",
        compressible: false,
        extensions: ["avif"]
      },
      "image/bmp": {
        source: "iana",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/cgm": {
        source: "iana",
        extensions: ["cgm"]
      },
      "image/dicom-rle": {
        source: "iana",
        extensions: ["drle"]
      },
      "image/emf": {
        source: "iana",
        extensions: ["emf"]
      },
      "image/fits": {
        source: "iana",
        extensions: ["fits"]
      },
      "image/g3fax": {
        source: "iana",
        extensions: ["g3"]
      },
      "image/gif": {
        source: "iana",
        compressible: false,
        extensions: ["gif"]
      },
      "image/heic": {
        source: "iana",
        extensions: ["heic"]
      },
      "image/heic-sequence": {
        source: "iana",
        extensions: ["heics"]
      },
      "image/heif": {
        source: "iana",
        extensions: ["heif"]
      },
      "image/heif-sequence": {
        source: "iana",
        extensions: ["heifs"]
      },
      "image/hej2k": {
        source: "iana",
        extensions: ["hej2"]
      },
      "image/hsj2": {
        source: "iana",
        extensions: ["hsj2"]
      },
      "image/ief": {
        source: "iana",
        extensions: ["ief"]
      },
      "image/jls": {
        source: "iana",
        extensions: ["jls"]
      },
      "image/jp2": {
        source: "iana",
        compressible: false,
        extensions: ["jp2", "jpg2"]
      },
      "image/jpeg": {
        source: "iana",
        compressible: false,
        extensions: ["jpeg", "jpg", "jpe"]
      },
      "image/jph": {
        source: "iana",
        extensions: ["jph"]
      },
      "image/jphc": {
        source: "iana",
        extensions: ["jhc"]
      },
      "image/jpm": {
        source: "iana",
        compressible: false,
        extensions: ["jpm"]
      },
      "image/jpx": {
        source: "iana",
        compressible: false,
        extensions: ["jpx", "jpf"]
      },
      "image/jxr": {
        source: "iana",
        extensions: ["jxr"]
      },
      "image/jxra": {
        source: "iana",
        extensions: ["jxra"]
      },
      "image/jxrs": {
        source: "iana",
        extensions: ["jxrs"]
      },
      "image/jxs": {
        source: "iana",
        extensions: ["jxs"]
      },
      "image/jxsc": {
        source: "iana",
        extensions: ["jxsc"]
      },
      "image/jxsi": {
        source: "iana",
        extensions: ["jxsi"]
      },
      "image/jxss": {
        source: "iana",
        extensions: ["jxss"]
      },
      "image/ktx": {
        source: "iana",
        extensions: ["ktx"]
      },
      "image/ktx2": {
        source: "iana",
        extensions: ["ktx2"]
      },
      "image/naplps": {
        source: "iana"
      },
      "image/pjpeg": {
        compressible: false
      },
      "image/png": {
        source: "iana",
        compressible: false,
        extensions: ["png"]
      },
      "image/prs.btif": {
        source: "iana",
        extensions: ["btif"]
      },
      "image/prs.pti": {
        source: "iana",
        extensions: ["pti"]
      },
      "image/pwg-raster": {
        source: "iana"
      },
      "image/sgi": {
        source: "apache",
        extensions: ["sgi"]
      },
      "image/svg+xml": {
        source: "iana",
        compressible: true,
        extensions: ["svg", "svgz"]
      },
      "image/t38": {
        source: "iana",
        extensions: ["t38"]
      },
      "image/tiff": {
        source: "iana",
        compressible: false,
        extensions: ["tif", "tiff"]
      },
      "image/tiff-fx": {
        source: "iana",
        extensions: ["tfx"]
      },
      "image/vnd.adobe.photoshop": {
        source: "iana",
        compressible: true,
        extensions: ["psd"]
      },
      "image/vnd.airzip.accelerator.azv": {
        source: "iana",
        extensions: ["azv"]
      },
      "image/vnd.cns.inf2": {
        source: "iana"
      },
      "image/vnd.dece.graphic": {
        source: "iana",
        extensions: ["uvi", "uvvi", "uvg", "uvvg"]
      },
      "image/vnd.djvu": {
        source: "iana",
        extensions: ["djvu", "djv"]
      },
      "image/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "image/vnd.dwg": {
        source: "iana",
        extensions: ["dwg"]
      },
      "image/vnd.dxf": {
        source: "iana",
        extensions: ["dxf"]
      },
      "image/vnd.fastbidsheet": {
        source: "iana",
        extensions: ["fbs"]
      },
      "image/vnd.fpx": {
        source: "iana",
        extensions: ["fpx"]
      },
      "image/vnd.fst": {
        source: "iana",
        extensions: ["fst"]
      },
      "image/vnd.fujixerox.edmics-mmr": {
        source: "iana",
        extensions: ["mmr"]
      },
      "image/vnd.fujixerox.edmics-rlc": {
        source: "iana",
        extensions: ["rlc"]
      },
      "image/vnd.globalgraphics.pgb": {
        source: "iana"
      },
      "image/vnd.microsoft.icon": {
        source: "iana",
        compressible: true,
        extensions: ["ico"]
      },
      "image/vnd.mix": {
        source: "iana"
      },
      "image/vnd.mozilla.apng": {
        source: "iana"
      },
      "image/vnd.ms-dds": {
        compressible: true,
        extensions: ["dds"]
      },
      "image/vnd.ms-modi": {
        source: "iana",
        extensions: ["mdi"]
      },
      "image/vnd.ms-photo": {
        source: "apache",
        extensions: ["wdp"]
      },
      "image/vnd.net-fpx": {
        source: "iana",
        extensions: ["npx"]
      },
      "image/vnd.pco.b16": {
        source: "iana",
        extensions: ["b16"]
      },
      "image/vnd.radiance": {
        source: "iana"
      },
      "image/vnd.sealed.png": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.gif": {
        source: "iana"
      },
      "image/vnd.sealedmedia.softseal.jpg": {
        source: "iana"
      },
      "image/vnd.svf": {
        source: "iana"
      },
      "image/vnd.tencent.tap": {
        source: "iana",
        extensions: ["tap"]
      },
      "image/vnd.valve.source.texture": {
        source: "iana",
        extensions: ["vtf"]
      },
      "image/vnd.wap.wbmp": {
        source: "iana",
        extensions: ["wbmp"]
      },
      "image/vnd.xiff": {
        source: "iana",
        extensions: ["xif"]
      },
      "image/vnd.zbrush.pcx": {
        source: "iana",
        extensions: ["pcx"]
      },
      "image/webp": {
        source: "apache",
        extensions: ["webp"]
      },
      "image/wmf": {
        source: "iana",
        extensions: ["wmf"]
      },
      "image/x-3ds": {
        source: "apache",
        extensions: ["3ds"]
      },
      "image/x-cmu-raster": {
        source: "apache",
        extensions: ["ras"]
      },
      "image/x-cmx": {
        source: "apache",
        extensions: ["cmx"]
      },
      "image/x-freehand": {
        source: "apache",
        extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
      },
      "image/x-icon": {
        source: "apache",
        compressible: true,
        extensions: ["ico"]
      },
      "image/x-jng": {
        source: "nginx",
        extensions: ["jng"]
      },
      "image/x-mrsid-image": {
        source: "apache",
        extensions: ["sid"]
      },
      "image/x-ms-bmp": {
        source: "nginx",
        compressible: true,
        extensions: ["bmp"]
      },
      "image/x-pcx": {
        source: "apache",
        extensions: ["pcx"]
      },
      "image/x-pict": {
        source: "apache",
        extensions: ["pic", "pct"]
      },
      "image/x-portable-anymap": {
        source: "apache",
        extensions: ["pnm"]
      },
      "image/x-portable-bitmap": {
        source: "apache",
        extensions: ["pbm"]
      },
      "image/x-portable-graymap": {
        source: "apache",
        extensions: ["pgm"]
      },
      "image/x-portable-pixmap": {
        source: "apache",
        extensions: ["ppm"]
      },
      "image/x-rgb": {
        source: "apache",
        extensions: ["rgb"]
      },
      "image/x-tga": {
        source: "apache",
        extensions: ["tga"]
      },
      "image/x-xbitmap": {
        source: "apache",
        extensions: ["xbm"]
      },
      "image/x-xcf": {
        compressible: false
      },
      "image/x-xpixmap": {
        source: "apache",
        extensions: ["xpm"]
      },
      "image/x-xwindowdump": {
        source: "apache",
        extensions: ["xwd"]
      },
      "message/cpim": {
        source: "iana"
      },
      "message/delivery-status": {
        source: "iana"
      },
      "message/disposition-notification": {
        source: "iana",
        extensions: [
          "disposition-notification"
        ]
      },
      "message/external-body": {
        source: "iana"
      },
      "message/feedback-report": {
        source: "iana"
      },
      "message/global": {
        source: "iana",
        extensions: ["u8msg"]
      },
      "message/global-delivery-status": {
        source: "iana",
        extensions: ["u8dsn"]
      },
      "message/global-disposition-notification": {
        source: "iana",
        extensions: ["u8mdn"]
      },
      "message/global-headers": {
        source: "iana",
        extensions: ["u8hdr"]
      },
      "message/http": {
        source: "iana",
        compressible: false
      },
      "message/imdn+xml": {
        source: "iana",
        compressible: true
      },
      "message/news": {
        source: "iana"
      },
      "message/partial": {
        source: "iana",
        compressible: false
      },
      "message/rfc822": {
        source: "iana",
        compressible: true,
        extensions: ["eml", "mime"]
      },
      "message/s-http": {
        source: "iana"
      },
      "message/sip": {
        source: "iana"
      },
      "message/sipfrag": {
        source: "iana"
      },
      "message/tracking-status": {
        source: "iana"
      },
      "message/vnd.si.simp": {
        source: "iana"
      },
      "message/vnd.wfa.wsc": {
        source: "iana",
        extensions: ["wsc"]
      },
      "model/3mf": {
        source: "iana",
        extensions: ["3mf"]
      },
      "model/e57": {
        source: "iana"
      },
      "model/gltf+json": {
        source: "iana",
        compressible: true,
        extensions: ["gltf"]
      },
      "model/gltf-binary": {
        source: "iana",
        compressible: true,
        extensions: ["glb"]
      },
      "model/iges": {
        source: "iana",
        compressible: false,
        extensions: ["igs", "iges"]
      },
      "model/mesh": {
        source: "iana",
        compressible: false,
        extensions: ["msh", "mesh", "silo"]
      },
      "model/mtl": {
        source: "iana",
        extensions: ["mtl"]
      },
      "model/obj": {
        source: "iana",
        extensions: ["obj"]
      },
      "model/step": {
        source: "iana"
      },
      "model/step+xml": {
        source: "iana",
        compressible: true,
        extensions: ["stpx"]
      },
      "model/step+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpz"]
      },
      "model/step-xml+zip": {
        source: "iana",
        compressible: false,
        extensions: ["stpxz"]
      },
      "model/stl": {
        source: "iana",
        extensions: ["stl"]
      },
      "model/vnd.collada+xml": {
        source: "iana",
        compressible: true,
        extensions: ["dae"]
      },
      "model/vnd.dwf": {
        source: "iana",
        extensions: ["dwf"]
      },
      "model/vnd.flatland.3dml": {
        source: "iana"
      },
      "model/vnd.gdl": {
        source: "iana",
        extensions: ["gdl"]
      },
      "model/vnd.gs-gdl": {
        source: "apache"
      },
      "model/vnd.gs.gdl": {
        source: "iana"
      },
      "model/vnd.gtw": {
        source: "iana",
        extensions: ["gtw"]
      },
      "model/vnd.moml+xml": {
        source: "iana",
        compressible: true
      },
      "model/vnd.mts": {
        source: "iana",
        extensions: ["mts"]
      },
      "model/vnd.opengex": {
        source: "iana",
        extensions: ["ogex"]
      },
      "model/vnd.parasolid.transmit.binary": {
        source: "iana",
        extensions: ["x_b"]
      },
      "model/vnd.parasolid.transmit.text": {
        source: "iana",
        extensions: ["x_t"]
      },
      "model/vnd.pytha.pyox": {
        source: "iana"
      },
      "model/vnd.rosette.annotated-data-model": {
        source: "iana"
      },
      "model/vnd.sap.vds": {
        source: "iana",
        extensions: ["vds"]
      },
      "model/vnd.usdz+zip": {
        source: "iana",
        compressible: false,
        extensions: ["usdz"]
      },
      "model/vnd.valve.source.compiled-map": {
        source: "iana",
        extensions: ["bsp"]
      },
      "model/vnd.vtu": {
        source: "iana",
        extensions: ["vtu"]
      },
      "model/vrml": {
        source: "iana",
        compressible: false,
        extensions: ["wrl", "vrml"]
      },
      "model/x3d+binary": {
        source: "apache",
        compressible: false,
        extensions: ["x3db", "x3dbz"]
      },
      "model/x3d+fastinfoset": {
        source: "iana",
        extensions: ["x3db"]
      },
      "model/x3d+vrml": {
        source: "apache",
        compressible: false,
        extensions: ["x3dv", "x3dvz"]
      },
      "model/x3d+xml": {
        source: "iana",
        compressible: true,
        extensions: ["x3d", "x3dz"]
      },
      "model/x3d-vrml": {
        source: "iana",
        extensions: ["x3dv"]
      },
      "multipart/alternative": {
        source: "iana",
        compressible: false
      },
      "multipart/appledouble": {
        source: "iana"
      },
      "multipart/byteranges": {
        source: "iana"
      },
      "multipart/digest": {
        source: "iana"
      },
      "multipart/encrypted": {
        source: "iana",
        compressible: false
      },
      "multipart/form-data": {
        source: "iana",
        compressible: false
      },
      "multipart/header-set": {
        source: "iana"
      },
      "multipart/mixed": {
        source: "iana"
      },
      "multipart/multilingual": {
        source: "iana"
      },
      "multipart/parallel": {
        source: "iana"
      },
      "multipart/related": {
        source: "iana",
        compressible: false
      },
      "multipart/report": {
        source: "iana"
      },
      "multipart/signed": {
        source: "iana",
        compressible: false
      },
      "multipart/vnd.bint.med-plus": {
        source: "iana"
      },
      "multipart/voice-message": {
        source: "iana"
      },
      "multipart/x-mixed-replace": {
        source: "iana"
      },
      "text/1d-interleaved-parityfec": {
        source: "iana"
      },
      "text/cache-manifest": {
        source: "iana",
        compressible: true,
        extensions: ["appcache", "manifest"]
      },
      "text/calendar": {
        source: "iana",
        extensions: ["ics", "ifb"]
      },
      "text/calender": {
        compressible: true
      },
      "text/cmd": {
        compressible: true
      },
      "text/coffeescript": {
        extensions: ["coffee", "litcoffee"]
      },
      "text/cql": {
        source: "iana"
      },
      "text/cql-expression": {
        source: "iana"
      },
      "text/cql-identifier": {
        source: "iana"
      },
      "text/css": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["css"]
      },
      "text/csv": {
        source: "iana",
        compressible: true,
        extensions: ["csv"]
      },
      "text/csv-schema": {
        source: "iana"
      },
      "text/directory": {
        source: "iana"
      },
      "text/dns": {
        source: "iana"
      },
      "text/ecmascript": {
        source: "iana"
      },
      "text/encaprtp": {
        source: "iana"
      },
      "text/enriched": {
        source: "iana"
      },
      "text/fhirpath": {
        source: "iana"
      },
      "text/flexfec": {
        source: "iana"
      },
      "text/fwdred": {
        source: "iana"
      },
      "text/gff3": {
        source: "iana"
      },
      "text/grammar-ref-list": {
        source: "iana"
      },
      "text/html": {
        source: "iana",
        compressible: true,
        extensions: ["html", "htm", "shtml"]
      },
      "text/jade": {
        extensions: ["jade"]
      },
      "text/javascript": {
        source: "iana",
        compressible: true
      },
      "text/jcr-cnd": {
        source: "iana"
      },
      "text/jsx": {
        compressible: true,
        extensions: ["jsx"]
      },
      "text/less": {
        compressible: true,
        extensions: ["less"]
      },
      "text/markdown": {
        source: "iana",
        compressible: true,
        extensions: ["markdown", "md"]
      },
      "text/mathml": {
        source: "nginx",
        extensions: ["mml"]
      },
      "text/mdx": {
        compressible: true,
        extensions: ["mdx"]
      },
      "text/mizar": {
        source: "iana"
      },
      "text/n3": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["n3"]
      },
      "text/parameters": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/parityfec": {
        source: "iana"
      },
      "text/plain": {
        source: "iana",
        compressible: true,
        extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
      },
      "text/provenance-notation": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/prs.fallenstein.rst": {
        source: "iana"
      },
      "text/prs.lines.tag": {
        source: "iana",
        extensions: ["dsc"]
      },
      "text/prs.prop.logic": {
        source: "iana"
      },
      "text/raptorfec": {
        source: "iana"
      },
      "text/red": {
        source: "iana"
      },
      "text/rfc822-headers": {
        source: "iana"
      },
      "text/richtext": {
        source: "iana",
        compressible: true,
        extensions: ["rtx"]
      },
      "text/rtf": {
        source: "iana",
        compressible: true,
        extensions: ["rtf"]
      },
      "text/rtp-enc-aescm128": {
        source: "iana"
      },
      "text/rtploopback": {
        source: "iana"
      },
      "text/rtx": {
        source: "iana"
      },
      "text/sgml": {
        source: "iana",
        extensions: ["sgml", "sgm"]
      },
      "text/shaclc": {
        source: "iana"
      },
      "text/shex": {
        source: "iana",
        extensions: ["shex"]
      },
      "text/slim": {
        extensions: ["slim", "slm"]
      },
      "text/spdx": {
        source: "iana",
        extensions: ["spdx"]
      },
      "text/strings": {
        source: "iana"
      },
      "text/stylus": {
        extensions: ["stylus", "styl"]
      },
      "text/t140": {
        source: "iana"
      },
      "text/tab-separated-values": {
        source: "iana",
        compressible: true,
        extensions: ["tsv"]
      },
      "text/troff": {
        source: "iana",
        extensions: ["t", "tr", "roff", "man", "me", "ms"]
      },
      "text/turtle": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["ttl"]
      },
      "text/ulpfec": {
        source: "iana"
      },
      "text/uri-list": {
        source: "iana",
        compressible: true,
        extensions: ["uri", "uris", "urls"]
      },
      "text/vcard": {
        source: "iana",
        compressible: true,
        extensions: ["vcard"]
      },
      "text/vnd.a": {
        source: "iana"
      },
      "text/vnd.abc": {
        source: "iana"
      },
      "text/vnd.ascii-art": {
        source: "iana"
      },
      "text/vnd.curl": {
        source: "iana",
        extensions: ["curl"]
      },
      "text/vnd.curl.dcurl": {
        source: "apache",
        extensions: ["dcurl"]
      },
      "text/vnd.curl.mcurl": {
        source: "apache",
        extensions: ["mcurl"]
      },
      "text/vnd.curl.scurl": {
        source: "apache",
        extensions: ["scurl"]
      },
      "text/vnd.debian.copyright": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.dmclientscript": {
        source: "iana"
      },
      "text/vnd.dvb.subtitle": {
        source: "iana",
        extensions: ["sub"]
      },
      "text/vnd.esmertec.theme-descriptor": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.familysearch.gedcom": {
        source: "iana",
        extensions: ["ged"]
      },
      "text/vnd.ficlab.flt": {
        source: "iana"
      },
      "text/vnd.fly": {
        source: "iana",
        extensions: ["fly"]
      },
      "text/vnd.fmi.flexstor": {
        source: "iana",
        extensions: ["flx"]
      },
      "text/vnd.gml": {
        source: "iana"
      },
      "text/vnd.graphviz": {
        source: "iana",
        extensions: ["gv"]
      },
      "text/vnd.hans": {
        source: "iana"
      },
      "text/vnd.hgl": {
        source: "iana"
      },
      "text/vnd.in3d.3dml": {
        source: "iana",
        extensions: ["3dml"]
      },
      "text/vnd.in3d.spot": {
        source: "iana",
        extensions: ["spot"]
      },
      "text/vnd.iptc.newsml": {
        source: "iana"
      },
      "text/vnd.iptc.nitf": {
        source: "iana"
      },
      "text/vnd.latex-z": {
        source: "iana"
      },
      "text/vnd.motorola.reflex": {
        source: "iana"
      },
      "text/vnd.ms-mediapackage": {
        source: "iana"
      },
      "text/vnd.net2phone.commcenter.command": {
        source: "iana"
      },
      "text/vnd.radisys.msml-basic-layout": {
        source: "iana"
      },
      "text/vnd.senx.warpscript": {
        source: "iana"
      },
      "text/vnd.si.uricatalogue": {
        source: "iana"
      },
      "text/vnd.sosi": {
        source: "iana"
      },
      "text/vnd.sun.j2me.app-descriptor": {
        source: "iana",
        charset: "UTF-8",
        extensions: ["jad"]
      },
      "text/vnd.trolltech.linguist": {
        source: "iana",
        charset: "UTF-8"
      },
      "text/vnd.wap.si": {
        source: "iana"
      },
      "text/vnd.wap.sl": {
        source: "iana"
      },
      "text/vnd.wap.wml": {
        source: "iana",
        extensions: ["wml"]
      },
      "text/vnd.wap.wmlscript": {
        source: "iana",
        extensions: ["wmls"]
      },
      "text/vtt": {
        source: "iana",
        charset: "UTF-8",
        compressible: true,
        extensions: ["vtt"]
      },
      "text/x-asm": {
        source: "apache",
        extensions: ["s", "asm"]
      },
      "text/x-c": {
        source: "apache",
        extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
      },
      "text/x-component": {
        source: "nginx",
        extensions: ["htc"]
      },
      "text/x-fortran": {
        source: "apache",
        extensions: ["f", "for", "f77", "f90"]
      },
      "text/x-gwt-rpc": {
        compressible: true
      },
      "text/x-handlebars-template": {
        extensions: ["hbs"]
      },
      "text/x-java-source": {
        source: "apache",
        extensions: ["java"]
      },
      "text/x-jquery-tmpl": {
        compressible: true
      },
      "text/x-lua": {
        extensions: ["lua"]
      },
      "text/x-markdown": {
        compressible: true,
        extensions: ["mkd"]
      },
      "text/x-nfo": {
        source: "apache",
        extensions: ["nfo"]
      },
      "text/x-opml": {
        source: "apache",
        extensions: ["opml"]
      },
      "text/x-org": {
        compressible: true,
        extensions: ["org"]
      },
      "text/x-pascal": {
        source: "apache",
        extensions: ["p", "pas"]
      },
      "text/x-processing": {
        compressible: true,
        extensions: ["pde"]
      },
      "text/x-sass": {
        extensions: ["sass"]
      },
      "text/x-scss": {
        extensions: ["scss"]
      },
      "text/x-setext": {
        source: "apache",
        extensions: ["etx"]
      },
      "text/x-sfv": {
        source: "apache",
        extensions: ["sfv"]
      },
      "text/x-suse-ymp": {
        compressible: true,
        extensions: ["ymp"]
      },
      "text/x-uuencode": {
        source: "apache",
        extensions: ["uu"]
      },
      "text/x-vcalendar": {
        source: "apache",
        extensions: ["vcs"]
      },
      "text/x-vcard": {
        source: "apache",
        extensions: ["vcf"]
      },
      "text/xml": {
        source: "iana",
        compressible: true,
        extensions: ["xml"]
      },
      "text/xml-external-parsed-entity": {
        source: "iana"
      },
      "text/yaml": {
        compressible: true,
        extensions: ["yaml", "yml"]
      },
      "video/1d-interleaved-parityfec": {
        source: "iana"
      },
      "video/3gpp": {
        source: "iana",
        extensions: ["3gp", "3gpp"]
      },
      "video/3gpp-tt": {
        source: "iana"
      },
      "video/3gpp2": {
        source: "iana",
        extensions: ["3g2"]
      },
      "video/av1": {
        source: "iana"
      },
      "video/bmpeg": {
        source: "iana"
      },
      "video/bt656": {
        source: "iana"
      },
      "video/celb": {
        source: "iana"
      },
      "video/dv": {
        source: "iana"
      },
      "video/encaprtp": {
        source: "iana"
      },
      "video/ffv1": {
        source: "iana"
      },
      "video/flexfec": {
        source: "iana"
      },
      "video/h261": {
        source: "iana",
        extensions: ["h261"]
      },
      "video/h263": {
        source: "iana",
        extensions: ["h263"]
      },
      "video/h263-1998": {
        source: "iana"
      },
      "video/h263-2000": {
        source: "iana"
      },
      "video/h264": {
        source: "iana",
        extensions: ["h264"]
      },
      "video/h264-rcdo": {
        source: "iana"
      },
      "video/h264-svc": {
        source: "iana"
      },
      "video/h265": {
        source: "iana"
      },
      "video/iso.segment": {
        source: "iana",
        extensions: ["m4s"]
      },
      "video/jpeg": {
        source: "iana",
        extensions: ["jpgv"]
      },
      "video/jpeg2000": {
        source: "iana"
      },
      "video/jpm": {
        source: "apache",
        extensions: ["jpm", "jpgm"]
      },
      "video/jxsv": {
        source: "iana"
      },
      "video/mj2": {
        source: "iana",
        extensions: ["mj2", "mjp2"]
      },
      "video/mp1s": {
        source: "iana"
      },
      "video/mp2p": {
        source: "iana"
      },
      "video/mp2t": {
        source: "iana",
        extensions: ["ts"]
      },
      "video/mp4": {
        source: "iana",
        compressible: false,
        extensions: ["mp4", "mp4v", "mpg4"]
      },
      "video/mp4v-es": {
        source: "iana"
      },
      "video/mpeg": {
        source: "iana",
        compressible: false,
        extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
      },
      "video/mpeg4-generic": {
        source: "iana"
      },
      "video/mpv": {
        source: "iana"
      },
      "video/nv": {
        source: "iana"
      },
      "video/ogg": {
        source: "iana",
        compressible: false,
        extensions: ["ogv"]
      },
      "video/parityfec": {
        source: "iana"
      },
      "video/pointer": {
        source: "iana"
      },
      "video/quicktime": {
        source: "iana",
        compressible: false,
        extensions: ["qt", "mov"]
      },
      "video/raptorfec": {
        source: "iana"
      },
      "video/raw": {
        source: "iana"
      },
      "video/rtp-enc-aescm128": {
        source: "iana"
      },
      "video/rtploopback": {
        source: "iana"
      },
      "video/rtx": {
        source: "iana"
      },
      "video/scip": {
        source: "iana"
      },
      "video/smpte291": {
        source: "iana"
      },
      "video/smpte292m": {
        source: "iana"
      },
      "video/ulpfec": {
        source: "iana"
      },
      "video/vc1": {
        source: "iana"
      },
      "video/vc2": {
        source: "iana"
      },
      "video/vnd.cctv": {
        source: "iana"
      },
      "video/vnd.dece.hd": {
        source: "iana",
        extensions: ["uvh", "uvvh"]
      },
      "video/vnd.dece.mobile": {
        source: "iana",
        extensions: ["uvm", "uvvm"]
      },
      "video/vnd.dece.mp4": {
        source: "iana"
      },
      "video/vnd.dece.pd": {
        source: "iana",
        extensions: ["uvp", "uvvp"]
      },
      "video/vnd.dece.sd": {
        source: "iana",
        extensions: ["uvs", "uvvs"]
      },
      "video/vnd.dece.video": {
        source: "iana",
        extensions: ["uvv", "uvvv"]
      },
      "video/vnd.directv.mpeg": {
        source: "iana"
      },
      "video/vnd.directv.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dlna.mpeg-tts": {
        source: "iana"
      },
      "video/vnd.dvb.file": {
        source: "iana",
        extensions: ["dvb"]
      },
      "video/vnd.fvt": {
        source: "iana",
        extensions: ["fvt"]
      },
      "video/vnd.hns.video": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.1dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-1010": {
        source: "iana"
      },
      "video/vnd.iptvforum.2dparityfec-2005": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsavc": {
        source: "iana"
      },
      "video/vnd.iptvforum.ttsmpeg2": {
        source: "iana"
      },
      "video/vnd.motorola.video": {
        source: "iana"
      },
      "video/vnd.motorola.videop": {
        source: "iana"
      },
      "video/vnd.mpegurl": {
        source: "iana",
        extensions: ["mxu", "m4u"]
      },
      "video/vnd.ms-playready.media.pyv": {
        source: "iana",
        extensions: ["pyv"]
      },
      "video/vnd.nokia.interleaved-multimedia": {
        source: "iana"
      },
      "video/vnd.nokia.mp4vr": {
        source: "iana"
      },
      "video/vnd.nokia.videovoip": {
        source: "iana"
      },
      "video/vnd.objectvideo": {
        source: "iana"
      },
      "video/vnd.radgamettools.bink": {
        source: "iana"
      },
      "video/vnd.radgamettools.smacker": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg1": {
        source: "iana"
      },
      "video/vnd.sealed.mpeg4": {
        source: "iana"
      },
      "video/vnd.sealed.swf": {
        source: "iana"
      },
      "video/vnd.sealedmedia.softseal.mov": {
        source: "iana"
      },
      "video/vnd.uvvu.mp4": {
        source: "iana",
        extensions: ["uvu", "uvvu"]
      },
      "video/vnd.vivo": {
        source: "iana",
        extensions: ["viv"]
      },
      "video/vnd.youtube.yt": {
        source: "iana"
      },
      "video/vp8": {
        source: "iana"
      },
      "video/vp9": {
        source: "iana"
      },
      "video/webm": {
        source: "apache",
        compressible: false,
        extensions: ["webm"]
      },
      "video/x-f4v": {
        source: "apache",
        extensions: ["f4v"]
      },
      "video/x-fli": {
        source: "apache",
        extensions: ["fli"]
      },
      "video/x-flv": {
        source: "apache",
        compressible: false,
        extensions: ["flv"]
      },
      "video/x-m4v": {
        source: "apache",
        extensions: ["m4v"]
      },
      "video/x-matroska": {
        source: "apache",
        compressible: false,
        extensions: ["mkv", "mk3d", "mks"]
      },
      "video/x-mng": {
        source: "apache",
        extensions: ["mng"]
      },
      "video/x-ms-asf": {
        source: "apache",
        extensions: ["asf", "asx"]
      },
      "video/x-ms-vob": {
        source: "apache",
        extensions: ["vob"]
      },
      "video/x-ms-wm": {
        source: "apache",
        extensions: ["wm"]
      },
      "video/x-ms-wmv": {
        source: "apache",
        compressible: false,
        extensions: ["wmv"]
      },
      "video/x-ms-wmx": {
        source: "apache",
        extensions: ["wmx"]
      },
      "video/x-ms-wvx": {
        source: "apache",
        extensions: ["wvx"]
      },
      "video/x-msvideo": {
        source: "apache",
        extensions: ["avi"]
      },
      "video/x-sgi-movie": {
        source: "apache",
        extensions: ["movie"]
      },
      "video/x-smv": {
        source: "apache",
        extensions: ["smv"]
      },
      "x-conference/x-cooltalk": {
        source: "apache",
        extensions: ["ice"]
      },
      "x-shader/x-fragment": {
        compressible: true
      },
      "x-shader/x-vertex": {
        compressible: true
      }
    };
  }
});

// ../../node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/index.js
var require_mime_db = __commonJS({
  "../../node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_db();
  }
});

// ../../node_modules/.pnpm/mime-types@2.1.35/node_modules/mime-types/index.js
var require_mime_types = __commonJS({
  "../../node_modules/.pnpm/mime-types@2.1.35/node_modules/mime-types/index.js"(exports2) {
    "use strict";
    var db = require_mime_db();
    var extname = require("path").extname;
    var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
    var TEXT_TYPE_REGEXP = /^text\//i;
    exports2.charset = charset;
    exports2.charsets = { lookup: charset };
    exports2.contentType = contentType;
    exports2.extension = extension;
    exports2.extensions = /* @__PURE__ */ Object.create(null);
    exports2.lookup = lookup;
    exports2.types = /* @__PURE__ */ Object.create(null);
    populateMaps(exports2.extensions, exports2.types);
    function charset(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var mime = match && db[match[1].toLowerCase()];
      if (mime && mime.charset) {
        return mime.charset;
      }
      if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return "UTF-8";
      }
      return false;
    }
    function contentType(str2) {
      if (!str2 || typeof str2 !== "string") {
        return false;
      }
      var mime = str2.indexOf("/") === -1 ? exports2.lookup(str2) : str2;
      if (!mime) {
        return false;
      }
      if (mime.indexOf("charset") === -1) {
        var charset2 = exports2.charset(mime);
        if (charset2)
          mime += "; charset=" + charset2.toLowerCase();
      }
      return mime;
    }
    function extension(type) {
      if (!type || typeof type !== "string") {
        return false;
      }
      var match = EXTRACT_TYPE_REGEXP.exec(type);
      var exts = match && exports2.extensions[match[1].toLowerCase()];
      if (!exts || !exts.length) {
        return false;
      }
      return exts[0];
    }
    function lookup(path) {
      if (!path || typeof path !== "string") {
        return false;
      }
      var extension2 = extname("x." + path).toLowerCase().substr(1);
      if (!extension2) {
        return false;
      }
      return exports2.types[extension2] || false;
    }
    function populateMaps(extensions, types) {
      var preference = ["nginx", "apache", void 0, "iana"];
      Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
          return;
        }
        extensions[type] = exts;
        for (var i6 = 0; i6 < exts.length; i6++) {
          var extension2 = exts[i6];
          if (types[extension2]) {
            var from = preference.indexOf(db[types[extension2]].source);
            var to = preference.indexOf(mime.source);
            if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
              continue;
            }
          }
          types[extension2] = type;
        }
      });
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/defer.js"(exports2, module2) {
    "use strict";
    module2.exports = defer;
    function defer(fn) {
      var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
      if (nextTick) {
        nextTick(fn);
      } else {
        setTimeout(fn, 0);
      }
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/async.js
var require_async = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/async.js"(exports2, module2) {
    "use strict";
    var defer = require_defer();
    module2.exports = async;
    function async(callback) {
      var isAsync = false;
      defer(function() {
        isAsync = true;
      });
      return function async_callback(err, result) {
        if (isAsync) {
          callback(err, result);
        } else {
          defer(function nextTick_callback() {
            callback(err, result);
          });
        }
      };
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/abort.js"(exports2, module2) {
    "use strict";
    module2.exports = abort;
    function abort(state) {
      Object.keys(state.jobs).forEach(clean.bind(state));
      state.jobs = {};
    }
    function clean(key) {
      if (typeof this.jobs[key] == "function") {
        this.jobs[key]();
      }
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/iterate.js"(exports2, module2) {
    "use strict";
    var async = require_async();
    var abort = require_abort();
    module2.exports = iterate;
    function iterate(list, iterator, state, callback) {
      var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
      state.jobs[key] = runJob(iterator, key, list[key], function(error2, output) {
        if (!(key in state.jobs)) {
          return;
        }
        delete state.jobs[key];
        if (error2) {
          abort(state);
        } else {
          state.results[key] = output;
        }
        callback(error2, state.results);
      });
    }
    function runJob(iterator, key, item, callback) {
      var aborter;
      if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
      } else {
        aborter = iterator(item, key, async(callback));
      }
      return aborter;
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/state.js
var require_state2 = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/state.js"(exports2, module2) {
    "use strict";
    module2.exports = state;
    function state(list, sortMethod) {
      var isNamedList = !Array.isArray(list), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
      };
      if (sortMethod) {
        initState.keyedList.sort(isNamedList ? sortMethod : function(a6, b6) {
          return sortMethod(list[a6], list[b6]);
        });
      }
      return initState;
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/terminator.js"(exports2, module2) {
    "use strict";
    var abort = require_abort();
    var async = require_async();
    module2.exports = terminator;
    function terminator(callback) {
      if (!Object.keys(this.jobs).length) {
        return;
      }
      this.index = this.size;
      abort(this);
      async(callback)(null, this.results);
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/parallel.js
var require_parallel = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/parallel.js"(exports2, module2) {
    "use strict";
    var iterate = require_iterate();
    var initState = require_state2();
    var terminator = require_terminator();
    module2.exports = parallel;
    function parallel(list, iterator, callback) {
      var state = initState(list);
      while (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator, state, function(error2, result) {
          if (error2) {
            callback(error2, result);
            return;
          }
          if (Object.keys(state.jobs).length === 0) {
            callback(null, state.results);
            return;
          }
        });
        state.index++;
      }
      return terminator.bind(state, callback);
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serialOrdered.js"(exports2, module2) {
    "use strict";
    var iterate = require_iterate();
    var initState = require_state2();
    var terminator = require_terminator();
    module2.exports = serialOrdered;
    module2.exports.ascending = ascending;
    module2.exports.descending = descending;
    function serialOrdered(list, iterator, sortMethod, callback) {
      var state = initState(list, sortMethod);
      iterate(list, iterator, state, function iteratorHandler(error2, result) {
        if (error2) {
          callback(error2, result);
          return;
        }
        state.index++;
        if (state.index < (state["keyedList"] || list).length) {
          iterate(list, iterator, state, iteratorHandler);
          return;
        }
        callback(null, state.results);
      });
      return terminator.bind(state, callback);
    }
    function ascending(a6, b6) {
      return a6 < b6 ? -1 : a6 > b6 ? 1 : 0;
    }
    function descending(a6, b6) {
      return -1 * ascending(a6, b6);
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serial.js
var require_serial = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serial.js"(exports2, module2) {
    "use strict";
    var serialOrdered = require_serialOrdered();
    module2.exports = serial;
    function serial(list, iterator, callback) {
      return serialOrdered(list, iterator, null, callback);
    }
  }
});

// ../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/index.js
var require_asynckit = __commonJS({
  "../../node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      parallel: require_parallel(),
      serial: require_serial(),
      serialOrdered: require_serialOrdered()
    };
  }
});

// ../../node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/populate.js
var require_populate = __commonJS({
  "../../node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/populate.js"(exports2, module2) {
    "use strict";
    module2.exports = function(dst, src) {
      Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
      });
      return dst;
    };
  }
});

// ../../node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/form_data.js
var require_form_data2 = __commonJS({
  "../../node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/form_data.js"(exports2, module2) {
    "use strict";
    var CombinedStream = require_combined_stream();
    var util = require("util");
    var path = require("path");
    var http2 = require("http");
    var https2 = require("https");
    var parseUrl2 = require("url").parse;
    var fs4 = require("fs");
    var Stream3 = require("stream").Stream;
    var mime = require_mime_types();
    var asynckit = require_asynckit();
    var populate = require_populate();
    module2.exports = FormData4;
    util.inherits(FormData4, CombinedStream);
    function FormData4(options) {
      if (!(this instanceof FormData4)) {
        return new FormData4(options);
      }
      this._overheadLength = 0;
      this._valueLength = 0;
      this._valuesToMeasure = [];
      CombinedStream.call(this);
      options = options || {};
      for (var option in options) {
        this[option] = options[option];
      }
    }
    FormData4.LINE_BREAK = "\r\n";
    FormData4.DEFAULT_CONTENT_TYPE = "application/octet-stream";
    FormData4.prototype.append = function(field, value, options) {
      options = options || {};
      if (typeof options == "string") {
        options = { filename: options };
      }
      var append = CombinedStream.prototype.append.bind(this);
      if (typeof value == "number") {
        value = "" + value;
      }
      if (util.isArray(value)) {
        this._error(new Error("Arrays are not supported."));
        return;
      }
      var header = this._multiPartHeader(field, value, options);
      var footer = this._multiPartFooter();
      append(header);
      append(value);
      append(footer);
      this._trackLength(header, value, options);
    };
    FormData4.prototype._trackLength = function(header, value, options) {
      var valueLength = 0;
      if (options.knownLength != null) {
        valueLength += +options.knownLength;
      } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
      } else if (typeof value === "string") {
        valueLength = Buffer.byteLength(value);
      }
      this._valueLength += valueLength;
      this._overheadLength += Buffer.byteLength(header) + FormData4.LINE_BREAK.length;
      if (!value || !value.path && !(value.readable && value.hasOwnProperty("httpVersion")) && !(value instanceof Stream3)) {
        return;
      }
      if (!options.knownLength) {
        this._valuesToMeasure.push(value);
      }
    };
    FormData4.prototype._lengthRetriever = function(value, callback) {
      if (value.hasOwnProperty("fd")) {
        if (value.end != void 0 && value.end != Infinity && value.start != void 0) {
          callback(null, value.end + 1 - (value.start ? value.start : 0));
        } else {
          fs4.stat(value.path, function(err, stat) {
            var fileSize;
            if (err) {
              callback(err);
              return;
            }
            fileSize = stat.size - (value.start ? value.start : 0);
            callback(null, fileSize);
          });
        }
      } else if (value.hasOwnProperty("httpVersion")) {
        callback(null, +value.headers["content-length"]);
      } else if (value.hasOwnProperty("httpModule")) {
        value.on("response", function(response) {
          value.pause();
          callback(null, +response.headers["content-length"]);
        });
        value.resume();
      } else {
        callback("Unknown stream");
      }
    };
    FormData4.prototype._multiPartHeader = function(field, value, options) {
      if (typeof options.header == "string") {
        return options.header;
      }
      var contentDisposition = this._getContentDisposition(value, options);
      var contentType = this._getContentType(value, options);
      var contents = "";
      var headers = {
        // add custom disposition as third element or keep it two elements if not
        "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        "Content-Type": [].concat(contentType || [])
      };
      if (typeof options.header == "object") {
        populate(headers, options.header);
      }
      var header;
      for (var prop in headers) {
        if (!headers.hasOwnProperty(prop))
          continue;
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + ": " + header.join("; ") + FormData4.LINE_BREAK;
        }
      }
      return "--" + this.getBoundary() + FormData4.LINE_BREAK + contents + FormData4.LINE_BREAK;
    };
    FormData4.prototype._getContentDisposition = function(value, options) {
      var filename, contentDisposition;
      if (typeof options.filepath === "string") {
        filename = path.normalize(options.filepath).replace(/\\/g, "/");
      } else if (options.filename || value.name || value.path) {
        filename = path.basename(options.filename || value.name || value.path);
      } else if (value.readable && value.hasOwnProperty("httpVersion")) {
        filename = path.basename(value.client._httpMessage.path || "");
      }
      if (filename) {
        contentDisposition = 'filename="' + filename + '"';
      }
      return contentDisposition;
    };
    FormData4.prototype._getContentType = function(value, options) {
      var contentType = options.contentType;
      if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
      }
      if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
      }
      if (!contentType && value.readable && value.hasOwnProperty("httpVersion")) {
        contentType = value.headers["content-type"];
      }
      if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
      }
      if (!contentType && typeof value == "object") {
        contentType = FormData4.DEFAULT_CONTENT_TYPE;
      }
      return contentType;
    };
    FormData4.prototype._multiPartFooter = function() {
      return function(next) {
        var footer = FormData4.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
          footer += this._lastBoundary();
        }
        next(footer);
      }.bind(this);
    };
    FormData4.prototype._lastBoundary = function() {
      return "--" + this.getBoundary() + "--" + FormData4.LINE_BREAK;
    };
    FormData4.prototype.getHeaders = function(userHeaders) {
      var header;
      var formHeaders = {
        "content-type": "multipart/form-data; boundary=" + this.getBoundary()
      };
      for (header in userHeaders) {
        if (userHeaders.hasOwnProperty(header)) {
          formHeaders[header.toLowerCase()] = userHeaders[header];
        }
      }
      return formHeaders;
    };
    FormData4.prototype.setBoundary = function(boundary) {
      this._boundary = boundary;
    };
    FormData4.prototype.getBoundary = function() {
      if (!this._boundary) {
        this._generateBoundary();
      }
      return this._boundary;
    };
    FormData4.prototype.getBuffer = function() {
      var dataBuffer = new Buffer.alloc(0);
      var boundary = this.getBoundary();
      for (var i6 = 0, len = this._streams.length; i6 < len; i6++) {
        if (typeof this._streams[i6] !== "function") {
          if (Buffer.isBuffer(this._streams[i6])) {
            dataBuffer = Buffer.concat([dataBuffer, this._streams[i6]]);
          } else {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i6])]);
          }
          if (typeof this._streams[i6] !== "string" || this._streams[i6].substring(2, boundary.length + 2) !== boundary) {
            dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData4.LINE_BREAK)]);
          }
        }
      }
      return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
    };
    FormData4.prototype._generateBoundary = function() {
      var boundary = "--------------------------";
      for (var i6 = 0; i6 < 24; i6++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
      }
      this._boundary = boundary;
    };
    FormData4.prototype.getLengthSync = function() {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this.hasKnownLength()) {
        this._error(new Error("Cannot calculate proper length in synchronous way."));
      }
      return knownLength;
    };
    FormData4.prototype.hasKnownLength = function() {
      var hasKnownLength = true;
      if (this._valuesToMeasure.length) {
        hasKnownLength = false;
      }
      return hasKnownLength;
    };
    FormData4.prototype.getLength = function(cb) {
      var knownLength = this._overheadLength + this._valueLength;
      if (this._streams.length) {
        knownLength += this._lastBoundary().length;
      }
      if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
      }
      asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
          cb(err);
          return;
        }
        values.forEach(function(length) {
          knownLength += length;
        });
        cb(null, knownLength);
      });
    };
    FormData4.prototype.submit = function(params, cb) {
      var request2, options, defaults = { method: "post" };
      if (typeof params == "string") {
        params = parseUrl2(params);
        options = populate({
          port: params.port,
          path: params.pathname,
          host: params.hostname,
          protocol: params.protocol
        }, defaults);
      } else {
        options = populate(params, defaults);
        if (!options.port) {
          options.port = options.protocol == "https:" ? 443 : 80;
        }
      }
      options.headers = this.getHeaders(params.headers);
      if (options.protocol == "https:") {
        request2 = https2.request(options);
      } else {
        request2 = http2.request(options);
      }
      this.getLength(function(err, length) {
        if (err && err !== "Unknown stream") {
          this._error(err);
          return;
        }
        if (length) {
          request2.setHeader("Content-Length", length);
        }
        this.pipe(request2);
        if (cb) {
          var onResponse;
          var callback = function(error2, responce) {
            request2.removeListener("error", callback);
            request2.removeListener("response", onResponse);
            return cb.call(this, error2, responce);
          };
          onResponse = callback.bind(this, null);
          request2.on("error", callback);
          request2.on("response", onResponse);
        }
      }.bind(this));
      return request2;
    };
    FormData4.prototype._error = function(err) {
      if (!this.error) {
        this.error = err;
        this.pause();
        this.emit("error", err);
      }
    };
    FormData4.prototype.toString = function() {
      return "[object FormData]";
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/fetcher/Fetcher.js
var require_Fetcher = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/fetcher/Fetcher.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fetcher = void 0;
    var qs_1 = __importDefault2(require_lib2());
    var runtime_1 = require_runtime2();
    var INITIAL_RETRY_DELAY = 1;
    var MAX_RETRY_DELAY = 60;
    var DEFAULT_MAX_RETRIES2 = 2;
    function fetcherImpl(args) {
      var _a3, _b;
      return __awaiter2(this, void 0, void 0, function* () {
        const headers = {};
        if (args.body !== void 0 && args.contentType != null) {
          headers["Content-Type"] = args.contentType;
        }
        if (args.headers != null) {
          for (const [key, value] of Object.entries(args.headers)) {
            if (value != null) {
              headers[key] = value;
            }
          }
        }
        const url = Object.keys((_a3 = args.queryParameters) !== null && _a3 !== void 0 ? _a3 : {}).length > 0 ? `${args.url}?${qs_1.default.stringify(args.queryParameters, { arrayFormat: "repeat" })}` : args.url;
        let body = void 0;
        const maybeStringifyBody = (body2) => {
          if (body2 instanceof Uint8Array) {
            return body2;
          } else if (args.contentType === "application/x-www-form-urlencoded" && typeof args.body === "string") {
            return args.body;
          } else {
            return JSON.stringify(body2);
          }
        };
        if (runtime_1.RUNTIME.type === "node") {
          if (args.body instanceof (yield Promise.resolve().then(() => __importStar2(require_form_data()))).FormData) {
            body = args.body;
          } else {
            body = maybeStringifyBody(args.body);
          }
        } else {
          if (args.body instanceof (yield Promise.resolve().then(() => __importStar2(require_form_data2()))).default) {
            body = args.body;
          } else {
            body = maybeStringifyBody(args.body);
          }
        }
        const fetchFn = runtime_1.RUNTIME.type === "node" ? (
          // `.default` is required due to this issue:
          // https://github.com/node-fetch/node-fetch/issues/450#issuecomment-387045223
          (yield Promise.resolve().then(() => __importStar2((init_lib(), __toCommonJS(lib_exports))))).default
        ) : typeof fetch == "function" ? fetch : (yield Promise.resolve().then(() => __importStar2((init_lib(), __toCommonJS(lib_exports))))).default;
        const makeRequest2 = () => __awaiter2(this, void 0, void 0, function* () {
          const signals = [];
          let timeoutAbortId = void 0;
          if (args.timeoutMs != null) {
            const { signal, abortId } = getTimeoutSignal(args.timeoutMs);
            timeoutAbortId = abortId;
            signals.push(signal);
          }
          if (args.abortSignal != null) {
            signals.push(args.abortSignal);
          }
          const response = yield fetchFn(url, {
            method: args.method,
            headers,
            body,
            signal: anySignal(signals),
            credentials: args.withCredentials ? "include" : void 0
          });
          if (timeoutAbortId != null) {
            clearTimeout(timeoutAbortId);
          }
          return response;
        });
        try {
          let response = yield makeRequest2();
          for (let i6 = 0; i6 < ((_b = args.maxRetries) !== null && _b !== void 0 ? _b : DEFAULT_MAX_RETRIES2); ++i6) {
            if (response.status === 408 || response.status === 409 || response.status === 429 || response.status >= 500) {
              const delay = Math.min(INITIAL_RETRY_DELAY * Math.pow(i6, 2), MAX_RETRY_DELAY);
              yield new Promise((resolve2) => setTimeout(resolve2, delay));
              response = yield makeRequest2();
            } else {
              break;
            }
          }
          let body2;
          if (response.body != null && args.responseType === "blob") {
            body2 = yield response.blob();
          } else if (response.body != null && args.responseType === "streaming") {
            body2 = response.body;
          } else if (response.body != null && args.responseType === "text") {
            body2 = yield response.text();
          } else {
            const text = yield response.text();
            if (text.length > 0) {
              try {
                body2 = JSON.parse(text);
              } catch (err) {
                return {
                  ok: false,
                  error: {
                    reason: "non-json",
                    statusCode: response.status,
                    rawBody: text
                  }
                };
              }
            }
          }
          if (response.status >= 200 && response.status < 400) {
            return {
              ok: true,
              body: body2,
              headers: response.headers
            };
          } else {
            return {
              ok: false,
              error: {
                reason: "status-code",
                statusCode: response.status,
                body: body2
              }
            };
          }
        } catch (error2) {
          if (args.abortSignal != null && args.abortSignal.aborted) {
            return {
              ok: false,
              error: {
                reason: "unknown",
                errorMessage: "The user aborted a request"
              }
            };
          } else if (error2 instanceof Error && error2.name === "AbortError") {
            return {
              ok: false,
              error: {
                reason: "timeout"
              }
            };
          } else if (error2 instanceof Error) {
            return {
              ok: false,
              error: {
                reason: "unknown",
                errorMessage: error2.message
              }
            };
          }
          return {
            ok: false,
            error: {
              reason: "unknown",
              errorMessage: JSON.stringify(error2)
            }
          };
        }
      });
    }
    var TIMEOUT = "timeout";
    function getTimeoutSignal(timeoutMs) {
      const controller = new AbortController();
      const abortId = setTimeout(() => controller.abort(TIMEOUT), timeoutMs);
      return { signal: controller.signal, abortId };
    }
    function anySignal(...args) {
      const signals = args.length === 1 && Array.isArray(args[0]) ? args[0] : args;
      const controller = new AbortController();
      for (const signal of signals) {
        if (signal.aborted) {
          controller.abort(signal === null || signal === void 0 ? void 0 : signal.reason);
          break;
        }
        signal.addEventListener("abort", () => controller.abort(signal === null || signal === void 0 ? void 0 : signal.reason), {
          signal: controller.signal
        });
      }
      return controller.signal;
    }
    exports2.fetcher = fetcherImpl;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/fetcher/getHeader.js
var require_getHeader = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/fetcher/getHeader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHeader = void 0;
    function getHeader(headers, header) {
      for (const [headerKey, headerValue] of Object.entries(headers)) {
        if (headerKey.toLowerCase() === header.toLowerCase()) {
          return headerValue;
        }
      }
      return void 0;
    }
    exports2.getHeader = getHeader;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/fetcher/Supplier.js
var require_Supplier = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/fetcher/Supplier.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Supplier = void 0;
    exports2.Supplier = {
      get: (supplier) => __awaiter2(void 0, void 0, void 0, function* () {
        if (typeof supplier === "function") {
          return supplier();
        } else {
          return supplier;
        }
      })
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/fetcher/index.js
var require_fetcher = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/fetcher/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Supplier = exports2.getHeader = exports2.fetcher = void 0;
    var Fetcher_1 = require_Fetcher();
    Object.defineProperty(exports2, "fetcher", { enumerable: true, get: function() {
      return Fetcher_1.fetcher;
    } });
    var getHeader_1 = require_getHeader();
    Object.defineProperty(exports2, "getHeader", { enumerable: true, get: function() {
      return getHeader_1.getHeader;
    } });
    var Supplier_1 = require_Supplier();
    Object.defineProperty(exports2, "Supplier", { enumerable: true, get: function() {
      return Supplier_1.Supplier;
    } });
  }
});

// ../../node_modules/.pnpm/js-base64@3.7.2/node_modules/js-base64/base64.js
var require_base64 = __commonJS({
  "../../node_modules/.pnpm/js-base64@3.7.2/node_modules/js-base64/base64.js"(exports2, module2) {
    "use strict";
    (function(global2, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (
        // cf. https://github.com/dankogai/js-base64/issues/119
        function() {
          var _Base64 = global2.Base64;
          var gBase64 = factory();
          gBase64.noConflict = function() {
            global2.Base64 = _Base64;
            return gBase64;
          };
          if (global2.Meteor) {
            Base64 = gBase64;
          }
          global2.Base64 = gBase64;
        }()
      );
    })(typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : exports2, function() {
      "use strict";
      var version2 = "3.7.2";
      var VERSION2 = version2;
      var _hasatob = typeof atob === "function";
      var _hasbtoa = typeof btoa === "function";
      var _hasBuffer = typeof Buffer === "function";
      var _TD = typeof TextDecoder === "function" ? new TextDecoder() : void 0;
      var _TE = typeof TextEncoder === "function" ? new TextEncoder() : void 0;
      var b64ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var b64chs = Array.prototype.slice.call(b64ch);
      var b64tab = function(a6) {
        var tab = {};
        a6.forEach(function(c6, i6) {
          return tab[c6] = i6;
        });
        return tab;
      }(b64chs);
      var b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
      var _fromCC = String.fromCharCode.bind(String);
      var _U8Afrom = typeof Uint8Array.from === "function" ? Uint8Array.from.bind(Uint8Array) : function(it2, fn) {
        if (fn === void 0) {
          fn = function(x5) {
            return x5;
          };
        }
        return new Uint8Array(Array.prototype.slice.call(it2, 0).map(fn));
      };
      var _mkUriSafe = function(src) {
        return src.replace(/=/g, "").replace(/[+\/]/g, function(m0) {
          return m0 == "+" ? "-" : "_";
        });
      };
      var _tidyB64 = function(s6) {
        return s6.replace(/[^A-Za-z0-9\+\/]/g, "");
      };
      var btoaPolyfill = function(bin) {
        var u32, c0, c1, c22, asc = "";
        var pad = bin.length % 3;
        for (var i6 = 0; i6 < bin.length; ) {
          if ((c0 = bin.charCodeAt(i6++)) > 255 || (c1 = bin.charCodeAt(i6++)) > 255 || (c22 = bin.charCodeAt(i6++)) > 255)
            throw new TypeError("invalid character found");
          u32 = c0 << 16 | c1 << 8 | c22;
          asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];
        }
        return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
      };
      var _btoa = _hasbtoa ? function(bin) {
        return btoa(bin);
      } : _hasBuffer ? function(bin) {
        return Buffer.from(bin, "binary").toString("base64");
      } : btoaPolyfill;
      var _fromUint8Array = _hasBuffer ? function(u8a) {
        return Buffer.from(u8a).toString("base64");
      } : function(u8a) {
        var maxargs = 4096;
        var strs = [];
        for (var i6 = 0, l6 = u8a.length; i6 < l6; i6 += maxargs) {
          strs.push(_fromCC.apply(null, u8a.subarray(i6, i6 + maxargs)));
        }
        return _btoa(strs.join(""));
      };
      var fromUint8Array = function(u8a, urlsafe) {
        if (urlsafe === void 0) {
          urlsafe = false;
        }
        return urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
      };
      var cb_utob = function(c6) {
        if (c6.length < 2) {
          var cc = c6.charCodeAt(0);
          return cc < 128 ? c6 : cc < 2048 ? _fromCC(192 | cc >>> 6) + _fromCC(128 | cc & 63) : _fromCC(224 | cc >>> 12 & 15) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
        } else {
          var cc = 65536 + (c6.charCodeAt(0) - 55296) * 1024 + (c6.charCodeAt(1) - 56320);
          return _fromCC(240 | cc >>> 18 & 7) + _fromCC(128 | cc >>> 12 & 63) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
        }
      };
      var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
      var utob = function(u6) {
        return u6.replace(re_utob, cb_utob);
      };
      var _encode = _hasBuffer ? function(s6) {
        return Buffer.from(s6, "utf8").toString("base64");
      } : _TE ? function(s6) {
        return _fromUint8Array(_TE.encode(s6));
      } : function(s6) {
        return _btoa(utob(s6));
      };
      var encode2 = function(src, urlsafe) {
        if (urlsafe === void 0) {
          urlsafe = false;
        }
        return urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);
      };
      var encodeURI2 = function(src) {
        return encode2(src, true);
      };
      var re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
      var cb_btou = function(cccc) {
        switch (cccc.length) {
          case 4:
            var cp = (7 & cccc.charCodeAt(0)) << 18 | (63 & cccc.charCodeAt(1)) << 12 | (63 & cccc.charCodeAt(2)) << 6 | 63 & cccc.charCodeAt(3), offset = cp - 65536;
            return _fromCC((offset >>> 10) + 55296) + _fromCC((offset & 1023) + 56320);
          case 3:
            return _fromCC((15 & cccc.charCodeAt(0)) << 12 | (63 & cccc.charCodeAt(1)) << 6 | 63 & cccc.charCodeAt(2));
          default:
            return _fromCC((31 & cccc.charCodeAt(0)) << 6 | 63 & cccc.charCodeAt(1));
        }
      };
      var btou = function(b6) {
        return b6.replace(re_btou, cb_btou);
      };
      var atobPolyfill = function(asc) {
        asc = asc.replace(/\s+/g, "");
        if (!b64re.test(asc))
          throw new TypeError("malformed base64.");
        asc += "==".slice(2 - (asc.length & 3));
        var u24, bin = "", r1, r22;
        for (var i6 = 0; i6 < asc.length; ) {
          u24 = b64tab[asc.charAt(i6++)] << 18 | b64tab[asc.charAt(i6++)] << 12 | (r1 = b64tab[asc.charAt(i6++)]) << 6 | (r22 = b64tab[asc.charAt(i6++)]);
          bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r22 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
        }
        return bin;
      };
      var _atob = _hasatob ? function(asc) {
        return atob(_tidyB64(asc));
      } : _hasBuffer ? function(asc) {
        return Buffer.from(asc, "base64").toString("binary");
      } : atobPolyfill;
      var _toUint8Array = _hasBuffer ? function(a6) {
        return _U8Afrom(Buffer.from(a6, "base64"));
      } : function(a6) {
        return _U8Afrom(_atob(a6), function(c6) {
          return c6.charCodeAt(0);
        });
      };
      var toUint8Array3 = function(a6) {
        return _toUint8Array(_unURI(a6));
      };
      var _decode = _hasBuffer ? function(a6) {
        return Buffer.from(a6, "base64").toString("utf8");
      } : _TD ? function(a6) {
        return _TD.decode(_toUint8Array(a6));
      } : function(a6) {
        return btou(_atob(a6));
      };
      var _unURI = function(a6) {
        return _tidyB64(a6.replace(/[-_]/g, function(m0) {
          return m0 == "-" ? "+" : "/";
        }));
      };
      var decode3 = function(src) {
        return _decode(_unURI(src));
      };
      var isValid = function(src) {
        if (typeof src !== "string")
          return false;
        var s6 = src.replace(/\s+/g, "").replace(/={0,2}$/, "");
        return !/[^\s0-9a-zA-Z\+/]/.test(s6) || !/[^\s0-9a-zA-Z\-_]/.test(s6);
      };
      var _noEnum = function(v7) {
        return {
          value: v7,
          enumerable: false,
          writable: true,
          configurable: true
        };
      };
      var extendString = function() {
        var _add = function(name, body) {
          return Object.defineProperty(String.prototype, name, _noEnum(body));
        };
        _add("fromBase64", function() {
          return decode3(this);
        });
        _add("toBase64", function(urlsafe) {
          return encode2(this, urlsafe);
        });
        _add("toBase64URI", function() {
          return encode2(this, true);
        });
        _add("toBase64URL", function() {
          return encode2(this, true);
        });
        _add("toUint8Array", function() {
          return toUint8Array3(this);
        });
      };
      var extendUint8Array = function() {
        var _add = function(name, body) {
          return Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));
        };
        _add("toBase64", function(urlsafe) {
          return fromUint8Array(this, urlsafe);
        });
        _add("toBase64URI", function() {
          return fromUint8Array(this, true);
        });
        _add("toBase64URL", function() {
          return fromUint8Array(this, true);
        });
      };
      var extendBuiltins = function() {
        extendString();
        extendUint8Array();
      };
      var gBase64 = {
        version: version2,
        VERSION: VERSION2,
        atob: _atob,
        atobPolyfill,
        btoa: _btoa,
        btoaPolyfill,
        fromBase64: decode3,
        toBase64: encode2,
        encode: encode2,
        encodeURI: encodeURI2,
        encodeURL: encodeURI2,
        utob,
        btou,
        decode: decode3,
        isValid,
        fromUint8Array,
        toUint8Array: toUint8Array3,
        extendString,
        extendUint8Array,
        extendBuiltins
      };
      gBase64.Base64 = {};
      Object.keys(gBase64).forEach(function(k6) {
        return gBase64.Base64[k6] = gBase64[k6];
      });
      return gBase64;
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/auth/BasicAuth.js
var require_BasicAuth = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/auth/BasicAuth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BasicAuth = void 0;
    var js_base64_1 = require_base64();
    var BASIC_AUTH_HEADER_PREFIX = /^Basic /i;
    exports2.BasicAuth = {
      toAuthorizationHeader: (basicAuth) => {
        if (basicAuth == null) {
          return void 0;
        }
        const token = js_base64_1.Base64.encode(`${basicAuth.username}:${basicAuth.password}`);
        return `Basic ${token}`;
      },
      fromAuthorizationHeader: (header) => {
        const credentials = header.replace(BASIC_AUTH_HEADER_PREFIX, "");
        const decoded = js_base64_1.Base64.decode(credentials);
        const [username, password] = decoded.split(":", 2);
        if (username == null || password == null) {
          throw new Error("Invalid basic auth");
        }
        return {
          username,
          password
        };
      }
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/auth/BearerToken.js
var require_BearerToken = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/auth/BearerToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BearerToken = void 0;
    var BEARER_AUTH_HEADER_PREFIX = /^Bearer /i;
    exports2.BearerToken = {
      toAuthorizationHeader: (token) => {
        if (token == null) {
          return void 0;
        }
        return `Bearer ${token}`;
      },
      fromAuthorizationHeader: (header) => {
        return header.replace(BEARER_AUTH_HEADER_PREFIX, "").trim();
      }
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/auth/index.js
var require_auth = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/auth/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BearerToken = exports2.BasicAuth = void 0;
    var BasicAuth_1 = require_BasicAuth();
    Object.defineProperty(exports2, "BasicAuth", { enumerable: true, get: function() {
      return BasicAuth_1.BasicAuth;
    } });
    var BearerToken_1 = require_BearerToken();
    Object.defineProperty(exports2, "BearerToken", { enumerable: true, get: function() {
      return BearerToken_1.BearerToken;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/streaming-fetcher/Stream.js
var require_Stream = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/streaming-fetcher/Stream.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues2 = exports2 && exports2.__asyncValues || function(o6) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m6 = o6[Symbol.asyncIterator], i6;
      return m6 ? m6.call(o6) : (o6 = typeof __values === "function" ? __values(o6) : o6[Symbol.iterator](), i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
        return this;
      }, i6);
      function verb(n6) {
        i6[n6] = o6[n6] && function(v7) {
          return new Promise(function(resolve2, reject) {
            v7 = o6[n6](v7), settle(resolve2, reject, v7.done, v7.value);
          });
        };
      }
      function settle(resolve2, reject, d6, v7) {
        Promise.resolve(v7).then(function(v8) {
          resolve2({ value: v8, done: d6 });
        }, reject);
      }
    };
    var __await3 = exports2 && exports2.__await || function(v7) {
      return this instanceof __await3 ? (this.v = v7, this) : new __await3(v7);
    };
    var __asyncGenerator3 = exports2 && exports2.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g7 = generator.apply(thisArg, _arguments || []), i6, q6 = [];
      return i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
        return this;
      }, i6;
      function verb(n6) {
        if (g7[n6])
          i6[n6] = function(v7) {
            return new Promise(function(a6, b6) {
              q6.push([n6, v7, a6, b6]) > 1 || resume(n6, v7);
            });
          };
      }
      function resume(n6, v7) {
        try {
          step(g7[n6](v7));
        } catch (e6) {
          settle(q6[0][3], e6);
        }
      }
      function step(r6) {
        r6.value instanceof __await3 ? Promise.resolve(r6.value.v).then(fulfill, reject) : settle(q6[0][2], r6);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f6, v7) {
        if (f6(v7), q6.shift(), q6.length)
          resume(q6[0][0], q6[0][1]);
      }
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readableStreamAsyncIterable = exports2.Stream = void 0;
    var runtime_1 = require_runtime2();
    var DATA_PREFIX = "data:";
    var Stream3 = class {
      constructor({ stream, parse: parse2, eventShape, signal }) {
        this.controller = new AbortController();
        this.stream = stream;
        this.parse = parse2;
        if (eventShape.type === "sse") {
          this.prefix = DATA_PREFIX;
          this.messageTerminator = "\n";
          this.streamTerminator = eventShape.streamTerminator;
        } else {
          this.messageTerminator = eventShape.messageTerminator;
        }
        signal === null || signal === void 0 ? void 0 : signal.addEventListener("abort", () => this.controller.abort());
      }
      iterMessages() {
        return __asyncGenerator3(this, arguments, function* iterMessages_1() {
          var e_1, _a3;
          this.controller.signal;
          const stream = readableStreamAsyncIterable2(this.stream);
          let buf = "";
          let prefixSeen = false;
          try {
            for (var stream_1 = __asyncValues2(stream), stream_1_1; stream_1_1 = yield __await3(stream_1.next()), !stream_1_1.done; ) {
              const chunk = stream_1_1.value;
              buf += this.decodeChunk(chunk);
              let terminatorIndex;
              while ((terminatorIndex = buf.indexOf(this.messageTerminator)) >= 0) {
                let line = buf.slice(0, terminatorIndex + 1);
                buf = buf.slice(terminatorIndex + 1);
                if (line.length === 0) {
                  continue;
                }
                if (!prefixSeen && this.prefix != null) {
                  const prefixIndex = line.indexOf(this.prefix);
                  if (prefixIndex === -1) {
                    continue;
                  }
                  prefixSeen = true;
                  line = line.slice(prefixIndex + this.prefix.length);
                }
                if (this.streamTerminator != null && line.includes(this.streamTerminator)) {
                  return yield __await3(void 0);
                }
                const message = yield __await3(this.parse(JSON.parse(line)));
                yield yield __await3(message);
                prefixSeen = false;
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (stream_1_1 && !stream_1_1.done && (_a3 = stream_1.return))
                yield __await3(_a3.call(stream_1));
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        });
      }
      [Symbol.asyncIterator]() {
        return __asyncGenerator3(this, arguments, function* _a3() {
          var e_2, _b;
          try {
            for (var _c = __asyncValues2(this.iterMessages()), _d; _d = yield __await3(_c.next()), !_d.done; ) {
              const message = _d.value;
              yield yield __await3(message);
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_d && !_d.done && (_b = _c.return))
                yield __await3(_b.call(_c));
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        });
      }
      decodeChunk(chunk) {
        let decoded = "";
        if (runtime_1.RUNTIME.type === "node" && typeof chunk != "undefined") {
          decoded += Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
        } else if (runtime_1.RUNTIME.type === "browser" && typeof TextDecoder !== "undefined") {
          const decoder = new TextDecoder("utf8");
          decoded += decoder.decode(chunk);
        }
        return decoded;
      }
    };
    exports2.Stream = Stream3;
    function readableStreamAsyncIterable2(stream) {
      if (stream[Symbol.asyncIterator]) {
        return stream;
      }
      const reader = stream.getReader();
      return {
        next() {
          return __awaiter2(this, void 0, void 0, function* () {
            try {
              const result = yield reader.read();
              if (result === null || result === void 0 ? void 0 : result.done) {
                reader.releaseLock();
              }
              return result;
            } catch (e6) {
              reader.releaseLock();
              throw e6;
            }
          });
        },
        return() {
          return __awaiter2(this, void 0, void 0, function* () {
            const cancelPromise = reader.cancel();
            reader.releaseLock();
            yield cancelPromise;
            return { done: true, value: void 0 };
          });
        },
        [Symbol.asyncIterator]() {
          return this;
        }
      };
    }
    exports2.readableStreamAsyncIterable = readableStreamAsyncIterable2;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/streaming-fetcher/index.js
var require_streaming_fetcher = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/streaming-fetcher/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Stream = void 0;
    var Stream_1 = require_Stream();
    Object.defineProperty(exports2, "Stream", { enumerable: true, get: function() {
      return Stream_1.Stream;
    } });
  }
});

// ../../node_modules/.pnpm/form-data-encoder@4.0.2/node_modules/form-data-encoder/lib/index.cjs
var require_lib3 = __commonJS({
  "../../node_modules/.pnpm/form-data-encoder@4.0.2/node_modules/form-data-encoder/lib/index.cjs"(exports2, module2) {
    "use strict";
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp3({}, "__esModule", { value: true }), mod);
    var __accessCheck = (obj, member, msg) => {
      if (!member.has(obj))
        throw TypeError("Cannot " + msg);
    };
    var __privateGet = (obj, member, getter) => {
      __accessCheck(obj, member, "read from private field");
      return getter ? getter.call(obj) : member.get(obj);
    };
    var __privateAdd = (obj, member, value) => {
      if (member.has(obj))
        throw TypeError("Cannot add the same private member more than once");
      member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
    };
    var __privateSet = (obj, member, value, setter) => {
      __accessCheck(obj, member, "write to private field");
      setter ? setter.call(obj, value) : member.set(obj, value);
      return value;
    };
    var __privateMethod = (obj, member, method) => {
      __accessCheck(obj, member, "access private method");
      return method;
    };
    var src_exports2 = {};
    __export2(src_exports2, {
      FormDataEncoder: () => FormDataEncoder2,
      isFile: () => isFile2,
      isFormData: () => isFormData2
    });
    module2.exports = __toCommonJS2(src_exports2);
    var isFunction4 = (value) => typeof value === "function";
    var isAsyncIterable = (value) => isFunction4(value[Symbol.asyncIterator]);
    var MAX_CHUNK_SIZE = 65536;
    function* chunk(value) {
      if (value.byteLength <= MAX_CHUNK_SIZE) {
        yield value;
        return;
      }
      let offset = 0;
      while (offset < value.byteLength) {
        const size = Math.min(value.byteLength - offset, MAX_CHUNK_SIZE);
        const buffer = value.buffer.slice(offset, offset + size);
        offset += buffer.byteLength;
        yield new Uint8Array(buffer);
      }
    }
    async function* readStream(readable) {
      const reader = readable.getReader();
      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        yield value;
      }
    }
    async function* chunkStream(stream) {
      for await (const value of stream) {
        yield* chunk(value);
      }
    }
    var getStreamIterator = (source) => {
      if (isAsyncIterable(source)) {
        return chunkStream(source);
      }
      if (isFunction4(source.getReader)) {
        return chunkStream(readStream(source));
      }
      throw new TypeError(
        "Unsupported data source: Expected either ReadableStream or async iterable."
      );
    };
    var alphabet2 = "abcdefghijklmnopqrstuvwxyz0123456789";
    function createBoundary2() {
      let size = 16;
      let res = "";
      while (size--) {
        res += alphabet2[Math.random() * alphabet2.length << 0];
      }
      return res;
    }
    var normalizeValue3 = (value) => String(value).replace(/\r|\n/g, (match, i6, str2) => {
      if (match === "\r" && str2[i6 + 1] !== "\n" || match === "\n" && str2[i6 - 1] !== "\r") {
        return "\r\n";
      }
      return match;
    });
    var getType3 = (value) => Object.prototype.toString.call(value).slice(8, -1).toLowerCase();
    function isPlainObject3(value) {
      if (getType3(value) !== "object") {
        return false;
      }
      const pp = Object.getPrototypeOf(value);
      if (pp === null || pp === void 0) {
        return true;
      }
      const Ctor = pp.constructor && pp.constructor.toString();
      return Ctor === Object.toString();
    }
    function getProperty(target, prop) {
      if (typeof prop === "string") {
        for (const [name, value] of Object.entries(target)) {
          if (prop.toLowerCase() === name.toLowerCase()) {
            return value;
          }
        }
      }
      return void 0;
    }
    var proxyHeaders = (object) => new Proxy(
      object,
      {
        get: (target, prop) => getProperty(target, prop),
        has: (target, prop) => getProperty(target, prop) !== void 0
      }
    );
    var isFormData2 = (value) => Boolean(
      value && isFunction4(value.constructor) && value[Symbol.toStringTag] === "FormData" && isFunction4(value.append) && isFunction4(value.getAll) && isFunction4(value.entries) && isFunction4(value[Symbol.iterator])
    );
    var escapeName2 = (name) => String(name).replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/"/g, "%22");
    var isFile2 = (value) => Boolean(
      value && typeof value === "object" && isFunction4(value.constructor) && value[Symbol.toStringTag] === "File" && isFunction4(value.stream) && value.name != null
    );
    var defaultOptions2 = {
      enableAdditionalHeaders: false
    };
    var readonlyProp = { writable: false, configurable: false };
    var _CRLF;
    var _CRLF_BYTES;
    var _CRLF_BYTES_LENGTH;
    var _DASHES;
    var _encoder;
    var _footer;
    var _form;
    var _options;
    var _getFieldHeader;
    var getFieldHeader_fn;
    var _getContentLength;
    var getContentLength_fn;
    var FormDataEncoder2 = class {
      constructor(form, boundaryOrOptions, options) {
        __privateAdd(this, _getFieldHeader);
        __privateAdd(this, _getContentLength);
        __privateAdd(this, _CRLF, "\r\n");
        __privateAdd(this, _CRLF_BYTES, void 0);
        __privateAdd(this, _CRLF_BYTES_LENGTH, void 0);
        __privateAdd(this, _DASHES, "-".repeat(2));
        __privateAdd(this, _encoder, new TextEncoder());
        __privateAdd(this, _footer, void 0);
        __privateAdd(this, _form, void 0);
        __privateAdd(this, _options, void 0);
        if (!isFormData2(form)) {
          throw new TypeError("Expected first argument to be a FormData instance.");
        }
        let boundary;
        if (isPlainObject3(boundaryOrOptions)) {
          options = boundaryOrOptions;
        } else {
          boundary = boundaryOrOptions;
        }
        if (!boundary) {
          boundary = createBoundary2();
        }
        if (typeof boundary !== "string") {
          throw new TypeError("Expected boundary argument to be a string.");
        }
        if (options && !isPlainObject3(options)) {
          throw new TypeError("Expected options argument to be an object.");
        }
        __privateSet(this, _form, Array.from(form.entries()));
        __privateSet(this, _options, { ...defaultOptions2, ...options });
        __privateSet(this, _CRLF_BYTES, __privateGet(this, _encoder).encode(__privateGet(this, _CRLF)));
        __privateSet(this, _CRLF_BYTES_LENGTH, __privateGet(this, _CRLF_BYTES).byteLength);
        this.boundary = `form-data-boundary-${boundary}`;
        this.contentType = `multipart/form-data; boundary=${this.boundary}`;
        __privateSet(this, _footer, __privateGet(this, _encoder).encode(
          `${__privateGet(this, _DASHES)}${this.boundary}${__privateGet(this, _DASHES)}${__privateGet(this, _CRLF).repeat(2)}`
        ));
        const headers = {
          "Content-Type": this.contentType
        };
        const contentLength = __privateMethod(this, _getContentLength, getContentLength_fn).call(this);
        if (contentLength) {
          this.contentLength = contentLength;
          headers["Content-Length"] = contentLength;
        }
        this.headers = proxyHeaders(Object.freeze(headers));
        Object.defineProperties(this, {
          boundary: readonlyProp,
          contentType: readonlyProp,
          contentLength: readonlyProp,
          headers: readonlyProp
        });
      }
      /**
       * Creates an iterator allowing to go through form-data parts (with metadata).
       * This method **will not** read the files and **will not** split values big into smaller chunks.
       *
       * Using this method, you can convert form-data content into Blob:
       *
       * @example
       *
       * ```ts
       * import {Readable} from "stream"
       *
       * import {FormDataEncoder} from "form-data-encoder"
       *
       * import {FormData} from "formdata-polyfill/esm-min.js"
       * import {fileFrom} from "fetch-blob/form.js"
       * import {File} from "fetch-blob/file.js"
       * import {Blob} from "fetch-blob"
       *
       * import fetch from "node-fetch"
       *
       * const form = new FormData()
       *
       * form.set("field", "Just a random string")
       * form.set("file", new File(["Using files is class amazing"]))
       * form.set("fileFromPath", await fileFrom("path/to/a/file.txt"))
       *
       * const encoder = new FormDataEncoder(form)
       *
       * const options = {
       *   method: "post",
       *   body: new Blob(encoder, {type: encoder.contentType})
       * }
       *
       * const response = await fetch("https://httpbin.org/post", options)
       *
       * console.log(await response.json())
       * ```
       */
      *values() {
        for (const [name, raw] of __privateGet(this, _form)) {
          const value = isFile2(raw) ? raw : __privateGet(this, _encoder).encode(
            normalizeValue3(raw)
          );
          yield __privateMethod(this, _getFieldHeader, getFieldHeader_fn).call(this, name, value);
          yield value;
          yield __privateGet(this, _CRLF_BYTES);
        }
        yield __privateGet(this, _footer);
      }
      /**
       * Creates an async iterator allowing to perform the encoding by portions.
       * This method reads through files and splits big values into smaller pieces (65536 bytes per each).
       *
       * @example
       *
       * ```ts
       * import {Readable} from "stream"
       *
       * import {FormData, File, fileFromPath} from "formdata-node"
       * import {FormDataEncoder} from "form-data-encoder"
       *
       * import fetch from "node-fetch"
       *
       * const form = new FormData()
       *
       * form.set("field", "Just a random string")
       * form.set("file", new File(["Using files is class amazing"], "file.txt"))
       * form.set("fileFromPath", await fileFromPath("path/to/a/file.txt"))
       *
       * const encoder = new FormDataEncoder(form)
       *
       * const options = {
       *   method: "post",
       *   headers: encoder.headers,
       *   body: Readable.from(encoder.encode()) // or Readable.from(encoder)
       * }
       *
       * const response = await fetch("https://httpbin.org/post", options)
       *
       * console.log(await response.json())
       * ```
       */
      async *encode() {
        for (const part of this.values()) {
          if (isFile2(part)) {
            yield* getStreamIterator(part.stream());
          } else {
            yield* chunk(part);
          }
        }
      }
      /**
       * Creates an iterator allowing to read through the encoder data using for...of loops
       */
      [Symbol.iterator]() {
        return this.values();
      }
      /**
       * Creates an **async** iterator allowing to read through the encoder data using for-await...of loops
       */
      [Symbol.asyncIterator]() {
        return this.encode();
      }
    };
    _CRLF = /* @__PURE__ */ new WeakMap();
    _CRLF_BYTES = /* @__PURE__ */ new WeakMap();
    _CRLF_BYTES_LENGTH = /* @__PURE__ */ new WeakMap();
    _DASHES = /* @__PURE__ */ new WeakMap();
    _encoder = /* @__PURE__ */ new WeakMap();
    _footer = /* @__PURE__ */ new WeakMap();
    _form = /* @__PURE__ */ new WeakMap();
    _options = /* @__PURE__ */ new WeakMap();
    _getFieldHeader = /* @__PURE__ */ new WeakSet();
    getFieldHeader_fn = function(name, value) {
      let header = "";
      header += `${__privateGet(this, _DASHES)}${this.boundary}${__privateGet(this, _CRLF)}`;
      header += `Content-Disposition: form-data; name="${escapeName2(name)}"`;
      if (isFile2(value)) {
        header += `; filename="${escapeName2(value.name)}"${__privateGet(this, _CRLF)}`;
        header += `Content-Type: ${value.type || "application/octet-stream"}`;
      }
      if (__privateGet(this, _options).enableAdditionalHeaders === true) {
        const size = isFile2(value) ? value.size : value.byteLength;
        if (size != null && !isNaN(size)) {
          header += `${__privateGet(this, _CRLF)}Content-Length: ${size}`;
        }
      }
      return __privateGet(this, _encoder).encode(`${header}${__privateGet(this, _CRLF).repeat(2)}`);
    };
    _getContentLength = /* @__PURE__ */ new WeakSet();
    getContentLength_fn = function() {
      let length = 0;
      for (const [name, raw] of __privateGet(this, _form)) {
        const value = isFile2(raw) ? raw : __privateGet(this, _encoder).encode(
          normalizeValue3(raw)
        );
        const size = isFile2(value) ? value.size : value.byteLength;
        if (size == null || isNaN(size)) {
          return void 0;
        }
        length += __privateMethod(this, _getFieldHeader, getFieldHeader_fn).call(this, name, value).byteLength;
        length += size;
        length += __privateGet(this, _CRLF_BYTES_LENGTH);
      }
      return String(length + __privateGet(this, _footer).byteLength);
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/form-data-utils/FormDataWrapper.js
var require_FormDataWrapper = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/form-data-utils/FormDataWrapper.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FormDataWrapper = void 0;
    var readable_stream_1 = require_ours();
    var runtime_1 = require_runtime2();
    var FormDataRequestBody = class {
      constructor(fd) {
        this.fd = fd;
      }
      setup() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this.encoder == null && runtime_1.RUNTIME.type === "node") {
            this.encoder = new (yield Promise.resolve().then(() => __importStar2(require_lib3()))).FormDataEncoder(this.fd);
          }
        });
      }
      /**
       * @returns the multipart form data request
       */
      getBody() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (runtime_1.RUNTIME.type !== "node") {
            return this.fd;
          } else {
            if (this.encoder == null) {
              yield this.setup();
            }
            return readable_stream_1.Readable.from(this.encoder);
          }
        });
      }
      /**
       * @returns headers that need to be added to the multipart form data request
       */
      getHeaders() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (runtime_1.RUNTIME.type !== "node") {
            return {};
          } else {
            if (this.encoder == null) {
              yield this.setup();
            }
            return {
              "Content-Length": this.encoder.length
            };
          }
        });
      }
    };
    var FormDataWrapper = class {
      append(name, value) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this.fd == null) {
            if (runtime_1.RUNTIME.type === "node") {
              this.fd = new (yield Promise.resolve().then(() => __importStar2(require_form_data()))).FormData();
            } else {
              this.fd = new (yield Promise.resolve().then(() => __importStar2(require_form_data2()))).default();
            }
          }
          this.fd.append(name, value);
        });
      }
      getRequest() {
        return new FormDataRequestBody(this.fd);
      }
    };
    exports2.FormDataWrapper = FormDataWrapper;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/form-data-utils/index.js
var require_form_data_utils = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/form-data-utils/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_FormDataWrapper(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/Schema.js
var require_Schema = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/Schema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SchemaType = void 0;
    exports2.SchemaType = {
      DATE: "date",
      ENUM: "enum",
      LIST: "list",
      STRING_LITERAL: "stringLiteral",
      BOOLEAN_LITERAL: "booleanLiteral",
      OBJECT: "object",
      ANY: "any",
      BOOLEAN: "boolean",
      NUMBER: "number",
      STRING: "string",
      UNKNOWN: "unknown",
      RECORD: "record",
      SET: "set",
      UNION: "union",
      UNDISCRIMINATED_UNION: "undiscriminatedUnion",
      OPTIONAL: "optional"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/getErrorMessageForIncorrectType.js
var require_getErrorMessageForIncorrectType = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/getErrorMessageForIncorrectType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getErrorMessageForIncorrectType = void 0;
    function getErrorMessageForIncorrectType(value, expectedType) {
      return `Expected ${expectedType}. Received ${getTypeAsString(value)}.`;
    }
    exports2.getErrorMessageForIncorrectType = getErrorMessageForIncorrectType;
    function getTypeAsString(value) {
      if (Array.isArray(value)) {
        return "list";
      }
      if (value === null) {
        return "null";
      }
      switch (typeof value) {
        case "string":
          return `"${value}"`;
        case "number":
        case "boolean":
        case "undefined":
          return `${value}`;
      }
      return typeof value;
    }
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/maybeSkipValidation.js
var require_maybeSkipValidation = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/maybeSkipValidation.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.maybeSkipValidation = void 0;
    function maybeSkipValidation(schema) {
      return Object.assign(Object.assign({}, schema), { json: transformAndMaybeSkipValidation(schema.json), parse: transformAndMaybeSkipValidation(schema.parse) });
    }
    exports2.maybeSkipValidation = maybeSkipValidation;
    function transformAndMaybeSkipValidation(transform) {
      return (value, opts) => __awaiter2(this, void 0, void 0, function* () {
        const transformed = yield transform(value, opts);
        const { skipValidation = false } = opts !== null && opts !== void 0 ? opts : {};
        if (!transformed.ok && skipValidation) {
          console.warn([
            "Failed to validate.",
            ...transformed.errors.map((error2) => "  - " + (error2.path.length > 0 ? `${error2.path.join(".")}: ${error2.message}` : error2.message))
          ].join("\n"));
          return {
            ok: true,
            value
          };
        } else {
          return transformed;
        }
      });
    }
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/schema-utils/stringifyValidationErrors.js
var require_stringifyValidationErrors = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/schema-utils/stringifyValidationErrors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringifyValidationError = void 0;
    function stringifyValidationError(error2) {
      if (error2.path.length === 0) {
        return error2.message;
      }
      return `${error2.path.join(" -> ")}: ${error2.message}`;
    }
    exports2.stringifyValidationError = stringifyValidationError;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/schema-utils/JsonError.js
var require_JsonError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/schema-utils/JsonError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JsonError = void 0;
    var stringifyValidationErrors_1 = require_stringifyValidationErrors();
    var JsonError = class _JsonError extends Error {
      constructor(errors2) {
        super(errors2.map(stringifyValidationErrors_1.stringifyValidationError).join("; "));
        this.errors = errors2;
        Object.setPrototypeOf(this, _JsonError.prototype);
      }
    };
    exports2.JsonError = JsonError;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/schema-utils/ParseError.js
var require_ParseError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/schema-utils/ParseError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ParseError = void 0;
    var stringifyValidationErrors_1 = require_stringifyValidationErrors();
    var ParseError = class _ParseError extends Error {
      constructor(errors2) {
        super(errors2.map(stringifyValidationErrors_1.stringifyValidationError).join("; "));
        this.errors = errors2;
        Object.setPrototypeOf(this, _ParseError.prototype);
      }
    };
    exports2.ParseError = ParseError;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/schema-utils/getSchemaUtils.js
var require_getSchemaUtils = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/schema-utils/getSchemaUtils.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = exports2.optional = exports2.getSchemaUtils = void 0;
    var Schema_1 = require_Schema();
    var JsonError_1 = require_JsonError();
    var ParseError_1 = require_ParseError();
    function getSchemaUtils(schema) {
      return {
        optional: () => optional(schema),
        transform: (transformer) => transform(schema, transformer),
        parseOrThrow: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
          const parsed = yield schema.parse(raw, opts);
          if (parsed.ok) {
            return parsed.value;
          }
          throw new ParseError_1.ParseError(parsed.errors);
        }),
        jsonOrThrow: (parsed, opts) => __awaiter2(this, void 0, void 0, function* () {
          const raw = yield schema.json(parsed, opts);
          if (raw.ok) {
            return raw.value;
          }
          throw new JsonError_1.JsonError(raw.errors);
        })
      };
    }
    exports2.getSchemaUtils = getSchemaUtils;
    function optional(schema) {
      const baseSchema = {
        parse: (raw, opts) => {
          if (raw == null) {
            return {
              ok: true,
              value: void 0
            };
          }
          return schema.parse(raw, opts);
        },
        json: (parsed, opts) => {
          if (parsed == null) {
            return {
              ok: true,
              value: null
            };
          }
          return schema.json(parsed, opts);
        },
        getType: () => Schema_1.SchemaType.OPTIONAL
      };
      return Object.assign(Object.assign({}, baseSchema), getSchemaUtils(baseSchema));
    }
    exports2.optional = optional;
    function transform(schema, transformer) {
      const baseSchema = {
        parse: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
          const parsed = yield schema.parse(raw, opts);
          if (!parsed.ok) {
            return parsed;
          }
          return {
            ok: true,
            value: transformer.transform(parsed.value)
          };
        }),
        json: (transformed, opts) => __awaiter2(this, void 0, void 0, function* () {
          const parsed = yield transformer.untransform(transformed);
          return schema.json(parsed, opts);
        }),
        getType: () => schema.getType()
      };
      return Object.assign(Object.assign({}, baseSchema), getSchemaUtils(baseSchema));
    }
    exports2.transform = transform;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/schema-utils/index.js
var require_schema_utils = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/schema-utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ParseError = exports2.JsonError = exports2.transform = exports2.optional = exports2.getSchemaUtils = void 0;
    var getSchemaUtils_1 = require_getSchemaUtils();
    Object.defineProperty(exports2, "getSchemaUtils", { enumerable: true, get: function() {
      return getSchemaUtils_1.getSchemaUtils;
    } });
    Object.defineProperty(exports2, "optional", { enumerable: true, get: function() {
      return getSchemaUtils_1.optional;
    } });
    Object.defineProperty(exports2, "transform", { enumerable: true, get: function() {
      return getSchemaUtils_1.transform;
    } });
    var JsonError_1 = require_JsonError();
    Object.defineProperty(exports2, "JsonError", { enumerable: true, get: function() {
      return JsonError_1.JsonError;
    } });
    var ParseError_1 = require_ParseError();
    Object.defineProperty(exports2, "ParseError", { enumerable: true, get: function() {
      return ParseError_1.ParseError;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/date/date.js
var require_date = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/date/date.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.date = void 0;
    var Schema_1 = require_Schema();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    var maybeSkipValidation_1 = require_maybeSkipValidation();
    var schema_utils_1 = require_schema_utils();
    var ISO_8601_REGEX = /^([+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([.,]\d+(?!:))?)?(\17[0-5]\d([.,]\d+)?)?([zZ]|([+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
    function date() {
      const baseSchema = {
        parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
          if (typeof raw !== "string") {
            return {
              ok: false,
              errors: [
                {
                  path: breadcrumbsPrefix,
                  message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(raw, "string")
                }
              ]
            };
          }
          if (!ISO_8601_REGEX.test(raw)) {
            return {
              ok: false,
              errors: [
                {
                  path: breadcrumbsPrefix,
                  message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(raw, "ISO 8601 date string")
                }
              ]
            };
          }
          return {
            ok: true,
            value: new Date(raw)
          };
        },
        json: (date2, { breadcrumbsPrefix = [] } = {}) => {
          if (date2 instanceof Date) {
            return {
              ok: true,
              value: date2.toISOString()
            };
          } else {
            return {
              ok: false,
              errors: [
                {
                  path: breadcrumbsPrefix,
                  message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(date2, "Date object")
                }
              ]
            };
          }
        },
        getType: () => Schema_1.SchemaType.DATE
      };
      return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.date = date;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/date/index.js
var require_date2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/date/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.date = void 0;
    var date_1 = require_date();
    Object.defineProperty(exports2, "date", { enumerable: true, get: function() {
      return date_1.date;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/createIdentitySchemaCreator.js
var require_createIdentitySchemaCreator = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/createIdentitySchemaCreator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createIdentitySchemaCreator = void 0;
    var schema_utils_1 = require_schema_utils();
    var maybeSkipValidation_1 = require_maybeSkipValidation();
    function createIdentitySchemaCreator(schemaType, validate) {
      return () => {
        const baseSchema = {
          parse: validate,
          json: validate,
          getType: () => schemaType
        };
        return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
      };
    }
    exports2.createIdentitySchemaCreator = createIdentitySchemaCreator;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/enum/enum.js
var require_enum = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/enum/enum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.enum_ = void 0;
    var Schema_1 = require_Schema();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    function enum_(values) {
      const validValues = new Set(values);
      const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.ENUM, (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
        if (typeof value !== "string") {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "string")
              }
            ]
          };
        }
        if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "enum")
              }
            ]
          };
        }
        return {
          ok: true,
          value
        };
      });
      return schemaCreator();
    }
    exports2.enum_ = enum_;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/enum/index.js
var require_enum2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/enum/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.enum_ = void 0;
    var enum_1 = require_enum();
    Object.defineProperty(exports2, "enum_", { enumerable: true, get: function() {
      return enum_1.enum_;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/lazy/lazy.js
var require_lazy = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/lazy/lazy.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getMemoizedSchema = exports2.constructLazyBaseSchema = exports2.lazy = void 0;
    var schema_utils_1 = require_schema_utils();
    function lazy(getter) {
      const baseSchema = constructLazyBaseSchema(getter);
      return Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.lazy = lazy;
    function constructLazyBaseSchema(getter) {
      return {
        parse: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
          return (yield getMemoizedSchema(getter)).parse(raw, opts);
        }),
        json: (parsed, opts) => __awaiter2(this, void 0, void 0, function* () {
          return (yield getMemoizedSchema(getter)).json(parsed, opts);
        }),
        getType: () => __awaiter2(this, void 0, void 0, function* () {
          return (yield getMemoizedSchema(getter)).getType();
        })
      };
    }
    exports2.constructLazyBaseSchema = constructLazyBaseSchema;
    function getMemoizedSchema(getter) {
      return __awaiter2(this, void 0, void 0, function* () {
        const castedGetter = getter;
        if (castedGetter.__zurg_memoized == null) {
          castedGetter.__zurg_memoized = yield getter();
        }
        return castedGetter.__zurg_memoized;
      });
    }
    exports2.getMemoizedSchema = getMemoizedSchema;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/entries.js
var require_entries = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/entries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.entries = void 0;
    function entries(object) {
      return Object.entries(object);
    }
    exports2.entries = entries;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/filterObject.js
var require_filterObject = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/filterObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filterObject = void 0;
    function filterObject(obj, keysToInclude) {
      const keysToIncludeSet = new Set(keysToInclude);
      return Object.entries(obj).reduce((acc, [key, value]) => {
        if (keysToIncludeSet.has(key)) {
          acc[key] = value;
        }
        return acc;
      }, {});
    }
    exports2.filterObject = filterObject;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/isPlainObject.js
var require_isPlainObject = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/isPlainObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isPlainObject = void 0;
    function isPlainObject3(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      if (Object.getPrototypeOf(value) === null) {
        return true;
      }
      let proto = value;
      while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
      }
      return Object.getPrototypeOf(value) === proto;
    }
    exports2.isPlainObject = isPlainObject3;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/keys.js
var require_keys = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/keys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.keys = void 0;
    function keys(object) {
      return Object.keys(object);
    }
    exports2.keys = keys;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/partition.js
var require_partition = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/utils/partition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.partition = void 0;
    function partition3(items, predicate) {
      const trueItems = [], falseItems = [];
      for (const item of items) {
        if (predicate(item)) {
          trueItems.push(item);
        } else {
          falseItems.push(item);
        }
      }
      return [trueItems, falseItems];
    }
    exports2.partition = partition3;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object-like/getObjectLikeUtils.js
var require_getObjectLikeUtils = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object-like/getObjectLikeUtils.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withParsedProperties = exports2.getObjectLikeUtils = void 0;
    var filterObject_1 = require_filterObject();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    var isPlainObject_1 = require_isPlainObject();
    var schema_utils_1 = require_schema_utils();
    function getObjectLikeUtils(schema) {
      return {
        withParsedProperties: (properties) => withParsedProperties(schema, properties)
      };
    }
    exports2.getObjectLikeUtils = getObjectLikeUtils;
    function withParsedProperties(objectLike, properties) {
      const objectSchema = {
        parse: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
          const parsedObject = yield objectLike.parse(raw, opts);
          if (!parsedObject.ok) {
            return parsedObject;
          }
          const additionalProperties = Object.entries(properties).reduce((processed, [key, value]) => {
            return Object.assign(Object.assign({}, processed), { [key]: typeof value === "function" ? value(parsedObject.value) : value });
          }, {});
          return {
            ok: true,
            value: Object.assign(Object.assign({}, parsedObject.value), additionalProperties)
          };
        }),
        json: (parsed, opts) => {
          var _a3;
          if (!(0, isPlainObject_1.isPlainObject)(parsed)) {
            return {
              ok: false,
              errors: [
                {
                  path: (_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [],
                  message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(parsed, "object")
                }
              ]
            };
          }
          const addedPropertyKeys = new Set(Object.keys(properties));
          const parsedWithoutAddedProperties = (0, filterObject_1.filterObject)(parsed, Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key)));
          return objectLike.json(parsedWithoutAddedProperties, opts);
        },
        getType: () => objectLike.getType()
      };
      return Object.assign(Object.assign(Object.assign({}, objectSchema), (0, schema_utils_1.getSchemaUtils)(objectSchema)), getObjectLikeUtils(objectSchema));
    }
    exports2.withParsedProperties = withParsedProperties;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object-like/index.js
var require_object_like = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object-like/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withParsedProperties = exports2.getObjectLikeUtils = void 0;
    var getObjectLikeUtils_1 = require_getObjectLikeUtils();
    Object.defineProperty(exports2, "getObjectLikeUtils", { enumerable: true, get: function() {
      return getObjectLikeUtils_1.getObjectLikeUtils;
    } });
    Object.defineProperty(exports2, "withParsedProperties", { enumerable: true, get: function() {
      return getObjectLikeUtils_1.withParsedProperties;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object/property.js
var require_property = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object/property.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isProperty = exports2.property = void 0;
    function property(rawKey, valueSchema) {
      return {
        rawKey,
        valueSchema,
        isProperty: true
      };
    }
    exports2.property = property;
    function isProperty(maybeProperty) {
      return maybeProperty.isProperty;
    }
    exports2.isProperty = isProperty;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object/object.js
var require_object = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object/object.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getObjectUtils = exports2.object = void 0;
    var Schema_1 = require_Schema();
    var entries_1 = require_entries();
    var filterObject_1 = require_filterObject();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    var isPlainObject_1 = require_isPlainObject();
    var keys_1 = require_keys();
    var maybeSkipValidation_1 = require_maybeSkipValidation();
    var partition_1 = require_partition();
    var object_like_1 = require_object_like();
    var schema_utils_1 = require_schema_utils();
    var property_1 = require_property();
    function object(schemas) {
      const baseSchema = {
        _getRawProperties: () => Promise.resolve(Object.entries(schemas).map(([parsedKey, propertySchema]) => (0, property_1.isProperty)(propertySchema) ? propertySchema.rawKey : parsedKey)),
        _getParsedProperties: () => Promise.resolve((0, keys_1.keys)(schemas)),
        parse: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
          const rawKeyToProperty = {};
          const requiredKeys = [];
          for (const [parsedKey, schemaOrObjectProperty] of (0, entries_1.entries)(schemas)) {
            const rawKey = (0, property_1.isProperty)(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
            const valueSchema = (0, property_1.isProperty)(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
            const property = {
              rawKey,
              parsedKey,
              valueSchema
            };
            rawKeyToProperty[rawKey] = property;
            if (isSchemaRequired(valueSchema)) {
              requiredKeys.push(rawKey);
            }
          }
          return validateAndTransformObject({
            value: raw,
            requiredKeys,
            getProperty: (rawKey) => {
              const property = rawKeyToProperty[rawKey];
              if (property == null) {
                return void 0;
              }
              return {
                transformedKey: property.parsedKey,
                transform: (propertyValue) => {
                  var _a3;
                  return property.valueSchema.parse(propertyValue, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], rawKey] }));
                }
              };
            },
            unrecognizedObjectKeys: opts === null || opts === void 0 ? void 0 : opts.unrecognizedObjectKeys,
            skipValidation: opts === null || opts === void 0 ? void 0 : opts.skipValidation,
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix
          });
        }),
        json: (parsed, opts) => __awaiter2(this, void 0, void 0, function* () {
          const requiredKeys = [];
          for (const [parsedKey, schemaOrObjectProperty] of (0, entries_1.entries)(schemas)) {
            const valueSchema = (0, property_1.isProperty)(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
            if (isSchemaRequired(valueSchema)) {
              requiredKeys.push(parsedKey);
            }
          }
          return validateAndTransformObject({
            value: parsed,
            requiredKeys,
            getProperty: (parsedKey) => {
              const property = schemas[parsedKey];
              if (property == null) {
                return void 0;
              }
              if ((0, property_1.isProperty)(property)) {
                return {
                  transformedKey: property.rawKey,
                  transform: (propertyValue) => {
                    var _a3;
                    return property.valueSchema.json(propertyValue, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], parsedKey] }));
                  }
                };
              } else {
                return {
                  transformedKey: parsedKey,
                  transform: (propertyValue) => {
                    var _a3;
                    return property.json(propertyValue, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], parsedKey] }));
                  }
                };
              }
            },
            unrecognizedObjectKeys: opts === null || opts === void 0 ? void 0 : opts.unrecognizedObjectKeys,
            skipValidation: opts === null || opts === void 0 ? void 0 : opts.skipValidation,
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix
          });
        }),
        getType: () => Schema_1.SchemaType.OBJECT
      };
      return Object.assign(Object.assign(Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
    }
    exports2.object = object;
    function validateAndTransformObject({ value, requiredKeys, getProperty, unrecognizedObjectKeys = "fail", skipValidation = false, breadcrumbsPrefix = [] }) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!(0, isPlainObject_1.isPlainObject)(value)) {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "object")
              }
            ]
          };
        }
        const missingRequiredKeys = new Set(requiredKeys);
        const errors2 = [];
        const transformed = {};
        for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
          const property = getProperty(preTransformedKey);
          if (property != null) {
            missingRequiredKeys.delete(preTransformedKey);
            const value2 = yield property.transform(preTransformedItemValue);
            if (value2.ok) {
              transformed[property.transformedKey] = value2.value;
            } else {
              transformed[preTransformedKey] = preTransformedItemValue;
              errors2.push(...value2.errors);
            }
          } else {
            switch (unrecognizedObjectKeys) {
              case "fail":
                errors2.push({
                  path: [...breadcrumbsPrefix, preTransformedKey],
                  message: `Unexpected key "${preTransformedKey}"`
                });
                break;
              case "strip":
                break;
              case "passthrough":
                transformed[preTransformedKey] = preTransformedItemValue;
                break;
            }
          }
        }
        errors2.push(...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
          path: breadcrumbsPrefix,
          message: `Missing required key "${key}"`
        })));
        if (errors2.length === 0 || skipValidation) {
          return {
            ok: true,
            value: transformed
          };
        } else {
          return {
            ok: false,
            errors: errors2
          };
        }
      });
    }
    function getObjectUtils(schema) {
      return {
        extend: (extension) => {
          const baseSchema = {
            _getParsedProperties: () => __awaiter2(this, void 0, void 0, function* () {
              return [
                ...yield schema._getParsedProperties(),
                ...yield extension._getParsedProperties()
              ];
            }),
            _getRawProperties: () => __awaiter2(this, void 0, void 0, function* () {
              return [
                ...yield schema._getRawProperties(),
                ...yield extension._getRawProperties()
              ];
            }),
            parse: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
              return validateAndTransformExtendedObject({
                extensionKeys: yield extension._getRawProperties(),
                value: raw,
                transformBase: (rawBase) => schema.parse(rawBase, opts),
                transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
              });
            }),
            json: (parsed, opts) => __awaiter2(this, void 0, void 0, function* () {
              return validateAndTransformExtendedObject({
                extensionKeys: yield extension._getParsedProperties(),
                value: parsed,
                transformBase: (parsedBase) => schema.json(parsedBase, opts),
                transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
              });
            }),
            getType: () => Schema_1.SchemaType.OBJECT
          };
          return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
        }
      };
    }
    exports2.getObjectUtils = getObjectUtils;
    function validateAndTransformExtendedObject({ extensionKeys, value, transformBase, transformExtension }) {
      return __awaiter2(this, void 0, void 0, function* () {
        const extensionPropertiesSet = new Set(extensionKeys);
        const [extensionProperties, baseProperties] = (0, partition_1.partition)((0, keys_1.keys)(value), (key) => extensionPropertiesSet.has(key));
        const transformedBase = yield transformBase((0, filterObject_1.filterObject)(value, baseProperties));
        const transformedExtension = yield transformExtension((0, filterObject_1.filterObject)(value, extensionProperties));
        if (transformedBase.ok && transformedExtension.ok) {
          return {
            ok: true,
            value: Object.assign(Object.assign({}, transformedBase.value), transformedExtension.value)
          };
        } else {
          return {
            ok: false,
            errors: [
              ...transformedBase.ok ? [] : transformedBase.errors,
              ...transformedExtension.ok ? [] : transformedExtension.errors
            ]
          };
        }
      });
    }
    function isSchemaRequired(schema) {
      return !isSchemaOptional(schema);
    }
    function isSchemaOptional(schema) {
      switch (schema.getType()) {
        case Schema_1.SchemaType.ANY:
        case Schema_1.SchemaType.UNKNOWN:
        case Schema_1.SchemaType.OPTIONAL:
          return true;
        default:
          return false;
      }
    }
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object/objectWithoutOptionalProperties.js
var require_objectWithoutOptionalProperties = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object/objectWithoutOptionalProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.objectWithoutOptionalProperties = void 0;
    var object_1 = require_object();
    function objectWithoutOptionalProperties(schemas) {
      return (0, object_1.object)(schemas);
    }
    exports2.objectWithoutOptionalProperties = objectWithoutOptionalProperties;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object/index.js
var require_object2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/object/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.property = exports2.isProperty = exports2.objectWithoutOptionalProperties = exports2.object = exports2.getObjectUtils = void 0;
    var object_1 = require_object();
    Object.defineProperty(exports2, "getObjectUtils", { enumerable: true, get: function() {
      return object_1.getObjectUtils;
    } });
    Object.defineProperty(exports2, "object", { enumerable: true, get: function() {
      return object_1.object;
    } });
    var objectWithoutOptionalProperties_1 = require_objectWithoutOptionalProperties();
    Object.defineProperty(exports2, "objectWithoutOptionalProperties", { enumerable: true, get: function() {
      return objectWithoutOptionalProperties_1.objectWithoutOptionalProperties;
    } });
    var property_1 = require_property();
    Object.defineProperty(exports2, "isProperty", { enumerable: true, get: function() {
      return property_1.isProperty;
    } });
    Object.defineProperty(exports2, "property", { enumerable: true, get: function() {
      return property_1.property;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/lazy/lazyObject.js
var require_lazyObject = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/lazy/lazyObject.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lazyObject = void 0;
    var object_1 = require_object2();
    var object_like_1 = require_object_like();
    var schema_utils_1 = require_schema_utils();
    var lazy_1 = require_lazy();
    function lazyObject(getter) {
      const baseSchema = Object.assign(Object.assign({}, (0, lazy_1.constructLazyBaseSchema)(getter)), { _getRawProperties: () => __awaiter2(this, void 0, void 0, function* () {
        return (yield (0, lazy_1.getMemoizedSchema)(getter))._getRawProperties();
      }), _getParsedProperties: () => __awaiter2(this, void 0, void 0, function* () {
        return (yield (0, lazy_1.getMemoizedSchema)(getter))._getParsedProperties();
      }) });
      return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), (0, object_1.getObjectUtils)(baseSchema));
    }
    exports2.lazyObject = lazyObject;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/lazy/index.js
var require_lazy2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/lazy/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lazyObject = exports2.lazy = void 0;
    var lazy_1 = require_lazy();
    Object.defineProperty(exports2, "lazy", { enumerable: true, get: function() {
      return lazy_1.lazy;
    } });
    var lazyObject_1 = require_lazyObject();
    Object.defineProperty(exports2, "lazyObject", { enumerable: true, get: function() {
      return lazyObject_1.lazyObject;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/list/list.js
var require_list = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/list/list.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.list = void 0;
    var Schema_1 = require_Schema();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    var maybeSkipValidation_1 = require_maybeSkipValidation();
    var schema_utils_1 = require_schema_utils();
    function list(schema) {
      const baseSchema = {
        parse: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
          return validateAndTransformArray(raw, (item, index2) => {
            var _a3;
            return schema.parse(item, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `[${index2}]`] }));
          });
        }),
        json: (parsed, opts) => validateAndTransformArray(parsed, (item, index2) => {
          var _a3;
          return schema.json(item, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `[${index2}]`] }));
        }),
        getType: () => Schema_1.SchemaType.LIST
      };
      return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.list = list;
    function validateAndTransformArray(value, transformItem) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!Array.isArray(value)) {
          return {
            ok: false,
            errors: [
              {
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "list"),
                path: []
              }
            ]
          };
        }
        const maybeValidItems = yield Promise.all(value.map((item, index2) => transformItem(item, index2)));
        return maybeValidItems.reduce((acc, item) => {
          if (acc.ok && item.ok) {
            return {
              ok: true,
              value: [...acc.value, item.value]
            };
          }
          const errors2 = [];
          if (!acc.ok) {
            errors2.push(...acc.errors);
          }
          if (!item.ok) {
            errors2.push(...item.errors);
          }
          return {
            ok: false,
            errors: errors2
          };
        }, { ok: true, value: [] });
      });
    }
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/list/index.js
var require_list2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/list/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.list = void 0;
    var list_1 = require_list();
    Object.defineProperty(exports2, "list", { enumerable: true, get: function() {
      return list_1.list;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/literals/stringLiteral.js
var require_stringLiteral = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/literals/stringLiteral.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringLiteral = void 0;
    var Schema_1 = require_Schema();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    function stringLiteral(literal) {
      const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.STRING_LITERAL, (value, { breadcrumbsPrefix = [] } = {}) => {
        if (value === literal) {
          return {
            ok: true,
            value: literal
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, `"${literal}"`)
              }
            ]
          };
        }
      });
      return schemaCreator();
    }
    exports2.stringLiteral = stringLiteral;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/literals/booleanLiteral.js
var require_booleanLiteral = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/literals/booleanLiteral.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanLiteral = void 0;
    var Schema_1 = require_Schema();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    function booleanLiteral(literal) {
      const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.BOOLEAN_LITERAL, (value, { breadcrumbsPrefix = [] } = {}) => {
        if (value === literal) {
          return {
            ok: true,
            value: literal
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, `${literal.toString()}`)
              }
            ]
          };
        }
      });
      return schemaCreator();
    }
    exports2.booleanLiteral = booleanLiteral;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/literals/index.js
var require_literals = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/literals/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanLiteral = exports2.stringLiteral = void 0;
    var stringLiteral_1 = require_stringLiteral();
    Object.defineProperty(exports2, "stringLiteral", { enumerable: true, get: function() {
      return stringLiteral_1.stringLiteral;
    } });
    var booleanLiteral_1 = require_booleanLiteral();
    Object.defineProperty(exports2, "booleanLiteral", { enumerable: true, get: function() {
      return booleanLiteral_1.booleanLiteral;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/any.js
var require_any = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/any.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.any = void 0;
    var Schema_1 = require_Schema();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator();
    exports2.any = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.ANY, (value) => ({ ok: true, value }));
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/boolean.js
var require_boolean = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/boolean.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.boolean = void 0;
    var Schema_1 = require_Schema();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    exports2.boolean = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.BOOLEAN, (value, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof value === "boolean") {
        return {
          ok: true,
          value
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "boolean")
            }
          ]
        };
      }
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/number.js
var require_number = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/number.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.number = void 0;
    var Schema_1 = require_Schema();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    exports2.number = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.NUMBER, (value, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof value === "number") {
        return {
          ok: true,
          value
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "number")
            }
          ]
        };
      }
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/string.js
var require_string = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/string.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.string = void 0;
    var Schema_1 = require_Schema();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    exports2.string = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.STRING, (value, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof value === "string") {
        return {
          ok: true,
          value
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "string")
            }
          ]
        };
      }
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/unknown.js
var require_unknown = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/unknown.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unknown = void 0;
    var Schema_1 = require_Schema();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator();
    exports2.unknown = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/index.js
var require_primitives = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/primitives/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unknown = exports2.string = exports2.number = exports2.boolean = exports2.any = void 0;
    var any_1 = require_any();
    Object.defineProperty(exports2, "any", { enumerable: true, get: function() {
      return any_1.any;
    } });
    var boolean_1 = require_boolean();
    Object.defineProperty(exports2, "boolean", { enumerable: true, get: function() {
      return boolean_1.boolean;
    } });
    var number_1 = require_number();
    Object.defineProperty(exports2, "number", { enumerable: true, get: function() {
      return number_1.number;
    } });
    var string_1 = require_string();
    Object.defineProperty(exports2, "string", { enumerable: true, get: function() {
      return string_1.string;
    } });
    var unknown_1 = require_unknown();
    Object.defineProperty(exports2, "unknown", { enumerable: true, get: function() {
      return unknown_1.unknown;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/record/record.js
var require_record = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/record/record.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.record = void 0;
    var Schema_1 = require_Schema();
    var entries_1 = require_entries();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    var isPlainObject_1 = require_isPlainObject();
    var maybeSkipValidation_1 = require_maybeSkipValidation();
    var schema_utils_1 = require_schema_utils();
    function record(keySchema, valueSchema) {
      const baseSchema = {
        parse: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
          return validateAndTransformRecord({
            value: raw,
            isKeyNumeric: (yield keySchema.getType()) === Schema_1.SchemaType.NUMBER,
            transformKey: (key) => {
              var _a3;
              return keySchema.parse(key, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `${key} (key)`] }));
            },
            transformValue: (value, key) => {
              var _a3;
              return valueSchema.parse(value, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `${key}`] }));
            },
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix
          });
        }),
        json: (parsed, opts) => __awaiter2(this, void 0, void 0, function* () {
          return validateAndTransformRecord({
            value: parsed,
            isKeyNumeric: (yield keySchema.getType()) === Schema_1.SchemaType.NUMBER,
            transformKey: (key) => {
              var _a3;
              return keySchema.json(key, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `${key} (key)`] }));
            },
            transformValue: (value, key) => {
              var _a3;
              return valueSchema.json(value, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `${key}`] }));
            },
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix
          });
        }),
        getType: () => Schema_1.SchemaType.RECORD
      };
      return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.record = record;
    function validateAndTransformRecord({ value, isKeyNumeric, transformKey, transformValue, breadcrumbsPrefix = [] }) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!(0, isPlainObject_1.isPlainObject)(value)) {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "object")
              }
            ]
          };
        }
        return (0, entries_1.entries)(value).reduce((accPromise, [stringKey, value2]) => __awaiter2(this, void 0, void 0, function* () {
          if (value2 == null) {
            return accPromise;
          }
          const acc = yield accPromise;
          let key = stringKey;
          if (isKeyNumeric) {
            const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
            if (!isNaN(numberKey)) {
              key = numberKey;
            }
          }
          const transformedKey = yield transformKey(key);
          const transformedValue = yield transformValue(value2, key);
          if (acc.ok && transformedKey.ok && transformedValue.ok) {
            return {
              ok: true,
              value: Object.assign(Object.assign({}, acc.value), { [transformedKey.value]: transformedValue.value })
            };
          }
          const errors2 = [];
          if (!acc.ok) {
            errors2.push(...acc.errors);
          }
          if (!transformedKey.ok) {
            errors2.push(...transformedKey.errors);
          }
          if (!transformedValue.ok) {
            errors2.push(...transformedValue.errors);
          }
          return {
            ok: false,
            errors: errors2
          };
        }), Promise.resolve({ ok: true, value: {} }));
      });
    }
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/record/index.js
var require_record2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/record/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.record = void 0;
    var record_1 = require_record();
    Object.defineProperty(exports2, "record", { enumerable: true, get: function() {
      return record_1.record;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/set/set.js
var require_set = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/set/set.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.set = void 0;
    var Schema_1 = require_Schema();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    var maybeSkipValidation_1 = require_maybeSkipValidation();
    var list_1 = require_list2();
    var schema_utils_1 = require_schema_utils();
    function set(schema) {
      const listSchema = (0, list_1.list)(schema);
      const baseSchema = {
        parse: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
          const parsedList = yield listSchema.parse(raw, opts);
          if (parsedList.ok) {
            return {
              ok: true,
              value: new Set(parsedList.value)
            };
          } else {
            return parsedList;
          }
        }),
        json: (parsed, opts) => __awaiter2(this, void 0, void 0, function* () {
          var _a3;
          if (!(parsed instanceof Set)) {
            return {
              ok: false,
              errors: [
                {
                  path: (_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [],
                  message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(parsed, "Set")
                }
              ]
            };
          }
          const jsonList = yield listSchema.json([...parsed], opts);
          return jsonList;
        }),
        getType: () => Schema_1.SchemaType.SET
      };
      return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.set = set;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/set/index.js
var require_set2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/set/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.set = void 0;
    var set_1 = require_set();
    Object.defineProperty(exports2, "set", { enumerable: true, get: function() {
      return set_1.set;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.js
var require_undiscriminatedUnion = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.undiscriminatedUnion = void 0;
    var Schema_1 = require_Schema();
    var maybeSkipValidation_1 = require_maybeSkipValidation();
    var schema_utils_1 = require_schema_utils();
    function undiscriminatedUnion(schemas) {
      const baseSchema = {
        parse: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
          return validateAndTransformUndiscriminatedUnion((schema, opts2) => schema.parse(raw, opts2), schemas, opts);
        }),
        json: (parsed, opts) => __awaiter2(this, void 0, void 0, function* () {
          return validateAndTransformUndiscriminatedUnion((schema, opts2) => schema.json(parsed, opts2), schemas, opts);
        }),
        getType: () => Schema_1.SchemaType.UNDISCRIMINATED_UNION
      };
      return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.undiscriminatedUnion = undiscriminatedUnion;
    function validateAndTransformUndiscriminatedUnion(transform, schemas, opts) {
      return __awaiter2(this, void 0, void 0, function* () {
        const errors2 = [];
        for (const [index2, schema] of schemas.entries()) {
          const transformed = yield transform(schema, Object.assign(Object.assign({}, opts), { skipValidation: false }));
          if (transformed.ok) {
            return transformed;
          } else {
            for (const error2 of transformed.errors) {
              errors2.push({
                path: error2.path,
                message: `[Variant ${index2}] ${error2.message}`
              });
            }
          }
        }
        return {
          ok: false,
          errors: errors2
        };
      });
    }
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/undiscriminated-union/index.js
var require_undiscriminated_union = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/undiscriminated-union/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.undiscriminatedUnion = void 0;
    var undiscriminatedUnion_1 = require_undiscriminatedUnion();
    Object.defineProperty(exports2, "undiscriminatedUnion", { enumerable: true, get: function() {
      return undiscriminatedUnion_1.undiscriminatedUnion;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/union/discriminant.js
var require_discriminant = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/union/discriminant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.discriminant = void 0;
    function discriminant(parsedDiscriminant, rawDiscriminant) {
      return {
        parsedDiscriminant,
        rawDiscriminant
      };
    }
    exports2.discriminant = discriminant;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/union/union.js
var require_union = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/union/union.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __rest2 = exports2 && exports2.__rest || function(s6, e6) {
      var t6 = {};
      for (var p6 in s6)
        if (Object.prototype.hasOwnProperty.call(s6, p6) && e6.indexOf(p6) < 0)
          t6[p6] = s6[p6];
      if (s6 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i6 = 0, p6 = Object.getOwnPropertySymbols(s6); i6 < p6.length; i6++) {
          if (e6.indexOf(p6[i6]) < 0 && Object.prototype.propertyIsEnumerable.call(s6, p6[i6]))
            t6[p6[i6]] = s6[p6[i6]];
        }
      return t6;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.union = void 0;
    var Schema_1 = require_Schema();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType();
    var isPlainObject_1 = require_isPlainObject();
    var keys_1 = require_keys();
    var maybeSkipValidation_1 = require_maybeSkipValidation();
    var enum_1 = require_enum2();
    var object_like_1 = require_object_like();
    var schema_utils_1 = require_schema_utils();
    function union(discriminant, union2) {
      const rawDiscriminant = typeof discriminant === "string" ? discriminant : discriminant.rawDiscriminant;
      const parsedDiscriminant = typeof discriminant === "string" ? discriminant : discriminant.parsedDiscriminant;
      const discriminantValueSchema = (0, enum_1.enum_)((0, keys_1.keys)(union2));
      const baseSchema = {
        parse: (raw, opts) => __awaiter2(this, void 0, void 0, function* () {
          return transformAndValidateUnion({
            value: raw,
            discriminant: rawDiscriminant,
            transformedDiscriminant: parsedDiscriminant,
            transformDiscriminantValue: (discriminantValue) => {
              var _a3;
              return discriminantValueSchema.parse(discriminantValue, {
                allowUnrecognizedEnumValues: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
                breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], rawDiscriminant]
              });
            },
            getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
            allowUnrecognizedUnionMembers: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
            transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix
          });
        }),
        json: (parsed, opts) => __awaiter2(this, void 0, void 0, function* () {
          return transformAndValidateUnion({
            value: parsed,
            discriminant: parsedDiscriminant,
            transformedDiscriminant: rawDiscriminant,
            transformDiscriminantValue: (discriminantValue) => {
              var _a3;
              return discriminantValueSchema.json(discriminantValue, {
                allowUnrecognizedEnumValues: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
                breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], parsedDiscriminant]
              });
            },
            getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
            allowUnrecognizedUnionMembers: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
            transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix
          });
        }),
        getType: () => Schema_1.SchemaType.UNION
      };
      return Object.assign(Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema));
    }
    exports2.union = union;
    function transformAndValidateUnion({ value, discriminant, transformedDiscriminant, transformDiscriminantValue, getAdditionalPropertiesSchema, allowUnrecognizedUnionMembers = false, transformAdditionalProperties, breadcrumbsPrefix = [] }) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (!(0, isPlainObject_1.isPlainObject)(value)) {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "object")
              }
            ]
          };
        }
        const _a3 = value, _b = discriminant, discriminantValue = _a3[_b], additionalProperties = __rest2(_a3, [typeof _b === "symbol" ? _b : _b + ""]);
        if (discriminantValue == null) {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: `Missing discriminant ("${discriminant}")`
              }
            ]
          };
        }
        const transformedDiscriminantValue = yield transformDiscriminantValue(discriminantValue);
        if (!transformedDiscriminantValue.ok) {
          return {
            ok: false,
            errors: transformedDiscriminantValue.errors
          };
        }
        const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
        if (additionalPropertiesSchema == null) {
          if (allowUnrecognizedUnionMembers) {
            return {
              ok: true,
              value: Object.assign({ [transformedDiscriminant]: transformedDiscriminantValue.value }, additionalProperties)
            };
          } else {
            return {
              ok: false,
              errors: [
                {
                  path: [...breadcrumbsPrefix, discriminant],
                  message: "Unexpected discriminant value"
                }
              ]
            };
          }
        }
        const transformedAdditionalProperties = yield transformAdditionalProperties(additionalProperties, additionalPropertiesSchema);
        if (!transformedAdditionalProperties.ok) {
          return transformedAdditionalProperties;
        }
        return {
          ok: true,
          value: Object.assign({ [transformedDiscriminant]: discriminantValue }, transformedAdditionalProperties.value)
        };
      });
    }
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/union/index.js
var require_union2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/union/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.union = exports2.discriminant = void 0;
    var discriminant_1 = require_discriminant();
    Object.defineProperty(exports2, "discriminant", { enumerable: true, get: function() {
      return discriminant_1.discriminant;
    } });
    var union_1 = require_union();
    Object.defineProperty(exports2, "union", { enumerable: true, get: function() {
      return union_1.union;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/index.js
var require_builders = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/builders/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_date2(), exports2);
    __exportStar2(require_enum2(), exports2);
    __exportStar2(require_lazy2(), exports2);
    __exportStar2(require_list2(), exports2);
    __exportStar2(require_literals(), exports2);
    __exportStar2(require_object2(), exports2);
    __exportStar2(require_object_like(), exports2);
    __exportStar2(require_primitives(), exports2);
    __exportStar2(require_record2(), exports2);
    __exportStar2(require_schema_utils(), exports2);
    __exportStar2(require_set2(), exports2);
    __exportStar2(require_undiscriminated_union(), exports2);
    __exportStar2(require_union2(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/index.js
var require_schemas = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/schemas/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_builders(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/index.js
var require_core = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serialization = void 0;
    __exportStar2(require_fetcher(), exports2);
    __exportStar2(require_auth(), exports2);
    __exportStar2(require_streaming_fetcher(), exports2);
    __exportStar2(require_runtime2(), exports2);
    __exportStar2(require_form_data_utils(), exports2);
    exports2.serialization = __importStar2(require_schemas());
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/errors/CohereError.js
var require_CohereError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/errors/CohereError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CohereError = void 0;
    var CohereError = class _CohereError extends Error {
      constructor({ message, statusCode, body }) {
        super(buildMessage({ message, statusCode, body }));
        Object.setPrototypeOf(this, _CohereError.prototype);
        if (statusCode != null) {
          this.statusCode = statusCode;
        }
        if (body !== void 0) {
          this.body = body;
        }
      }
    };
    exports2.CohereError = CohereError;
    function buildMessage({ message, statusCode, body }) {
      let lines = [];
      if (message != null) {
        lines.push(message);
      }
      if (statusCode != null) {
        lines.push(`Status code: ${statusCode.toString()}`);
      }
      if (body != null) {
        lines.push(`Body: ${JSON.stringify(body, void 0, 2)}`);
      }
      return lines.join("\n");
    }
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/errors/CohereTimeoutError.js
var require_CohereTimeoutError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/errors/CohereTimeoutError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CohereTimeoutError = void 0;
    var CohereTimeoutError = class _CohereTimeoutError extends Error {
      constructor() {
        super("Timeout");
        Object.setPrototypeOf(this, _CohereTimeoutError.prototype);
      }
    };
    exports2.CohereTimeoutError = CohereTimeoutError;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/errors/index.js
var require_errors2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/errors/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CohereTimeoutError = exports2.CohereError = void 0;
    var CohereError_1 = require_CohereError();
    Object.defineProperty(exports2, "CohereError", { enumerable: true, get: function() {
      return CohereError_1.CohereError;
    } });
    var CohereTimeoutError_1 = require_CohereTimeoutError();
    Object.defineProperty(exports2, "CohereTimeoutError", { enumerable: true, get: function() {
      return CohereTimeoutError_1.CohereTimeoutError;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/streaming-fetcher/streaming-utils.js
var require_streaming_utils = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/core/streaming-fetcher/streaming-utils.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues2 = exports2 && exports2.__asyncValues || function(o6) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m6 = o6[Symbol.asyncIterator], i6;
      return m6 ? m6.call(o6) : (o6 = typeof __values === "function" ? __values(o6) : o6[Symbol.iterator](), i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
        return this;
      }, i6);
      function verb(n6) {
        i6[n6] = o6[n6] && function(v7) {
          return new Promise(function(resolve2, reject) {
            v7 = o6[n6](v7), settle(resolve2, reject, v7.done, v7.value);
          });
        };
      }
      function settle(resolve2, reject, d6, v7) {
        Promise.resolve(v7).then(function(v8) {
          resolve2({ value: v8, done: d6 });
        }, reject);
      }
    };
    var __await3 = exports2 && exports2.__await || function(v7) {
      return this instanceof __await3 ? (this.v = v7, this) : new __await3(v7);
    };
    var __asyncGenerator3 = exports2 && exports2.__asyncGenerator || function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g7 = generator.apply(thisArg, _arguments || []), i6, q6 = [];
      return i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
        return this;
      }, i6;
      function verb(n6) {
        if (g7[n6])
          i6[n6] = function(v7) {
            return new Promise(function(a6, b6) {
              q6.push([n6, v7, a6, b6]) > 1 || resume(n6, v7);
            });
          };
      }
      function resume(n6, v7) {
        try {
          step(g7[n6](v7));
        } catch (e6) {
          settle(q6[0][3], e6);
        }
      }
      function step(r6) {
        r6.value instanceof __await3 ? Promise.resolve(r6.value.v).then(fulfill, reject) : settle(q6[0][2], r6);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f6, v7) {
        if (f6(v7), q6.shift(), q6.length)
          resume(q6[0][0], q6[0][1]);
      }
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readableStreamAsyncIterable = exports2._decodeChunks = exports2.LineDecoder = exports2._iterSSEMessages = exports2.StreamUtils = void 0;
    var errors_1 = require_errors2();
    var StreamUtils = class _StreamUtils {
      constructor(iterator, controller) {
        this.iterator = iterator;
        this.controller = controller;
      }
      static fromSSEResponse(response, controller) {
        let consumed2 = false;
        function iterator() {
          return __asyncGenerator3(this, arguments, function* iterator_1() {
            var e_1, _a3;
            if (consumed2) {
              throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
            }
            consumed2 = true;
            let done = false;
            try {
              try {
                for (var _b = __asyncValues2(_iterSSEMessages2(response, controller)), _c; _c = yield __await3(_b.next()), !_c.done; ) {
                  const sse = _c.value;
                  if (done)
                    continue;
                  if (sse.data.startsWith("[DONE]")) {
                    done = true;
                    continue;
                  }
                  if (sse.event === null) {
                    let data;
                    try {
                      data = JSON.parse(sse.data);
                    } catch (e6) {
                      console.error(`Could not parse message into JSON:`, sse.data);
                      console.error(`From chunk:`, sse.raw);
                      throw e6;
                    }
                    if (data && data.error) {
                      throw new errors_1.CohereError({ message: `Error: ${data.error}` });
                    }
                    yield yield __await3(data);
                  } else {
                    let data;
                    try {
                      data = JSON.parse(sse.data);
                    } catch (e6) {
                      console.error(`Could not parse message into JSON:`, sse.data);
                      console.error(`From chunk:`, sse.raw);
                      throw e6;
                    }
                    if (sse.event == "error") {
                      throw new errors_1.CohereError({ message: `Error: ${data.message}, ${data.error}` });
                    }
                    yield yield __await3({ event: sse.event, data });
                  }
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_c && !_c.done && (_a3 = _b.return))
                    yield __await3(_a3.call(_b));
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              done = true;
            } catch (e6) {
              if (e6 instanceof Error && e6.name === "AbortError")
                return yield __await3(void 0);
              throw e6;
            } finally {
              if (!done)
                controller === null || controller === void 0 ? void 0 : controller.abort();
            }
          });
        }
        return new _StreamUtils(iterator, controller);
      }
      /**
       * Generates a Stream from a newline-separated ReadableStream
       * where each item is a JSON value.
       */
      static fromReadableStream(readableStream, controller) {
        let consumed2 = false;
        function iterLines() {
          return __asyncGenerator3(this, arguments, function* iterLines_1() {
            var e_2, _a3;
            const lineDecoder = new LineDecoder2();
            const iter = readableStreamAsyncIterable2(readableStream);
            try {
              for (var iter_1 = __asyncValues2(iter), iter_1_1; iter_1_1 = yield __await3(iter_1.next()), !iter_1_1.done; ) {
                const chunk = iter_1_1.value;
                for (const line of lineDecoder.decode(chunk)) {
                  yield yield __await3(line);
                }
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (iter_1_1 && !iter_1_1.done && (_a3 = iter_1.return))
                  yield __await3(_a3.call(iter_1));
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
            for (const line of lineDecoder.flush()) {
              yield yield __await3(line);
            }
          });
        }
        function iterator() {
          return __asyncGenerator3(this, arguments, function* iterator_2() {
            var e_3, _a3;
            if (consumed2) {
              throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
            }
            consumed2 = true;
            let done = false;
            try {
              try {
                for (var _b = __asyncValues2(iterLines()), _c; _c = yield __await3(_b.next()), !_c.done; ) {
                  const line = _c.value;
                  if (done)
                    continue;
                  if (line)
                    yield yield __await3(JSON.parse(line));
                }
              } catch (e_3_1) {
                e_3 = { error: e_3_1 };
              } finally {
                try {
                  if (_c && !_c.done && (_a3 = _b.return))
                    yield __await3(_a3.call(_b));
                } finally {
                  if (e_3)
                    throw e_3.error;
                }
              }
              done = true;
            } catch (e6) {
              if (e6 instanceof Error && e6.name === "AbortError")
                return yield __await3(void 0);
              throw e6;
            } finally {
              if (!done)
                controller === null || controller === void 0 ? void 0 : controller.abort();
            }
          });
        }
        return new _StreamUtils(iterator, controller);
      }
      [Symbol.asyncIterator]() {
        return this.iterator();
      }
      /**
       * Splits the stream into two streams which can be
       * independently read from at different speeds.
       */
      tee() {
        const left = [];
        const right = [];
        const iterator = this.iterator();
        const teeIterator = (queue) => {
          return {
            next: () => {
              if (queue.length === 0) {
                const result = iterator.next();
                left.push(result);
                right.push(result);
              }
              return queue.shift();
            }
          };
        };
        return [
          new _StreamUtils(() => teeIterator(left), this.controller),
          new _StreamUtils(() => teeIterator(right), this.controller)
        ];
      }
      /**
       * Converts this stream to a newline-separated ReadableStream of
       * JSON stringified values in the stream
       * which can be turned back into a Stream with `Stream.fromReadableStream()`.
       */
      toReadableStream() {
        const self2 = this;
        let iter;
        const encoder = new TextEncoder();
        return new ReadableStream({
          start() {
            return __awaiter2(this, void 0, void 0, function* () {
              iter = self2[Symbol.asyncIterator]();
            });
          },
          pull(ctrl) {
            return __awaiter2(this, void 0, void 0, function* () {
              try {
                const { value, done } = yield iter.next();
                if (done)
                  return ctrl.close();
                const bytes = encoder.encode(JSON.stringify(value) + "\n");
                ctrl.enqueue(bytes);
              } catch (err) {
                ctrl.error(err);
              }
            });
          },
          cancel() {
            var _a3;
            return __awaiter2(this, void 0, void 0, function* () {
              yield (_a3 = iter.return) === null || _a3 === void 0 ? void 0 : _a3.call(iter);
            });
          }
        });
      }
    };
    exports2.StreamUtils = StreamUtils;
    function _iterSSEMessages2(response, controller) {
      return __asyncGenerator3(this, arguments, function* _iterSSEMessages_1() {
        var e_4, _a3;
        if (!response.body) {
          controller === null || controller === void 0 ? void 0 : controller.abort();
          throw new errors_1.CohereError({ message: `Attempted to iterate over a response with no body` });
        }
        const sseDecoder = new SSEDecoder2();
        const lineDecoder = new LineDecoder2();
        const iter = readableStreamAsyncIterable2(response.body);
        try {
          for (var _b = __asyncValues2(iterSSEChunks2(iter)), _c; _c = yield __await3(_b.next()), !_c.done; ) {
            const sseChunk = _c.value;
            for (const line of lineDecoder.decode(sseChunk)) {
              const sse = sseDecoder.decode(line);
              if (sse)
                yield yield __await3(sse);
            }
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a3 = _b.return))
              yield __await3(_a3.call(_b));
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
        for (const line of lineDecoder.flush()) {
          const sse = sseDecoder.decode(line);
          if (sse)
            yield yield __await3(sse);
        }
      });
    }
    exports2._iterSSEMessages = _iterSSEMessages2;
    function iterSSEChunks2(iterator) {
      return __asyncGenerator3(this, arguments, function* iterSSEChunks_1() {
        var e_5, _a3;
        let data = new Uint8Array();
        try {
          for (var iterator_3 = __asyncValues2(iterator), iterator_3_1; iterator_3_1 = yield __await3(iterator_3.next()), !iterator_3_1.done; ) {
            const chunk = iterator_3_1.value;
            if (chunk == null) {
              continue;
            }
            const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === "string" ? new TextEncoder().encode(chunk) : chunk;
            let newData = new Uint8Array(data.length + binaryChunk.length);
            newData.set(data);
            newData.set(binaryChunk, data.length);
            data = newData;
            let patternIndex;
            while ((patternIndex = findDoubleNewlineIndex2(data)) !== -1) {
              yield yield __await3(data.slice(0, patternIndex));
              data = data.slice(patternIndex);
            }
          }
        } catch (e_5_1) {
          e_5 = { error: e_5_1 };
        } finally {
          try {
            if (iterator_3_1 && !iterator_3_1.done && (_a3 = iterator_3.return))
              yield __await3(_a3.call(iterator_3));
          } finally {
            if (e_5)
              throw e_5.error;
          }
        }
        if (data.length > 0) {
          yield yield __await3(data);
        }
      });
    }
    function findDoubleNewlineIndex2(buffer) {
      const newline = 10;
      const carriage = 13;
      for (let i6 = 0; i6 < buffer.length - 2; i6++) {
        if (buffer[i6] === newline && buffer[i6 + 1] === newline) {
          return i6 + 2;
        }
        if (buffer[i6] === carriage && buffer[i6 + 1] === carriage) {
          return i6 + 2;
        }
        if (buffer[i6] === carriage && buffer[i6 + 1] === newline && i6 + 3 < buffer.length && buffer[i6 + 2] === carriage && buffer[i6 + 3] === newline) {
          return i6 + 4;
        }
      }
      return -1;
    }
    var SSEDecoder2 = class {
      constructor() {
        this.event = null;
        this.data = [];
        this.chunks = [];
      }
      decode(line) {
        if (line.endsWith("\r")) {
          line = line.substring(0, line.length - 1);
        }
        if (!line) {
          if (!this.event && !this.data.length)
            return null;
          const sse = {
            event: this.event,
            data: this.data.join("\n"),
            raw: this.chunks
          };
          this.event = null;
          this.data = [];
          this.chunks = [];
          return sse;
        }
        this.chunks.push(line);
        if (line.startsWith(":")) {
          return null;
        }
        let [fieldname, _3, value] = partition3(line, ":");
        if (value.startsWith(" ")) {
          value = value.substring(1);
        }
        if (fieldname === "event") {
          this.event = value;
        } else if (fieldname === "data") {
          this.data.push(value);
        }
        return null;
      }
    };
    var LineDecoder2 = class _LineDecoder {
      constructor() {
        this.buffer = [];
        this.trailingCR = false;
      }
      decode(chunk) {
        let text = this.decodeText(chunk);
        if (this.trailingCR) {
          text = "\r" + text;
          this.trailingCR = false;
        }
        if (text.endsWith("\r")) {
          this.trailingCR = true;
          text = text.slice(0, -1);
        }
        if (!text) {
          return [];
        }
        const trailingNewline = _LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || "");
        let lines = text.split(_LineDecoder.NEWLINE_REGEXP);
        if (trailingNewline) {
          lines.pop();
        }
        if (lines.length === 1 && !trailingNewline) {
          this.buffer.push(lines[0]);
          return [];
        }
        if (this.buffer.length > 0) {
          lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
          this.buffer = [];
        }
        if (!trailingNewline) {
          this.buffer = [lines.pop() || ""];
        }
        return lines;
      }
      decodeText(bytes) {
        var _a3;
        if (bytes == null)
          return "";
        if (typeof bytes === "string")
          return bytes;
        if (typeof Buffer !== "undefined") {
          if (bytes instanceof Buffer) {
            return bytes.toString();
          }
          if (bytes instanceof Uint8Array) {
            return Buffer.from(bytes).toString();
          }
          throw new errors_1.CohereError({
            message: `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`
          });
        }
        if (typeof TextDecoder !== "undefined") {
          if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
            (_a3 = this.textDecoder) !== null && _a3 !== void 0 ? _a3 : this.textDecoder = new TextDecoder("utf8");
            return this.textDecoder.decode(bytes);
          }
          throw new errors_1.CohereError({
            message: `Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`
          });
        }
        throw new errors_1.CohereError({
          message: `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`
        });
      }
      flush() {
        if (!this.buffer.length && !this.trailingCR) {
          return [];
        }
        const lines = [this.buffer.join("")];
        this.buffer = [];
        this.trailingCR = false;
        return lines;
      }
    };
    exports2.LineDecoder = LineDecoder2;
    LineDecoder2.NEWLINE_CHARS = /* @__PURE__ */ new Set(["\n", "\r"]);
    LineDecoder2.NEWLINE_REGEXP = /\r\n|[\n\r]/g;
    function _decodeChunks(chunks) {
      const decoder = new LineDecoder2();
      const lines = [];
      for (const chunk of chunks) {
        lines.push(...decoder.decode(chunk));
      }
      return lines;
    }
    exports2._decodeChunks = _decodeChunks;
    function partition3(str2, delimiter2) {
      const index2 = str2.indexOf(delimiter2);
      if (index2 !== -1) {
        return [str2.substring(0, index2), delimiter2, str2.substring(index2 + delimiter2.length)];
      }
      return [str2, "", ""];
    }
    function readableStreamAsyncIterable2(stream) {
      if (stream[Symbol.asyncIterator])
        return stream;
      const reader = stream.getReader();
      return {
        next() {
          return __awaiter2(this, void 0, void 0, function* () {
            try {
              const result = yield reader.read();
              if (result === null || result === void 0 ? void 0 : result.done)
                reader.releaseLock();
              return result;
            } catch (e6) {
              reader.releaseLock();
              throw e6;
            }
          });
        },
        return() {
          return __awaiter2(this, void 0, void 0, function* () {
            const cancelPromise = reader.cancel();
            reader.releaseLock();
            yield cancelPromise;
            return { done: true, value: void 0 };
          });
        },
        [Symbol.asyncIterator]() {
          return this;
        }
      };
    }
    exports2.readableStreamAsyncIterable = readableStreamAsyncIterable2;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/types/CreateEmbedJobRequestTruncate.js
var require_CreateEmbedJobRequestTruncate = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/types/CreateEmbedJobRequestTruncate.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateEmbedJobRequestTruncate = void 0;
    var core = __importStar2(require_core());
    exports2.CreateEmbedJobRequestTruncate = core.serialization.enum_(["START", "END"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/types/index.js
var require_types = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_CreateEmbedJobRequestTruncate(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedInputType.js
var require_EmbedInputType = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedInputType.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedInputType = void 0;
    var core = __importStar2(require_core());
    exports2.EmbedInputType = core.serialization.enum_(["search_document", "search_query", "classification", "clustering"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbeddingType.js
var require_EmbeddingType = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbeddingType.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbeddingType = void 0;
    var core = __importStar2(require_core());
    exports2.EmbeddingType = core.serialization.enum_(["float", "int8", "uint8", "binary", "ubinary"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/client/requests/CreateEmbedJobRequest.js
var require_CreateEmbedJobRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/client/requests/CreateEmbedJobRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateEmbedJobRequest = void 0;
    var core = __importStar2(require_core());
    var EmbedInputType_1 = require_EmbedInputType();
    var EmbeddingType_1 = require_EmbeddingType();
    var CreateEmbedJobRequestTruncate_1 = require_CreateEmbedJobRequestTruncate();
    exports2.CreateEmbedJobRequest = core.serialization.object({
      model: core.serialization.string(),
      datasetId: core.serialization.property("dataset_id", core.serialization.string()),
      inputType: core.serialization.property("input_type", EmbedInputType_1.EmbedInputType),
      name: core.serialization.string().optional(),
      embeddingTypes: core.serialization.property("embedding_types", core.serialization.list(EmbeddingType_1.EmbeddingType).optional()),
      truncate: CreateEmbedJobRequestTruncate_1.CreateEmbedJobRequestTruncate.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/client/requests/index.js
var require_requests = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateEmbedJobRequest = void 0;
    var CreateEmbedJobRequest_1 = require_CreateEmbedJobRequest();
    Object.defineProperty(exports2, "CreateEmbedJobRequest", { enumerable: true, get: function() {
      return CreateEmbedJobRequest_1.CreateEmbedJobRequest;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/client/index.js
var require_client = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/index.js
var require_embedJobs = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/embedJobs/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_types(), exports2);
    __exportStar2(require_client(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/DatasetType.js
var require_DatasetType = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/DatasetType.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DatasetType = void 0;
    var core = __importStar2(require_core());
    exports2.DatasetType = core.serialization.enum_([
      "embed-input",
      "embed-result",
      "cluster-result",
      "cluster-outliers",
      "reranker-finetune-input",
      "single-label-classification-finetune-input",
      "chat-finetune-input",
      "multi-label-classification-finetune-input"
    ]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/DatasetValidationStatus.js
var require_DatasetValidationStatus = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/DatasetValidationStatus.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DatasetValidationStatus = void 0;
    var core = __importStar2(require_core());
    exports2.DatasetValidationStatus = core.serialization.enum_(["unknown", "queued", "processing", "failed", "validated", "skipped"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/DatasetPart.js
var require_DatasetPart = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/DatasetPart.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DatasetPart = void 0;
    var core = __importStar2(require_core());
    exports2.DatasetPart = core.serialization.object({
      id: core.serialization.string(),
      name: core.serialization.string(),
      url: core.serialization.string().optional(),
      index: core.serialization.number().optional(),
      sizeBytes: core.serialization.property("size_bytes", core.serialization.number().optional()),
      numRows: core.serialization.property("num_rows", core.serialization.number().optional()),
      originalUrl: core.serialization.property("original_url", core.serialization.string().optional()),
      samples: core.serialization.list(core.serialization.string()).optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Dataset.js
var require_Dataset = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Dataset.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Dataset = void 0;
    var core = __importStar2(require_core());
    var DatasetType_1 = require_DatasetType();
    var DatasetValidationStatus_1 = require_DatasetValidationStatus();
    var DatasetPart_1 = require_DatasetPart();
    exports2.Dataset = core.serialization.object({
      id: core.serialization.string(),
      name: core.serialization.string(),
      createdAt: core.serialization.property("created_at", core.serialization.date()),
      updatedAt: core.serialization.property("updated_at", core.serialization.date()),
      datasetType: core.serialization.property("dataset_type", DatasetType_1.DatasetType),
      validationStatus: core.serialization.property("validation_status", DatasetValidationStatus_1.DatasetValidationStatus),
      validationError: core.serialization.property("validation_error", core.serialization.string().optional()),
      schema: core.serialization.string().optional(),
      requiredFields: core.serialization.property("required_fields", core.serialization.list(core.serialization.string()).optional()),
      preserveFields: core.serialization.property("preserve_fields", core.serialization.list(core.serialization.string()).optional()),
      datasetParts: core.serialization.property("dataset_parts", core.serialization.list(DatasetPart_1.DatasetPart).optional()),
      validationWarnings: core.serialization.property("validation_warnings", core.serialization.list(core.serialization.string()).optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/DatasetsListResponse.js
var require_DatasetsListResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/DatasetsListResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DatasetsListResponse = void 0;
    var core = __importStar2(require_core());
    var Dataset_1 = require_Dataset();
    exports2.DatasetsListResponse = core.serialization.object({
      datasets: core.serialization.list(Dataset_1.Dataset).optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/DatasetsCreateResponseDatasetPartsItem.js
var require_DatasetsCreateResponseDatasetPartsItem = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/DatasetsCreateResponseDatasetPartsItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DatasetsCreateResponseDatasetPartsItem = void 0;
    var core = __importStar2(require_core());
    exports2.DatasetsCreateResponseDatasetPartsItem = core.serialization.object({
      name: core.serialization.string().optional(),
      numRows: core.serialization.property("num_rows", core.serialization.number().optional()),
      samples: core.serialization.list(core.serialization.string()).optional(),
      partKind: core.serialization.property("part_kind", core.serialization.string().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/DatasetsCreateResponse.js
var require_DatasetsCreateResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/DatasetsCreateResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DatasetsCreateResponse = void 0;
    var core = __importStar2(require_core());
    exports2.DatasetsCreateResponse = core.serialization.object({
      id: core.serialization.string().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/DatasetsGetUsageResponse.js
var require_DatasetsGetUsageResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/DatasetsGetUsageResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DatasetsGetUsageResponse = void 0;
    var core = __importStar2(require_core());
    exports2.DatasetsGetUsageResponse = core.serialization.object({
      organizationUsage: core.serialization.property("organization_usage", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/DatasetsGetResponse.js
var require_DatasetsGetResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/DatasetsGetResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DatasetsGetResponse = void 0;
    var core = __importStar2(require_core());
    var Dataset_1 = require_Dataset();
    exports2.DatasetsGetResponse = core.serialization.object({
      dataset: Dataset_1.Dataset
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/index.js
var require_types2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_DatasetsListResponse(), exports2);
    __exportStar2(require_DatasetsCreateResponseDatasetPartsItem(), exports2);
    __exportStar2(require_DatasetsCreateResponse(), exports2);
    __exportStar2(require_DatasetsGetUsageResponse(), exports2);
    __exportStar2(require_DatasetsGetResponse(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/client/delete.js
var require_delete = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/client/delete.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Response = void 0;
    var core = __importStar2(require_core());
    exports2.Response = core.serialization.record(core.serialization.string(), core.serialization.unknown());
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/client/index.js
var require_client2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.delete = void 0;
    exports2.delete = __importStar2(require_delete());
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/index.js
var require_datasets = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/datasets/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_types2(), exports2);
    __exportStar2(require_client2(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/BaseType.js
var require_BaseType = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/BaseType.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseType = void 0;
    var core = __importStar2(require_core());
    exports2.BaseType = core.serialization.enum_([
      "BASE_TYPE_UNSPECIFIED",
      "BASE_TYPE_GENERATIVE",
      "BASE_TYPE_CLASSIFICATION",
      "BASE_TYPE_RERANK",
      "BASE_TYPE_CHAT"
    ]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Strategy.js
var require_Strategy = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Strategy.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Strategy = void 0;
    var core = __importStar2(require_core());
    exports2.Strategy = core.serialization.enum_(["STRATEGY_UNSPECIFIED", "STRATEGY_VANILLA", "STRATEGY_TFEW"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/BaseModel.js
var require_BaseModel = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/BaseModel.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseModel = void 0;
    var core = __importStar2(require_core());
    var BaseType_1 = require_BaseType();
    var Strategy_1 = require_Strategy();
    exports2.BaseModel = core.serialization.object({
      name: core.serialization.string().optional(),
      version: core.serialization.string().optional(),
      baseType: core.serialization.property("base_type", BaseType_1.BaseType),
      strategy: Strategy_1.Strategy.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Hyperparameters.js
var require_Hyperparameters = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Hyperparameters.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Hyperparameters = void 0;
    var core = __importStar2(require_core());
    exports2.Hyperparameters = core.serialization.object({
      earlyStoppingPatience: core.serialization.property("early_stopping_patience", core.serialization.number().optional()),
      earlyStoppingThreshold: core.serialization.property("early_stopping_threshold", core.serialization.number().optional()),
      trainBatchSize: core.serialization.property("train_batch_size", core.serialization.number().optional()),
      trainEpochs: core.serialization.property("train_epochs", core.serialization.number().optional()),
      learningRate: core.serialization.property("learning_rate", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Settings.js
var require_Settings = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Settings.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Settings = void 0;
    var core = __importStar2(require_core());
    var BaseModel_1 = require_BaseModel();
    var Hyperparameters_1 = require_Hyperparameters();
    exports2.Settings = core.serialization.object({
      baseModel: core.serialization.property("base_model", BaseModel_1.BaseModel),
      datasetId: core.serialization.property("dataset_id", core.serialization.string()),
      hyperparameters: Hyperparameters_1.Hyperparameters.optional(),
      multiLabel: core.serialization.property("multi_label", core.serialization.boolean().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Status.js
var require_Status = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Status.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Status = void 0;
    var core = __importStar2(require_core());
    exports2.Status = core.serialization.enum_([
      "STATUS_UNSPECIFIED",
      "STATUS_FINETUNING",
      "STATUS_DEPLOYING_API",
      "STATUS_READY",
      "STATUS_FAILED",
      "STATUS_DELETED",
      "STATUS_TEMPORARILY_OFFLINE",
      "STATUS_PAUSED",
      "STATUS_QUEUED"
    ]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/FinetunedModel.js
var require_FinetunedModel = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/FinetunedModel.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FinetunedModel = void 0;
    var core = __importStar2(require_core());
    var Settings_1 = require_Settings();
    var Status_1 = require_Status();
    exports2.FinetunedModel = core.serialization.object({
      id: core.serialization.string().optional(),
      name: core.serialization.string(),
      creatorId: core.serialization.property("creator_id", core.serialization.string().optional()),
      organizationId: core.serialization.property("organization_id", core.serialization.string().optional()),
      settings: Settings_1.Settings,
      status: Status_1.Status.optional(),
      createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
      updatedAt: core.serialization.property("updated_at", core.serialization.date().optional()),
      completedAt: core.serialization.property("completed_at", core.serialization.date().optional()),
      lastUsed: core.serialization.property("last_used", core.serialization.date().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/ListFinetunedModelsResponse.js
var require_ListFinetunedModelsResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/ListFinetunedModelsResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListFinetunedModelsResponse = void 0;
    var core = __importStar2(require_core());
    var FinetunedModel_1 = require_FinetunedModel();
    exports2.ListFinetunedModelsResponse = core.serialization.object({
      finetunedModels: core.serialization.property("finetuned_models", core.serialization.list(FinetunedModel_1.FinetunedModel).optional()),
      nextPageToken: core.serialization.property("next_page_token", core.serialization.string().optional()),
      totalSize: core.serialization.property("total_size", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Error_.js
var require_Error = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Error_.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Error_ = void 0;
    var core = __importStar2(require_core());
    exports2.Error_ = core.serialization.object({
      message: core.serialization.string().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/CreateFinetunedModelResponse.js
var require_CreateFinetunedModelResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/CreateFinetunedModelResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateFinetunedModelResponse = void 0;
    var core = __importStar2(require_core());
    var FinetunedModel_1 = require_FinetunedModel();
    exports2.CreateFinetunedModelResponse = core.serialization.object({
      finetunedModel: core.serialization.property("finetuned_model", FinetunedModel_1.FinetunedModel.optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/GetFinetunedModelResponse.js
var require_GetFinetunedModelResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/GetFinetunedModelResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFinetunedModelResponse = void 0;
    var core = __importStar2(require_core());
    var FinetunedModel_1 = require_FinetunedModel();
    exports2.GetFinetunedModelResponse = core.serialization.object({
      finetunedModel: core.serialization.property("finetuned_model", FinetunedModel_1.FinetunedModel.optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/DeleteFinetunedModelResponse.js
var require_DeleteFinetunedModelResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/DeleteFinetunedModelResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteFinetunedModelResponse = void 0;
    var core = __importStar2(require_core());
    exports2.DeleteFinetunedModelResponse = core.serialization.record(core.serialization.string(), core.serialization.unknown());
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/UpdateFinetunedModelResponse.js
var require_UpdateFinetunedModelResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/UpdateFinetunedModelResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateFinetunedModelResponse = void 0;
    var core = __importStar2(require_core());
    var FinetunedModel_1 = require_FinetunedModel();
    exports2.UpdateFinetunedModelResponse = core.serialization.object({
      finetunedModel: core.serialization.property("finetuned_model", FinetunedModel_1.FinetunedModel.optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Event.js
var require_Event = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/Event.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Event = void 0;
    var core = __importStar2(require_core());
    var Status_1 = require_Status();
    exports2.Event = core.serialization.object({
      userId: core.serialization.property("user_id", core.serialization.string().optional()),
      status: Status_1.Status.optional(),
      createdAt: core.serialization.property("created_at", core.serialization.date().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/ListEventsResponse.js
var require_ListEventsResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/ListEventsResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListEventsResponse = void 0;
    var core = __importStar2(require_core());
    var Event_1 = require_Event();
    exports2.ListEventsResponse = core.serialization.object({
      events: core.serialization.list(Event_1.Event).optional(),
      nextPageToken: core.serialization.property("next_page_token", core.serialization.string().optional()),
      totalSize: core.serialization.property("total_size", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/TrainingStepMetrics.js
var require_TrainingStepMetrics = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/TrainingStepMetrics.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TrainingStepMetrics = void 0;
    var core = __importStar2(require_core());
    exports2.TrainingStepMetrics = core.serialization.object({
      createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
      stepNumber: core.serialization.property("step_number", core.serialization.number().optional()),
      metrics: core.serialization.record(core.serialization.string(), core.serialization.number()).optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/ListTrainingStepMetricsResponse.js
var require_ListTrainingStepMetricsResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/ListTrainingStepMetricsResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListTrainingStepMetricsResponse = void 0;
    var core = __importStar2(require_core());
    var TrainingStepMetrics_1 = require_TrainingStepMetrics();
    exports2.ListTrainingStepMetricsResponse = core.serialization.object({
      stepMetrics: core.serialization.property("step_metrics", core.serialization.list(TrainingStepMetrics_1.TrainingStepMetrics).optional()),
      nextPageToken: core.serialization.property("next_page_token", core.serialization.string().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/index.js
var require_types3 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_BaseType(), exports2);
    __exportStar2(require_Strategy(), exports2);
    __exportStar2(require_BaseModel(), exports2);
    __exportStar2(require_Hyperparameters(), exports2);
    __exportStar2(require_Settings(), exports2);
    __exportStar2(require_Status(), exports2);
    __exportStar2(require_FinetunedModel(), exports2);
    __exportStar2(require_ListFinetunedModelsResponse(), exports2);
    __exportStar2(require_Error(), exports2);
    __exportStar2(require_CreateFinetunedModelResponse(), exports2);
    __exportStar2(require_GetFinetunedModelResponse(), exports2);
    __exportStar2(require_DeleteFinetunedModelResponse(), exports2);
    __exportStar2(require_UpdateFinetunedModelResponse(), exports2);
    __exportStar2(require_Event(), exports2);
    __exportStar2(require_ListEventsResponse(), exports2);
    __exportStar2(require_TrainingStepMetrics(), exports2);
    __exportStar2(require_ListTrainingStepMetricsResponse(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/index.js
var require_finetuning = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/finetuning/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_types3(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/index.js
var require_resources = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/resources/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.finetuning = void 0;
    exports2.finetuning = __importStar2(require_finetuning());
    __exportStar2(require_types3(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/client/requests/FinetuningUpdateFinetunedModelRequest.js
var require_FinetuningUpdateFinetunedModelRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/client/requests/FinetuningUpdateFinetunedModelRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FinetuningUpdateFinetunedModelRequest = void 0;
    var core = __importStar2(require_core());
    var Settings_1 = require_Settings();
    var Status_1 = require_Status();
    exports2.FinetuningUpdateFinetunedModelRequest = core.serialization.object({
      name: core.serialization.string(),
      creatorId: core.serialization.property("creator_id", core.serialization.string().optional()),
      organizationId: core.serialization.property("organization_id", core.serialization.string().optional()),
      settings: Settings_1.Settings,
      status: Status_1.Status.optional(),
      createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
      updatedAt: core.serialization.property("updated_at", core.serialization.date().optional()),
      completedAt: core.serialization.property("completed_at", core.serialization.date().optional()),
      lastUsed: core.serialization.property("last_used", core.serialization.date().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/client/requests/index.js
var require_requests2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FinetuningUpdateFinetunedModelRequest = void 0;
    var FinetuningUpdateFinetunedModelRequest_1 = require_FinetuningUpdateFinetunedModelRequest();
    Object.defineProperty(exports2, "FinetuningUpdateFinetunedModelRequest", { enumerable: true, get: function() {
      return FinetuningUpdateFinetunedModelRequest_1.FinetuningUpdateFinetunedModelRequest;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/client/index.js
var require_client3 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests2(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/index.js
var require_finetuning2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/finetuning/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_resources(), exports2);
    __exportStar2(require_client3(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CreateConnectorOAuth.js
var require_CreateConnectorOAuth = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CreateConnectorOAuth.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateConnectorOAuth = void 0;
    var core = __importStar2(require_core());
    exports2.CreateConnectorOAuth = core.serialization.object({
      clientId: core.serialization.property("client_id", core.serialization.string().optional()),
      clientSecret: core.serialization.property("client_secret", core.serialization.string().optional()),
      authorizeUrl: core.serialization.property("authorize_url", core.serialization.string().optional()),
      tokenUrl: core.serialization.property("token_url", core.serialization.string().optional()),
      scope: core.serialization.string().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/AuthTokenType.js
var require_AuthTokenType = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/AuthTokenType.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuthTokenType = void 0;
    var core = __importStar2(require_core());
    exports2.AuthTokenType = core.serialization.enum_(["bearer", "basic", "noscheme"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CreateConnectorServiceAuth.js
var require_CreateConnectorServiceAuth = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CreateConnectorServiceAuth.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateConnectorServiceAuth = void 0;
    var core = __importStar2(require_core());
    var AuthTokenType_1 = require_AuthTokenType();
    exports2.CreateConnectorServiceAuth = core.serialization.object({
      type: AuthTokenType_1.AuthTokenType,
      token: core.serialization.string()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/connectors/client/requests/CreateConnectorRequest.js
var require_CreateConnectorRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/connectors/client/requests/CreateConnectorRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateConnectorRequest = void 0;
    var core = __importStar2(require_core());
    var CreateConnectorOAuth_1 = require_CreateConnectorOAuth();
    var CreateConnectorServiceAuth_1 = require_CreateConnectorServiceAuth();
    exports2.CreateConnectorRequest = core.serialization.object({
      name: core.serialization.string(),
      description: core.serialization.string().optional(),
      url: core.serialization.string(),
      excludes: core.serialization.list(core.serialization.string()).optional(),
      oauth: CreateConnectorOAuth_1.CreateConnectorOAuth.optional(),
      active: core.serialization.boolean().optional(),
      continueOnFailure: core.serialization.property("continue_on_failure", core.serialization.boolean().optional()),
      serviceAuth: core.serialization.property("service_auth", CreateConnectorServiceAuth_1.CreateConnectorServiceAuth.optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/connectors/client/requests/UpdateConnectorRequest.js
var require_UpdateConnectorRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/connectors/client/requests/UpdateConnectorRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateConnectorRequest = void 0;
    var core = __importStar2(require_core());
    var CreateConnectorOAuth_1 = require_CreateConnectorOAuth();
    var CreateConnectorServiceAuth_1 = require_CreateConnectorServiceAuth();
    exports2.UpdateConnectorRequest = core.serialization.object({
      name: core.serialization.string().optional(),
      url: core.serialization.string().optional(),
      excludes: core.serialization.list(core.serialization.string()).optional(),
      oauth: CreateConnectorOAuth_1.CreateConnectorOAuth.optional(),
      active: core.serialization.boolean().optional(),
      continueOnFailure: core.serialization.property("continue_on_failure", core.serialization.boolean().optional()),
      serviceAuth: core.serialization.property("service_auth", CreateConnectorServiceAuth_1.CreateConnectorServiceAuth.optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/connectors/client/requests/index.js
var require_requests3 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/connectors/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateConnectorRequest = exports2.CreateConnectorRequest = void 0;
    var CreateConnectorRequest_1 = require_CreateConnectorRequest();
    Object.defineProperty(exports2, "CreateConnectorRequest", { enumerable: true, get: function() {
      return CreateConnectorRequest_1.CreateConnectorRequest;
    } });
    var UpdateConnectorRequest_1 = require_UpdateConnectorRequest();
    Object.defineProperty(exports2, "UpdateConnectorRequest", { enumerable: true, get: function() {
      return UpdateConnectorRequest_1.UpdateConnectorRequest;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/connectors/client/index.js
var require_client4 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/connectors/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests3(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/connectors/index.js
var require_connectors = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/connectors/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_client4(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/index.js
var require_resources2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/resources/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.connectors = exports2.finetuning = exports2.datasets = exports2.embedJobs = void 0;
    exports2.embedJobs = __importStar2(require_embedJobs());
    __exportStar2(require_types(), exports2);
    exports2.datasets = __importStar2(require_datasets());
    __exportStar2(require_types2(), exports2);
    exports2.finetuning = __importStar2(require_finetuning2());
    __exportStar2(require_requests(), exports2);
    exports2.connectors = __importStar2(require_connectors());
    __exportStar2(require_requests3(), exports2);
    __exportStar2(require_requests2(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamRequestPromptTruncation.js
var require_ChatStreamRequestPromptTruncation = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamRequestPromptTruncation.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamRequestPromptTruncation = void 0;
    var core = __importStar2(require_core());
    exports2.ChatStreamRequestPromptTruncation = core.serialization.enum_(["OFF", "AUTO", "AUTO_PRESERVE_ORDER"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamRequestCitationQuality.js
var require_ChatStreamRequestCitationQuality = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamRequestCitationQuality.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamRequestCitationQuality = void 0;
    var core = __importStar2(require_core());
    exports2.ChatStreamRequestCitationQuality = core.serialization.enum_(["fast", "accurate"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamRequestConnectorsSearchOptions.js
var require_ChatStreamRequestConnectorsSearchOptions = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamRequestConnectorsSearchOptions.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamRequestConnectorsSearchOptions = void 0;
    var core = __importStar2(require_core());
    exports2.ChatStreamRequestConnectorsSearchOptions = core.serialization.object({
      seed: core.serialization.number().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/TooManyRequestsErrorBody.js
var require_TooManyRequestsErrorBody = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/TooManyRequestsErrorBody.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TooManyRequestsErrorBody = void 0;
    var core = __importStar2(require_core());
    exports2.TooManyRequestsErrorBody = core.serialization.object({
      data: core.serialization.string().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatRequestPromptTruncation.js
var require_ChatRequestPromptTruncation = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatRequestPromptTruncation.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatRequestPromptTruncation = void 0;
    var core = __importStar2(require_core());
    exports2.ChatRequestPromptTruncation = core.serialization.enum_(["OFF", "AUTO", "AUTO_PRESERVE_ORDER"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatRequestCitationQuality.js
var require_ChatRequestCitationQuality = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatRequestCitationQuality.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatRequestCitationQuality = void 0;
    var core = __importStar2(require_core());
    exports2.ChatRequestCitationQuality = core.serialization.enum_(["fast", "accurate"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatRequestConnectorsSearchOptions.js
var require_ChatRequestConnectorsSearchOptions = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatRequestConnectorsSearchOptions.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatRequestConnectorsSearchOptions = void 0;
    var core = __importStar2(require_core());
    exports2.ChatRequestConnectorsSearchOptions = core.serialization.object({
      seed: core.serialization.number().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamRequestTruncate.js
var require_GenerateStreamRequestTruncate = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamRequestTruncate.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamRequestTruncate = void 0;
    var core = __importStar2(require_core());
    exports2.GenerateStreamRequestTruncate = core.serialization.enum_(["NONE", "START", "END"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamRequestReturnLikelihoods.js
var require_GenerateStreamRequestReturnLikelihoods = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamRequestReturnLikelihoods.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamRequestReturnLikelihoods = void 0;
    var core = __importStar2(require_core());
    exports2.GenerateStreamRequestReturnLikelihoods = core.serialization.enum_(["GENERATION", "ALL", "NONE"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateRequestTruncate.js
var require_GenerateRequestTruncate = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateRequestTruncate.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateRequestTruncate = void 0;
    var core = __importStar2(require_core());
    exports2.GenerateRequestTruncate = core.serialization.enum_(["NONE", "START", "END"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateRequestReturnLikelihoods.js
var require_GenerateRequestReturnLikelihoods = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateRequestReturnLikelihoods.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateRequestReturnLikelihoods = void 0;
    var core = __importStar2(require_core());
    exports2.GenerateRequestReturnLikelihoods = core.serialization.enum_(["GENERATION", "ALL", "NONE"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedRequestTruncate.js
var require_EmbedRequestTruncate = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedRequestTruncate.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedRequestTruncate = void 0;
    var core = __importStar2(require_core());
    exports2.EmbedRequestTruncate = core.serialization.enum_(["NONE", "START", "END"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ApiMetaApiVersion.js
var require_ApiMetaApiVersion = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ApiMetaApiVersion.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApiMetaApiVersion = void 0;
    var core = __importStar2(require_core());
    exports2.ApiMetaApiVersion = core.serialization.object({
      version: core.serialization.string(),
      isDeprecated: core.serialization.property("is_deprecated", core.serialization.boolean().optional()),
      isExperimental: core.serialization.property("is_experimental", core.serialization.boolean().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ApiMetaBilledUnits.js
var require_ApiMetaBilledUnits = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ApiMetaBilledUnits.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApiMetaBilledUnits = void 0;
    var core = __importStar2(require_core());
    exports2.ApiMetaBilledUnits = core.serialization.object({
      inputTokens: core.serialization.property("input_tokens", core.serialization.number().optional()),
      outputTokens: core.serialization.property("output_tokens", core.serialization.number().optional()),
      searchUnits: core.serialization.property("search_units", core.serialization.number().optional()),
      classifications: core.serialization.number().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ApiMetaTokens.js
var require_ApiMetaTokens = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ApiMetaTokens.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApiMetaTokens = void 0;
    var core = __importStar2(require_core());
    exports2.ApiMetaTokens = core.serialization.object({
      inputTokens: core.serialization.property("input_tokens", core.serialization.number().optional()),
      outputTokens: core.serialization.property("output_tokens", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ApiMeta.js
var require_ApiMeta = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ApiMeta.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ApiMeta = void 0;
    var core = __importStar2(require_core());
    var ApiMetaApiVersion_1 = require_ApiMetaApiVersion();
    var ApiMetaBilledUnits_1 = require_ApiMetaBilledUnits();
    var ApiMetaTokens_1 = require_ApiMetaTokens();
    exports2.ApiMeta = core.serialization.object({
      apiVersion: core.serialization.property("api_version", ApiMetaApiVersion_1.ApiMetaApiVersion.optional()),
      billedUnits: core.serialization.property("billed_units", ApiMetaBilledUnits_1.ApiMetaBilledUnits.optional()),
      tokens: ApiMetaTokens_1.ApiMetaTokens.optional(),
      warnings: core.serialization.list(core.serialization.string()).optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedFloatsResponse.js
var require_EmbedFloatsResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedFloatsResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedFloatsResponse = void 0;
    var core = __importStar2(require_core());
    var ApiMeta_1 = require_ApiMeta();
    exports2.EmbedFloatsResponse = core.serialization.object({
      id: core.serialization.string(),
      embeddings: core.serialization.list(core.serialization.list(core.serialization.number())),
      texts: core.serialization.list(core.serialization.string()),
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedByTypeResponseEmbeddings.js
var require_EmbedByTypeResponseEmbeddings = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedByTypeResponseEmbeddings.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedByTypeResponseEmbeddings = void 0;
    var core = __importStar2(require_core());
    exports2.EmbedByTypeResponseEmbeddings = core.serialization.object({
      float: core.serialization.list(core.serialization.list(core.serialization.number())).optional(),
      int8: core.serialization.list(core.serialization.list(core.serialization.number())).optional(),
      uint8: core.serialization.list(core.serialization.list(core.serialization.number())).optional(),
      binary: core.serialization.list(core.serialization.list(core.serialization.number())).optional(),
      ubinary: core.serialization.list(core.serialization.list(core.serialization.number())).optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedByTypeResponse.js
var require_EmbedByTypeResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedByTypeResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedByTypeResponse = void 0;
    var core = __importStar2(require_core());
    var EmbedByTypeResponseEmbeddings_1 = require_EmbedByTypeResponseEmbeddings();
    var ApiMeta_1 = require_ApiMeta();
    exports2.EmbedByTypeResponse = core.serialization.object({
      id: core.serialization.string(),
      embeddings: EmbedByTypeResponseEmbeddings_1.EmbedByTypeResponseEmbeddings,
      texts: core.serialization.list(core.serialization.string()),
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedResponse.js
var require_EmbedResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedResponse = void 0;
    var core = __importStar2(require_core());
    var EmbedFloatsResponse_1 = require_EmbedFloatsResponse();
    var EmbedByTypeResponse_1 = require_EmbedByTypeResponse();
    exports2.EmbedResponse = core.serialization.union(core.serialization.discriminant("responseType", "response_type"), {
      embeddings_floats: EmbedFloatsResponse_1.EmbedFloatsResponse,
      embeddings_by_type: EmbedByTypeResponse_1.EmbedByTypeResponse
    }).transform({
      transform: (value) => value,
      untransform: (value) => value
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankRequestDocumentsItemText.js
var require_RerankRequestDocumentsItemText = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankRequestDocumentsItemText.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankRequestDocumentsItemText = void 0;
    var core = __importStar2(require_core());
    exports2.RerankRequestDocumentsItemText = core.serialization.object({
      text: core.serialization.string()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankRequestDocumentsItem.js
var require_RerankRequestDocumentsItem = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankRequestDocumentsItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankRequestDocumentsItem = void 0;
    var core = __importStar2(require_core());
    var RerankRequestDocumentsItemText_1 = require_RerankRequestDocumentsItemText();
    exports2.RerankRequestDocumentsItem = core.serialization.undiscriminatedUnion([core.serialization.string(), RerankRequestDocumentsItemText_1.RerankRequestDocumentsItemText]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankResponseResultsItemDocument.js
var require_RerankResponseResultsItemDocument = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankResponseResultsItemDocument.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankResponseResultsItemDocument = void 0;
    var core = __importStar2(require_core());
    exports2.RerankResponseResultsItemDocument = core.serialization.object({
      text: core.serialization.string()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankResponseResultsItem.js
var require_RerankResponseResultsItem = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankResponseResultsItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankResponseResultsItem = void 0;
    var core = __importStar2(require_core());
    var RerankResponseResultsItemDocument_1 = require_RerankResponseResultsItemDocument();
    exports2.RerankResponseResultsItem = core.serialization.object({
      document: RerankResponseResultsItemDocument_1.RerankResponseResultsItemDocument.optional(),
      index: core.serialization.number(),
      relevanceScore: core.serialization.property("relevance_score", core.serialization.number())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankResponse.js
var require_RerankResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankResponse = void 0;
    var core = __importStar2(require_core());
    var RerankResponseResultsItem_1 = require_RerankResponseResultsItem();
    var ApiMeta_1 = require_ApiMeta();
    exports2.RerankResponse = core.serialization.object({
      id: core.serialization.string().optional(),
      results: core.serialization.list(RerankResponseResultsItem_1.RerankResponseResultsItem),
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyRequestTruncate.js
var require_ClassifyRequestTruncate = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyRequestTruncate.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClassifyRequestTruncate = void 0;
    var core = __importStar2(require_core());
    exports2.ClassifyRequestTruncate = core.serialization.enum_(["NONE", "START", "END"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyResponseClassificationsItemLabelsValue.js
var require_ClassifyResponseClassificationsItemLabelsValue = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyResponseClassificationsItemLabelsValue.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClassifyResponseClassificationsItemLabelsValue = void 0;
    var core = __importStar2(require_core());
    exports2.ClassifyResponseClassificationsItemLabelsValue = core.serialization.object({
      confidence: core.serialization.number().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyResponseClassificationsItemClassificationType.js
var require_ClassifyResponseClassificationsItemClassificationType = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyResponseClassificationsItemClassificationType.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClassifyResponseClassificationsItemClassificationType = void 0;
    var core = __importStar2(require_core());
    exports2.ClassifyResponseClassificationsItemClassificationType = core.serialization.enum_(["single-label", "multi-label"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyResponseClassificationsItem.js
var require_ClassifyResponseClassificationsItem = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyResponseClassificationsItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClassifyResponseClassificationsItem = void 0;
    var core = __importStar2(require_core());
    var ClassifyResponseClassificationsItemLabelsValue_1 = require_ClassifyResponseClassificationsItemLabelsValue();
    var ClassifyResponseClassificationsItemClassificationType_1 = require_ClassifyResponseClassificationsItemClassificationType();
    exports2.ClassifyResponseClassificationsItem = core.serialization.object({
      id: core.serialization.string(),
      input: core.serialization.string().optional(),
      prediction: core.serialization.string().optional(),
      predictions: core.serialization.list(core.serialization.string()),
      confidence: core.serialization.number().optional(),
      confidences: core.serialization.list(core.serialization.number()),
      labels: core.serialization.record(core.serialization.string(), ClassifyResponseClassificationsItemLabelsValue_1.ClassifyResponseClassificationsItemLabelsValue),
      classificationType: core.serialization.property("classification_type", ClassifyResponseClassificationsItemClassificationType_1.ClassifyResponseClassificationsItemClassificationType)
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyResponse.js
var require_ClassifyResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClassifyResponse = void 0;
    var core = __importStar2(require_core());
    var ClassifyResponseClassificationsItem_1 = require_ClassifyResponseClassificationsItem();
    var ApiMeta_1 = require_ApiMeta();
    exports2.ClassifyResponse = core.serialization.object({
      id: core.serialization.string(),
      classifications: core.serialization.list(ClassifyResponseClassificationsItem_1.ClassifyResponseClassificationsItem),
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SummarizeRequestLength.js
var require_SummarizeRequestLength = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SummarizeRequestLength.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SummarizeRequestLength = void 0;
    var core = __importStar2(require_core());
    exports2.SummarizeRequestLength = core.serialization.enum_(["short", "medium", "long"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SummarizeRequestFormat.js
var require_SummarizeRequestFormat = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SummarizeRequestFormat.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SummarizeRequestFormat = void 0;
    var core = __importStar2(require_core());
    exports2.SummarizeRequestFormat = core.serialization.enum_(["paragraph", "bullets"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SummarizeRequestExtractiveness.js
var require_SummarizeRequestExtractiveness = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SummarizeRequestExtractiveness.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SummarizeRequestExtractiveness = void 0;
    var core = __importStar2(require_core());
    exports2.SummarizeRequestExtractiveness = core.serialization.enum_(["low", "medium", "high"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SummarizeResponse.js
var require_SummarizeResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SummarizeResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SummarizeResponse = void 0;
    var core = __importStar2(require_core());
    var ApiMeta_1 = require_ApiMeta();
    exports2.SummarizeResponse = core.serialization.object({
      id: core.serialization.string().optional(),
      summary: core.serialization.string().optional(),
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/TokenizeResponse.js
var require_TokenizeResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/TokenizeResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TokenizeResponse = void 0;
    var core = __importStar2(require_core());
    var ApiMeta_1 = require_ApiMeta();
    exports2.TokenizeResponse = core.serialization.object({
      tokens: core.serialization.list(core.serialization.number()),
      tokenStrings: core.serialization.property("token_strings", core.serialization.list(core.serialization.string())),
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/DetokenizeResponse.js
var require_DetokenizeResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/DetokenizeResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DetokenizeResponse = void 0;
    var core = __importStar2(require_core());
    var ApiMeta_1 = require_ApiMeta();
    exports2.DetokenizeResponse = core.serialization.object({
      text: core.serialization.string(),
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CheckApiKeyResponse.js
var require_CheckApiKeyResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CheckApiKeyResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CheckApiKeyResponse = void 0;
    var core = __importStar2(require_core());
    exports2.CheckApiKeyResponse = core.serialization.object({
      valid: core.serialization.boolean(),
      organizationId: core.serialization.property("organization_id", core.serialization.string().optional()),
      ownerId: core.serialization.property("owner_id", core.serialization.string().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ToolCall.js
var require_ToolCall = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ToolCall.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ToolCall = void 0;
    var core = __importStar2(require_core());
    exports2.ToolCall = core.serialization.object({
      name: core.serialization.string(),
      parameters: core.serialization.record(core.serialization.string(), core.serialization.unknown())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatMessage.js
var require_ChatMessage = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatMessage.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatMessage = void 0;
    var core = __importStar2(require_core());
    var ToolCall_1 = require_ToolCall();
    exports2.ChatMessage = core.serialization.object({
      message: core.serialization.string(),
      toolCalls: core.serialization.property("tool_calls", core.serialization.list(ToolCall_1.ToolCall).optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ToolResult.js
var require_ToolResult = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ToolResult.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ToolResult = void 0;
    var core = __importStar2(require_core());
    var ToolCall_1 = require_ToolCall();
    exports2.ToolResult = core.serialization.object({
      call: ToolCall_1.ToolCall,
      outputs: core.serialization.list(core.serialization.record(core.serialization.string(), core.serialization.unknown()))
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ToolMessage.js
var require_ToolMessage = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ToolMessage.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ToolMessage = void 0;
    var core = __importStar2(require_core());
    var ToolResult_1 = require_ToolResult();
    exports2.ToolMessage = core.serialization.object({
      toolResults: core.serialization.property("tool_results", core.serialization.list(ToolResult_1.ToolResult).optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Message.js
var require_Message = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Message.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Message = void 0;
    var core = __importStar2(require_core());
    var ChatMessage_1 = require_ChatMessage();
    var ToolMessage_1 = require_ToolMessage();
    exports2.Message = core.serialization.union("role", {
      CHATBOT: ChatMessage_1.ChatMessage,
      SYSTEM: ChatMessage_1.ChatMessage,
      USER: ChatMessage_1.ChatMessage,
      TOOL: ToolMessage_1.ToolMessage
    }).transform({
      transform: (value) => value,
      untransform: (value) => value
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatConnector.js
var require_ChatConnector = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatConnector.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatConnector = void 0;
    var core = __importStar2(require_core());
    exports2.ChatConnector = core.serialization.object({
      id: core.serialization.string(),
      userAccessToken: core.serialization.property("user_access_token", core.serialization.string().optional()),
      continueOnFailure: core.serialization.property("continue_on_failure", core.serialization.boolean().optional()),
      options: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatDocument.js
var require_ChatDocument = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatDocument.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatDocument = void 0;
    var core = __importStar2(require_core());
    exports2.ChatDocument = core.serialization.record(core.serialization.string(), core.serialization.string());
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ToolParameterDefinitionsValue.js
var require_ToolParameterDefinitionsValue = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ToolParameterDefinitionsValue.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ToolParameterDefinitionsValue = void 0;
    var core = __importStar2(require_core());
    exports2.ToolParameterDefinitionsValue = core.serialization.object({
      description: core.serialization.string().optional(),
      type: core.serialization.string(),
      required: core.serialization.boolean().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Tool.js
var require_Tool = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Tool.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Tool = void 0;
    var core = __importStar2(require_core());
    var ToolParameterDefinitionsValue_1 = require_ToolParameterDefinitionsValue();
    exports2.Tool = core.serialization.object({
      name: core.serialization.string(),
      description: core.serialization.string(),
      parameterDefinitions: core.serialization.property("parameter_definitions", core.serialization.record(core.serialization.string(), ToolParameterDefinitionsValue_1.ToolParameterDefinitionsValue).optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatCitation.js
var require_ChatCitation = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatCitation.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatCitation = void 0;
    var core = __importStar2(require_core());
    exports2.ChatCitation = core.serialization.object({
      start: core.serialization.number(),
      end: core.serialization.number(),
      text: core.serialization.string(),
      documentIds: core.serialization.property("document_ids", core.serialization.list(core.serialization.string()))
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatSearchQuery.js
var require_ChatSearchQuery = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatSearchQuery.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatSearchQuery = void 0;
    var core = __importStar2(require_core());
    exports2.ChatSearchQuery = core.serialization.object({
      text: core.serialization.string(),
      generationId: core.serialization.property("generation_id", core.serialization.string())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatSearchResultConnector.js
var require_ChatSearchResultConnector = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatSearchResultConnector.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatSearchResultConnector = void 0;
    var core = __importStar2(require_core());
    exports2.ChatSearchResultConnector = core.serialization.object({
      id: core.serialization.string()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatSearchResult.js
var require_ChatSearchResult = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatSearchResult.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatSearchResult = void 0;
    var core = __importStar2(require_core());
    var ChatSearchQuery_1 = require_ChatSearchQuery();
    var ChatSearchResultConnector_1 = require_ChatSearchResultConnector();
    exports2.ChatSearchResult = core.serialization.object({
      searchQuery: core.serialization.property("search_query", ChatSearchQuery_1.ChatSearchQuery.optional()),
      connector: ChatSearchResultConnector_1.ChatSearchResultConnector,
      documentIds: core.serialization.property("document_ids", core.serialization.list(core.serialization.string())),
      errorMessage: core.serialization.property("error_message", core.serialization.string().optional()),
      continueOnFailure: core.serialization.property("continue_on_failure", core.serialization.boolean().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/FinishReason.js
var require_FinishReason = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/FinishReason.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FinishReason = void 0;
    var core = __importStar2(require_core());
    exports2.FinishReason = core.serialization.enum_([
      "COMPLETE",
      "STOP_SEQUENCE",
      "ERROR",
      "ERROR_TOXIC",
      "ERROR_LIMIT",
      "USER_CANCEL",
      "MAX_TOKENS"
    ]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/NonStreamedChatResponse.js
var require_NonStreamedChatResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/NonStreamedChatResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NonStreamedChatResponse = void 0;
    var core = __importStar2(require_core());
    var ChatCitation_1 = require_ChatCitation();
    var ChatDocument_1 = require_ChatDocument();
    var ChatSearchQuery_1 = require_ChatSearchQuery();
    var ChatSearchResult_1 = require_ChatSearchResult();
    var FinishReason_1 = require_FinishReason();
    var ToolCall_1 = require_ToolCall();
    var Message_1 = require_Message();
    var ApiMeta_1 = require_ApiMeta();
    exports2.NonStreamedChatResponse = core.serialization.object({
      text: core.serialization.string(),
      generationId: core.serialization.property("generation_id", core.serialization.string().optional()),
      citations: core.serialization.list(ChatCitation_1.ChatCitation).optional(),
      documents: core.serialization.list(ChatDocument_1.ChatDocument).optional(),
      isSearchRequired: core.serialization.property("is_search_required", core.serialization.boolean().optional()),
      searchQueries: core.serialization.property("search_queries", core.serialization.list(ChatSearchQuery_1.ChatSearchQuery).optional()),
      searchResults: core.serialization.property("search_results", core.serialization.list(ChatSearchResult_1.ChatSearchResult).optional()),
      finishReason: core.serialization.property("finish_reason", FinishReason_1.FinishReason.optional()),
      toolCalls: core.serialization.property("tool_calls", core.serialization.list(ToolCall_1.ToolCall).optional()),
      chatHistory: core.serialization.property("chat_history", core.serialization.list(Message_1.Message).optional()),
      prompt: core.serialization.string().optional(),
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamEvent.js
var require_ChatStreamEvent = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamEvent.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamEvent = void 0;
    var core = __importStar2(require_core());
    exports2.ChatStreamEvent = core.serialization.object({});
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamStartEvent.js
var require_ChatStreamStartEvent = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamStartEvent.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamStartEvent = void 0;
    var core = __importStar2(require_core());
    var ChatStreamEvent_1 = require_ChatStreamEvent();
    exports2.ChatStreamStartEvent = core.serialization.object({
      generationId: core.serialization.property("generation_id", core.serialization.string())
    }).extend(ChatStreamEvent_1.ChatStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatSearchQueriesGenerationEvent.js
var require_ChatSearchQueriesGenerationEvent = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatSearchQueriesGenerationEvent.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatSearchQueriesGenerationEvent = void 0;
    var core = __importStar2(require_core());
    var ChatSearchQuery_1 = require_ChatSearchQuery();
    var ChatStreamEvent_1 = require_ChatStreamEvent();
    exports2.ChatSearchQueriesGenerationEvent = core.serialization.object({
      searchQueries: core.serialization.property("search_queries", core.serialization.list(ChatSearchQuery_1.ChatSearchQuery))
    }).extend(ChatStreamEvent_1.ChatStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatSearchResultsEvent.js
var require_ChatSearchResultsEvent = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatSearchResultsEvent.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatSearchResultsEvent = void 0;
    var core = __importStar2(require_core());
    var ChatSearchResult_1 = require_ChatSearchResult();
    var ChatDocument_1 = require_ChatDocument();
    var ChatStreamEvent_1 = require_ChatStreamEvent();
    exports2.ChatSearchResultsEvent = core.serialization.object({
      searchResults: core.serialization.property("search_results", core.serialization.list(ChatSearchResult_1.ChatSearchResult).optional()),
      documents: core.serialization.list(ChatDocument_1.ChatDocument).optional()
    }).extend(ChatStreamEvent_1.ChatStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatTextGenerationEvent.js
var require_ChatTextGenerationEvent = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatTextGenerationEvent.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatTextGenerationEvent = void 0;
    var core = __importStar2(require_core());
    var ChatStreamEvent_1 = require_ChatStreamEvent();
    exports2.ChatTextGenerationEvent = core.serialization.object({
      text: core.serialization.string()
    }).extend(ChatStreamEvent_1.ChatStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatCitationGenerationEvent.js
var require_ChatCitationGenerationEvent = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatCitationGenerationEvent.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatCitationGenerationEvent = void 0;
    var core = __importStar2(require_core());
    var ChatCitation_1 = require_ChatCitation();
    var ChatStreamEvent_1 = require_ChatStreamEvent();
    exports2.ChatCitationGenerationEvent = core.serialization.object({
      citations: core.serialization.list(ChatCitation_1.ChatCitation)
    }).extend(ChatStreamEvent_1.ChatStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatToolCallsGenerationEvent.js
var require_ChatToolCallsGenerationEvent = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatToolCallsGenerationEvent.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatToolCallsGenerationEvent = void 0;
    var core = __importStar2(require_core());
    var ToolCall_1 = require_ToolCall();
    var ChatStreamEvent_1 = require_ChatStreamEvent();
    exports2.ChatToolCallsGenerationEvent = core.serialization.object({
      text: core.serialization.string().optional(),
      toolCalls: core.serialization.property("tool_calls", core.serialization.list(ToolCall_1.ToolCall))
    }).extend(ChatStreamEvent_1.ChatStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamEndEventFinishReason.js
var require_ChatStreamEndEventFinishReason = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamEndEventFinishReason.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamEndEventFinishReason = void 0;
    var core = __importStar2(require_core());
    exports2.ChatStreamEndEventFinishReason = core.serialization.enum_(["COMPLETE", "ERROR_LIMIT", "MAX_TOKENS", "ERROR", "ERROR_TOXIC"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamEndEvent.js
var require_ChatStreamEndEvent = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatStreamEndEvent.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamEndEvent = void 0;
    var core = __importStar2(require_core());
    var ChatStreamEndEventFinishReason_1 = require_ChatStreamEndEventFinishReason();
    var NonStreamedChatResponse_1 = require_NonStreamedChatResponse();
    var ChatStreamEvent_1 = require_ChatStreamEvent();
    exports2.ChatStreamEndEvent = core.serialization.object({
      finishReason: core.serialization.property("finish_reason", ChatStreamEndEventFinishReason_1.ChatStreamEndEventFinishReason),
      response: NonStreamedChatResponse_1.NonStreamedChatResponse
    }).extend(ChatStreamEvent_1.ChatStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ToolCallDelta.js
var require_ToolCallDelta = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ToolCallDelta.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ToolCallDelta = void 0;
    var core = __importStar2(require_core());
    exports2.ToolCallDelta = core.serialization.object({
      name: core.serialization.string().optional(),
      index: core.serialization.number().optional(),
      parameters: core.serialization.string().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatToolCallsChunkEvent.js
var require_ChatToolCallsChunkEvent = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatToolCallsChunkEvent.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatToolCallsChunkEvent = void 0;
    var core = __importStar2(require_core());
    var ToolCallDelta_1 = require_ToolCallDelta();
    var ChatStreamEvent_1 = require_ChatStreamEvent();
    exports2.ChatToolCallsChunkEvent = core.serialization.object({
      toolCallDelta: core.serialization.property("tool_call_delta", ToolCallDelta_1.ToolCallDelta)
    }).extend(ChatStreamEvent_1.ChatStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/StreamedChatResponse.js
var require_StreamedChatResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/StreamedChatResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamedChatResponse = void 0;
    var core = __importStar2(require_core());
    var ChatStreamStartEvent_1 = require_ChatStreamStartEvent();
    var ChatSearchQueriesGenerationEvent_1 = require_ChatSearchQueriesGenerationEvent();
    var ChatSearchResultsEvent_1 = require_ChatSearchResultsEvent();
    var ChatTextGenerationEvent_1 = require_ChatTextGenerationEvent();
    var ChatCitationGenerationEvent_1 = require_ChatCitationGenerationEvent();
    var ChatToolCallsGenerationEvent_1 = require_ChatToolCallsGenerationEvent();
    var ChatStreamEndEvent_1 = require_ChatStreamEndEvent();
    var ChatToolCallsChunkEvent_1 = require_ChatToolCallsChunkEvent();
    exports2.StreamedChatResponse = core.serialization.union(core.serialization.discriminant("eventType", "event_type"), {
      "stream-start": ChatStreamStartEvent_1.ChatStreamStartEvent,
      "search-queries-generation": ChatSearchQueriesGenerationEvent_1.ChatSearchQueriesGenerationEvent,
      "search-results": ChatSearchResultsEvent_1.ChatSearchResultsEvent,
      "text-generation": ChatTextGenerationEvent_1.ChatTextGenerationEvent,
      "citation-generation": ChatCitationGenerationEvent_1.ChatCitationGenerationEvent,
      "tool-calls-generation": ChatToolCallsGenerationEvent_1.ChatToolCallsGenerationEvent,
      "stream-end": ChatStreamEndEvent_1.ChatStreamEndEvent,
      "tool-calls-chunk": ChatToolCallsChunkEvent_1.ChatToolCallsChunkEvent
    }).transform({
      transform: (value) => value,
      untransform: (value) => value
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SingleGenerationTokenLikelihoodsItem.js
var require_SingleGenerationTokenLikelihoodsItem = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SingleGenerationTokenLikelihoodsItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SingleGenerationTokenLikelihoodsItem = void 0;
    var core = __importStar2(require_core());
    exports2.SingleGenerationTokenLikelihoodsItem = core.serialization.object({
      token: core.serialization.string(),
      likelihood: core.serialization.number()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SingleGeneration.js
var require_SingleGeneration = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SingleGeneration.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SingleGeneration = void 0;
    var core = __importStar2(require_core());
    var SingleGenerationTokenLikelihoodsItem_1 = require_SingleGenerationTokenLikelihoodsItem();
    exports2.SingleGeneration = core.serialization.object({
      id: core.serialization.string(),
      text: core.serialization.string(),
      index: core.serialization.number().optional(),
      likelihood: core.serialization.number().optional(),
      tokenLikelihoods: core.serialization.property("token_likelihoods", core.serialization.list(SingleGenerationTokenLikelihoodsItem_1.SingleGenerationTokenLikelihoodsItem).optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Generation.js
var require_Generation = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Generation.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Generation = void 0;
    var core = __importStar2(require_core());
    var SingleGeneration_1 = require_SingleGeneration();
    var ApiMeta_1 = require_ApiMeta();
    exports2.Generation = core.serialization.object({
      id: core.serialization.string(),
      prompt: core.serialization.string().optional(),
      generations: core.serialization.list(SingleGeneration_1.SingleGeneration),
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamEvent.js
var require_GenerateStreamEvent = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamEvent.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamEvent = void 0;
    var core = __importStar2(require_core());
    exports2.GenerateStreamEvent = core.serialization.object({});
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamText.js
var require_GenerateStreamText = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamText.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamText = void 0;
    var core = __importStar2(require_core());
    var GenerateStreamEvent_1 = require_GenerateStreamEvent();
    exports2.GenerateStreamText = core.serialization.object({
      text: core.serialization.string(),
      index: core.serialization.number().optional(),
      isFinished: core.serialization.property("is_finished", core.serialization.boolean())
    }).extend(GenerateStreamEvent_1.GenerateStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SingleGenerationInStream.js
var require_SingleGenerationInStream = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/SingleGenerationInStream.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SingleGenerationInStream = void 0;
    var core = __importStar2(require_core());
    var FinishReason_1 = require_FinishReason();
    exports2.SingleGenerationInStream = core.serialization.object({
      id: core.serialization.string(),
      text: core.serialization.string(),
      index: core.serialization.number().optional(),
      finishReason: core.serialization.property("finish_reason", FinishReason_1.FinishReason)
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamEndResponse.js
var require_GenerateStreamEndResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamEndResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamEndResponse = void 0;
    var core = __importStar2(require_core());
    var SingleGenerationInStream_1 = require_SingleGenerationInStream();
    exports2.GenerateStreamEndResponse = core.serialization.object({
      id: core.serialization.string(),
      prompt: core.serialization.string().optional(),
      generations: core.serialization.list(SingleGenerationInStream_1.SingleGenerationInStream).optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamEnd.js
var require_GenerateStreamEnd = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamEnd.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamEnd = void 0;
    var core = __importStar2(require_core());
    var FinishReason_1 = require_FinishReason();
    var GenerateStreamEndResponse_1 = require_GenerateStreamEndResponse();
    var GenerateStreamEvent_1 = require_GenerateStreamEvent();
    exports2.GenerateStreamEnd = core.serialization.object({
      isFinished: core.serialization.property("is_finished", core.serialization.boolean()),
      finishReason: core.serialization.property("finish_reason", FinishReason_1.FinishReason.optional()),
      response: GenerateStreamEndResponse_1.GenerateStreamEndResponse
    }).extend(GenerateStreamEvent_1.GenerateStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamError.js
var require_GenerateStreamError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamError.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamError = void 0;
    var core = __importStar2(require_core());
    var FinishReason_1 = require_FinishReason();
    var GenerateStreamEvent_1 = require_GenerateStreamEvent();
    exports2.GenerateStreamError = core.serialization.object({
      index: core.serialization.number().optional(),
      isFinished: core.serialization.property("is_finished", core.serialization.boolean()),
      finishReason: core.serialization.property("finish_reason", FinishReason_1.FinishReason),
      err: core.serialization.string()
    }).extend(GenerateStreamEvent_1.GenerateStreamEvent);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamedResponse.js
var require_GenerateStreamedResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GenerateStreamedResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamedResponse = void 0;
    var core = __importStar2(require_core());
    var GenerateStreamText_1 = require_GenerateStreamText();
    var GenerateStreamEnd_1 = require_GenerateStreamEnd();
    var GenerateStreamError_1 = require_GenerateStreamError();
    exports2.GenerateStreamedResponse = core.serialization.union(core.serialization.discriminant("eventType", "event_type"), {
      "text-generation": GenerateStreamText_1.GenerateStreamText,
      "stream-end": GenerateStreamEnd_1.GenerateStreamEnd,
      "stream-error": GenerateStreamError_1.GenerateStreamError
    }).transform({
      transform: (value) => value,
      untransform: (value) => value
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedJobStatus.js
var require_EmbedJobStatus = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedJobStatus.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedJobStatus = void 0;
    var core = __importStar2(require_core());
    exports2.EmbedJobStatus = core.serialization.enum_(["processing", "complete", "cancelling", "cancelled", "failed"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedJobTruncate.js
var require_EmbedJobTruncate = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedJobTruncate.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedJobTruncate = void 0;
    var core = __importStar2(require_core());
    exports2.EmbedJobTruncate = core.serialization.enum_(["START", "END"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedJob.js
var require_EmbedJob = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/EmbedJob.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedJob = void 0;
    var core = __importStar2(require_core());
    var EmbedJobStatus_1 = require_EmbedJobStatus();
    var EmbedJobTruncate_1 = require_EmbedJobTruncate();
    var ApiMeta_1 = require_ApiMeta();
    exports2.EmbedJob = core.serialization.object({
      jobId: core.serialization.property("job_id", core.serialization.string()),
      name: core.serialization.string().optional(),
      status: EmbedJobStatus_1.EmbedJobStatus,
      createdAt: core.serialization.property("created_at", core.serialization.date()),
      inputDatasetId: core.serialization.property("input_dataset_id", core.serialization.string()),
      outputDatasetId: core.serialization.property("output_dataset_id", core.serialization.string().optional()),
      model: core.serialization.string(),
      truncate: EmbedJobTruncate_1.EmbedJobTruncate,
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ListEmbedJobResponse.js
var require_ListEmbedJobResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ListEmbedJobResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListEmbedJobResponse = void 0;
    var core = __importStar2(require_core());
    var EmbedJob_1 = require_EmbedJob();
    exports2.ListEmbedJobResponse = core.serialization.object({
      embedJobs: core.serialization.property("embed_jobs", core.serialization.list(EmbedJob_1.EmbedJob).optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CreateEmbedJobResponse.js
var require_CreateEmbedJobResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CreateEmbedJobResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateEmbedJobResponse = void 0;
    var core = __importStar2(require_core());
    var ApiMeta_1 = require_ApiMeta();
    exports2.CreateEmbedJobResponse = core.serialization.object({
      jobId: core.serialization.property("job_id", core.serialization.string()),
      meta: ApiMeta_1.ApiMeta.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyExample.js
var require_ClassifyExample = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyExample.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClassifyExample = void 0;
    var core = __importStar2(require_core());
    exports2.ClassifyExample = core.serialization.object({
      text: core.serialization.string().optional(),
      label: core.serialization.string().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ParseInfo.js
var require_ParseInfo = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ParseInfo.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ParseInfo = void 0;
    var core = __importStar2(require_core());
    exports2.ParseInfo = core.serialization.object({
      separator: core.serialization.string().optional(),
      delimiter: core.serialization.string().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankerDataMetrics.js
var require_RerankerDataMetrics = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/RerankerDataMetrics.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankerDataMetrics = void 0;
    var core = __importStar2(require_core());
    exports2.RerankerDataMetrics = core.serialization.object({
      numTrainQueries: core.serialization.property("num_train_queries", core.serialization.number().optional()),
      numTrainRelevantPassages: core.serialization.property("num_train_relevant_passages", core.serialization.number().optional()),
      numTrainHardNegatives: core.serialization.property("num_train_hard_negatives", core.serialization.number().optional()),
      numEvalQueries: core.serialization.property("num_eval_queries", core.serialization.number().optional()),
      numEvalRelevantPassages: core.serialization.property("num_eval_relevant_passages", core.serialization.number().optional()),
      numEvalHardNegatives: core.serialization.property("num_eval_hard_negatives", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatDataMetrics.js
var require_ChatDataMetrics = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ChatDataMetrics.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatDataMetrics = void 0;
    var core = __importStar2(require_core());
    exports2.ChatDataMetrics = core.serialization.object({
      numTrainTurns: core.serialization.property("num_train_turns", core.serialization.number().optional()),
      numEvalTurns: core.serialization.property("num_eval_turns", core.serialization.number().optional()),
      preamble: core.serialization.string().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/LabelMetric.js
var require_LabelMetric = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/LabelMetric.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LabelMetric = void 0;
    var core = __importStar2(require_core());
    exports2.LabelMetric = core.serialization.object({
      totalExamples: core.serialization.property("total_examples", core.serialization.number().optional()),
      label: core.serialization.string().optional(),
      samples: core.serialization.list(core.serialization.string()).optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyDataMetrics.js
var require_ClassifyDataMetrics = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ClassifyDataMetrics.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClassifyDataMetrics = void 0;
    var core = __importStar2(require_core());
    var LabelMetric_1 = require_LabelMetric();
    exports2.ClassifyDataMetrics = core.serialization.object({
      labelMetrics: core.serialization.property("label_metrics", core.serialization.list(LabelMetric_1.LabelMetric).optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/FinetuneDatasetMetrics.js
var require_FinetuneDatasetMetrics = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/FinetuneDatasetMetrics.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FinetuneDatasetMetrics = void 0;
    var core = __importStar2(require_core());
    exports2.FinetuneDatasetMetrics = core.serialization.object({
      trainableTokenCount: core.serialization.property("trainable_token_count", core.serialization.number().optional()),
      totalExamples: core.serialization.property("total_examples", core.serialization.number().optional()),
      trainExamples: core.serialization.property("train_examples", core.serialization.number().optional()),
      trainSizeBytes: core.serialization.property("train_size_bytes", core.serialization.number().optional()),
      evalExamples: core.serialization.property("eval_examples", core.serialization.number().optional()),
      evalSizeBytes: core.serialization.property("eval_size_bytes", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/MetricsEmbedDataFieldsItem.js
var require_MetricsEmbedDataFieldsItem = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/MetricsEmbedDataFieldsItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MetricsEmbedDataFieldsItem = void 0;
    var core = __importStar2(require_core());
    exports2.MetricsEmbedDataFieldsItem = core.serialization.object({
      name: core.serialization.string().optional(),
      count: core.serialization.number().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/MetricsEmbedData.js
var require_MetricsEmbedData = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/MetricsEmbedData.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MetricsEmbedData = void 0;
    var core = __importStar2(require_core());
    var MetricsEmbedDataFieldsItem_1 = require_MetricsEmbedDataFieldsItem();
    exports2.MetricsEmbedData = core.serialization.object({
      fields: core.serialization.list(MetricsEmbedDataFieldsItem_1.MetricsEmbedDataFieldsItem).optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Metrics.js
var require_Metrics = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Metrics.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Metrics = void 0;
    var core = __importStar2(require_core());
    var FinetuneDatasetMetrics_1 = require_FinetuneDatasetMetrics();
    var MetricsEmbedData_1 = require_MetricsEmbedData();
    exports2.Metrics = core.serialization.object({
      finetuneDatasetMetrics: core.serialization.property("finetune_dataset_metrics", FinetuneDatasetMetrics_1.FinetuneDatasetMetrics.optional()),
      embedData: core.serialization.property("embed_data", MetricsEmbedData_1.MetricsEmbedData.optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ConnectorOAuth.js
var require_ConnectorOAuth = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ConnectorOAuth.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConnectorOAuth = void 0;
    var core = __importStar2(require_core());
    exports2.ConnectorOAuth = core.serialization.object({
      clientId: core.serialization.property("client_id", core.serialization.string().optional()),
      clientSecret: core.serialization.property("client_secret", core.serialization.string().optional()),
      authorizeUrl: core.serialization.property("authorize_url", core.serialization.string()),
      tokenUrl: core.serialization.property("token_url", core.serialization.string()),
      scope: core.serialization.string().optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ConnectorAuthStatus.js
var require_ConnectorAuthStatus = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ConnectorAuthStatus.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConnectorAuthStatus = void 0;
    var core = __importStar2(require_core());
    exports2.ConnectorAuthStatus = core.serialization.enum_(["valid", "expired"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Connector.js
var require_Connector = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/Connector.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Connector = void 0;
    var core = __importStar2(require_core());
    var ConnectorOAuth_1 = require_ConnectorOAuth();
    var ConnectorAuthStatus_1 = require_ConnectorAuthStatus();
    exports2.Connector = core.serialization.object({
      id: core.serialization.string(),
      organizationId: core.serialization.property("organization_id", core.serialization.string().optional()),
      name: core.serialization.string(),
      description: core.serialization.string().optional(),
      url: core.serialization.string().optional(),
      createdAt: core.serialization.property("created_at", core.serialization.date()),
      updatedAt: core.serialization.property("updated_at", core.serialization.date()),
      excludes: core.serialization.list(core.serialization.string()).optional(),
      authType: core.serialization.property("auth_type", core.serialization.string().optional()),
      oauth: ConnectorOAuth_1.ConnectorOAuth.optional(),
      authStatus: core.serialization.property("auth_status", ConnectorAuthStatus_1.ConnectorAuthStatus.optional()),
      active: core.serialization.boolean().optional(),
      continueOnFailure: core.serialization.property("continue_on_failure", core.serialization.boolean().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ListConnectorsResponse.js
var require_ListConnectorsResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ListConnectorsResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListConnectorsResponse = void 0;
    var core = __importStar2(require_core());
    var Connector_1 = require_Connector();
    exports2.ListConnectorsResponse = core.serialization.object({
      connectors: core.serialization.list(Connector_1.Connector),
      totalCount: core.serialization.property("total_count", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CreateConnectorResponse.js
var require_CreateConnectorResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CreateConnectorResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateConnectorResponse = void 0;
    var core = __importStar2(require_core());
    var Connector_1 = require_Connector();
    exports2.CreateConnectorResponse = core.serialization.object({
      connector: Connector_1.Connector
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GetConnectorResponse.js
var require_GetConnectorResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GetConnectorResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetConnectorResponse = void 0;
    var core = __importStar2(require_core());
    var Connector_1 = require_Connector();
    exports2.GetConnectorResponse = core.serialization.object({
      connector: Connector_1.Connector
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/DeleteConnectorResponse.js
var require_DeleteConnectorResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/DeleteConnectorResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteConnectorResponse = void 0;
    var core = __importStar2(require_core());
    exports2.DeleteConnectorResponse = core.serialization.record(core.serialization.string(), core.serialization.unknown());
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/UpdateConnectorResponse.js
var require_UpdateConnectorResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/UpdateConnectorResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpdateConnectorResponse = void 0;
    var core = __importStar2(require_core());
    var Connector_1 = require_Connector();
    exports2.UpdateConnectorResponse = core.serialization.object({
      connector: Connector_1.Connector
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/OAuthAuthorizeResponse.js
var require_OAuthAuthorizeResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/OAuthAuthorizeResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OAuthAuthorizeResponse = void 0;
    var core = __importStar2(require_core());
    exports2.OAuthAuthorizeResponse = core.serialization.object({
      redirectUrl: core.serialization.property("redirect_url", core.serialization.string().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CompatibleEndpoint.js
var require_CompatibleEndpoint = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/CompatibleEndpoint.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompatibleEndpoint = void 0;
    var core = __importStar2(require_core());
    exports2.CompatibleEndpoint = core.serialization.enum_(["chat", "embed", "classify", "summarize", "rerank", "rate", "generate"]);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GetModelResponse.js
var require_GetModelResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/GetModelResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetModelResponse = void 0;
    var core = __importStar2(require_core());
    var CompatibleEndpoint_1 = require_CompatibleEndpoint();
    exports2.GetModelResponse = core.serialization.object({
      name: core.serialization.string().optional(),
      endpoints: core.serialization.list(CompatibleEndpoint_1.CompatibleEndpoint).optional(),
      finetuned: core.serialization.boolean().optional(),
      contextLength: core.serialization.property("context_length", core.serialization.number().optional()),
      tokenizerUrl: core.serialization.property("tokenizer_url", core.serialization.string().optional()),
      defaultEndpoints: core.serialization.property("default_endpoints", core.serialization.list(CompatibleEndpoint_1.CompatibleEndpoint).optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ListModelsResponse.js
var require_ListModelsResponse = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/ListModelsResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListModelsResponse = void 0;
    var core = __importStar2(require_core());
    var GetModelResponse_1 = require_GetModelResponse();
    exports2.ListModelsResponse = core.serialization.object({
      models: core.serialization.list(GetModelResponse_1.GetModelResponse),
      nextPageToken: core.serialization.property("next_page_token", core.serialization.string().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/index.js
var require_types4 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_ChatStreamRequestPromptTruncation(), exports2);
    __exportStar2(require_ChatStreamRequestCitationQuality(), exports2);
    __exportStar2(require_ChatStreamRequestConnectorsSearchOptions(), exports2);
    __exportStar2(require_TooManyRequestsErrorBody(), exports2);
    __exportStar2(require_ChatRequestPromptTruncation(), exports2);
    __exportStar2(require_ChatRequestCitationQuality(), exports2);
    __exportStar2(require_ChatRequestConnectorsSearchOptions(), exports2);
    __exportStar2(require_GenerateStreamRequestTruncate(), exports2);
    __exportStar2(require_GenerateStreamRequestReturnLikelihoods(), exports2);
    __exportStar2(require_GenerateRequestTruncate(), exports2);
    __exportStar2(require_GenerateRequestReturnLikelihoods(), exports2);
    __exportStar2(require_EmbedRequestTruncate(), exports2);
    __exportStar2(require_EmbedResponse(), exports2);
    __exportStar2(require_RerankRequestDocumentsItemText(), exports2);
    __exportStar2(require_RerankRequestDocumentsItem(), exports2);
    __exportStar2(require_RerankResponseResultsItemDocument(), exports2);
    __exportStar2(require_RerankResponseResultsItem(), exports2);
    __exportStar2(require_RerankResponse(), exports2);
    __exportStar2(require_ClassifyRequestTruncate(), exports2);
    __exportStar2(require_ClassifyResponseClassificationsItemLabelsValue(), exports2);
    __exportStar2(require_ClassifyResponseClassificationsItemClassificationType(), exports2);
    __exportStar2(require_ClassifyResponseClassificationsItem(), exports2);
    __exportStar2(require_ClassifyResponse(), exports2);
    __exportStar2(require_SummarizeRequestLength(), exports2);
    __exportStar2(require_SummarizeRequestFormat(), exports2);
    __exportStar2(require_SummarizeRequestExtractiveness(), exports2);
    __exportStar2(require_SummarizeResponse(), exports2);
    __exportStar2(require_TokenizeResponse(), exports2);
    __exportStar2(require_DetokenizeResponse(), exports2);
    __exportStar2(require_CheckApiKeyResponse(), exports2);
    __exportStar2(require_ToolCall(), exports2);
    __exportStar2(require_ChatMessage(), exports2);
    __exportStar2(require_ToolResult(), exports2);
    __exportStar2(require_ToolMessage(), exports2);
    __exportStar2(require_Message(), exports2);
    __exportStar2(require_ChatConnector(), exports2);
    __exportStar2(require_ChatDocument(), exports2);
    __exportStar2(require_ToolParameterDefinitionsValue(), exports2);
    __exportStar2(require_Tool(), exports2);
    __exportStar2(require_ChatCitation(), exports2);
    __exportStar2(require_ChatSearchQuery(), exports2);
    __exportStar2(require_ChatSearchResultConnector(), exports2);
    __exportStar2(require_ChatSearchResult(), exports2);
    __exportStar2(require_FinishReason(), exports2);
    __exportStar2(require_ApiMetaApiVersion(), exports2);
    __exportStar2(require_ApiMetaBilledUnits(), exports2);
    __exportStar2(require_ApiMetaTokens(), exports2);
    __exportStar2(require_ApiMeta(), exports2);
    __exportStar2(require_NonStreamedChatResponse(), exports2);
    __exportStar2(require_ChatStreamEvent(), exports2);
    __exportStar2(require_ChatStreamStartEvent(), exports2);
    __exportStar2(require_ChatSearchQueriesGenerationEvent(), exports2);
    __exportStar2(require_ChatSearchResultsEvent(), exports2);
    __exportStar2(require_ChatTextGenerationEvent(), exports2);
    __exportStar2(require_ChatCitationGenerationEvent(), exports2);
    __exportStar2(require_ChatToolCallsGenerationEvent(), exports2);
    __exportStar2(require_ChatStreamEndEventFinishReason(), exports2);
    __exportStar2(require_ChatStreamEndEvent(), exports2);
    __exportStar2(require_ToolCallDelta(), exports2);
    __exportStar2(require_ChatToolCallsChunkEvent(), exports2);
    __exportStar2(require_StreamedChatResponse(), exports2);
    __exportStar2(require_SingleGenerationTokenLikelihoodsItem(), exports2);
    __exportStar2(require_SingleGeneration(), exports2);
    __exportStar2(require_Generation(), exports2);
    __exportStar2(require_GenerateStreamEvent(), exports2);
    __exportStar2(require_GenerateStreamText(), exports2);
    __exportStar2(require_SingleGenerationInStream(), exports2);
    __exportStar2(require_GenerateStreamEndResponse(), exports2);
    __exportStar2(require_GenerateStreamEnd(), exports2);
    __exportStar2(require_GenerateStreamError(), exports2);
    __exportStar2(require_GenerateStreamedResponse(), exports2);
    __exportStar2(require_EmbedInputType(), exports2);
    __exportStar2(require_EmbeddingType(), exports2);
    __exportStar2(require_EmbedFloatsResponse(), exports2);
    __exportStar2(require_EmbedByTypeResponseEmbeddings(), exports2);
    __exportStar2(require_EmbedByTypeResponse(), exports2);
    __exportStar2(require_EmbedJobStatus(), exports2);
    __exportStar2(require_EmbedJobTruncate(), exports2);
    __exportStar2(require_EmbedJob(), exports2);
    __exportStar2(require_ListEmbedJobResponse(), exports2);
    __exportStar2(require_CreateEmbedJobResponse(), exports2);
    __exportStar2(require_ClassifyExample(), exports2);
    __exportStar2(require_DatasetValidationStatus(), exports2);
    __exportStar2(require_DatasetType(), exports2);
    __exportStar2(require_DatasetPart(), exports2);
    __exportStar2(require_ParseInfo(), exports2);
    __exportStar2(require_RerankerDataMetrics(), exports2);
    __exportStar2(require_ChatDataMetrics(), exports2);
    __exportStar2(require_LabelMetric(), exports2);
    __exportStar2(require_ClassifyDataMetrics(), exports2);
    __exportStar2(require_FinetuneDatasetMetrics(), exports2);
    __exportStar2(require_MetricsEmbedDataFieldsItem(), exports2);
    __exportStar2(require_MetricsEmbedData(), exports2);
    __exportStar2(require_Metrics(), exports2);
    __exportStar2(require_Dataset(), exports2);
    __exportStar2(require_ConnectorOAuth(), exports2);
    __exportStar2(require_ConnectorAuthStatus(), exports2);
    __exportStar2(require_Connector(), exports2);
    __exportStar2(require_ListConnectorsResponse(), exports2);
    __exportStar2(require_CreateConnectorOAuth(), exports2);
    __exportStar2(require_AuthTokenType(), exports2);
    __exportStar2(require_CreateConnectorServiceAuth(), exports2);
    __exportStar2(require_CreateConnectorResponse(), exports2);
    __exportStar2(require_GetConnectorResponse(), exports2);
    __exportStar2(require_DeleteConnectorResponse(), exports2);
    __exportStar2(require_UpdateConnectorResponse(), exports2);
    __exportStar2(require_OAuthAuthorizeResponse(), exports2);
    __exportStar2(require_CompatibleEndpoint(), exports2);
    __exportStar2(require_GetModelResponse(), exports2);
    __exportStar2(require_ListModelsResponse(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/ChatStreamRequest.js
var require_ChatStreamRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/ChatStreamRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamRequest = void 0;
    var core = __importStar2(require_core());
    var Message_1 = require_Message();
    var ChatStreamRequestPromptTruncation_1 = require_ChatStreamRequestPromptTruncation();
    var ChatConnector_1 = require_ChatConnector();
    var ChatDocument_1 = require_ChatDocument();
    var ChatStreamRequestCitationQuality_1 = require_ChatStreamRequestCitationQuality();
    var Tool_1 = require_Tool();
    var ToolResult_1 = require_ToolResult();
    exports2.ChatStreamRequest = core.serialization.object({
      message: core.serialization.string(),
      model: core.serialization.string().optional(),
      preamble: core.serialization.string().optional(),
      chatHistory: core.serialization.property("chat_history", core.serialization.list(Message_1.Message).optional()),
      conversationId: core.serialization.property("conversation_id", core.serialization.string().optional()),
      promptTruncation: core.serialization.property("prompt_truncation", ChatStreamRequestPromptTruncation_1.ChatStreamRequestPromptTruncation.optional()),
      connectors: core.serialization.list(ChatConnector_1.ChatConnector).optional(),
      searchQueriesOnly: core.serialization.property("search_queries_only", core.serialization.boolean().optional()),
      documents: core.serialization.list(ChatDocument_1.ChatDocument).optional(),
      citationQuality: core.serialization.property("citation_quality", ChatStreamRequestCitationQuality_1.ChatStreamRequestCitationQuality.optional()),
      temperature: core.serialization.number().optional(),
      maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
      maxInputTokens: core.serialization.property("max_input_tokens", core.serialization.number().optional()),
      k: core.serialization.number().optional(),
      p: core.serialization.number().optional(),
      seed: core.serialization.number().optional(),
      stopSequences: core.serialization.property("stop_sequences", core.serialization.list(core.serialization.string()).optional()),
      frequencyPenalty: core.serialization.property("frequency_penalty", core.serialization.number().optional()),
      presencePenalty: core.serialization.property("presence_penalty", core.serialization.number().optional()),
      rawPrompting: core.serialization.property("raw_prompting", core.serialization.boolean().optional()),
      returnPrompt: core.serialization.property("return_prompt", core.serialization.boolean().optional()),
      tools: core.serialization.list(Tool_1.Tool).optional(),
      toolResults: core.serialization.property("tool_results", core.serialization.list(ToolResult_1.ToolResult).optional()),
      forceSingleStep: core.serialization.property("force_single_step", core.serialization.boolean().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/ChatRequest.js
var require_ChatRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/ChatRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatRequest = void 0;
    var core = __importStar2(require_core());
    var Message_1 = require_Message();
    var ChatRequestPromptTruncation_1 = require_ChatRequestPromptTruncation();
    var ChatConnector_1 = require_ChatConnector();
    var ChatDocument_1 = require_ChatDocument();
    var ChatRequestCitationQuality_1 = require_ChatRequestCitationQuality();
    var Tool_1 = require_Tool();
    var ToolResult_1 = require_ToolResult();
    exports2.ChatRequest = core.serialization.object({
      message: core.serialization.string(),
      model: core.serialization.string().optional(),
      preamble: core.serialization.string().optional(),
      chatHistory: core.serialization.property("chat_history", core.serialization.list(Message_1.Message).optional()),
      conversationId: core.serialization.property("conversation_id", core.serialization.string().optional()),
      promptTruncation: core.serialization.property("prompt_truncation", ChatRequestPromptTruncation_1.ChatRequestPromptTruncation.optional()),
      connectors: core.serialization.list(ChatConnector_1.ChatConnector).optional(),
      searchQueriesOnly: core.serialization.property("search_queries_only", core.serialization.boolean().optional()),
      documents: core.serialization.list(ChatDocument_1.ChatDocument).optional(),
      citationQuality: core.serialization.property("citation_quality", ChatRequestCitationQuality_1.ChatRequestCitationQuality.optional()),
      temperature: core.serialization.number().optional(),
      maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
      maxInputTokens: core.serialization.property("max_input_tokens", core.serialization.number().optional()),
      k: core.serialization.number().optional(),
      p: core.serialization.number().optional(),
      seed: core.serialization.number().optional(),
      stopSequences: core.serialization.property("stop_sequences", core.serialization.list(core.serialization.string()).optional()),
      frequencyPenalty: core.serialization.property("frequency_penalty", core.serialization.number().optional()),
      presencePenalty: core.serialization.property("presence_penalty", core.serialization.number().optional()),
      rawPrompting: core.serialization.property("raw_prompting", core.serialization.boolean().optional()),
      returnPrompt: core.serialization.property("return_prompt", core.serialization.boolean().optional()),
      tools: core.serialization.list(Tool_1.Tool).optional(),
      toolResults: core.serialization.property("tool_results", core.serialization.list(ToolResult_1.ToolResult).optional()),
      forceSingleStep: core.serialization.property("force_single_step", core.serialization.boolean().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/GenerateStreamRequest.js
var require_GenerateStreamRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/GenerateStreamRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamRequest = void 0;
    var core = __importStar2(require_core());
    var GenerateStreamRequestTruncate_1 = require_GenerateStreamRequestTruncate();
    var GenerateStreamRequestReturnLikelihoods_1 = require_GenerateStreamRequestReturnLikelihoods();
    exports2.GenerateStreamRequest = core.serialization.object({
      prompt: core.serialization.string(),
      model: core.serialization.string().optional(),
      numGenerations: core.serialization.property("num_generations", core.serialization.number().optional()),
      maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
      truncate: GenerateStreamRequestTruncate_1.GenerateStreamRequestTruncate.optional(),
      temperature: core.serialization.number().optional(),
      seed: core.serialization.number().optional(),
      preset: core.serialization.string().optional(),
      endSequences: core.serialization.property("end_sequences", core.serialization.list(core.serialization.string()).optional()),
      stopSequences: core.serialization.property("stop_sequences", core.serialization.list(core.serialization.string()).optional()),
      k: core.serialization.number().optional(),
      p: core.serialization.number().optional(),
      frequencyPenalty: core.serialization.property("frequency_penalty", core.serialization.number().optional()),
      presencePenalty: core.serialization.property("presence_penalty", core.serialization.number().optional()),
      returnLikelihoods: core.serialization.property("return_likelihoods", GenerateStreamRequestReturnLikelihoods_1.GenerateStreamRequestReturnLikelihoods.optional()),
      rawPrompting: core.serialization.property("raw_prompting", core.serialization.boolean().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/GenerateRequest.js
var require_GenerateRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/GenerateRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateRequest = void 0;
    var core = __importStar2(require_core());
    var GenerateRequestTruncate_1 = require_GenerateRequestTruncate();
    var GenerateRequestReturnLikelihoods_1 = require_GenerateRequestReturnLikelihoods();
    exports2.GenerateRequest = core.serialization.object({
      prompt: core.serialization.string(),
      model: core.serialization.string().optional(),
      numGenerations: core.serialization.property("num_generations", core.serialization.number().optional()),
      maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
      truncate: GenerateRequestTruncate_1.GenerateRequestTruncate.optional(),
      temperature: core.serialization.number().optional(),
      seed: core.serialization.number().optional(),
      preset: core.serialization.string().optional(),
      endSequences: core.serialization.property("end_sequences", core.serialization.list(core.serialization.string()).optional()),
      stopSequences: core.serialization.property("stop_sequences", core.serialization.list(core.serialization.string()).optional()),
      k: core.serialization.number().optional(),
      p: core.serialization.number().optional(),
      frequencyPenalty: core.serialization.property("frequency_penalty", core.serialization.number().optional()),
      presencePenalty: core.serialization.property("presence_penalty", core.serialization.number().optional()),
      returnLikelihoods: core.serialization.property("return_likelihoods", GenerateRequestReturnLikelihoods_1.GenerateRequestReturnLikelihoods.optional()),
      rawPrompting: core.serialization.property("raw_prompting", core.serialization.boolean().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/EmbedRequest.js
var require_EmbedRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/EmbedRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedRequest = void 0;
    var core = __importStar2(require_core());
    var EmbedInputType_1 = require_EmbedInputType();
    var EmbeddingType_1 = require_EmbeddingType();
    var EmbedRequestTruncate_1 = require_EmbedRequestTruncate();
    exports2.EmbedRequest = core.serialization.object({
      texts: core.serialization.list(core.serialization.string()),
      model: core.serialization.string().optional(),
      inputType: core.serialization.property("input_type", EmbedInputType_1.EmbedInputType.optional()),
      embeddingTypes: core.serialization.property("embedding_types", core.serialization.list(EmbeddingType_1.EmbeddingType).optional()),
      truncate: EmbedRequestTruncate_1.EmbedRequestTruncate.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/RerankRequest.js
var require_RerankRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/RerankRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankRequest = void 0;
    var core = __importStar2(require_core());
    var RerankRequestDocumentsItem_1 = require_RerankRequestDocumentsItem();
    exports2.RerankRequest = core.serialization.object({
      model: core.serialization.string().optional(),
      query: core.serialization.string(),
      documents: core.serialization.list(RerankRequestDocumentsItem_1.RerankRequestDocumentsItem),
      topN: core.serialization.property("top_n", core.serialization.number().optional()),
      rankFields: core.serialization.property("rank_fields", core.serialization.list(core.serialization.string()).optional()),
      returnDocuments: core.serialization.property("return_documents", core.serialization.boolean().optional()),
      maxChunksPerDoc: core.serialization.property("max_chunks_per_doc", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/ClassifyRequest.js
var require_ClassifyRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/ClassifyRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClassifyRequest = void 0;
    var core = __importStar2(require_core());
    var ClassifyExample_1 = require_ClassifyExample();
    var ClassifyRequestTruncate_1 = require_ClassifyRequestTruncate();
    exports2.ClassifyRequest = core.serialization.object({
      inputs: core.serialization.list(core.serialization.string()),
      examples: core.serialization.list(ClassifyExample_1.ClassifyExample).optional(),
      model: core.serialization.string().optional(),
      preset: core.serialization.string().optional(),
      truncate: ClassifyRequestTruncate_1.ClassifyRequestTruncate.optional()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/SummarizeRequest.js
var require_SummarizeRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/SummarizeRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SummarizeRequest = void 0;
    var core = __importStar2(require_core());
    var SummarizeRequestLength_1 = require_SummarizeRequestLength();
    var SummarizeRequestFormat_1 = require_SummarizeRequestFormat();
    var SummarizeRequestExtractiveness_1 = require_SummarizeRequestExtractiveness();
    exports2.SummarizeRequest = core.serialization.object({
      text: core.serialization.string(),
      length: SummarizeRequestLength_1.SummarizeRequestLength.optional(),
      format: SummarizeRequestFormat_1.SummarizeRequestFormat.optional(),
      model: core.serialization.string().optional(),
      extractiveness: SummarizeRequestExtractiveness_1.SummarizeRequestExtractiveness.optional(),
      temperature: core.serialization.number().optional(),
      additionalCommand: core.serialization.property("additional_command", core.serialization.string().optional())
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/TokenizeRequest.js
var require_TokenizeRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/TokenizeRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TokenizeRequest = void 0;
    var core = __importStar2(require_core());
    exports2.TokenizeRequest = core.serialization.object({
      text: core.serialization.string(),
      model: core.serialization.string()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/DetokenizeRequest.js
var require_DetokenizeRequest = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/DetokenizeRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DetokenizeRequest = void 0;
    var core = __importStar2(require_core());
    exports2.DetokenizeRequest = core.serialization.object({
      tokens: core.serialization.list(core.serialization.number()),
      model: core.serialization.string()
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/index.js
var require_requests4 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DetokenizeRequest = exports2.TokenizeRequest = exports2.SummarizeRequest = exports2.ClassifyRequest = exports2.RerankRequest = exports2.EmbedRequest = exports2.GenerateRequest = exports2.GenerateStreamRequest = exports2.ChatRequest = exports2.ChatStreamRequest = void 0;
    var ChatStreamRequest_1 = require_ChatStreamRequest();
    Object.defineProperty(exports2, "ChatStreamRequest", { enumerable: true, get: function() {
      return ChatStreamRequest_1.ChatStreamRequest;
    } });
    var ChatRequest_1 = require_ChatRequest();
    Object.defineProperty(exports2, "ChatRequest", { enumerable: true, get: function() {
      return ChatRequest_1.ChatRequest;
    } });
    var GenerateStreamRequest_1 = require_GenerateStreamRequest();
    Object.defineProperty(exports2, "GenerateStreamRequest", { enumerable: true, get: function() {
      return GenerateStreamRequest_1.GenerateStreamRequest;
    } });
    var GenerateRequest_1 = require_GenerateRequest();
    Object.defineProperty(exports2, "GenerateRequest", { enumerable: true, get: function() {
      return GenerateRequest_1.GenerateRequest;
    } });
    var EmbedRequest_1 = require_EmbedRequest();
    Object.defineProperty(exports2, "EmbedRequest", { enumerable: true, get: function() {
      return EmbedRequest_1.EmbedRequest;
    } });
    var RerankRequest_1 = require_RerankRequest();
    Object.defineProperty(exports2, "RerankRequest", { enumerable: true, get: function() {
      return RerankRequest_1.RerankRequest;
    } });
    var ClassifyRequest_1 = require_ClassifyRequest();
    Object.defineProperty(exports2, "ClassifyRequest", { enumerable: true, get: function() {
      return ClassifyRequest_1.ClassifyRequest;
    } });
    var SummarizeRequest_1 = require_SummarizeRequest();
    Object.defineProperty(exports2, "SummarizeRequest", { enumerable: true, get: function() {
      return SummarizeRequest_1.SummarizeRequest;
    } });
    var TokenizeRequest_1 = require_TokenizeRequest();
    Object.defineProperty(exports2, "TokenizeRequest", { enumerable: true, get: function() {
      return TokenizeRequest_1.TokenizeRequest;
    } });
    var DetokenizeRequest_1 = require_DetokenizeRequest();
    Object.defineProperty(exports2, "DetokenizeRequest", { enumerable: true, get: function() {
      return DetokenizeRequest_1.DetokenizeRequest;
    } });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/index.js
var require_client5 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests4(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/index.js
var require_serialization = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/serialization/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_resources2(), exports2);
    __exportStar2(require_types4(), exports2);
    __exportStar2(require_client5(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/aws-utils.js
var require_aws_utils = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/aws-utils.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues2 = exports2 && exports2.__asyncValues || function(o6) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m6 = o6[Symbol.asyncIterator], i6;
      return m6 ? m6.call(o6) : (o6 = typeof __values === "function" ? __values(o6) : o6[Symbol.iterator](), i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
        return this;
      }, i6);
      function verb(n6) {
        i6[n6] = o6[n6] && function(v7) {
          return new Promise(function(resolve2, reject) {
            v7 = o6[n6](v7), settle(resolve2, reject, v7.done, v7.value);
          });
        };
      }
      function settle(resolve2, reject, d6, v7) {
        Promise.resolve(v7).then(function(v8) {
          resolve2({ value: v8, done: d6 });
        }, reject);
      }
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fetchOverride = exports2.parseAWSEvent = exports2.getEndpointFromUrl = exports2.getAuthHeaders = exports2.getUrl = exports2.mapResponseFromBedrock = void 0;
    var sha256_js_1 = require_build2();
    var credential_providers_1 = (init_dist_es58(), __toCommonJS(dist_es_exports11));
    var protocol_http_1 = (init_dist_es61(), __toCommonJS(dist_es_exports12));
    var signature_v4_1 = (init_dist_es70(), __toCommonJS(dist_es_exports13));
    var readable_stream_1 = require_ours();
    var core_1 = require_core();
    var Stream_1 = require_Stream();
    var streaming_utils_1 = require_streaming_utils();
    var serializers = __importStar2(require_serialization());
    var withTempEnv = (updateEnv, fn) => __awaiter2(void 0, void 0, void 0, function* () {
      const previousEnv = Object.assign({}, process.env);
      try {
        updateEnv();
        return yield fn();
      } finally {
        process.env = previousEnv;
      }
    });
    var streamingResponseParser = {
      "chat": serializers.StreamedChatResponse,
      "generate": serializers.GenerateStreamedResponse
    };
    var nonStreamedResponseParser = {
      "chat": serializers.NonStreamedChatResponse,
      "embed": serializers.EmbedResponse,
      "generate": serializers.Generation
    };
    var mapResponseFromBedrock = (streaming, endpoint, obj) => __awaiter2(void 0, void 0, void 0, function* () {
      const parser = streaming ? streamingResponseParser[endpoint] : nonStreamedResponseParser[endpoint];
      const config = {
        unrecognizedObjectKeys: "passthrough",
        allowUnrecognizedUnionMembers: true,
        allowUnrecognizedEnumValues: true,
        skipValidation: true,
        breadcrumbsPrefix: ["response"]
      };
      const parsed = yield parser.parseOrThrow(obj, config);
      return parser.jsonOrThrow(parsed, config);
    });
    exports2.mapResponseFromBedrock = mapResponseFromBedrock;
    var getUrl = (platform2, awsRegion, model, stream) => {
      const endpoint = {
        "bedrock": stream ? "invoke-with-response-stream" : "invoke",
        "sagemaker": stream ? "invocations-response-stream" : "invocations"
      }[platform2];
      return {
        "bedrock": `https://${platform2}-runtime.${awsRegion}.amazonaws.com/model/${model}/${endpoint}`,
        "sagemaker": `https://runtime.sagemaker.${awsRegion}.amazonaws.com/endpoints/${model}/${endpoint}`
      }[platform2];
    };
    exports2.getUrl = getUrl;
    var getAuthHeaders = (url, method, headers, body, service, props) => __awaiter2(void 0, void 0, void 0, function* () {
      const providerChain = (0, credential_providers_1.fromNodeProviderChain)();
      const credentials = yield withTempEnv(() => {
        if (props.awsAccessKey) {
          process.env["AWS_ACCESS_KEY_ID"] = props.awsAccessKey;
        }
        if (props.awsSecretKey) {
          process.env["AWS_SECRET_ACCESS_KEY"] = props.awsSecretKey;
        }
        if (props.awsSessionToken) {
          process.env["AWS_SESSION_TOKEN"] = props.awsSessionToken;
        }
      }, () => providerChain());
      const signer = new signature_v4_1.SignatureV4({
        service,
        region: props.awsRegion,
        credentials,
        sha256: sha256_js_1.Sha256
      });
      delete headers["connection"];
      headers["host"] = url.hostname;
      const request2 = new protocol_http_1.HttpRequest({
        method: method.toUpperCase(),
        protocol: url.protocol,
        path: url.pathname,
        headers,
        body
      });
      const signed = yield signer.sign(request2);
      return signed.headers;
    });
    exports2.getAuthHeaders = getAuthHeaders;
    var getEndpointFromUrl = (url, chatModel, embedModel, generateModel) => {
      if (chatModel && url.includes(chatModel)) {
        return "chat";
      }
      if (embedModel && url.includes(embedModel)) {
        return "embed";
      }
      if (generateModel && url.includes(generateModel)) {
        return "generate";
      }
      throw new Error(`Unknown endpoint in url: ${url}`);
    };
    exports2.getEndpointFromUrl = getEndpointFromUrl;
    var parseAWSEvent = (line) => {
      const regex = /{[^\}]*}/;
      const match = line.match(regex);
      if (match === null || match === void 0 ? void 0 : match[0]) {
        const obj = JSON.parse(match[0]);
        if (obj.bytes) {
          const base64Payload = Buffer.from(obj.bytes, "base64").toString("utf-8");
          const streamedObj = JSON.parse(base64Payload);
          if (streamedObj.event_type) {
            return streamedObj;
          }
        }
      }
    };
    exports2.parseAWSEvent = parseAWSEvent;
    var fetchOverride = (platform2, { awsRegion, awsAccessKey, awsSecretKey, awsSessionToken }) => (fetcherArgs) => __awaiter2(void 0, void 0, void 0, function* () {
      var e_1, _a3;
      const endpoint = fetcherArgs.url.split("/").pop();
      const bodyJson = fetcherArgs.body;
      console.assert(bodyJson.model, "model is required");
      const isStreaming = Boolean(bodyJson.stream);
      const url = (0, exports2.getUrl)(platform2, awsRegion, bodyJson.model, isStreaming);
      delete bodyJson["stream"];
      delete bodyJson["model"];
      delete fetcherArgs.headers["Authorization"];
      fetcherArgs.headers["Host"] = new URL(url).hostname;
      const authHeaders = yield (0, exports2.getAuthHeaders)(new URL(url), fetcherArgs.method, fetcherArgs.headers, JSON.stringify(bodyJson), platform2, {
        awsRegion,
        awsAccessKey,
        awsSecretKey,
        awsSessionToken
      });
      fetcherArgs.url = url;
      fetcherArgs.headers = authHeaders;
      const response = yield (0, core_1.fetcher)(fetcherArgs);
      if (!response.ok) {
        return response;
      }
      try {
        if (isStreaming) {
          const responseStream = (0, Stream_1.readableStreamAsyncIterable)(response.body);
          const lineDecoder = new streaming_utils_1.LineDecoder();
          const newBody = new readable_stream_1.PassThrough();
          try {
            for (var responseStream_1 = __asyncValues2(responseStream), responseStream_1_1; responseStream_1_1 = yield responseStream_1.next(), !responseStream_1_1.done; ) {
              const chunk = responseStream_1_1.value;
              for (const line of lineDecoder.decode(chunk)) {
                const event = (0, exports2.parseAWSEvent)(line);
                if (event) {
                  const obj = yield (0, exports2.mapResponseFromBedrock)(isStreaming, endpoint, event);
                  newBody.push(JSON.stringify(obj) + "\n");
                }
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (responseStream_1_1 && !responseStream_1_1.done && (_a3 = responseStream_1.return))
                yield _a3.call(responseStream_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          for (const line of lineDecoder.flush()) {
            const event = (0, exports2.parseAWSEvent)(line);
            if (event) {
              const obj = yield (0, exports2.mapResponseFromBedrock)(isStreaming, endpoint, event);
              newBody.push(JSON.stringify(obj) + "\n");
            }
          }
          newBody.end();
          return {
            ok: true,
            body: newBody
          };
        } else {
          const oldBody = yield response.body;
          const mappedResponse = yield (0, exports2.mapResponseFromBedrock)(isStreaming, endpoint, oldBody);
          return {
            ok: true,
            body: mappedResponse
          };
        }
      } catch (e6) {
        throw e6;
      }
    });
    exports2.fetchOverride = fetchOverride;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/environments.js
var require_environments = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/environments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CohereEnvironment = void 0;
    exports2.CohereEnvironment = {
      Production: "https://api.cohere.com/v1"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/types/CreateEmbedJobRequestTruncate.js
var require_CreateEmbedJobRequestTruncate2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/types/CreateEmbedJobRequestTruncate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateEmbedJobRequestTruncate = void 0;
    exports2.CreateEmbedJobRequestTruncate = {
      Start: "START",
      End: "END"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/types/index.js
var require_types5 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_CreateEmbedJobRequestTruncate2(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/client/requests/index.js
var require_requests5 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/client/index.js
var require_client6 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests5(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/index.js
var require_embedJobs2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_types5(), exports2);
    __exportStar2(require_client6(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/DatasetsListResponse.js
var require_DatasetsListResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/DatasetsListResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/DatasetsCreateResponseDatasetPartsItem.js
var require_DatasetsCreateResponseDatasetPartsItem2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/DatasetsCreateResponseDatasetPartsItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/DatasetsCreateResponse.js
var require_DatasetsCreateResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/DatasetsCreateResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/DatasetsGetUsageResponse.js
var require_DatasetsGetUsageResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/DatasetsGetUsageResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/DatasetsGetResponse.js
var require_DatasetsGetResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/DatasetsGetResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/index.js
var require_types6 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_DatasetsListResponse2(), exports2);
    __exportStar2(require_DatasetsCreateResponseDatasetPartsItem2(), exports2);
    __exportStar2(require_DatasetsCreateResponse2(), exports2);
    __exportStar2(require_DatasetsGetUsageResponse2(), exports2);
    __exportStar2(require_DatasetsGetResponse2(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/client/requests/index.js
var require_requests6 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/client/index.js
var require_client7 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests6(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/index.js
var require_datasets2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_types6(), exports2);
    __exportStar2(require_client7(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/BaseType.js
var require_BaseType2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/BaseType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseType = void 0;
    exports2.BaseType = {
      BaseTypeUnspecified: "BASE_TYPE_UNSPECIFIED",
      BaseTypeGenerative: "BASE_TYPE_GENERATIVE",
      BaseTypeClassification: "BASE_TYPE_CLASSIFICATION",
      BaseTypeRerank: "BASE_TYPE_RERANK",
      BaseTypeChat: "BASE_TYPE_CHAT"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Strategy.js
var require_Strategy2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Strategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Strategy = void 0;
    exports2.Strategy = {
      StrategyUnspecified: "STRATEGY_UNSPECIFIED",
      StrategyVanilla: "STRATEGY_VANILLA",
      StrategyTfew: "STRATEGY_TFEW"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/BaseModel.js
var require_BaseModel2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/BaseModel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Hyperparameters.js
var require_Hyperparameters2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Hyperparameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Settings.js
var require_Settings2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Settings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Status.js
var require_Status2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Status.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Status = void 0;
    exports2.Status = {
      StatusUnspecified: "STATUS_UNSPECIFIED",
      StatusFinetuning: "STATUS_FINETUNING",
      StatusDeployingApi: "STATUS_DEPLOYING_API",
      StatusReady: "STATUS_READY",
      StatusFailed: "STATUS_FAILED",
      StatusDeleted: "STATUS_DELETED",
      StatusTemporarilyOffline: "STATUS_TEMPORARILY_OFFLINE",
      StatusPaused: "STATUS_PAUSED",
      StatusQueued: "STATUS_QUEUED"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/FinetunedModel.js
var require_FinetunedModel2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/FinetunedModel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/ListFinetunedModelsResponse.js
var require_ListFinetunedModelsResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/ListFinetunedModelsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Error_.js
var require_Error2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Error_.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/CreateFinetunedModelResponse.js
var require_CreateFinetunedModelResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/CreateFinetunedModelResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/GetFinetunedModelResponse.js
var require_GetFinetunedModelResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/GetFinetunedModelResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/DeleteFinetunedModelResponse.js
var require_DeleteFinetunedModelResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/DeleteFinetunedModelResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/UpdateFinetunedModelResponse.js
var require_UpdateFinetunedModelResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/UpdateFinetunedModelResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Event.js
var require_Event2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/Event.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/ListEventsResponse.js
var require_ListEventsResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/ListEventsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/TrainingStepMetrics.js
var require_TrainingStepMetrics2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/TrainingStepMetrics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/ListTrainingStepMetricsResponse.js
var require_ListTrainingStepMetricsResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/ListTrainingStepMetricsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/index.js
var require_types7 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_BaseType2(), exports2);
    __exportStar2(require_Strategy2(), exports2);
    __exportStar2(require_BaseModel2(), exports2);
    __exportStar2(require_Hyperparameters2(), exports2);
    __exportStar2(require_Settings2(), exports2);
    __exportStar2(require_Status2(), exports2);
    __exportStar2(require_FinetunedModel2(), exports2);
    __exportStar2(require_ListFinetunedModelsResponse2(), exports2);
    __exportStar2(require_Error2(), exports2);
    __exportStar2(require_CreateFinetunedModelResponse2(), exports2);
    __exportStar2(require_GetFinetunedModelResponse2(), exports2);
    __exportStar2(require_DeleteFinetunedModelResponse2(), exports2);
    __exportStar2(require_UpdateFinetunedModelResponse2(), exports2);
    __exportStar2(require_Event2(), exports2);
    __exportStar2(require_ListEventsResponse2(), exports2);
    __exportStar2(require_TrainingStepMetrics2(), exports2);
    __exportStar2(require_ListTrainingStepMetricsResponse2(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/index.js
var require_finetuning3 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/finetuning/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_types7(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/index.js
var require_resources3 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/resources/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.finetuning = void 0;
    exports2.finetuning = __importStar2(require_finetuning3());
    __exportStar2(require_types7(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/client/requests/index.js
var require_requests7 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/client/index.js
var require_client8 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests7(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/index.js
var require_finetuning4 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_resources3(), exports2);
    __exportStar2(require_client8(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/connectors/client/requests/index.js
var require_requests8 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/connectors/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/connectors/client/index.js
var require_client9 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/connectors/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests8(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/connectors/index.js
var require_connectors2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/connectors/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_client9(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/models/client/requests/index.js
var require_requests9 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/models/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/models/client/index.js
var require_client10 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/models/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests9(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/models/index.js
var require_models = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/models/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_client10(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/index.js
var require_resources4 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.models = exports2.connectors = exports2.finetuning = exports2.datasets = exports2.embedJobs = void 0;
    exports2.embedJobs = __importStar2(require_embedJobs2());
    __exportStar2(require_types5(), exports2);
    exports2.datasets = __importStar2(require_datasets2());
    __exportStar2(require_types6(), exports2);
    exports2.finetuning = __importStar2(require_finetuning4());
    exports2.connectors = __importStar2(require_connectors2());
    exports2.models = __importStar2(require_models());
    __exportStar2(require_requests5(), exports2);
    __exportStar2(require_requests6(), exports2);
    __exportStar2(require_requests8(), exports2);
    __exportStar2(require_requests9(), exports2);
    __exportStar2(require_requests7(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamRequestPromptTruncation.js
var require_ChatStreamRequestPromptTruncation2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamRequestPromptTruncation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamRequestPromptTruncation = void 0;
    exports2.ChatStreamRequestPromptTruncation = {
      Off: "OFF",
      Auto: "AUTO",
      AutoPreserveOrder: "AUTO_PRESERVE_ORDER"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamRequestCitationQuality.js
var require_ChatStreamRequestCitationQuality2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamRequestCitationQuality.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamRequestCitationQuality = void 0;
    exports2.ChatStreamRequestCitationQuality = {
      Fast: "fast",
      Accurate: "accurate"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamRequestConnectorsSearchOptions.js
var require_ChatStreamRequestConnectorsSearchOptions2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamRequestConnectorsSearchOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/TooManyRequestsErrorBody.js
var require_TooManyRequestsErrorBody2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/TooManyRequestsErrorBody.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatRequestPromptTruncation.js
var require_ChatRequestPromptTruncation2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatRequestPromptTruncation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatRequestPromptTruncation = void 0;
    exports2.ChatRequestPromptTruncation = {
      Off: "OFF",
      Auto: "AUTO",
      AutoPreserveOrder: "AUTO_PRESERVE_ORDER"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatRequestCitationQuality.js
var require_ChatRequestCitationQuality2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatRequestCitationQuality.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatRequestCitationQuality = void 0;
    exports2.ChatRequestCitationQuality = {
      Fast: "fast",
      Accurate: "accurate"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatRequestConnectorsSearchOptions.js
var require_ChatRequestConnectorsSearchOptions2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatRequestConnectorsSearchOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamRequestTruncate.js
var require_GenerateStreamRequestTruncate2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamRequestTruncate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamRequestTruncate = void 0;
    exports2.GenerateStreamRequestTruncate = {
      None: "NONE",
      Start: "START",
      End: "END"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamRequestReturnLikelihoods.js
var require_GenerateStreamRequestReturnLikelihoods2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamRequestReturnLikelihoods.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateStreamRequestReturnLikelihoods = void 0;
    exports2.GenerateStreamRequestReturnLikelihoods = {
      Generation: "GENERATION",
      All: "ALL",
      None: "NONE"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateRequestTruncate.js
var require_GenerateRequestTruncate2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateRequestTruncate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateRequestTruncate = void 0;
    exports2.GenerateRequestTruncate = {
      None: "NONE",
      Start: "START",
      End: "END"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateRequestReturnLikelihoods.js
var require_GenerateRequestReturnLikelihoods2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateRequestReturnLikelihoods.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GenerateRequestReturnLikelihoods = void 0;
    exports2.GenerateRequestReturnLikelihoods = {
      Generation: "GENERATION",
      All: "ALL",
      None: "NONE"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedRequestTruncate.js
var require_EmbedRequestTruncate2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedRequestTruncate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedRequestTruncate = void 0;
    exports2.EmbedRequestTruncate = {
      None: "NONE",
      Start: "START",
      End: "END"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedResponse.js
var require_EmbedResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankRequestDocumentsItemText.js
var require_RerankRequestDocumentsItemText2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankRequestDocumentsItemText.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankRequestDocumentsItem.js
var require_RerankRequestDocumentsItem2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankRequestDocumentsItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankResponseResultsItemDocument.js
var require_RerankResponseResultsItemDocument2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankResponseResultsItemDocument.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankResponseResultsItem.js
var require_RerankResponseResultsItem2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankResponseResultsItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankResponse.js
var require_RerankResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyRequestTruncate.js
var require_ClassifyRequestTruncate2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyRequestTruncate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClassifyRequestTruncate = void 0;
    exports2.ClassifyRequestTruncate = {
      None: "NONE",
      Start: "START",
      End: "END"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyResponseClassificationsItemLabelsValue.js
var require_ClassifyResponseClassificationsItemLabelsValue2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyResponseClassificationsItemLabelsValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyResponseClassificationsItemClassificationType.js
var require_ClassifyResponseClassificationsItemClassificationType2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyResponseClassificationsItemClassificationType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClassifyResponseClassificationsItemClassificationType = void 0;
    exports2.ClassifyResponseClassificationsItemClassificationType = {
      SingleLabel: "single-label",
      MultiLabel: "multi-label"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyResponseClassificationsItem.js
var require_ClassifyResponseClassificationsItem2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyResponseClassificationsItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyResponse.js
var require_ClassifyResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SummarizeRequestLength.js
var require_SummarizeRequestLength2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SummarizeRequestLength.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SummarizeRequestLength = void 0;
    exports2.SummarizeRequestLength = {
      Short: "short",
      Medium: "medium",
      Long: "long"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SummarizeRequestFormat.js
var require_SummarizeRequestFormat2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SummarizeRequestFormat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SummarizeRequestFormat = void 0;
    exports2.SummarizeRequestFormat = {
      Paragraph: "paragraph",
      Bullets: "bullets"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SummarizeRequestExtractiveness.js
var require_SummarizeRequestExtractiveness2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SummarizeRequestExtractiveness.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SummarizeRequestExtractiveness = void 0;
    exports2.SummarizeRequestExtractiveness = {
      Low: "low",
      Medium: "medium",
      High: "high"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SummarizeResponse.js
var require_SummarizeResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SummarizeResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/TokenizeResponse.js
var require_TokenizeResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/TokenizeResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/DetokenizeResponse.js
var require_DetokenizeResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/DetokenizeResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CheckApiKeyResponse.js
var require_CheckApiKeyResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CheckApiKeyResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ToolCall.js
var require_ToolCall2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ToolCall.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatMessage.js
var require_ChatMessage2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ToolResult.js
var require_ToolResult2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ToolResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ToolMessage.js
var require_ToolMessage2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ToolMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Message.js
var require_Message2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Message.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatConnector.js
var require_ChatConnector2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatConnector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatDocument.js
var require_ChatDocument2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatDocument.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ToolParameterDefinitionsValue.js
var require_ToolParameterDefinitionsValue2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ToolParameterDefinitionsValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Tool.js
var require_Tool2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Tool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatCitation.js
var require_ChatCitation2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatCitation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatSearchQuery.js
var require_ChatSearchQuery2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatSearchQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatSearchResultConnector.js
var require_ChatSearchResultConnector2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatSearchResultConnector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatSearchResult.js
var require_ChatSearchResult2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatSearchResult.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/FinishReason.js
var require_FinishReason2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/FinishReason.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FinishReason = void 0;
    exports2.FinishReason = {
      Complete: "COMPLETE",
      StopSequence: "STOP_SEQUENCE",
      Error: "ERROR",
      ErrorToxic: "ERROR_TOXIC",
      ErrorLimit: "ERROR_LIMIT",
      UserCancel: "USER_CANCEL",
      MaxTokens: "MAX_TOKENS"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ApiMetaApiVersion.js
var require_ApiMetaApiVersion2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ApiMetaApiVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ApiMetaBilledUnits.js
var require_ApiMetaBilledUnits2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ApiMetaBilledUnits.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ApiMetaTokens.js
var require_ApiMetaTokens2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ApiMetaTokens.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ApiMeta.js
var require_ApiMeta2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ApiMeta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/NonStreamedChatResponse.js
var require_NonStreamedChatResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/NonStreamedChatResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamEvent.js
var require_ChatStreamEvent2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamStartEvent.js
var require_ChatStreamStartEvent2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamStartEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatSearchQueriesGenerationEvent.js
var require_ChatSearchQueriesGenerationEvent2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatSearchQueriesGenerationEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatSearchResultsEvent.js
var require_ChatSearchResultsEvent2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatSearchResultsEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatTextGenerationEvent.js
var require_ChatTextGenerationEvent2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatTextGenerationEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatCitationGenerationEvent.js
var require_ChatCitationGenerationEvent2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatCitationGenerationEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatToolCallsGenerationEvent.js
var require_ChatToolCallsGenerationEvent2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatToolCallsGenerationEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamEndEventFinishReason.js
var require_ChatStreamEndEventFinishReason2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamEndEventFinishReason.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChatStreamEndEventFinishReason = void 0;
    exports2.ChatStreamEndEventFinishReason = {
      Complete: "COMPLETE",
      ErrorLimit: "ERROR_LIMIT",
      MaxTokens: "MAX_TOKENS",
      Error: "ERROR",
      ErrorToxic: "ERROR_TOXIC"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamEndEvent.js
var require_ChatStreamEndEvent2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatStreamEndEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ToolCallDelta.js
var require_ToolCallDelta2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ToolCallDelta.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatToolCallsChunkEvent.js
var require_ChatToolCallsChunkEvent2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatToolCallsChunkEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/StreamedChatResponse.js
var require_StreamedChatResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/StreamedChatResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SingleGenerationTokenLikelihoodsItem.js
var require_SingleGenerationTokenLikelihoodsItem2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SingleGenerationTokenLikelihoodsItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SingleGeneration.js
var require_SingleGeneration2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SingleGeneration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Generation.js
var require_Generation2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Generation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamEvent.js
var require_GenerateStreamEvent2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamEvent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamText.js
var require_GenerateStreamText2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamText.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SingleGenerationInStream.js
var require_SingleGenerationInStream2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/SingleGenerationInStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamEndResponse.js
var require_GenerateStreamEndResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamEndResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamEnd.js
var require_GenerateStreamEnd2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamEnd.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamError.js
var require_GenerateStreamError2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamedResponse.js
var require_GenerateStreamedResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GenerateStreamedResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedInputType.js
var require_EmbedInputType2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedInputType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedInputType = void 0;
    exports2.EmbedInputType = {
      SearchDocument: "search_document",
      SearchQuery: "search_query",
      Classification: "classification",
      Clustering: "clustering"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbeddingType.js
var require_EmbeddingType2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbeddingType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbeddingType = void 0;
    exports2.EmbeddingType = {
      Float: "float",
      Int8: "int8",
      Uint8: "uint8",
      Binary: "binary",
      Ubinary: "ubinary"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedFloatsResponse.js
var require_EmbedFloatsResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedFloatsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedByTypeResponseEmbeddings.js
var require_EmbedByTypeResponseEmbeddings2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedByTypeResponseEmbeddings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedByTypeResponse.js
var require_EmbedByTypeResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedByTypeResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedJobStatus.js
var require_EmbedJobStatus2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedJobStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedJobStatus = void 0;
    exports2.EmbedJobStatus = {
      Processing: "processing",
      Complete: "complete",
      Cancelling: "cancelling",
      Cancelled: "cancelled",
      Failed: "failed"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedJobTruncate.js
var require_EmbedJobTruncate2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedJobTruncate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedJobTruncate = void 0;
    exports2.EmbedJobTruncate = {
      Start: "START",
      End: "END"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedJob.js
var require_EmbedJob2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/EmbedJob.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ListEmbedJobResponse.js
var require_ListEmbedJobResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ListEmbedJobResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CreateEmbedJobResponse.js
var require_CreateEmbedJobResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CreateEmbedJobResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyExample.js
var require_ClassifyExample2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyExample.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/DatasetValidationStatus.js
var require_DatasetValidationStatus2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/DatasetValidationStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DatasetValidationStatus = void 0;
    exports2.DatasetValidationStatus = {
      Unknown: "unknown",
      Queued: "queued",
      Processing: "processing",
      Failed: "failed",
      Validated: "validated",
      Skipped: "skipped"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/DatasetType.js
var require_DatasetType2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/DatasetType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DatasetType = void 0;
    exports2.DatasetType = {
      EmbedInput: "embed-input",
      EmbedResult: "embed-result",
      ClusterResult: "cluster-result",
      ClusterOutliers: "cluster-outliers",
      RerankerFinetuneInput: "reranker-finetune-input",
      SingleLabelClassificationFinetuneInput: "single-label-classification-finetune-input",
      ChatFinetuneInput: "chat-finetune-input",
      MultiLabelClassificationFinetuneInput: "multi-label-classification-finetune-input"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/DatasetPart.js
var require_DatasetPart2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/DatasetPart.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ParseInfo.js
var require_ParseInfo2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ParseInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankerDataMetrics.js
var require_RerankerDataMetrics2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/RerankerDataMetrics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatDataMetrics.js
var require_ChatDataMetrics2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ChatDataMetrics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/LabelMetric.js
var require_LabelMetric2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/LabelMetric.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyDataMetrics.js
var require_ClassifyDataMetrics2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ClassifyDataMetrics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/FinetuneDatasetMetrics.js
var require_FinetuneDatasetMetrics2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/FinetuneDatasetMetrics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/MetricsEmbedDataFieldsItem.js
var require_MetricsEmbedDataFieldsItem2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/MetricsEmbedDataFieldsItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/MetricsEmbedData.js
var require_MetricsEmbedData2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/MetricsEmbedData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Metrics.js
var require_Metrics2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Metrics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Dataset.js
var require_Dataset2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Dataset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ConnectorOAuth.js
var require_ConnectorOAuth2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ConnectorOAuth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ConnectorAuthStatus.js
var require_ConnectorAuthStatus2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ConnectorAuthStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConnectorAuthStatus = void 0;
    exports2.ConnectorAuthStatus = {
      Valid: "valid",
      Expired: "expired"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Connector.js
var require_Connector2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/Connector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ListConnectorsResponse.js
var require_ListConnectorsResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ListConnectorsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CreateConnectorOAuth.js
var require_CreateConnectorOAuth2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CreateConnectorOAuth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/AuthTokenType.js
var require_AuthTokenType2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/AuthTokenType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuthTokenType = void 0;
    exports2.AuthTokenType = {
      Bearer: "bearer",
      Basic: "basic",
      Noscheme: "noscheme"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CreateConnectorServiceAuth.js
var require_CreateConnectorServiceAuth2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CreateConnectorServiceAuth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CreateConnectorResponse.js
var require_CreateConnectorResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CreateConnectorResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GetConnectorResponse.js
var require_GetConnectorResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GetConnectorResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/DeleteConnectorResponse.js
var require_DeleteConnectorResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/DeleteConnectorResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/UpdateConnectorResponse.js
var require_UpdateConnectorResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/UpdateConnectorResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/OAuthAuthorizeResponse.js
var require_OAuthAuthorizeResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/OAuthAuthorizeResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CompatibleEndpoint.js
var require_CompatibleEndpoint2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/CompatibleEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompatibleEndpoint = void 0;
    exports2.CompatibleEndpoint = {
      Chat: "chat",
      Embed: "embed",
      Classify: "classify",
      Summarize: "summarize",
      Rerank: "rerank",
      Rate: "rate",
      Generate: "generate"
    };
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GetModelResponse.js
var require_GetModelResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/GetModelResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ListModelsResponse.js
var require_ListModelsResponse2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/ListModelsResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/index.js
var require_types8 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_ChatStreamRequestPromptTruncation2(), exports2);
    __exportStar2(require_ChatStreamRequestCitationQuality2(), exports2);
    __exportStar2(require_ChatStreamRequestConnectorsSearchOptions2(), exports2);
    __exportStar2(require_TooManyRequestsErrorBody2(), exports2);
    __exportStar2(require_ChatRequestPromptTruncation2(), exports2);
    __exportStar2(require_ChatRequestCitationQuality2(), exports2);
    __exportStar2(require_ChatRequestConnectorsSearchOptions2(), exports2);
    __exportStar2(require_GenerateStreamRequestTruncate2(), exports2);
    __exportStar2(require_GenerateStreamRequestReturnLikelihoods2(), exports2);
    __exportStar2(require_GenerateRequestTruncate2(), exports2);
    __exportStar2(require_GenerateRequestReturnLikelihoods2(), exports2);
    __exportStar2(require_EmbedRequestTruncate2(), exports2);
    __exportStar2(require_EmbedResponse2(), exports2);
    __exportStar2(require_RerankRequestDocumentsItemText2(), exports2);
    __exportStar2(require_RerankRequestDocumentsItem2(), exports2);
    __exportStar2(require_RerankResponseResultsItemDocument2(), exports2);
    __exportStar2(require_RerankResponseResultsItem2(), exports2);
    __exportStar2(require_RerankResponse2(), exports2);
    __exportStar2(require_ClassifyRequestTruncate2(), exports2);
    __exportStar2(require_ClassifyResponseClassificationsItemLabelsValue2(), exports2);
    __exportStar2(require_ClassifyResponseClassificationsItemClassificationType2(), exports2);
    __exportStar2(require_ClassifyResponseClassificationsItem2(), exports2);
    __exportStar2(require_ClassifyResponse2(), exports2);
    __exportStar2(require_SummarizeRequestLength2(), exports2);
    __exportStar2(require_SummarizeRequestFormat2(), exports2);
    __exportStar2(require_SummarizeRequestExtractiveness2(), exports2);
    __exportStar2(require_SummarizeResponse2(), exports2);
    __exportStar2(require_TokenizeResponse2(), exports2);
    __exportStar2(require_DetokenizeResponse2(), exports2);
    __exportStar2(require_CheckApiKeyResponse2(), exports2);
    __exportStar2(require_ToolCall2(), exports2);
    __exportStar2(require_ChatMessage2(), exports2);
    __exportStar2(require_ToolResult2(), exports2);
    __exportStar2(require_ToolMessage2(), exports2);
    __exportStar2(require_Message2(), exports2);
    __exportStar2(require_ChatConnector2(), exports2);
    __exportStar2(require_ChatDocument2(), exports2);
    __exportStar2(require_ToolParameterDefinitionsValue2(), exports2);
    __exportStar2(require_Tool2(), exports2);
    __exportStar2(require_ChatCitation2(), exports2);
    __exportStar2(require_ChatSearchQuery2(), exports2);
    __exportStar2(require_ChatSearchResultConnector2(), exports2);
    __exportStar2(require_ChatSearchResult2(), exports2);
    __exportStar2(require_FinishReason2(), exports2);
    __exportStar2(require_ApiMetaApiVersion2(), exports2);
    __exportStar2(require_ApiMetaBilledUnits2(), exports2);
    __exportStar2(require_ApiMetaTokens2(), exports2);
    __exportStar2(require_ApiMeta2(), exports2);
    __exportStar2(require_NonStreamedChatResponse2(), exports2);
    __exportStar2(require_ChatStreamEvent2(), exports2);
    __exportStar2(require_ChatStreamStartEvent2(), exports2);
    __exportStar2(require_ChatSearchQueriesGenerationEvent2(), exports2);
    __exportStar2(require_ChatSearchResultsEvent2(), exports2);
    __exportStar2(require_ChatTextGenerationEvent2(), exports2);
    __exportStar2(require_ChatCitationGenerationEvent2(), exports2);
    __exportStar2(require_ChatToolCallsGenerationEvent2(), exports2);
    __exportStar2(require_ChatStreamEndEventFinishReason2(), exports2);
    __exportStar2(require_ChatStreamEndEvent2(), exports2);
    __exportStar2(require_ToolCallDelta2(), exports2);
    __exportStar2(require_ChatToolCallsChunkEvent2(), exports2);
    __exportStar2(require_StreamedChatResponse2(), exports2);
    __exportStar2(require_SingleGenerationTokenLikelihoodsItem2(), exports2);
    __exportStar2(require_SingleGeneration2(), exports2);
    __exportStar2(require_Generation2(), exports2);
    __exportStar2(require_GenerateStreamEvent2(), exports2);
    __exportStar2(require_GenerateStreamText2(), exports2);
    __exportStar2(require_SingleGenerationInStream2(), exports2);
    __exportStar2(require_GenerateStreamEndResponse2(), exports2);
    __exportStar2(require_GenerateStreamEnd2(), exports2);
    __exportStar2(require_GenerateStreamError2(), exports2);
    __exportStar2(require_GenerateStreamedResponse2(), exports2);
    __exportStar2(require_EmbedInputType2(), exports2);
    __exportStar2(require_EmbeddingType2(), exports2);
    __exportStar2(require_EmbedFloatsResponse2(), exports2);
    __exportStar2(require_EmbedByTypeResponseEmbeddings2(), exports2);
    __exportStar2(require_EmbedByTypeResponse2(), exports2);
    __exportStar2(require_EmbedJobStatus2(), exports2);
    __exportStar2(require_EmbedJobTruncate2(), exports2);
    __exportStar2(require_EmbedJob2(), exports2);
    __exportStar2(require_ListEmbedJobResponse2(), exports2);
    __exportStar2(require_CreateEmbedJobResponse2(), exports2);
    __exportStar2(require_ClassifyExample2(), exports2);
    __exportStar2(require_DatasetValidationStatus2(), exports2);
    __exportStar2(require_DatasetType2(), exports2);
    __exportStar2(require_DatasetPart2(), exports2);
    __exportStar2(require_ParseInfo2(), exports2);
    __exportStar2(require_RerankerDataMetrics2(), exports2);
    __exportStar2(require_ChatDataMetrics2(), exports2);
    __exportStar2(require_LabelMetric2(), exports2);
    __exportStar2(require_ClassifyDataMetrics2(), exports2);
    __exportStar2(require_FinetuneDatasetMetrics2(), exports2);
    __exportStar2(require_MetricsEmbedDataFieldsItem2(), exports2);
    __exportStar2(require_MetricsEmbedData2(), exports2);
    __exportStar2(require_Metrics2(), exports2);
    __exportStar2(require_Dataset2(), exports2);
    __exportStar2(require_ConnectorOAuth2(), exports2);
    __exportStar2(require_ConnectorAuthStatus2(), exports2);
    __exportStar2(require_Connector2(), exports2);
    __exportStar2(require_ListConnectorsResponse2(), exports2);
    __exportStar2(require_CreateConnectorOAuth2(), exports2);
    __exportStar2(require_AuthTokenType2(), exports2);
    __exportStar2(require_CreateConnectorServiceAuth2(), exports2);
    __exportStar2(require_CreateConnectorResponse2(), exports2);
    __exportStar2(require_GetConnectorResponse2(), exports2);
    __exportStar2(require_DeleteConnectorResponse2(), exports2);
    __exportStar2(require_UpdateConnectorResponse2(), exports2);
    __exportStar2(require_OAuthAuthorizeResponse2(), exports2);
    __exportStar2(require_CompatibleEndpoint2(), exports2);
    __exportStar2(require_GetModelResponse2(), exports2);
    __exportStar2(require_ListModelsResponse2(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/TooManyRequestsError.js
var require_TooManyRequestsError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/TooManyRequestsError.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TooManyRequestsError = void 0;
    var errors2 = __importStar2(require_errors2());
    var TooManyRequestsError = class _TooManyRequestsError extends errors2.CohereError {
      constructor(body) {
        super({
          message: "TooManyRequestsError",
          statusCode: 429,
          body
        });
        Object.setPrototypeOf(this, _TooManyRequestsError.prototype);
      }
    };
    exports2.TooManyRequestsError = TooManyRequestsError;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/BadRequestError.js
var require_BadRequestError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/BadRequestError.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BadRequestError = void 0;
    var errors2 = __importStar2(require_errors2());
    var BadRequestError3 = class _BadRequestError extends errors2.CohereError {
      constructor(body) {
        super({
          message: "BadRequestError",
          statusCode: 400,
          body
        });
        Object.setPrototypeOf(this, _BadRequestError.prototype);
      }
    };
    exports2.BadRequestError = BadRequestError3;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/InternalServerError.js
var require_InternalServerError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/InternalServerError.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InternalServerError = void 0;
    var errors2 = __importStar2(require_errors2());
    var InternalServerError3 = class _InternalServerError extends errors2.CohereError {
      constructor(body) {
        super({
          message: "InternalServerError",
          statusCode: 500,
          body
        });
        Object.setPrototypeOf(this, _InternalServerError.prototype);
      }
    };
    exports2.InternalServerError = InternalServerError3;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/NotFoundError.js
var require_NotFoundError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/NotFoundError.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NotFoundError = void 0;
    var errors2 = __importStar2(require_errors2());
    var NotFoundError3 = class _NotFoundError extends errors2.CohereError {
      constructor(body) {
        super({
          message: "NotFoundError",
          statusCode: 404,
          body
        });
        Object.setPrototypeOf(this, _NotFoundError.prototype);
      }
    };
    exports2.NotFoundError = NotFoundError3;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/ForbiddenError.js
var require_ForbiddenError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/ForbiddenError.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ForbiddenError = void 0;
    var errors2 = __importStar2(require_errors2());
    var ForbiddenError = class _ForbiddenError extends errors2.CohereError {
      constructor(body) {
        super({
          message: "ForbiddenError",
          statusCode: 403,
          body
        });
        Object.setPrototypeOf(this, _ForbiddenError.prototype);
      }
    };
    exports2.ForbiddenError = ForbiddenError;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/UnauthorizedError.js
var require_UnauthorizedError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/UnauthorizedError.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnauthorizedError = void 0;
    var errors2 = __importStar2(require_errors2());
    var UnauthorizedError = class _UnauthorizedError extends errors2.CohereError {
      constructor(body) {
        super({
          message: "UnauthorizedError",
          statusCode: 401,
          body
        });
        Object.setPrototypeOf(this, _UnauthorizedError.prototype);
      }
    };
    exports2.UnauthorizedError = UnauthorizedError;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/ServiceUnavailableError.js
var require_ServiceUnavailableError = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/ServiceUnavailableError.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServiceUnavailableError = void 0;
    var errors2 = __importStar2(require_errors2());
    var ServiceUnavailableError = class _ServiceUnavailableError extends errors2.CohereError {
      constructor(body) {
        super({
          message: "ServiceUnavailableError",
          statusCode: 503,
          body
        });
        Object.setPrototypeOf(this, _ServiceUnavailableError.prototype);
      }
    };
    exports2.ServiceUnavailableError = ServiceUnavailableError;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/index.js
var require_errors3 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/errors/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_TooManyRequestsError(), exports2);
    __exportStar2(require_BadRequestError(), exports2);
    __exportStar2(require_InternalServerError(), exports2);
    __exportStar2(require_NotFoundError(), exports2);
    __exportStar2(require_ForbiddenError(), exports2);
    __exportStar2(require_UnauthorizedError(), exports2);
    __exportStar2(require_ServiceUnavailableError(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/client/requests/index.js
var require_requests10 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/client/index.js
var require_client11 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests10(), exports2);
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/index.js
var require_api = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_resources4(), exports2);
    __exportStar2(require_types8(), exports2);
    __exportStar2(require_errors3(), exports2);
    __exportStar2(require_client11(), exports2);
  }
});

// ../../node_modules/.pnpm/url-join@4.0.1/node_modules/url-join/lib/url-join.js
var require_url_join = __commonJS({
  "../../node_modules/.pnpm/url-join@4.0.1/node_modules/url-join/lib/url-join.js"(exports2, module2) {
    "use strict";
    (function(name, context, definition) {
      if (typeof module2 !== "undefined" && module2.exports)
        module2.exports = definition();
      else if (typeof define === "function" && define.amd)
        define(definition);
      else
        context[name] = definition();
    })("urljoin", exports2, function() {
      function normalize(strArray) {
        var resultArray = [];
        if (strArray.length === 0) {
          return "";
        }
        if (typeof strArray[0] !== "string") {
          throw new TypeError("Url must be a string. Received " + strArray[0]);
        }
        if (strArray[0].match(/^[^/:]+:\/*$/) && strArray.length > 1) {
          var first = strArray.shift();
          strArray[0] = first + strArray[0];
        }
        if (strArray[0].match(/^file:\/\/\//)) {
          strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, "$1:///");
        } else {
          strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, "$1://");
        }
        for (var i6 = 0; i6 < strArray.length; i6++) {
          var component = strArray[i6];
          if (typeof component !== "string") {
            throw new TypeError("Url must be a string. Received " + component);
          }
          if (component === "") {
            continue;
          }
          if (i6 > 0) {
            component = component.replace(/^[\/]+/, "");
          }
          if (i6 < strArray.length - 1) {
            component = component.replace(/[\/]+$/, "");
          } else {
            component = component.replace(/[\/]+$/, "/");
          }
          resultArray.push(component);
        }
        var str2 = resultArray.join("/");
        str2 = str2.replace(/\/(\?|&|#[^!])/g, "$1");
        var parts = str2.split("?");
        str2 = parts.shift() + (parts.length > 0 ? "?" : "") + parts.join("&");
        return str2;
      }
      return function() {
        var input;
        if (typeof arguments[0] === "object") {
          input = arguments[0];
        } else {
          input = [].slice.call(arguments);
        }
        return normalize(input);
      };
    });
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/client/Client.js
var require_Client = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/embedJobs/client/Client.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedJobs = void 0;
    var environments = __importStar2(require_environments());
    var core = __importStar2(require_core());
    var Cohere = __importStar2(require_api());
    var url_join_1 = __importDefault2(require_url_join());
    var serializers = __importStar2(require_serialization());
    var errors2 = __importStar2(require_errors2());
    var EmbedJobs = class {
      constructor(_options = {}) {
        this._options = _options;
      }
      /**
       * The list embed job endpoint allows users to view all embed jobs history for that specific user.
       *
       * @param {EmbedJobs.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.embedJobs.list()
       */
      list(requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "embed-jobs"),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.ListEmbedJobResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * This API launches an async Embed job for a [Dataset](https://docs.cohere.com/docs/datasets) of type `embed-input`. The result of a completed embed job is new Dataset of type `embed-output`, which contains the original text entries and the corresponding embeddings.
       *
       * @param {Cohere.CreateEmbedJobRequest} request
       * @param {EmbedJobs.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.embedJobs.create({
       *         model: "model",
       *         datasetId: "dataset_id",
       *         inputType: Cohere.EmbedInputType.SearchDocument
       *     })
       */
      create(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "embed-jobs"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.CreateEmbedJobRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.CreateEmbedJobResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * This API retrieves the details about an embed job started by the same user.
       *
       * @param {string} id - The ID of the embed job to retrieve.
       * @param {EmbedJobs.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.embedJobs.get("id")
       */
      get(id, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `embed-jobs/${encodeURIComponent(id)}`),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.EmbedJob.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * This API allows users to cancel an active embed job. Once invoked, the embedding process will be terminated, and users will be charged for the embeddings processed up to the cancellation point. It's important to note that partial results will not be available to users after cancellation.
       *
       * @param {string} id - The ID of the embed job to cancel.
       * @param {EmbedJobs.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.embedJobs.cancel("id")
       */
      cancel(id, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `embed-jobs/${encodeURIComponent(id)}/cancel`),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return;
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      _getAuthorizationHeader() {
        var _a3;
        return __awaiter2(this, void 0, void 0, function* () {
          const bearer = (_a3 = yield core.Supplier.get(this._options.token)) !== null && _a3 !== void 0 ? _a3 : process === null || process === void 0 ? void 0 : process.env["CO_API_KEY"];
          if (bearer == null) {
            throw new errors2.CohereError({
              message: "Please specify CO_API_KEY when instantiating the client."
            });
          }
          return `Bearer ${bearer}`;
        });
      }
    };
    exports2.EmbedJobs = EmbedJobs;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/client/Client.js
var require_Client2 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/datasets/client/Client.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Datasets = void 0;
    var environments = __importStar2(require_environments());
    var core = __importStar2(require_core());
    var Cohere = __importStar2(require_api());
    var url_join_1 = __importDefault2(require_url_join());
    var serializers = __importStar2(require_serialization());
    var errors2 = __importStar2(require_errors2());
    var Datasets = class {
      constructor(_options = {}) {
        this._options = _options;
      }
      /**
       * List datasets that have been created.
       *
       * @param {Cohere.DatasetsListRequest} request
       * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.datasets.list()
       */
      list(request2 = {}, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const { datasetType, before, after, limit, offset, validationStatus } = request2;
          const _queryParams = {};
          if (datasetType != null) {
            _queryParams["datasetType"] = datasetType;
          }
          if (before != null) {
            _queryParams["before"] = before.toISOString();
          }
          if (after != null) {
            _queryParams["after"] = after.toISOString();
          }
          if (limit != null) {
            _queryParams["limit"] = limit.toString();
          }
          if (offset != null) {
            _queryParams["offset"] = offset.toString();
          }
          if (validationStatus != null) {
            _queryParams["validationStatus"] = validationStatus;
          }
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "datasets"),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.DatasetsListResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Create a dataset by uploading a file. See ['Dataset Creation'](https://docs.cohere.com/docs/datasets#dataset-creation) for more information.
       *
       * @param {File | fs.ReadStream} data
       * @param {File | fs.ReadStream | undefined} evalData
       * @param {Cohere.DatasetsCreateRequest} request
       * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.datasets.create(fs.createReadStream("/path/to/your/file"), fs.createReadStream("/path/to/your/file"), {
       *         name: "name",
       *         type: Cohere.DatasetType.EmbedInput
       *     })
       */
      create(data, evalData, request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _queryParams = {};
          _queryParams["name"] = request2.name;
          _queryParams["type"] = request2.type;
          if (request2.keepOriginalFile != null) {
            _queryParams["keep_original_file"] = request2.keepOriginalFile.toString();
          }
          if (request2.skipMalformedInput != null) {
            _queryParams["skip_malformed_input"] = request2.skipMalformedInput.toString();
          }
          if (request2.keepFields != null) {
            if (Array.isArray(request2.keepFields)) {
              _queryParams["keep_fields"] = request2.keepFields.map((item) => item);
            } else {
              _queryParams["keep_fields"] = request2.keepFields;
            }
          }
          if (request2.optionalFields != null) {
            if (Array.isArray(request2.optionalFields)) {
              _queryParams["optional_fields"] = request2.optionalFields.map((item) => item);
            } else {
              _queryParams["optional_fields"] = request2.optionalFields;
            }
          }
          if (request2.textSeparator != null) {
            _queryParams["text_separator"] = request2.textSeparator;
          }
          if (request2.csvDelimiter != null) {
            _queryParams["csv_delimiter"] = request2.csvDelimiter;
          }
          if (request2.dryRun != null) {
            _queryParams["dry_run"] = request2.dryRun.toString();
          }
          const _request = new core.FormDataWrapper();
          yield _request.append("data", data);
          if (evalData != null) {
            yield _request.append("eval_data", evalData);
          }
          const _maybeEncodedRequest = _request.getRequest();
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "datasets"),
            method: "POST",
            headers: Object.assign({ Authorization: yield this._getAuthorizationHeader(), "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0, "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "cohere-ai", "X-Fern-SDK-Version": "7.10.5", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, yield _maybeEncodedRequest.getHeaders()),
            queryParameters: _queryParams,
            body: yield _maybeEncodedRequest.getBody(),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.DatasetsCreateResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * View the dataset storage usage for your Organization. Each Organization can have up to 10GB of storage across all their users.
       *
       * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.datasets.getUsage()
       */
      getUsage(requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "datasets/usage"),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.DatasetsGetUsageResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Retrieve a dataset by ID. See ['Datasets'](https://docs.cohere.com/docs/datasets) for more information.
       *
       * @param {string} id
       * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.datasets.get("id")
       */
      get(id, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `datasets/${encodeURIComponent(id)}`),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.DatasetsGetResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Delete a dataset by ID. Datasets are automatically deleted after 30 days, but they can also be deleted manually.
       *
       * @param {string} id
       * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.datasets.delete("id")
       */
      delete(id, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `datasets/${encodeURIComponent(id)}`),
            method: "DELETE",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.datasets.delete.Response.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      _getAuthorizationHeader() {
        var _a3;
        return __awaiter2(this, void 0, void 0, function* () {
          const bearer = (_a3 = yield core.Supplier.get(this._options.token)) !== null && _a3 !== void 0 ? _a3 : process === null || process === void 0 ? void 0 : process.env["CO_API_KEY"];
          if (bearer == null) {
            throw new errors2.CohereError({
              message: "Please specify CO_API_KEY when instantiating the client."
            });
          }
          return `Bearer ${bearer}`;
        });
      }
    };
    exports2.Datasets = Datasets;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/connectors/client/Client.js
var require_Client3 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/connectors/client/Client.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Connectors = void 0;
    var environments = __importStar2(require_environments());
    var core = __importStar2(require_core());
    var Cohere = __importStar2(require_api());
    var url_join_1 = __importDefault2(require_url_join());
    var serializers = __importStar2(require_serialization());
    var errors2 = __importStar2(require_errors2());
    var Connectors = class {
      constructor(_options = {}) {
        this._options = _options;
      }
      /**
       * Returns a list of connectors ordered by descending creation date (newer first). See ['Managing your Connector'](https://docs.cohere.com/docs/managing-your-connector) for more information.
       *
       * @param {Cohere.ConnectorsListRequest} request
       * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.connectors.list()
       */
      list(request2 = {}, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const { limit, offset } = request2;
          const _queryParams = {};
          if (limit != null) {
            _queryParams["limit"] = limit.toString();
          }
          if (offset != null) {
            _queryParams["offset"] = offset.toString();
          }
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "connectors"),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.ListConnectorsResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Creates a new connector. The connector is tested during registration and will cancel registration when the test is unsuccessful. See ['Creating and Deploying a Connector'](https://docs.cohere.com/docs/creating-and-deploying-a-connector) for more information.
       *
       * @param {Cohere.CreateConnectorRequest} request
       * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.ForbiddenError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.connectors.create({
       *         name: "name",
       *         url: "url"
       *     })
       */
      create(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "connectors"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.CreateConnectorRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.CreateConnectorResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 403:
                throw new Cohere.ForbiddenError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Retrieve a connector by ID. See ['Connectors'](https://docs.cohere.com/docs/connectors) for more information.
       *
       * @param {string} id - The ID of the connector to retrieve.
       * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.connectors.get("id")
       */
      get(id, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `connectors/${encodeURIComponent(id)}`),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.GetConnectorResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Delete a connector by ID. See ['Connectors'](https://docs.cohere.com/docs/connectors) for more information.
       *
       * @param {string} id - The ID of the connector to delete.
       * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.ForbiddenError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.connectors.delete("id")
       */
      delete(id, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `connectors/${encodeURIComponent(id)}`),
            method: "DELETE",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.DeleteConnectorResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 403:
                throw new Cohere.ForbiddenError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Update a connector by ID. Omitted fields will not be updated. See ['Managing your Connector'](https://docs.cohere.com/docs/managing-your-connector) for more information.
       *
       * @param {string} id - The ID of the connector to update.
       * @param {Cohere.UpdateConnectorRequest} request
       * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.ForbiddenError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.connectors.update("id")
       */
      update(id, request2 = {}, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `connectors/${encodeURIComponent(id)}`),
            method: "PATCH",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.UpdateConnectorRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.UpdateConnectorResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 403:
                throw new Cohere.ForbiddenError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Authorize the connector with the given ID for the connector oauth app. See ['Connector Authentication'](https://docs.cohere.com/docs/connector-authentication) for more information.
       *
       * @param {string} id - The ID of the connector to authorize.
       * @param {Cohere.ConnectorsOAuthAuthorizeRequest} request
       * @param {Connectors.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.connectors.oAuthAuthorize("id")
       */
      oAuthAuthorize(id, request2 = {}, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const { afterTokenRedirect } = request2;
          const _queryParams = {};
          if (afterTokenRedirect != null) {
            _queryParams["after_token_redirect"] = afterTokenRedirect;
          }
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `connectors/${encodeURIComponent(id)}/oauth/authorize`),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.OAuthAuthorizeResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      _getAuthorizationHeader() {
        var _a3;
        return __awaiter2(this, void 0, void 0, function* () {
          const bearer = (_a3 = yield core.Supplier.get(this._options.token)) !== null && _a3 !== void 0 ? _a3 : process === null || process === void 0 ? void 0 : process.env["CO_API_KEY"];
          if (bearer == null) {
            throw new errors2.CohereError({
              message: "Please specify CO_API_KEY when instantiating the client."
            });
          }
          return `Bearer ${bearer}`;
        });
      }
    };
    exports2.Connectors = Connectors;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/models/client/Client.js
var require_Client4 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/models/client/Client.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Models = void 0;
    var environments = __importStar2(require_environments());
    var core = __importStar2(require_core());
    var Cohere = __importStar2(require_api());
    var url_join_1 = __importDefault2(require_url_join());
    var serializers = __importStar2(require_serialization());
    var errors2 = __importStar2(require_errors2());
    var Models2 = class {
      constructor(_options = {}) {
        this._options = _options;
      }
      /**
       * Returns the details of a model, provided its name.
       *
       * @param {string} model
       * @param {Models.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.models.get("model")
       */
      get(model, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `models/${encodeURIComponent(model)}`),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.GetModelResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Returns a list of models available for use. The list contains models from Cohere as well as your fine-tuned models.
       *
       * @param {Cohere.ModelsListRequest} request
       * @param {Models.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.models.list()
       */
      list(request2 = {}, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const { pageSize, pageToken, endpoint, defaultOnly } = request2;
          const _queryParams = {};
          if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
          }
          if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
          }
          if (endpoint != null) {
            _queryParams["endpoint"] = endpoint;
          }
          if (defaultOnly != null) {
            _queryParams["default_only"] = defaultOnly.toString();
          }
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "models"),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.ListModelsResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      _getAuthorizationHeader() {
        var _a3;
        return __awaiter2(this, void 0, void 0, function* () {
          const bearer = (_a3 = yield core.Supplier.get(this._options.token)) !== null && _a3 !== void 0 ? _a3 : process === null || process === void 0 ? void 0 : process.env["CO_API_KEY"];
          if (bearer == null) {
            throw new errors2.CohereError({
              message: "Please specify CO_API_KEY when instantiating the client."
            });
          }
          return `Bearer ${bearer}`;
        });
      }
    };
    exports2.Models = Models2;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/client/Client.js
var require_Client5 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/api/resources/finetuning/client/Client.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Finetuning = void 0;
    var environments = __importStar2(require_environments());
    var core = __importStar2(require_core());
    var Cohere = __importStar2(require_api());
    var url_join_1 = __importDefault2(require_url_join());
    var serializers = __importStar2(require_serialization());
    var errors2 = __importStar2(require_errors2());
    var Finetuning = class {
      constructor(_options = {}) {
        this._options = _options;
      }
      /**
       * @param {Cohere.FinetuningListFinetunedModelsRequest} request
       * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.UnauthorizedError}
       * @throws {@link Cohere.ForbiddenError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.InternalServerError}
       * @throws {@link Cohere.ServiceUnavailableError}
       *
       * @example
       *     await cohere.finetuning.listFinetunedModels()
       */
      listFinetunedModels(request2 = {}, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const { pageSize, pageToken, orderBy } = request2;
          const _queryParams = {};
          if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
          }
          if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
          }
          if (orderBy != null) {
            _queryParams["order_by"] = orderBy;
          }
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "finetuning/finetuned-models"),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.finetuning.ListFinetunedModelsResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 401:
                throw new Cohere.UnauthorizedError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 403:
                throw new Cohere.ForbiddenError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              case 503:
                throw new Cohere.ServiceUnavailableError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * @param {Cohere.finetuning.FinetunedModel} request
       * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.UnauthorizedError}
       * @throws {@link Cohere.ForbiddenError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.InternalServerError}
       * @throws {@link Cohere.ServiceUnavailableError}
       *
       * @example
       *     await cohere.finetuning.createFinetunedModel({
       *         name: "api-test",
       *         settings: {
       *             baseModel: {
       *                 baseType: Cohere.finetuning.BaseType.BaseTypeGenerative
       *             },
       *             datasetId: "my-dataset-id"
       *         }
       *     })
       */
      createFinetunedModel(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "finetuning/finetuned-models"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.finetuning.FinetunedModel.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.finetuning.CreateFinetunedModelResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 401:
                throw new Cohere.UnauthorizedError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 403:
                throw new Cohere.ForbiddenError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              case 503:
                throw new Cohere.ServiceUnavailableError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * @param {string} id - The fine-tuned model ID.
       * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.UnauthorizedError}
       * @throws {@link Cohere.ForbiddenError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.InternalServerError}
       * @throws {@link Cohere.ServiceUnavailableError}
       *
       * @example
       *     await cohere.finetuning.getFinetunedModel("id")
       */
      getFinetunedModel(id, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `finetuning/finetuned-models/${encodeURIComponent(id)}`),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.finetuning.GetFinetunedModelResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 401:
                throw new Cohere.UnauthorizedError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 403:
                throw new Cohere.ForbiddenError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              case 503:
                throw new Cohere.ServiceUnavailableError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * @param {string} id - The fine-tuned model ID.
       * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.UnauthorizedError}
       * @throws {@link Cohere.ForbiddenError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.InternalServerError}
       * @throws {@link Cohere.ServiceUnavailableError}
       *
       * @example
       *     await cohere.finetuning.deleteFinetunedModel("id")
       */
      deleteFinetunedModel(id, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `finetuning/finetuned-models/${encodeURIComponent(id)}`),
            method: "DELETE",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.finetuning.DeleteFinetunedModelResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 401:
                throw new Cohere.UnauthorizedError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 403:
                throw new Cohere.ForbiddenError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              case 503:
                throw new Cohere.ServiceUnavailableError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * @param {string} id - FinetunedModel ID.
       * @param {Cohere.FinetuningUpdateFinetunedModelRequest} request
       * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.UnauthorizedError}
       * @throws {@link Cohere.ForbiddenError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.InternalServerError}
       * @throws {@link Cohere.ServiceUnavailableError}
       *
       * @example
       *     await cohere.finetuning.updateFinetunedModel("id", {
       *         name: "name",
       *         settings: {
       *             baseModel: {
       *                 baseType: Cohere.finetuning.BaseType.BaseTypeUnspecified
       *             },
       *             datasetId: "dataset_id"
       *         }
       *     })
       */
      updateFinetunedModel(id, request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `finetuning/finetuned-models/${encodeURIComponent(id)}`),
            method: "PATCH",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.FinetuningUpdateFinetunedModelRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.finetuning.UpdateFinetunedModelResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 401:
                throw new Cohere.UnauthorizedError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 403:
                throw new Cohere.ForbiddenError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              case 503:
                throw new Cohere.ServiceUnavailableError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * @param {string} finetunedModelId - The parent fine-tuned model ID.
       * @param {Cohere.FinetuningListEventsRequest} request
       * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.UnauthorizedError}
       * @throws {@link Cohere.ForbiddenError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.InternalServerError}
       * @throws {@link Cohere.ServiceUnavailableError}
       *
       * @example
       *     await cohere.finetuning.listEvents("finetuned_model_id")
       */
      listEvents(finetunedModelId, request2 = {}, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const { pageSize, pageToken, orderBy } = request2;
          const _queryParams = {};
          if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
          }
          if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
          }
          if (orderBy != null) {
            _queryParams["order_by"] = orderBy;
          }
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `finetuning/finetuned-models/${encodeURIComponent(finetunedModelId)}/events`),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.finetuning.ListEventsResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 401:
                throw new Cohere.UnauthorizedError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 403:
                throw new Cohere.ForbiddenError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              case 503:
                throw new Cohere.ServiceUnavailableError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * @param {string} finetunedModelId - The parent fine-tuned model ID.
       * @param {Cohere.FinetuningListTrainingStepMetricsRequest} request
       * @param {Finetuning.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.UnauthorizedError}
       * @throws {@link Cohere.ForbiddenError}
       * @throws {@link Cohere.NotFoundError}
       * @throws {@link Cohere.InternalServerError}
       * @throws {@link Cohere.ServiceUnavailableError}
       *
       * @example
       *     await cohere.finetuning.listTrainingStepMetrics("finetuned_model_id")
       */
      listTrainingStepMetrics(finetunedModelId, request2 = {}, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const { pageSize, pageToken } = request2;
          const _queryParams = {};
          if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
          }
          if (pageToken != null) {
            _queryParams["page_token"] = pageToken;
          }
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, `finetuning/finetuned-models/${encodeURIComponent(finetunedModelId)}/training-step-metrics`),
            method: "GET",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.finetuning.ListTrainingStepMetricsResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 401:
                throw new Cohere.UnauthorizedError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 403:
                throw new Cohere.ForbiddenError(_response.error.body);
              case 404:
                throw new Cohere.NotFoundError(_response.error.body);
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              case 503:
                throw new Cohere.ServiceUnavailableError(yield serializers.finetuning.Error_.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      _getAuthorizationHeader() {
        var _a3;
        return __awaiter2(this, void 0, void 0, function* () {
          const bearer = (_a3 = yield core.Supplier.get(this._options.token)) !== null && _a3 !== void 0 ? _a3 : process === null || process === void 0 ? void 0 : process.env["CO_API_KEY"];
          if (bearer == null) {
            throw new errors2.CohereError({
              message: "Please specify CO_API_KEY when instantiating the client."
            });
          }
          return `Bearer ${bearer}`;
        });
      }
    };
    exports2.Finetuning = Finetuning;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/Client.js
var require_Client6 = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/Client.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CohereClient = void 0;
    var environments = __importStar2(require_environments());
    var core = __importStar2(require_core());
    var Cohere = __importStar2(require_api());
    var serializers = __importStar2(require_serialization());
    var url_join_1 = __importDefault2(require_url_join());
    var errors2 = __importStar2(require_errors2());
    var Client_1 = require_Client();
    var Client_2 = require_Client2();
    var Client_3 = require_Client3();
    var Client_4 = require_Client4();
    var Client_5 = require_Client5();
    var CohereClient = class {
      constructor(_options = {}) {
        this._options = _options;
      }
      /**
       * Generates a text response to a user message.
       * To learn how to use the Chat API with Streaming and RAG follow our [Text Generation guides](https://docs.cohere.com/docs/chat-api).
       */
      chatStream(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "chat"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: Object.assign(Object.assign({}, yield serializers.ChatStreamRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            })), { stream: true }),
            responseType: "streaming",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return new core.Stream({
              stream: _response.body,
              parse: (data) => __awaiter2(this, void 0, void 0, function* () {
                return yield serializers.StreamedChatResponse.parseOrThrow(data, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                });
              }),
              signal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
              eventShape: {
                type: "json",
                messageTerminator: "\n"
              }
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Generates a text response to a user message.
       * To learn how to use the Chat API with Streaming and RAG follow our [Text Generation guides](https://docs.cohere.com/docs/chat-api).
       *
       * @param {Cohere.ChatRequest} request
       * @param {CohereClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.chat({
       *         message: "Can you give me a global market overview of solar panels?",
       *         stream: false,
       *         promptTruncation: Cohere.ChatRequestPromptTruncation.Off,
       *         temperature: 0.3
       *     })
       */
      chat(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "chat"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: Object.assign(Object.assign({}, yield serializers.ChatRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            })), { stream: false }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.NonStreamedChatResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * > 🚧 Warning
       * >
       * > This API is marked as "Legacy" and is no longer maintained. Follow the [migration guide](/docs/migrating-from-cogenerate-to-cochat) to start using the Chat API.
       *
       * Generates realistic text conditioned on a given input.
       */
      generateStream(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "generate"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: Object.assign(Object.assign({}, yield serializers.GenerateStreamRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            })), { stream: true }),
            responseType: "streaming",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return new core.Stream({
              stream: _response.body,
              parse: (data) => __awaiter2(this, void 0, void 0, function* () {
                return yield serializers.GenerateStreamedResponse.parseOrThrow(data, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                });
              }),
              signal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
              eventShape: {
                type: "json",
                messageTerminator: "\n"
              }
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * > 🚧 Warning
       * >
       * > This API is marked as "Legacy" and is no longer maintained. Follow the [migration guide](/docs/migrating-from-cogenerate-to-cochat) to start using the Chat API.
       *
       * Generates realistic text conditioned on a given input.
       *
       * @param {Cohere.GenerateRequest} request
       * @param {CohereClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.generate({
       *         prompt: "Please explain to me how LLMs work",
       *         stream: false
       *     })
       */
      generate(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "generate"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: Object.assign(Object.assign({}, yield serializers.GenerateRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            })), { stream: false }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.Generation.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * This endpoint returns text embeddings. An embedding is a list of floating point numbers that captures semantic information about the text that it represents.
       *
       * Embeddings can be used to create text classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.
       *
       * If you want to learn more how to use the embedding model, have a look at the [Semantic Search Guide](/docs/semantic-search).
       *
       * @param {Cohere.EmbedRequest} request
       * @param {CohereClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.embed({
       *         texts: ["string"],
       *         model: "string",
       *         inputType: Cohere.EmbedInputType.SearchDocument,
       *         embeddingTypes: [Cohere.EmbeddingType.Float],
       *         truncate: Cohere.EmbedRequestTruncate.None
       *     })
       */
      embed(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "embed"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.EmbedRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.EmbedResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * This endpoint takes in a query and a list of texts and produces an ordered array with each text assigned a relevance score.
       *
       * @param {Cohere.RerankRequest} request
       * @param {CohereClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.rerank({
       *         model: "rerank-english-v3.0",
       *         query: "What is the capital of the United States?",
       *         documents: ["Carson City is the capital city of the American state of Nevada.", "The Commonwealth of the Northern Mariana Islands is a group of islands in the Pacific Ocean. Its capital is Saipan.", "Washington, D.C. (also known as simply Washington or D.C., and officially as the District of Columbia) is the capital of the United States. It is a federal district.", "Capital punishment (the death penalty) has existed in the United States since beforethe United States was a country. As of 2017, capital punishment is legal in 30 of the 50 states."]
       *     })
       */
      rerank(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "rerank"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.RerankRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.RerankResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * This endpoint makes a prediction about which label fits the specified text inputs best. To make a prediction, Classify uses the provided `examples` of text + label pairs as a reference.
       * Note: [Fine-tuned models](https://docs.cohere.com/docs/classify-fine-tuning) trained on classification examples don't require the `examples` parameter to be passed in explicitly.
       *
       * @param {Cohere.ClassifyRequest} request
       * @param {CohereClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.classify({
       *         inputs: ["Confirm your email address", "hey i need u to send some $"],
       *         examples: [{
       *                 text: "Dermatologists don't like her!",
       *                 label: "Spam"
       *             }, {
       *                 text: "Hello, open to this?",
       *                 label: "Spam"
       *             }, {
       *                 text: "I need help please wire me $1000 right now",
       *                 label: "Spam"
       *             }, {
       *                 text: "Nice to know you ;)",
       *                 label: "Spam"
       *             }, {
       *                 text: "Please help me?",
       *                 label: "Spam"
       *             }, {
       *                 text: "Your parcel will be delivered today",
       *                 label: "Not spam"
       *             }, {
       *                 text: "Review changes to our Terms and Conditions",
       *                 label: "Not spam"
       *             }, {
       *                 text: "Weekly sync notes",
       *                 label: "Not spam"
       *             }, {
       *                 text: "Re: Follow up from today\u2019s meeting",
       *                 label: "Not spam"
       *             }, {
       *                 text: "Pre-read for tomorrow",
       *                 label: "Not spam"
       *             }]
       *     })
       */
      classify(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "classify"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.ClassifyRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.ClassifyResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * > 🚧 Warning
       * >
       * > This API is marked as "Legacy" and is no longer maintained. Follow the [migration guide](/docs/migrating-from-cogenerate-to-cochat) to start using the Chat API.
       *
       * Generates a summary in English for a given text.
       *
       * @param {Cohere.SummarizeRequest} request
       * @param {CohereClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.summarize({
       *         text: "Ice cream is a sweetened frozen food typically eaten as a snack or dessert. It may be made from milk or cream and is flavoured with a sweetener, either sugar or an alternative, and a spice, such as cocoa or vanilla, or with fruit such as strawberries or peaches. It can also be made by whisking a flavored cream base and liquid nitrogen together. Food coloring is sometimes added, in addition to stabilizers. The mixture is cooled below the freezing point of water and stirred to incorporate air spaces and to prevent detectable ice crystals from forming. The result is a smooth, semi-solid foam that is solid at very low temperatures (below 2 \u00B0C or 35 \u00B0F). It becomes more malleable as its temperature increases.\n\nThe meaning of the name \"ice cream\" varies from one country to another. In some countries, such as the United States, \"ice cream\" applies only to a specific variety, and most governments regulate the commercial use of the various terms according to the relative quantities of the main ingredients, notably the amount of cream. Products that do not meet the criteria to be called ice cream are sometimes labelled \"frozen dairy dessert\" instead. In other countries, such as Italy and Argentina, one word is used fo\r all variants. Analogues made from dairy alternatives, such as goat's or sheep's milk, or milk substitutes (e.g., soy, cashew, coconut, almond milk or tofu), are available for those who are lactose intolerant, allergic to dairy protein or vegan."
       *     })
       */
      summarize(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "summarize"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.SummarizeRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.SummarizeResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * This endpoint splits input text into smaller units called tokens using byte-pair encoding (BPE). To learn more about tokenization and byte pair encoding, see the tokens page.
       *
       * @param {Cohere.TokenizeRequest} request
       * @param {CohereClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.BadRequestError}
       * @throws {@link Cohere.TooManyRequestsError}
       * @throws {@link Cohere.InternalServerError}
       *
       * @example
       *     await cohere.tokenize({
       *         text: "tokenize me! :D",
       *         model: "command"
       *     })
       */
      tokenize(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "tokenize"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.TokenizeRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.TokenizeResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 400:
                throw new Cohere.BadRequestError(_response.error.body);
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              case 500:
                throw new Cohere.InternalServerError(_response.error.body);
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * This endpoint takes tokens using byte-pair encoding and returns their text representation. To learn more about tokenization and byte pair encoding, see the tokens page.
       *
       * @param {Cohere.DetokenizeRequest} request
       * @param {CohereClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.detokenize({
       *         tokens: [10104, 12221, 1315, 34, 1420, 69],
       *         model: "command"
       *     })
       */
      detokenize(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "detokenize"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            body: yield serializers.DetokenizeRequest.jsonOrThrow(request2, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true
            }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.DetokenizeResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Checks that the api key in the Authorization header is valid and active
       *
       * @param {CohereClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @throws {@link Cohere.TooManyRequestsError}
       *
       * @example
       *     await cohere.checkApiKey()
       */
      checkApiKey(requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.CohereEnvironment.Production, "check-api-key"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Client-Name": (yield core.Supplier.get(this._options.clientName)) != null ? yield core.Supplier.get(this._options.clientName) : void 0,
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "cohere-ai",
              "X-Fern-SDK-Version": "7.10.5",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 3e5,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return yield serializers.CheckApiKeyResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
              case 429:
                throw new Cohere.TooManyRequestsError(yield serializers.TooManyRequestsErrorBody.parseOrThrow(_response.error.body, {
                  unrecognizedObjectKeys: "passthrough",
                  allowUnrecognizedUnionMembers: true,
                  allowUnrecognizedEnumValues: true,
                  skipValidation: true,
                  breadcrumbsPrefix: ["response"]
                }));
              default:
                throw new errors2.CohereError({
                  statusCode: _response.error.statusCode,
                  body: _response.error.body
                });
            }
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.CohereError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.CohereTimeoutError();
            case "unknown":
              throw new errors2.CohereError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      get embedJobs() {
        var _a3;
        return (_a3 = this._embedJobs) !== null && _a3 !== void 0 ? _a3 : this._embedJobs = new Client_1.EmbedJobs(this._options);
      }
      get datasets() {
        var _a3;
        return (_a3 = this._datasets) !== null && _a3 !== void 0 ? _a3 : this._datasets = new Client_2.Datasets(this._options);
      }
      get connectors() {
        var _a3;
        return (_a3 = this._connectors) !== null && _a3 !== void 0 ? _a3 : this._connectors = new Client_3.Connectors(this._options);
      }
      get models() {
        var _a3;
        return (_a3 = this._models) !== null && _a3 !== void 0 ? _a3 : this._models = new Client_4.Models(this._options);
      }
      get finetuning() {
        var _a3;
        return (_a3 = this._finetuning) !== null && _a3 !== void 0 ? _a3 : this._finetuning = new Client_5.Finetuning(this._options);
      }
      _getAuthorizationHeader() {
        var _a3;
        return __awaiter2(this, void 0, void 0, function* () {
          const bearer = (_a3 = yield core.Supplier.get(this._options.token)) !== null && _a3 !== void 0 ? _a3 : process === null || process === void 0 ? void 0 : process.env["CO_API_KEY"];
          if (bearer == null) {
            throw new errors2.CohereError({
              message: "Please specify CO_API_KEY when instantiating the client."
            });
          }
          return `Bearer ${bearer}`;
        });
      }
    };
    exports2.CohereClient = CohereClient;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/AwsClient.js
var require_AwsClient = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/AwsClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsClient = void 0;
    var Client_1 = require_Client6();
    var AwsClient = class extends Client_1.CohereClient {
      constructor(_options) {
        _options.token = "n/a";
        super(_options);
      }
    };
    exports2.AwsClient = AwsClient;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/BedrockClient.js
var require_BedrockClient = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/BedrockClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BedrockClient = void 0;
    var aws_utils_1 = require_aws_utils();
    var AwsClient_1 = require_AwsClient();
    var BedrockClient = class extends AwsClient_1.AwsClient {
      constructor(_options) {
        super(Object.assign(Object.assign({}, _options), { fetcher: (0, aws_utils_1.fetchOverride)("bedrock", _options) }));
      }
    };
    exports2.BedrockClient = BedrockClient;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/SagemakerClient.js
var require_SagemakerClient = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/SagemakerClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SagemakerClient = void 0;
    var AwsClient_1 = require_AwsClient();
    var aws_utils_1 = require_aws_utils();
    var SagemakerClient = class extends AwsClient_1.AwsClient {
      constructor(_options) {
        super(Object.assign(Object.assign({}, _options), { fetcher: (0, aws_utils_1.fetchOverride)("sagemaker", _options) }));
      }
    };
    exports2.SagemakerClient = SagemakerClient;
  }
});

// ../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/index.js
var require_cohere_ai = __commonJS({
  "../../node_modules/.pnpm/cohere-ai@7.10.5_@aws-sdk+client-sso-oidc@3.596.0/node_modules/cohere-ai/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CohereTimeoutError = exports2.CohereError = exports2.CohereEnvironment = exports2.Cohere = exports2.SagemakerClient = exports2.CohereClient = exports2.BedrockClient = void 0;
    var BedrockClient_1 = require_BedrockClient();
    Object.defineProperty(exports2, "BedrockClient", { enumerable: true, get: function() {
      return BedrockClient_1.BedrockClient;
    } });
    var Client_1 = require_Client6();
    Object.defineProperty(exports2, "CohereClient", { enumerable: true, get: function() {
      return Client_1.CohereClient;
    } });
    var SagemakerClient_1 = require_SagemakerClient();
    Object.defineProperty(exports2, "SagemakerClient", { enumerable: true, get: function() {
      return SagemakerClient_1.SagemakerClient;
    } });
    exports2.Cohere = __importStar2(require_api());
    var environments_1 = require_environments();
    Object.defineProperty(exports2, "CohereEnvironment", { enumerable: true, get: function() {
      return environments_1.CohereEnvironment;
    } });
    var errors_1 = require_errors2();
    Object.defineProperty(exports2, "CohereError", { enumerable: true, get: function() {
      return errors_1.CohereError;
    } });
    Object.defineProperty(exports2, "CohereTimeoutError", { enumerable: true, get: function() {
      return errors_1.CohereTimeoutError;
    } });
  }
});

// ../../node_modules/.pnpm/@google+generative-ai@0.1.3/node_modules/@google/generative-ai/dist/index.mjs
var dist_exports = {};
__export(dist_exports, {
  BlockReason: () => BlockReason,
  ChatSession: () => ChatSession,
  FinishReason: () => FinishReason,
  GenerativeModel: () => GenerativeModel,
  GoogleGenerativeAI: () => GoogleGenerativeAI,
  HarmBlockThreshold: () => HarmBlockThreshold,
  HarmCategory: () => HarmCategory,
  HarmProbability: () => HarmProbability,
  TaskType: () => TaskType
});
function getClientHeaders() {
  return `${PACKAGE_LOG_HEADER}/${PACKAGE_VERSION}`;
}
async function makeRequest(url, body) {
  let response;
  try {
    response = await fetch(url.toString(), {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-goog-api-client": getClientHeaders(),
        "x-goog-api-key": url.apiKey
      },
      body
    });
    if (!response.ok) {
      let message = "";
      try {
        const json = await response.json();
        message = json.error.message;
        if (json.error.details) {
          message += ` ${JSON.stringify(json.error.details)}`;
        }
      } catch (e6) {
      }
      throw new Error(`[${response.status} ${response.statusText}] ${message}`);
    }
  } catch (e6) {
    const err = new GoogleGenerativeAIError(`Error fetching from ${url.toString()}: ${e6.message}`);
    err.stack = e6.stack;
    throw err;
  }
  return response;
}
function addHelpers(response) {
  response.text = () => {
    if (response.candidates && response.candidates.length > 0) {
      if (response.candidates.length > 1) {
        console.warn(`This response had ${response.candidates.length} candidates. Returning text from the first candidate only. Access response.candidates directly to use the other candidates.`);
      }
      if (hadBadFinishReason(response.candidates[0])) {
        throw new GoogleGenerativeAIResponseError(`${formatBlockErrorMessage(response)}`, response);
      }
      return getText(response);
    } else if (response.promptFeedback) {
      throw new GoogleGenerativeAIResponseError(`Text not available. ${formatBlockErrorMessage(response)}`, response);
    }
    return "";
  };
  return response;
}
function getText(response) {
  var _a3, _b, _c, _d;
  if ((_d = (_c = (_b = (_a3 = response.candidates) === null || _a3 === void 0 ? void 0 : _a3[0].content) === null || _b === void 0 ? void 0 : _b.parts) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.text) {
    return response.candidates[0].content.parts[0].text;
  } else {
    return "";
  }
}
function hadBadFinishReason(candidate) {
  return !!candidate.finishReason && badFinishReasons.includes(candidate.finishReason);
}
function formatBlockErrorMessage(response) {
  var _a3, _b, _c;
  let message = "";
  if ((!response.candidates || response.candidates.length === 0) && response.promptFeedback) {
    message += "Response was blocked";
    if ((_a3 = response.promptFeedback) === null || _a3 === void 0 ? void 0 : _a3.blockReason) {
      message += ` due to ${response.promptFeedback.blockReason}`;
    }
    if ((_b = response.promptFeedback) === null || _b === void 0 ? void 0 : _b.blockReasonMessage) {
      message += `: ${response.promptFeedback.blockReasonMessage}`;
    }
  } else if ((_c = response.candidates) === null || _c === void 0 ? void 0 : _c[0]) {
    const firstCandidate = response.candidates[0];
    if (hadBadFinishReason(firstCandidate)) {
      message += `Candidate was blocked due to ${firstCandidate.finishReason}`;
      if (firstCandidate.finishMessage) {
        message += `: ${firstCandidate.finishMessage}`;
      }
    }
  }
  return message;
}
function __await2(v7) {
  return this instanceof __await2 ? (this.v = v7, this) : new __await2(v7);
}
function __asyncGenerator2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g7 = generator.apply(thisArg, _arguments || []), i6, q6 = [];
  return i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
    return this;
  }, i6;
  function verb(n6) {
    if (g7[n6])
      i6[n6] = function(v7) {
        return new Promise(function(a6, b6) {
          q6.push([n6, v7, a6, b6]) > 1 || resume(n6, v7);
        });
      };
  }
  function resume(n6, v7) {
    try {
      step(g7[n6](v7));
    } catch (e6) {
      settle(q6[0][3], e6);
    }
  }
  function step(r6) {
    r6.value instanceof __await2 ? Promise.resolve(r6.value.v).then(fulfill, reject) : settle(q6[0][2], r6);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f6, v7) {
    if (f6(v7), q6.shift(), q6.length)
      resume(q6[0][0], q6[0][1]);
  }
}
function processStream(response) {
  const inputStream = response.body.pipeThrough(new TextDecoderStream("utf8", { fatal: true }));
  const responseStream = getResponseStream(inputStream);
  const [stream1, stream2] = responseStream.tee();
  return {
    stream: generateResponseSequence(stream1),
    response: getResponsePromise(stream2)
  };
}
async function getResponsePromise(stream) {
  const allResponses = [];
  const reader = stream.getReader();
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      return addHelpers(aggregateResponses(allResponses));
    }
    allResponses.push(value);
  }
}
function generateResponseSequence(stream) {
  return __asyncGenerator2(this, arguments, function* generateResponseSequence_1() {
    const reader = stream.getReader();
    while (true) {
      const { value, done } = yield __await2(reader.read());
      if (done) {
        break;
      }
      yield yield __await2(addHelpers(value));
    }
  });
}
function getResponseStream(inputStream) {
  const reader = inputStream.getReader();
  const stream = new ReadableStream({
    start(controller) {
      let currentText = "";
      return pump();
      function pump() {
        return reader.read().then(({ value, done }) => {
          if (done) {
            if (currentText.trim()) {
              controller.error(new GoogleGenerativeAIError("Failed to parse stream"));
              return;
            }
            controller.close();
            return;
          }
          currentText += value;
          let match = currentText.match(responseLineRE);
          let parsedResponse;
          while (match) {
            try {
              parsedResponse = JSON.parse(match[1]);
            } catch (e6) {
              controller.error(new GoogleGenerativeAIError(`Error parsing JSON response: "${match[1]}"`));
              return;
            }
            controller.enqueue(parsedResponse);
            currentText = currentText.substring(match[0].length);
            match = currentText.match(responseLineRE);
          }
          return pump();
        });
      }
    }
  });
  return stream;
}
function aggregateResponses(responses) {
  const lastResponse = responses[responses.length - 1];
  const aggregatedResponse = {
    promptFeedback: lastResponse === null || lastResponse === void 0 ? void 0 : lastResponse.promptFeedback
  };
  for (const response of responses) {
    if (response.candidates) {
      for (const candidate of response.candidates) {
        const i6 = candidate.index;
        if (!aggregatedResponse.candidates) {
          aggregatedResponse.candidates = [];
        }
        if (!aggregatedResponse.candidates[i6]) {
          aggregatedResponse.candidates[i6] = {
            index: candidate.index
          };
        }
        aggregatedResponse.candidates[i6].citationMetadata = candidate.citationMetadata;
        aggregatedResponse.candidates[i6].finishReason = candidate.finishReason;
        aggregatedResponse.candidates[i6].finishMessage = candidate.finishMessage;
        aggregatedResponse.candidates[i6].safetyRatings = candidate.safetyRatings;
        if (candidate.content && candidate.content.parts) {
          if (!aggregatedResponse.candidates[i6].content) {
            aggregatedResponse.candidates[i6].content = {
              role: candidate.content.role || "user",
              parts: [{ text: "" }]
            };
          }
          for (const part of candidate.content.parts) {
            if (part.text) {
              aggregatedResponse.candidates[i6].content.parts[0].text += part.text;
            }
          }
        }
      }
    }
  }
  return aggregatedResponse;
}
async function generateContentStream(apiKey, model, params) {
  const url = new RequestUrl(
    model,
    Task.STREAM_GENERATE_CONTENT,
    apiKey,
    /* stream */
    true
  );
  const response = await makeRequest(url, JSON.stringify(params));
  return processStream(response);
}
async function generateContent(apiKey, model, params) {
  const url = new RequestUrl(
    model,
    Task.GENERATE_CONTENT,
    apiKey,
    /* stream */
    false
  );
  const response = await makeRequest(url, JSON.stringify(params));
  const responseJson = await response.json();
  const enhancedResponse = addHelpers(responseJson);
  return {
    response: enhancedResponse
  };
}
function formatNewContent(request2, role) {
  let newParts = [];
  if (typeof request2 === "string") {
    newParts = [{ text: request2 }];
  } else {
    for (const partOrString of request2) {
      if (typeof partOrString === "string") {
        newParts.push({ text: partOrString });
      } else {
        newParts.push(partOrString);
      }
    }
  }
  return { role, parts: newParts };
}
function formatGenerateContentInput(params) {
  if (params.contents) {
    return params;
  } else {
    const content = formatNewContent(params, "user");
    return { contents: [content] };
  }
}
function formatEmbedContentInput(params) {
  if (typeof params === "string" || Array.isArray(params)) {
    const content = formatNewContent(params, "user");
    return { content };
  }
  return params;
}
async function countTokens(apiKey, model, params) {
  const url = new RequestUrl(model, Task.COUNT_TOKENS, apiKey, false);
  const response = await makeRequest(url, JSON.stringify(Object.assign(Object.assign({}, params), { model })));
  return response.json();
}
async function embedContent(apiKey, model, params) {
  const url = new RequestUrl(model, Task.EMBED_CONTENT, apiKey, false);
  const response = await makeRequest(url, JSON.stringify(params));
  return response.json();
}
async function batchEmbedContents(apiKey, model, params) {
  const url = new RequestUrl(model, Task.BATCH_EMBED_CONTENTS, apiKey, false);
  const requestsWithModel = params.requests.map((request2) => {
    return Object.assign(Object.assign({}, request2), { model: `models/${model}` });
  });
  const response = await makeRequest(url, JSON.stringify({ requests: requestsWithModel }));
  return response.json();
}
var HarmCategory, HarmBlockThreshold, HarmProbability, BlockReason, FinishReason, TaskType, GoogleGenerativeAIError, GoogleGenerativeAIResponseError, BASE_URL, API_VERSION, PACKAGE_VERSION, PACKAGE_LOG_HEADER, Task, RequestUrl, badFinishReasons, responseLineRE, SILENT_ERROR, ChatSession, GenerativeModel, GoogleGenerativeAI;
var init_dist = __esm({
  "../../node_modules/.pnpm/@google+generative-ai@0.1.3/node_modules/@google/generative-ai/dist/index.mjs"() {
    "use strict";
    (function(HarmCategory2) {
      HarmCategory2["HARM_CATEGORY_UNSPECIFIED"] = "HARM_CATEGORY_UNSPECIFIED";
      HarmCategory2["HARM_CATEGORY_HATE_SPEECH"] = "HARM_CATEGORY_HATE_SPEECH";
      HarmCategory2["HARM_CATEGORY_SEXUALLY_EXPLICIT"] = "HARM_CATEGORY_SEXUALLY_EXPLICIT";
      HarmCategory2["HARM_CATEGORY_HARASSMENT"] = "HARM_CATEGORY_HARASSMENT";
      HarmCategory2["HARM_CATEGORY_DANGEROUS_CONTENT"] = "HARM_CATEGORY_DANGEROUS_CONTENT";
    })(HarmCategory || (HarmCategory = {}));
    (function(HarmBlockThreshold2) {
      HarmBlockThreshold2["HARM_BLOCK_THRESHOLD_UNSPECIFIED"] = "HARM_BLOCK_THRESHOLD_UNSPECIFIED";
      HarmBlockThreshold2["BLOCK_LOW_AND_ABOVE"] = "BLOCK_LOW_AND_ABOVE";
      HarmBlockThreshold2["BLOCK_MEDIUM_AND_ABOVE"] = "BLOCK_MEDIUM_AND_ABOVE";
      HarmBlockThreshold2["BLOCK_ONLY_HIGH"] = "BLOCK_ONLY_HIGH";
      HarmBlockThreshold2["BLOCK_NONE"] = "BLOCK_NONE";
    })(HarmBlockThreshold || (HarmBlockThreshold = {}));
    (function(HarmProbability2) {
      HarmProbability2["HARM_PROBABILITY_UNSPECIFIED"] = "HARM_PROBABILITY_UNSPECIFIED";
      HarmProbability2["NEGLIGIBLE"] = "NEGLIGIBLE";
      HarmProbability2["LOW"] = "LOW";
      HarmProbability2["MEDIUM"] = "MEDIUM";
      HarmProbability2["HIGH"] = "HIGH";
    })(HarmProbability || (HarmProbability = {}));
    (function(BlockReason2) {
      BlockReason2["BLOCKED_REASON_UNSPECIFIED"] = "BLOCKED_REASON_UNSPECIFIED";
      BlockReason2["SAFETY"] = "SAFETY";
      BlockReason2["OTHER"] = "OTHER";
    })(BlockReason || (BlockReason = {}));
    (function(FinishReason2) {
      FinishReason2["FINISH_REASON_UNSPECIFIED"] = "FINISH_REASON_UNSPECIFIED";
      FinishReason2["STOP"] = "STOP";
      FinishReason2["MAX_TOKENS"] = "MAX_TOKENS";
      FinishReason2["SAFETY"] = "SAFETY";
      FinishReason2["RECITATION"] = "RECITATION";
      FinishReason2["OTHER"] = "OTHER";
    })(FinishReason || (FinishReason = {}));
    (function(TaskType2) {
      TaskType2["TASK_TYPE_UNSPECIFIED"] = "TASK_TYPE_UNSPECIFIED";
      TaskType2["RETRIEVAL_QUERY"] = "RETRIEVAL_QUERY";
      TaskType2["RETRIEVAL_DOCUMENT"] = "RETRIEVAL_DOCUMENT";
      TaskType2["SEMANTIC_SIMILARITY"] = "SEMANTIC_SIMILARITY";
      TaskType2["CLASSIFICATION"] = "CLASSIFICATION";
      TaskType2["CLUSTERING"] = "CLUSTERING";
    })(TaskType || (TaskType = {}));
    GoogleGenerativeAIError = class extends Error {
      constructor(message) {
        super(`[GoogleGenerativeAI Error]: ${message}`);
      }
    };
    GoogleGenerativeAIResponseError = class extends GoogleGenerativeAIError {
      constructor(message, response) {
        super(message);
        this.response = response;
      }
    };
    BASE_URL = "https://generativelanguage.googleapis.com";
    API_VERSION = "v1";
    PACKAGE_VERSION = "0.1.3";
    PACKAGE_LOG_HEADER = "genai-js";
    (function(Task2) {
      Task2["GENERATE_CONTENT"] = "generateContent";
      Task2["STREAM_GENERATE_CONTENT"] = "streamGenerateContent";
      Task2["COUNT_TOKENS"] = "countTokens";
      Task2["EMBED_CONTENT"] = "embedContent";
      Task2["BATCH_EMBED_CONTENTS"] = "batchEmbedContents";
    })(Task || (Task = {}));
    RequestUrl = class {
      constructor(model, task, apiKey, stream) {
        this.model = model;
        this.task = task;
        this.apiKey = apiKey;
        this.stream = stream;
      }
      toString() {
        let url = `${BASE_URL}/${API_VERSION}/models/${this.model}:${this.task}`;
        if (this.stream) {
          url += "?alt=sse";
        }
        return url;
      }
    };
    badFinishReasons = [FinishReason.RECITATION, FinishReason.SAFETY];
    responseLineRE = /^data\: (.*)(?:\n\n|\r\r|\r\n\r\n)/;
    SILENT_ERROR = "SILENT_ERROR";
    ChatSession = class {
      constructor(apiKey, model, params) {
        this.model = model;
        this.params = params;
        this._history = [];
        this._sendPromise = Promise.resolve();
        this._apiKey = apiKey;
        if (params === null || params === void 0 ? void 0 : params.history) {
          this._history = params.history.map((content) => {
            if (!content.role) {
              throw new Error("Missing role for history item: " + JSON.stringify(content));
            }
            return formatNewContent(content.parts, content.role);
          });
        }
      }
      /**
       * Gets the chat history so far. Blocked prompts are not added to history.
       * Blocked candidates are not added to history, nor are the prompts that
       * generated them.
       */
      async getHistory() {
        await this._sendPromise;
        return this._history;
      }
      /**
       * Sends a chat message and receives a non-streaming
       * {@link GenerateContentResult}
       */
      async sendMessage(request2) {
        var _a3, _b;
        await this._sendPromise;
        const newContent = formatNewContent(request2, "user");
        const generateContentRequest = {
          safetySettings: (_a3 = this.params) === null || _a3 === void 0 ? void 0 : _a3.safetySettings,
          generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
          contents: [...this._history, newContent]
        };
        let finalResult;
        this._sendPromise = this._sendPromise.then(() => generateContent(this._apiKey, this.model, generateContentRequest)).then((result) => {
          var _a4;
          if (result.response.candidates && result.response.candidates.length > 0) {
            this._history.push(newContent);
            const responseContent = Object.assign({
              parts: [],
              // Response seems to come back without a role set.
              role: "model"
            }, (_a4 = result.response.candidates) === null || _a4 === void 0 ? void 0 : _a4[0].content);
            this._history.push(responseContent);
          } else {
            const blockErrorMessage = formatBlockErrorMessage(result.response);
            if (blockErrorMessage) {
              console.warn(`sendMessage() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
            }
          }
          finalResult = result;
        });
        await this._sendPromise;
        return finalResult;
      }
      /**
       * Sends a chat message and receives the response as a
       * {@link GenerateContentStreamResult} containing an iterable stream
       * and a response promise.
       */
      async sendMessageStream(request2) {
        var _a3, _b;
        await this._sendPromise;
        const newContent = formatNewContent(request2, "user");
        const generateContentRequest = {
          safetySettings: (_a3 = this.params) === null || _a3 === void 0 ? void 0 : _a3.safetySettings,
          generationConfig: (_b = this.params) === null || _b === void 0 ? void 0 : _b.generationConfig,
          contents: [...this._history, newContent]
        };
        const streamPromise = generateContentStream(this._apiKey, this.model, generateContentRequest);
        this._sendPromise = this._sendPromise.then(() => streamPromise).catch((_ignored) => {
          throw new Error(SILENT_ERROR);
        }).then((streamResult) => streamResult.response).then((response) => {
          if (response.candidates && response.candidates.length > 0) {
            this._history.push(newContent);
            const responseContent = Object.assign({}, response.candidates[0].content);
            if (!responseContent.role) {
              responseContent.role = "model";
            }
            this._history.push(responseContent);
          } else {
            const blockErrorMessage = formatBlockErrorMessage(response);
            if (blockErrorMessage) {
              console.warn(`sendMessageStream() was unsuccessful. ${blockErrorMessage}. Inspect response object for details.`);
            }
          }
        }).catch((e6) => {
          if (e6.message !== SILENT_ERROR) {
            console.error(e6);
          }
        });
        return streamPromise;
      }
    };
    GenerativeModel = class {
      constructor(apiKey, modelParams) {
        var _a3;
        this.apiKey = apiKey;
        if (modelParams.model.startsWith("models/")) {
          this.model = (_a3 = modelParams.model.split("models/")) === null || _a3 === void 0 ? void 0 : _a3[1];
        } else {
          this.model = modelParams.model;
        }
        this.generationConfig = modelParams.generationConfig || {};
        this.safetySettings = modelParams.safetySettings || [];
      }
      /**
       * Makes a single non-streaming call to the model
       * and returns an object containing a single {@link GenerateContentResponse}.
       */
      async generateContent(request2) {
        const formattedParams = formatGenerateContentInput(request2);
        return generateContent(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, formattedParams));
      }
      /**
       * Makes a single streaming call to the model
       * and returns an object containing an iterable stream that iterates
       * over all chunks in the streaming response as well as
       * a promise that returns the final aggregated response.
       */
      async generateContentStream(request2) {
        const formattedParams = formatGenerateContentInput(request2);
        return generateContentStream(this.apiKey, this.model, Object.assign({ generationConfig: this.generationConfig, safetySettings: this.safetySettings }, formattedParams));
      }
      /**
       * Gets a new {@link ChatSession} instance which can be used for
       * multi-turn chats.
       */
      startChat(startChatParams) {
        return new ChatSession(this.apiKey, this.model, startChatParams);
      }
      /**
       * Counts the tokens in the provided request.
       */
      async countTokens(request2) {
        const formattedParams = formatGenerateContentInput(request2);
        return countTokens(this.apiKey, this.model, formattedParams);
      }
      /**
       * Embeds the provided content.
       */
      async embedContent(request2) {
        const formattedParams = formatEmbedContentInput(request2);
        return embedContent(this.apiKey, this.model, formattedParams);
      }
      /**
       * Embeds an array of {@link EmbedContentRequest}s.
       */
      async batchEmbedContents(batchEmbedContentRequest) {
        return batchEmbedContents(this.apiKey, this.model, batchEmbedContentRequest);
      }
    };
    GoogleGenerativeAI = class {
      constructor(apiKey) {
        this.apiKey = apiKey;
      }
      /**
       * Gets a {@link GenerativeModel} instance for the provided model name.
       */
      getGenerativeModel(modelParams) {
        if (!modelParams.model) {
          throw new GoogleGenerativeAIError(`Must provide a model name. Example: genai.getGenerativeModel({ model: 'my-model-name' })`);
        }
        return new GenerativeModel(this.apiKey, modelParams);
      }
    };
  }
});

// ../../node_modules/.pnpm/whatwg-fetch@3.6.20/node_modules/whatwg-fetch/fetch.js
function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj);
}
function normalizeName(name) {
  if (typeof name !== "string") {
    name = String(name);
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
    throw new TypeError('Invalid character in header field name: "' + name + '"');
  }
  return name.toLowerCase();
}
function normalizeValue(value) {
  if (typeof value !== "string") {
    value = String(value);
  }
  return value;
}
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift();
      return { done: value === void 0, value };
    }
  };
  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator;
    };
  }
  return iterator;
}
function Headers3(headers) {
  this.map = {};
  if (headers instanceof Headers3) {
    headers.forEach(function(value, name) {
      this.append(name, value);
    }, this);
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      if (header.length != 2) {
        throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
      }
      this.append(header[0], header[1]);
    }, this);
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name]);
    }, this);
  }
}
function consumed(body) {
  if (body._noBody)
    return;
  if (body.bodyUsed) {
    return Promise.reject(new TypeError("Already read"));
  }
  body.bodyUsed = true;
}
function fileReaderReady(reader) {
  return new Promise(function(resolve2, reject) {
    reader.onload = function() {
      resolve2(reader.result);
    };
    reader.onerror = function() {
      reject(reader.error);
    };
  });
}
function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsArrayBuffer(blob);
  return promise;
}
function readBlobAsText(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
  var encoding = match ? match[1] : "utf-8";
  reader.readAsText(blob, encoding);
  return promise;
}
function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf);
  var chars = new Array(view.length);
  for (var i6 = 0; i6 < view.length; i6++) {
    chars[i6] = String.fromCharCode(view[i6]);
  }
  return chars.join("");
}
function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0);
  } else {
    var view = new Uint8Array(buf.byteLength);
    view.set(new Uint8Array(buf));
    return view.buffer;
  }
}
function Body2() {
  this.bodyUsed = false;
  this._initBody = function(body) {
    this.bodyUsed = this.bodyUsed;
    this._bodyInit = body;
    if (!body) {
      this._noBody = true;
      this._bodyText = "";
    } else if (typeof body === "string") {
      this._bodyText = body;
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body;
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body;
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString();
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer);
      this._bodyInit = new Blob([this._bodyArrayBuffer]);
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body);
    } else {
      this._bodyText = body = Object.prototype.toString.call(body);
    }
    if (!this.headers.get("content-type")) {
      if (typeof body === "string") {
        this.headers.set("content-type", "text/plain;charset=UTF-8");
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set("content-type", this._bodyBlob.type);
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
      }
    }
  };
  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }
      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]));
      } else if (this._bodyFormData) {
        throw new Error("could not read FormData body as blob");
      } else {
        return Promise.resolve(new Blob([this._bodyText]));
      }
    };
  }
  this.arrayBuffer = function() {
    if (this._bodyArrayBuffer) {
      var isConsumed = consumed(this);
      if (isConsumed) {
        return isConsumed;
      } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
        return Promise.resolve(
          this._bodyArrayBuffer.buffer.slice(
            this._bodyArrayBuffer.byteOffset,
            this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
          )
        );
      } else {
        return Promise.resolve(this._bodyArrayBuffer);
      }
    } else if (support.blob) {
      return this.blob().then(readBlobAsArrayBuffer);
    } else {
      throw new Error("could not read as ArrayBuffer");
    }
  };
  this.text = function() {
    var rejected = consumed(this);
    if (rejected) {
      return rejected;
    }
    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob);
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
    } else if (this._bodyFormData) {
      throw new Error("could not read FormData body as text");
    } else {
      return Promise.resolve(this._bodyText);
    }
  };
  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode2);
    };
  }
  this.json = function() {
    return this.text().then(JSON.parse);
  };
  return this;
}
function normalizeMethod(method) {
  var upcased = method.toUpperCase();
  return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request3(input, options) {
  if (!(this instanceof Request3)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
  }
  options = options || {};
  var body = options.body;
  if (input instanceof Request3) {
    if (input.bodyUsed) {
      throw new TypeError("Already read");
    }
    this.url = input.url;
    this.credentials = input.credentials;
    if (!options.headers) {
      this.headers = new Headers3(input.headers);
    }
    this.method = input.method;
    this.mode = input.mode;
    this.signal = input.signal;
    if (!body && input._bodyInit != null) {
      body = input._bodyInit;
      input.bodyUsed = true;
    }
  } else {
    this.url = String(input);
  }
  this.credentials = options.credentials || this.credentials || "same-origin";
  if (options.headers || !this.headers) {
    this.headers = new Headers3(options.headers);
  }
  this.method = normalizeMethod(options.method || this.method || "GET");
  this.mode = options.mode || this.mode || null;
  this.signal = options.signal || this.signal || function() {
    if ("AbortController" in g5) {
      var ctrl = new AbortController();
      return ctrl.signal;
    }
  }();
  this.referrer = null;
  if ((this.method === "GET" || this.method === "HEAD") && body) {
    throw new TypeError("Body not allowed for GET or HEAD requests");
  }
  this._initBody(body);
  if (this.method === "GET" || this.method === "HEAD") {
    if (options.cache === "no-store" || options.cache === "no-cache") {
      var reParamSearch = /([?&])_=[^&]*/;
      if (reParamSearch.test(this.url)) {
        this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
      } else {
        var reQueryString = /\?/;
        this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
      }
    }
  }
}
function decode2(body) {
  var form = new FormData();
  body.trim().split("&").forEach(function(bytes) {
    if (bytes) {
      var split = bytes.split("=");
      var name = split.shift().replace(/\+/g, " ");
      var value = split.join("=").replace(/\+/g, " ");
      form.append(decodeURIComponent(name), decodeURIComponent(value));
    }
  });
  return form;
}
function parseHeaders(rawHeaders) {
  var headers = new Headers3();
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
  preProcessedHeaders.split("\r").map(function(header) {
    return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
  }).forEach(function(line) {
    var parts = line.split(":");
    var key = parts.shift().trim();
    if (key) {
      var value = parts.join(":").trim();
      try {
        headers.append(key, value);
      } catch (error2) {
        console.warn("Response " + error2.message);
      }
    }
  });
  return headers;
}
function Response2(bodyInit, options) {
  if (!(this instanceof Response2)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
  }
  if (!options) {
    options = {};
  }
  this.type = "default";
  this.status = options.status === void 0 ? 200 : options.status;
  if (this.status < 200 || this.status > 599) {
    throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
  }
  this.ok = this.status >= 200 && this.status < 300;
  this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
  this.headers = new Headers3(options.headers);
  this.url = options.url || "";
  this._initBody(bodyInit);
}
function fetch3(input, init) {
  return new Promise(function(resolve2, reject) {
    var request2 = new Request3(input, init);
    if (request2.signal && request2.signal.aborted) {
      return reject(new DOMException2("Aborted", "AbortError"));
    }
    var xhr = new XMLHttpRequest();
    function abortXhr() {
      xhr.abort();
    }
    xhr.onload = function() {
      var options = {
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || "")
      };
      if (request2.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
        options.status = 200;
      } else {
        options.status = xhr.status;
      }
      options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
      var body = "response" in xhr ? xhr.response : xhr.responseText;
      setTimeout(function() {
        resolve2(new Response2(body, options));
      }, 0);
    };
    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError("Network request failed"));
      }, 0);
    };
    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError("Network request timed out"));
      }, 0);
    };
    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException2("Aborted", "AbortError"));
      }, 0);
    };
    function fixUrl(url) {
      try {
        return url === "" && g5.location.href ? g5.location.href : url;
      } catch (e6) {
        return url;
      }
    }
    xhr.open(request2.method, fixUrl(request2.url), true);
    if (request2.credentials === "include") {
      xhr.withCredentials = true;
    } else if (request2.credentials === "omit") {
      xhr.withCredentials = false;
    }
    if ("responseType" in xhr) {
      if (support.blob) {
        xhr.responseType = "blob";
      } else if (support.arrayBuffer) {
        xhr.responseType = "arraybuffer";
      }
    }
    if (init && typeof init.headers === "object" && !(init.headers instanceof Headers3 || g5.Headers && init.headers instanceof g5.Headers)) {
      var names = [];
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        names.push(normalizeName(name));
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
      });
      request2.headers.forEach(function(value, name) {
        if (names.indexOf(name) === -1) {
          xhr.setRequestHeader(name, value);
        }
      });
    } else {
      request2.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });
    }
    if (request2.signal) {
      request2.signal.addEventListener("abort", abortXhr);
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          request2.signal.removeEventListener("abort", abortXhr);
        }
      };
    }
    xhr.send(typeof request2._bodyInit === "undefined" ? null : request2._bodyInit);
  });
}
var g5, support, viewClasses, isArrayBufferView, methods, redirectStatuses, DOMException2;
var init_fetch = __esm({
  "../../node_modules/.pnpm/whatwg-fetch@3.6.20/node_modules/whatwg-fetch/fetch.js"() {
    "use strict";
    g5 = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
    typeof global !== "undefined" && global || {};
    support = {
      searchParams: "URLSearchParams" in g5,
      iterable: "Symbol" in g5 && "iterator" in Symbol,
      blob: "FileReader" in g5 && "Blob" in g5 && function() {
        try {
          new Blob();
          return true;
        } catch (e6) {
          return false;
        }
      }(),
      formData: "FormData" in g5,
      arrayBuffer: "ArrayBuffer" in g5
    };
    if (support.arrayBuffer) {
      viewClasses = [
        "[object Int8Array]",
        "[object Uint8Array]",
        "[object Uint8ClampedArray]",
        "[object Int16Array]",
        "[object Uint16Array]",
        "[object Int32Array]",
        "[object Uint32Array]",
        "[object Float32Array]",
        "[object Float64Array]"
      ];
      isArrayBufferView = ArrayBuffer.isView || function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }
    Headers3.prototype.append = function(name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ", " + value : value;
    };
    Headers3.prototype["delete"] = function(name) {
      delete this.map[normalizeName(name)];
    };
    Headers3.prototype.get = function(name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };
    Headers3.prototype.has = function(name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };
    Headers3.prototype.set = function(name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };
    Headers3.prototype.forEach = function(callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };
    Headers3.prototype.keys = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };
    Headers3.prototype.values = function() {
      var items = [];
      this.forEach(function(value) {
        items.push(value);
      });
      return iteratorFor(items);
    };
    Headers3.prototype.entries = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };
    if (support.iterable) {
      Headers3.prototype[Symbol.iterator] = Headers3.prototype.entries;
    }
    methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
    Request3.prototype.clone = function() {
      return new Request3(this, { body: this._bodyInit });
    };
    Body2.call(Request3.prototype);
    Body2.call(Response2.prototype);
    Response2.prototype.clone = function() {
      return new Response2(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers3(this.headers),
        url: this.url
      });
    };
    Response2.error = function() {
      var response = new Response2(null, { status: 200, statusText: "" });
      response.ok = false;
      response.status = 0;
      response.type = "error";
      return response;
    };
    redirectStatuses = [301, 302, 303, 307, 308];
    Response2.redirect = function(url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError("Invalid status code");
      }
      return new Response2(null, { status, headers: { location: url } });
    };
    DOMException2 = g5.DOMException;
    try {
      new DOMException2();
    } catch (err) {
      DOMException2 = function(message, name) {
        this.message = message;
        this.name = name;
        var error2 = Error(message);
        this.stack = error2.stack;
      };
      DOMException2.prototype = Object.create(Error.prototype);
      DOMException2.prototype.constructor = DOMException2;
    }
    fetch3.polyfill = true;
    if (!g5.fetch) {
      g5.fetch = fetch3;
      g5.Headers = Headers3;
      g5.Request = Request3;
      g5.Response = Response2;
    }
  }
});

// ../../node_modules/.pnpm/ollama@0.5.12/node_modules/ollama/dist/browser.mjs
function getPlatform() {
  if (typeof window !== "undefined" && window.navigator) {
    return `${window.navigator.platform.toLowerCase()} Browser/${navigator.userAgent};`;
  } else if (typeof process !== "undefined") {
    return `${process.arch} ${process.platform} Node.js/${process.version}`;
  }
  return "";
}
var version, __defProp$1, __defNormalProp$1, __publicField$1, ResponseError, AbortableAsyncIterator, checkOk, fetchWithHeaders, get2, post, del, parseJSON, formatHost, __defProp2, __defNormalProp, __publicField, Ollama$1, browser;
var init_browser = __esm({
  "../../node_modules/.pnpm/ollama@0.5.12/node_modules/ollama/dist/browser.mjs"() {
    "use strict";
    init_fetch();
    version = "0.5.12";
    __defProp$1 = Object.defineProperty;
    __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    __publicField$1 = (obj, key, value) => {
      __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    ResponseError = class _ResponseError extends Error {
      constructor(error2, status_code) {
        super(error2);
        this.error = error2;
        this.status_code = status_code;
        this.name = "ResponseError";
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, _ResponseError);
        }
      }
    };
    AbortableAsyncIterator = class {
      constructor(abortController, itr, doneCallback) {
        __publicField$1(this, "abortController");
        __publicField$1(this, "itr");
        __publicField$1(this, "doneCallback");
        this.abortController = abortController;
        this.itr = itr;
        this.doneCallback = doneCallback;
      }
      abort() {
        this.abortController.abort();
      }
      async *[Symbol.asyncIterator]() {
        for await (const message of this.itr) {
          if ("error" in message) {
            throw new Error(message.error);
          }
          yield message;
          if (message.done || message.status === "success") {
            this.doneCallback();
            return;
          }
        }
        throw new Error("Did not receive done or success response in stream.");
      }
    };
    checkOk = async (response) => {
      if (response.ok) {
        return;
      }
      let message = `Error ${response.status}: ${response.statusText}`;
      let errorData = null;
      if (response.headers.get("content-type")?.includes("application/json")) {
        try {
          errorData = await response.json();
          message = errorData.error || message;
        } catch (error2) {
          console.log("Failed to parse error response as JSON");
        }
      } else {
        try {
          console.log("Getting text from response");
          const textResponse = await response.text();
          message = textResponse || message;
        } catch (error2) {
          console.log("Failed to get text from error response");
        }
      }
      throw new ResponseError(message, response.status);
    };
    fetchWithHeaders = async (fetch5, url, options = {}) => {
      const defaultHeaders = {
        "Content-Type": "application/json",
        Accept: "application/json",
        "User-Agent": `ollama-js/${version} (${getPlatform()})`
      };
      if (!options.headers) {
        options.headers = {};
      }
      const customHeaders = Object.fromEntries(
        Object.entries(options.headers).filter(([key]) => !Object.keys(defaultHeaders).some((defaultKey) => defaultKey.toLowerCase() === key.toLowerCase()))
      );
      options.headers = {
        ...defaultHeaders,
        ...customHeaders
      };
      return fetch5(url, options);
    };
    get2 = async (fetch5, host, options) => {
      const response = await fetchWithHeaders(fetch5, host, {
        headers: options?.headers
      });
      await checkOk(response);
      return response;
    };
    post = async (fetch5, host, data, options) => {
      const isRecord = (input) => {
        return input !== null && typeof input === "object" && !Array.isArray(input);
      };
      const formattedData = isRecord(data) ? JSON.stringify(data) : data;
      const response = await fetchWithHeaders(fetch5, host, {
        method: "POST",
        body: formattedData,
        signal: options?.signal,
        headers: options?.headers
      });
      await checkOk(response);
      return response;
    };
    del = async (fetch5, host, data, options) => {
      const response = await fetchWithHeaders(fetch5, host, {
        method: "DELETE",
        body: JSON.stringify(data),
        headers: options?.headers
      });
      await checkOk(response);
      return response;
    };
    parseJSON = async function* (itr) {
      const decoder = new TextDecoder("utf-8");
      let buffer = "";
      const reader = itr.getReader();
      while (true) {
        const { done, value: chunk } = await reader.read();
        if (done) {
          break;
        }
        buffer += decoder.decode(chunk);
        const parts = buffer.split("\n");
        buffer = parts.pop() ?? "";
        for (const part of parts) {
          try {
            yield JSON.parse(part);
          } catch (error2) {
            console.warn("invalid json: ", part);
          }
        }
      }
      for (const part of buffer.split("\n").filter((p6) => p6 !== "")) {
        try {
          yield JSON.parse(part);
        } catch (error2) {
          console.warn("invalid json: ", part);
        }
      }
    };
    formatHost = (host) => {
      if (!host) {
        return "http://127.0.0.1:11434";
      }
      let isExplicitProtocol = host.includes("://");
      if (host.startsWith(":")) {
        host = `http://127.0.0.1${host}`;
        isExplicitProtocol = true;
      }
      if (!isExplicitProtocol) {
        host = `http://${host}`;
      }
      const url = new URL(host);
      let port = url.port;
      if (!port) {
        if (!isExplicitProtocol) {
          port = "11434";
        } else {
          port = url.protocol === "https:" ? "443" : "80";
        }
      }
      let formattedHost = `${url.protocol}//${url.hostname}:${port}${url.pathname}`;
      if (formattedHost.endsWith("/")) {
        formattedHost = formattedHost.slice(0, -1);
      }
      return formattedHost;
    };
    __defProp2 = Object.defineProperty;
    __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    Ollama$1 = class Ollama {
      constructor(config) {
        __publicField(this, "config");
        __publicField(this, "fetch");
        __publicField(this, "ongoingStreamedRequests", []);
        this.config = {
          host: "",
          headers: config?.headers
        };
        if (!config?.proxy) {
          this.config.host = formatHost(config?.host ?? "http://127.0.0.1:11434");
        }
        this.fetch = config?.fetch ?? fetch;
      }
      // Abort any ongoing streamed requests to Ollama
      abort() {
        for (const request2 of this.ongoingStreamedRequests) {
          request2.abort();
        }
        this.ongoingStreamedRequests.length = 0;
      }
      /**
       * Processes a request to the Ollama server. If the request is streamable, it will return a
       * AbortableAsyncIterator that yields the response messages. Otherwise, it will return the response
       * object.
       * @param endpoint {string} - The endpoint to send the request to.
       * @param request {object} - The request object to send to the endpoint.
       * @protected {T | AbortableAsyncIterator<T>} - The response object or a AbortableAsyncIterator that yields
       * response messages.
       * @throws {Error} - If the response body is missing or if the response is an error.
       * @returns {Promise<T | AbortableAsyncIterator<T>>} - The response object or a AbortableAsyncIterator that yields the streamed response.
       */
      async processStreamableRequest(endpoint, request2) {
        request2.stream = request2.stream ?? false;
        const host = `${this.config.host}/api/${endpoint}`;
        if (request2.stream) {
          const abortController = new AbortController();
          const response2 = await post(this.fetch, host, request2, {
            signal: abortController.signal,
            headers: this.config.headers
          });
          if (!response2.body) {
            throw new Error("Missing body");
          }
          const itr = parseJSON(response2.body);
          const abortableAsyncIterator = new AbortableAsyncIterator(
            abortController,
            itr,
            () => {
              const i6 = this.ongoingStreamedRequests.indexOf(abortableAsyncIterator);
              if (i6 > -1) {
                this.ongoingStreamedRequests.splice(i6, 1);
              }
            }
          );
          this.ongoingStreamedRequests.push(abortableAsyncIterator);
          return abortableAsyncIterator;
        }
        const response = await post(this.fetch, host, request2, {
          headers: this.config.headers
        });
        return await response.json();
      }
      /**
       * Encodes an image to base64 if it is a Uint8Array.
       * @param image {Uint8Array | string} - The image to encode.
       * @returns {Promise<string>} - The base64 encoded image.
       */
      async encodeImage(image) {
        if (typeof image !== "string") {
          const uint8Array = new Uint8Array(image);
          let byteString = "";
          const len = uint8Array.byteLength;
          for (let i6 = 0; i6 < len; i6++) {
            byteString += String.fromCharCode(uint8Array[i6]);
          }
          return btoa(byteString);
        }
        return image;
      }
      /**
       * Generates a response from a text prompt.
       * @param request {GenerateRequest} - The request object.
       * @returns {Promise<GenerateResponse | AbortableAsyncIterator<GenerateResponse>>} - The response object or
       * an AbortableAsyncIterator that yields response messages.
       */
      async generate(request2) {
        if (request2.images) {
          request2.images = await Promise.all(request2.images.map(this.encodeImage.bind(this)));
        }
        return this.processStreamableRequest("generate", request2);
      }
      /**
       * Chats with the model. The request object can contain messages with images that are either
       * Uint8Arrays or base64 encoded strings. The images will be base64 encoded before sending the
       * request.
       * @param request {ChatRequest} - The request object.
       * @returns {Promise<ChatResponse | AbortableAsyncIterator<ChatResponse>>} - The response object or an
       * AbortableAsyncIterator that yields response messages.
       */
      async chat(request2) {
        if (request2.messages) {
          for (const message of request2.messages) {
            if (message.images) {
              message.images = await Promise.all(
                message.images.map(this.encodeImage.bind(this))
              );
            }
          }
        }
        return this.processStreamableRequest("chat", request2);
      }
      /**
       * Creates a new model from a stream of data.
       * @param request {CreateRequest} - The request object.
       * @returns {Promise<ProgressResponse | AbortableAsyncIterator<ProgressResponse>>} - The response object or a stream of progress responses.
       */
      async create(request2) {
        return this.processStreamableRequest("create", {
          ...request2
        });
      }
      /**
       * Pulls a model from the Ollama registry. The request object can contain a stream flag to indicate if the
       * response should be streamed.
       * @param request {PullRequest} - The request object.
       * @returns {Promise<ProgressResponse | AbortableAsyncIterator<ProgressResponse>>} - The response object or
       * an AbortableAsyncIterator that yields response messages.
       */
      async pull(request2) {
        return this.processStreamableRequest("pull", {
          name: request2.model,
          stream: request2.stream,
          insecure: request2.insecure
        });
      }
      /**
       * Pushes a model to the Ollama registry. The request object can contain a stream flag to indicate if the
       * response should be streamed.
       * @param request {PushRequest} - The request object.
       * @returns {Promise<ProgressResponse | AbortableAsyncIterator<ProgressResponse>>} - The response object or
       * an AbortableAsyncIterator that yields response messages.
       */
      async push(request2) {
        return this.processStreamableRequest("push", {
          name: request2.model,
          stream: request2.stream,
          insecure: request2.insecure
        });
      }
      /**
       * Deletes a model from the server. The request object should contain the name of the model to
       * delete.
       * @param request {DeleteRequest} - The request object.
       * @returns {Promise<StatusResponse>} - The response object.
       */
      async delete(request2) {
        await del(
          this.fetch,
          `${this.config.host}/api/delete`,
          { name: request2.model },
          { headers: this.config.headers }
        );
        return { status: "success" };
      }
      /**
       * Copies a model from one name to another. The request object should contain the name of the
       * model to copy and the new name.
       * @param request {CopyRequest} - The request object.
       * @returns {Promise<StatusResponse>} - The response object.
       */
      async copy(request2) {
        await post(this.fetch, `${this.config.host}/api/copy`, { ...request2 }, {
          headers: this.config.headers
        });
        return { status: "success" };
      }
      /**
       * Lists the models on the server.
       * @returns {Promise<ListResponse>} - The response object.
       * @throws {Error} - If the response body is missing.
       */
      async list() {
        const response = await get2(this.fetch, `${this.config.host}/api/tags`, {
          headers: this.config.headers
        });
        return await response.json();
      }
      /**
       * Shows the metadata of a model. The request object should contain the name of the model.
       * @param request {ShowRequest} - The request object.
       * @returns {Promise<ShowResponse>} - The response object.
       */
      async show(request2) {
        const response = await post(this.fetch, `${this.config.host}/api/show`, {
          ...request2
        }, {
          headers: this.config.headers
        });
        return await response.json();
      }
      /**
       * Embeds text input into vectors.
       * @param request {EmbedRequest} - The request object.
       * @returns {Promise<EmbedResponse>} - The response object.
       */
      async embed(request2) {
        const response = await post(this.fetch, `${this.config.host}/api/embed`, {
          ...request2
        }, {
          headers: this.config.headers
        });
        return await response.json();
      }
      /**
       * Embeds a text prompt into a vector.
       * @param request {EmbeddingsRequest} - The request object.
       * @returns {Promise<EmbeddingsResponse>} - The response object.
       */
      async embeddings(request2) {
        const response = await post(this.fetch, `${this.config.host}/api/embeddings`, {
          ...request2
        }, {
          headers: this.config.headers
        });
        return await response.json();
      }
      /**
       * Lists the running models on the server
       * @returns {Promise<ListResponse>} - The response object.
       * @throws {Error} - If the response body is missing.
       */
      async ps() {
        const response = await get2(this.fetch, `${this.config.host}/api/ps`, {
          headers: this.config.headers
        });
        return await response.json();
      }
    };
    browser = new Ollama$1();
  }
});

// ../../node_modules/.pnpm/ollama@0.5.12/node_modules/ollama/dist/index.mjs
var dist_exports2 = {};
__export(dist_exports2, {
  Ollama: () => Ollama2,
  default: () => index
});
var import_fs6, import_path5, Ollama2, index;
var init_dist2 = __esm({
  "../../node_modules/.pnpm/ollama@0.5.12/node_modules/ollama/dist/index.mjs"() {
    "use strict";
    import_fs6 = __toESM(require("fs"), 1);
    import_path5 = require("path");
    init_browser();
    init_fetch();
    Ollama2 = class extends Ollama$1 {
      async encodeImage(image) {
        if (typeof image !== "string") {
          return Buffer.from(image).toString("base64");
        }
        try {
          if (import_fs6.default.existsSync(image)) {
            const fileBuffer = await import_fs6.promises.readFile((0, import_path5.resolve)(image));
            return Buffer.from(fileBuffer).toString("base64");
          }
        } catch {
        }
        return image;
      }
      /**
       * checks if a file exists
       * @param path {string} - The path to the file
       * @private @internal
       * @returns {Promise<boolean>} - Whether the file exists or not
       */
      async fileExists(path) {
        try {
          await import_fs6.promises.access(path);
          return true;
        } catch {
          return false;
        }
      }
      async create(request2) {
        if (request2.from && await this.fileExists((0, import_path5.resolve)(request2.from))) {
          throw Error("Creating with a local path is not currently supported from ollama-js");
        }
        if (request2.stream) {
          return super.create(request2);
        } else {
          return super.create(request2);
        }
      }
    };
    index = new Ollama2();
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/version.mjs
var version_exports = {};
__export(version_exports, {
  VERSION: () => VERSION
});
var VERSION;
var init_version = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/version.mjs"() {
    "use strict";
    VERSION = "4.51.0";
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/_shims/registry.mjs
function setShims(shims, options = { auto: false }) {
  if (auto) {
    throw new Error(`you must \`import 'openai/shims/${shims.kind}'\` before importing anything else from openai`);
  }
  if (kind) {
    throw new Error(`can't \`import 'openai/shims/${shims.kind}'\` after \`import 'openai/shims/${kind}'\``);
  }
  auto = options.auto;
  kind = shims.kind;
  fetch4 = shims.fetch;
  Request4 = shims.Request;
  Response3 = shims.Response;
  Headers4 = shims.Headers;
  FormData2 = shims.FormData;
  Blob3 = shims.Blob;
  File = shims.File;
  ReadableStream2 = shims.ReadableStream;
  getMultipartRequestOptions = shims.getMultipartRequestOptions;
  getDefaultAgent = shims.getDefaultAgent;
  fileFromPath = shims.fileFromPath;
  isFsReadStream = shims.isFsReadStream;
}
var auto, kind, fetch4, Request4, Response3, Headers4, FormData2, Blob3, File, ReadableStream2, getMultipartRequestOptions, getDefaultAgent, fileFromPath, isFsReadStream;
var init_registry = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/_shims/registry.mjs"() {
    "use strict";
    auto = false;
    kind = void 0;
    fetch4 = void 0;
    Request4 = void 0;
    Response3 = void 0;
    Headers4 = void 0;
    FormData2 = void 0;
    Blob3 = void 0;
    File = void 0;
    ReadableStream2 = void 0;
    getMultipartRequestOptions = void 0;
    getDefaultAgent = void 0;
    fileFromPath = void 0;
    isFsReadStream = void 0;
  }
});

// ../../node_modules/.pnpm/web-streams-polyfill@4.0.0-beta.3/node_modules/web-streams-polyfill/dist/ponyfill.mjs
function t5() {
}
function r5(e6) {
  return "object" == typeof e6 && null !== e6 || "function" == typeof e6;
}
function n5(e6, t6) {
  try {
    Object.defineProperty(e6, "name", { value: t6, configurable: true });
  } catch (e7) {
  }
}
function u5(e6) {
  return new a5(e6);
}
function c5(e6) {
  return l5(e6);
}
function d5(e6) {
  return s5(e6);
}
function f5(e6, t6, r6) {
  return i5.call(e6, t6, r6);
}
function b5(e6, t6, r6) {
  f5(f5(e6, t6, r6), void 0, o5);
}
function h5(e6, t6) {
  b5(e6, t6);
}
function _2(e6, t6) {
  b5(e6, void 0, t6);
}
function p5(e6, t6, r6) {
  return f5(e6, t6, r6);
}
function m5(e6) {
  f5(e6, void 0, o5);
}
function g6(e6, t6, r6) {
  if ("function" != typeof e6)
    throw new TypeError("Argument is not a function");
  return Function.prototype.apply.call(e6, t6, r6);
}
function w4(e6, t6, r6) {
  try {
    return c5(g6(e6, t6, r6));
  } catch (e7) {
    return d5(e7);
  }
}
function E2(e6, t6) {
  e6._ownerReadableStream = t6, t6._reader = e6, "readable" === t6._state ? O(e6) : "closed" === t6._state ? function(e7) {
    O(e7), j5(e7);
  }(e6) : B2(e6, t6._storedError);
}
function P(e6, t6) {
  return Gt(e6._ownerReadableStream, t6);
}
function W(e6) {
  const t6 = e6._ownerReadableStream;
  "readable" === t6._state ? A2(e6, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")) : function(e7, t7) {
    B2(e7, t7);
  }(e6, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")), t6._readableStreamController[C2](), t6._reader = void 0, e6._ownerReadableStream = void 0;
}
function k5(e6) {
  return new TypeError("Cannot " + e6 + " a stream using a released reader");
}
function O(e6) {
  e6._closedPromise = u5((t6, r6) => {
    e6._closedPromise_resolve = t6, e6._closedPromise_reject = r6;
  });
}
function B2(e6, t6) {
  O(e6), A2(e6, t6);
}
function A2(e6, t6) {
  void 0 !== e6._closedPromise_reject && (m5(e6._closedPromise), e6._closedPromise_reject(t6), e6._closedPromise_resolve = void 0, e6._closedPromise_reject = void 0);
}
function j5(e6) {
  void 0 !== e6._closedPromise_resolve && (e6._closedPromise_resolve(void 0), e6._closedPromise_resolve = void 0, e6._closedPromise_reject = void 0);
}
function F2(e6, t6) {
  if (void 0 !== e6 && ("object" != typeof (r6 = e6) && "function" != typeof r6))
    throw new TypeError(`${t6} is not an object.`);
  var r6;
}
function I2(e6, t6) {
  if ("function" != typeof e6)
    throw new TypeError(`${t6} is not a function.`);
}
function D2(e6, t6) {
  if (!/* @__PURE__ */ function(e7) {
    return "object" == typeof e7 && null !== e7 || "function" == typeof e7;
  }(e6))
    throw new TypeError(`${t6} is not an object.`);
}
function $(e6, t6, r6) {
  if (void 0 === e6)
    throw new TypeError(`Parameter ${t6} is required in '${r6}'.`);
}
function M(e6, t6, r6) {
  if (void 0 === e6)
    throw new TypeError(`${t6} is required in '${r6}'.`);
}
function Y(e6) {
  return Number(e6);
}
function Q(e6) {
  return 0 === e6 ? 0 : e6;
}
function N(e6, t6) {
  const r6 = Number.MAX_SAFE_INTEGER;
  let o6 = Number(e6);
  if (o6 = Q(o6), !z2(o6))
    throw new TypeError(`${t6} is not a finite number`);
  if (o6 = function(e7) {
    return Q(L(e7));
  }(o6), o6 < 0 || o6 > r6)
    throw new TypeError(`${t6} is outside the accepted range of 0 to ${r6}, inclusive`);
  return z2(o6) && 0 !== o6 ? o6 : 0;
}
function H2(e6) {
  if (!r5(e6))
    return false;
  if ("function" != typeof e6.getReader)
    return false;
  try {
    return "boolean" == typeof e6.locked;
  } catch (e7) {
    return false;
  }
}
function x4(e6) {
  if (!r5(e6))
    return false;
  if ("function" != typeof e6.getWriter)
    return false;
  try {
    return "boolean" == typeof e6.locked;
  } catch (e7) {
    return false;
  }
}
function V(e6, t6) {
  if (!Vt(e6))
    throw new TypeError(`${t6} is not a ReadableStream.`);
}
function U(e6, t6) {
  e6._reader._readRequests.push(t6);
}
function G2(e6, t6, r6) {
  const o6 = e6._reader._readRequests.shift();
  r6 ? o6._closeSteps() : o6._chunkSteps(t6);
}
function X(e6) {
  return e6._reader._readRequests.length;
}
function J2(e6) {
  const t6 = e6._reader;
  return void 0 !== t6 && !!K(t6);
}
function K(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_readRequests") && e6 instanceof ReadableStreamDefaultReader);
}
function Z(e6, t6) {
  const r6 = e6._readRequests;
  e6._readRequests = new S(), r6.forEach((e7) => {
    e7._errorSteps(t6);
  });
}
function ee(e6) {
  return new TypeError(`ReadableStreamDefaultReader.prototype.${e6} can only be used on a ReadableStreamDefaultReader`);
}
function oe(e6) {
  if (!r5(e6))
    return false;
  if (!Object.prototype.hasOwnProperty.call(e6, "_asyncIteratorImpl"))
    return false;
  try {
    return e6._asyncIteratorImpl instanceof te;
  } catch (e7) {
    return false;
  }
}
function ne(e6) {
  return new TypeError(`ReadableStreamAsyncIterator.${e6} can only be used on a ReadableSteamAsyncIterator`);
}
function ie(e6, t6, r6, o6, n6) {
  new Uint8Array(e6).set(new Uint8Array(r6, o6, n6), t6);
}
function le(e6) {
  const t6 = function(e7, t7, r6) {
    if (e7.slice)
      return e7.slice(t7, r6);
    const o6 = r6 - t7, n6 = new ArrayBuffer(o6);
    return ie(n6, 0, e7, t7, o6), n6;
  }(e6.buffer, e6.byteOffset, e6.byteOffset + e6.byteLength);
  return new Uint8Array(t6);
}
function se(e6) {
  const t6 = e6._queue.shift();
  return e6._queueTotalSize -= t6.size, e6._queueTotalSize < 0 && (e6._queueTotalSize = 0), t6.value;
}
function ue(e6, t6, r6) {
  if ("number" != typeof (o6 = r6) || ae(o6) || o6 < 0 || r6 === 1 / 0)
    throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
  var o6;
  e6._queue.push({ value: t6, size: r6 }), e6._queueTotalSize += r6;
}
function ce(e6) {
  e6._queue = new S(), e6._queueTotalSize = 0;
}
function de(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_controlledReadableByteStream") && e6 instanceof ReadableByteStreamController);
}
function fe(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_associatedReadableByteStreamController") && e6 instanceof ReadableStreamBYOBRequest);
}
function be(e6) {
  const t6 = function(e7) {
    const t7 = e7._controlledReadableByteStream;
    if ("readable" !== t7._state)
      return false;
    if (e7._closeRequested)
      return false;
    if (!e7._started)
      return false;
    if (J2(t7) && X(t7) > 0)
      return true;
    if (Le(t7) && ze(t7) > 0)
      return true;
    if (ke(e7) > 0)
      return true;
    return false;
  }(e6);
  if (!t6)
    return;
  if (e6._pulling)
    return void (e6._pullAgain = true);
  e6._pulling = true;
  b5(e6._pullAlgorithm(), () => (e6._pulling = false, e6._pullAgain && (e6._pullAgain = false, be(e6)), null), (t7) => (Pe(e6, t7), null));
}
function he(e6) {
  Re(e6), e6._pendingPullIntos = new S();
}
function _e(e6, t6) {
  let r6 = false;
  "closed" === e6._state && (r6 = true);
  const o6 = pe(t6);
  "default" === t6.readerType ? G2(e6, o6, r6) : function(e7, t7, r7) {
    const o7 = e7._reader._readIntoRequests.shift();
    r7 ? o7._closeSteps(t7) : o7._chunkSteps(t7);
  }(e6, o6, r6);
}
function pe(e6) {
  const t6 = e6.bytesFilled, r6 = e6.elementSize;
  return new e6.viewConstructor(e6.buffer, e6.byteOffset, t6 / r6);
}
function me(e6, t6, r6, o6) {
  e6._queue.push({ buffer: t6, byteOffset: r6, byteLength: o6 }), e6._queueTotalSize += o6;
}
function ye(e6, t6, r6, o6) {
  let n6;
  try {
    n6 = t6.slice(r6, r6 + o6);
  } catch (t7) {
    throw Pe(e6, t7), t7;
  }
  me(e6, n6, 0, o6);
}
function ge(e6, t6) {
  t6.bytesFilled > 0 && ye(e6, t6.buffer, t6.byteOffset, t6.bytesFilled), Ce(e6);
}
function we(e6, t6) {
  const r6 = t6.elementSize, o6 = t6.bytesFilled - t6.bytesFilled % r6, n6 = Math.min(e6._queueTotalSize, t6.byteLength - t6.bytesFilled), a6 = t6.bytesFilled + n6, i6 = a6 - a6 % r6;
  let l6 = n6, s6 = false;
  i6 > o6 && (l6 = i6 - t6.bytesFilled, s6 = true);
  const u6 = e6._queue;
  for (; l6 > 0; ) {
    const r7 = u6.peek(), o7 = Math.min(l6, r7.byteLength), n7 = t6.byteOffset + t6.bytesFilled;
    ie(t6.buffer, n7, r7.buffer, r7.byteOffset, o7), r7.byteLength === o7 ? u6.shift() : (r7.byteOffset += o7, r7.byteLength -= o7), e6._queueTotalSize -= o7, Se(e6, o7, t6), l6 -= o7;
  }
  return s6;
}
function Se(e6, t6, r6) {
  r6.bytesFilled += t6;
}
function ve(e6) {
  0 === e6._queueTotalSize && e6._closeRequested ? (Ee(e6), Xt(e6._controlledReadableByteStream)) : be(e6);
}
function Re(e6) {
  null !== e6._byobRequest && (e6._byobRequest._associatedReadableByteStreamController = void 0, e6._byobRequest._view = null, e6._byobRequest = null);
}
function Te(e6) {
  for (; e6._pendingPullIntos.length > 0; ) {
    if (0 === e6._queueTotalSize)
      return;
    const t6 = e6._pendingPullIntos.peek();
    we(e6, t6) && (Ce(e6), _e(e6._controlledReadableByteStream, t6));
  }
}
function qe(e6, t6) {
  const r6 = e6._pendingPullIntos.peek();
  Re(e6);
  "closed" === e6._controlledReadableByteStream._state ? function(e7, t7) {
    "none" === t7.readerType && Ce(e7);
    const r7 = e7._controlledReadableByteStream;
    if (Le(r7))
      for (; ze(r7) > 0; )
        _e(r7, Ce(e7));
  }(e6, r6) : function(e7, t7, r7) {
    if (Se(0, t7, r7), "none" === r7.readerType)
      return ge(e7, r7), void Te(e7);
    if (r7.bytesFilled < r7.elementSize)
      return;
    Ce(e7);
    const o6 = r7.bytesFilled % r7.elementSize;
    if (o6 > 0) {
      const t8 = r7.byteOffset + r7.bytesFilled;
      ye(e7, r7.buffer, t8 - o6, o6);
    }
    r7.bytesFilled -= o6, _e(e7._controlledReadableByteStream, r7), Te(e7);
  }(e6, t6, r6), be(e6);
}
function Ce(e6) {
  return e6._pendingPullIntos.shift();
}
function Ee(e6) {
  e6._pullAlgorithm = void 0, e6._cancelAlgorithm = void 0;
}
function Pe(e6, t6) {
  const r6 = e6._controlledReadableByteStream;
  "readable" === r6._state && (he(e6), ce(e6), Ee(e6), Jt(r6, t6));
}
function We(e6, t6) {
  const r6 = e6._queue.shift();
  e6._queueTotalSize -= r6.byteLength, ve(e6);
  const o6 = new Uint8Array(r6.buffer, r6.byteOffset, r6.byteLength);
  t6._chunkSteps(o6);
}
function ke(e6) {
  const t6 = e6._controlledReadableByteStream._state;
  return "errored" === t6 ? null : "closed" === t6 ? 0 : e6._strategyHWM - e6._queueTotalSize;
}
function Oe(e6, t6, r6) {
  const o6 = Object.create(ReadableByteStreamController.prototype);
  let n6, a6, i6;
  n6 = void 0 !== t6.start ? () => t6.start(o6) : () => {
  }, a6 = void 0 !== t6.pull ? () => t6.pull(o6) : () => c5(void 0), i6 = void 0 !== t6.cancel ? (e7) => t6.cancel(e7) : () => c5(void 0);
  const l6 = t6.autoAllocateChunkSize;
  if (0 === l6)
    throw new TypeError("autoAllocateChunkSize must be greater than 0");
  !function(e7, t7, r7, o7, n7, a7, i7) {
    t7._controlledReadableByteStream = e7, t7._pullAgain = false, t7._pulling = false, t7._byobRequest = null, t7._queue = t7._queueTotalSize = void 0, ce(t7), t7._closeRequested = false, t7._started = false, t7._strategyHWM = a7, t7._pullAlgorithm = o7, t7._cancelAlgorithm = n7, t7._autoAllocateChunkSize = i7, t7._pendingPullIntos = new S(), e7._readableStreamController = t7, b5(c5(r7()), () => (t7._started = true, be(t7), null), (e8) => (Pe(t7, e8), null));
  }(e6, o6, n6, a6, i6, r6, l6);
}
function Be(e6) {
  return new TypeError(`ReadableStreamBYOBRequest.prototype.${e6} can only be used on a ReadableStreamBYOBRequest`);
}
function Ae(e6) {
  return new TypeError(`ReadableByteStreamController.prototype.${e6} can only be used on a ReadableByteStreamController`);
}
function je(e6, t6) {
  e6._reader._readIntoRequests.push(t6);
}
function ze(e6) {
  return e6._reader._readIntoRequests.length;
}
function Le(e6) {
  const t6 = e6._reader;
  return void 0 !== t6 && !!Fe(t6);
}
function Fe(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_readIntoRequests") && e6 instanceof ReadableStreamBYOBReader);
}
function Ie(e6, t6) {
  const r6 = e6._readIntoRequests;
  e6._readIntoRequests = new S(), r6.forEach((e7) => {
    e7._errorSteps(t6);
  });
}
function De(e6) {
  return new TypeError(`ReadableStreamBYOBReader.prototype.${e6} can only be used on a ReadableStreamBYOBReader`);
}
function $e(e6, t6) {
  const { highWaterMark: r6 } = e6;
  if (void 0 === r6)
    return t6;
  if (ae(r6) || r6 < 0)
    throw new RangeError("Invalid highWaterMark");
  return r6;
}
function Me(e6) {
  const { size: t6 } = e6;
  return t6 || (() => 1);
}
function Ye(e6, t6) {
  F2(e6, t6);
  const r6 = null == e6 ? void 0 : e6.highWaterMark, o6 = null == e6 ? void 0 : e6.size;
  return { highWaterMark: void 0 === r6 ? void 0 : Y(r6), size: void 0 === o6 ? void 0 : Qe(o6, `${t6} has member 'size' that`) };
}
function Qe(e6, t6) {
  return I2(e6, t6), (t7) => Y(e6(t7));
}
function Ne(e6, t6, r6) {
  return I2(e6, r6), (r7) => w4(e6, t6, [r7]);
}
function He(e6, t6, r6) {
  return I2(e6, r6), () => w4(e6, t6, []);
}
function xe(e6, t6, r6) {
  return I2(e6, r6), (r7) => g6(e6, t6, [r7]);
}
function Ve(e6, t6, r6) {
  return I2(e6, r6), (r7, o6) => w4(e6, t6, [r7, o6]);
}
function Ge(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_writableStreamController") && e6 instanceof WritableStream2);
}
function Xe(e6) {
  return void 0 !== e6._writer;
}
function Je(e6, t6) {
  var r6;
  if ("closed" === e6._state || "errored" === e6._state)
    return c5(void 0);
  e6._writableStreamController._abortReason = t6, null === (r6 = e6._writableStreamController._abortController) || void 0 === r6 || r6.abort(t6);
  const o6 = e6._state;
  if ("closed" === o6 || "errored" === o6)
    return c5(void 0);
  if (void 0 !== e6._pendingAbortRequest)
    return e6._pendingAbortRequest._promise;
  let n6 = false;
  "erroring" === o6 && (n6 = true, t6 = void 0);
  const a6 = u5((r7, o7) => {
    e6._pendingAbortRequest = { _promise: void 0, _resolve: r7, _reject: o7, _reason: t6, _wasAlreadyErroring: n6 };
  });
  return e6._pendingAbortRequest._promise = a6, n6 || et(e6, t6), a6;
}
function Ke(e6) {
  const t6 = e6._state;
  if ("closed" === t6 || "errored" === t6)
    return d5(new TypeError(`The stream (in ${t6} state) is not in the writable state and cannot be closed`));
  const r6 = u5((t7, r7) => {
    const o7 = { _resolve: t7, _reject: r7 };
    e6._closeRequest = o7;
  }), o6 = e6._writer;
  var n6;
  return void 0 !== o6 && e6._backpressure && "writable" === t6 && Et(o6), ue(n6 = e6._writableStreamController, lt, 0), dt(n6), r6;
}
function Ze(e6, t6) {
  "writable" !== e6._state ? tt(e6) : et(e6, t6);
}
function et(e6, t6) {
  const r6 = e6._writableStreamController;
  e6._state = "erroring", e6._storedError = t6;
  const o6 = e6._writer;
  void 0 !== o6 && it(o6, t6), !function(e7) {
    if (void 0 === e7._inFlightWriteRequest && void 0 === e7._inFlightCloseRequest)
      return false;
    return true;
  }(e6) && r6._started && tt(e6);
}
function tt(e6) {
  e6._state = "errored", e6._writableStreamController[R]();
  const t6 = e6._storedError;
  if (e6._writeRequests.forEach((e7) => {
    e7._reject(t6);
  }), e6._writeRequests = new S(), void 0 === e6._pendingAbortRequest)
    return void ot(e6);
  const r6 = e6._pendingAbortRequest;
  if (e6._pendingAbortRequest = void 0, r6._wasAlreadyErroring)
    return r6._reject(t6), void ot(e6);
  b5(e6._writableStreamController[v6](r6._reason), () => (r6._resolve(), ot(e6), null), (t7) => (r6._reject(t7), ot(e6), null));
}
function rt(e6) {
  return void 0 !== e6._closeRequest || void 0 !== e6._inFlightCloseRequest;
}
function ot(e6) {
  void 0 !== e6._closeRequest && (e6._closeRequest._reject(e6._storedError), e6._closeRequest = void 0);
  const t6 = e6._writer;
  void 0 !== t6 && St(t6, e6._storedError);
}
function nt(e6, t6) {
  const r6 = e6._writer;
  void 0 !== r6 && t6 !== e6._backpressure && (t6 ? function(e7) {
    Rt(e7);
  }(r6) : Et(r6)), e6._backpressure = t6;
}
function at(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_ownerWritableStream") && e6 instanceof WritableStreamDefaultWriter);
}
function it(e6, t6) {
  "pending" === e6._readyPromiseState ? Ct(e6, t6) : function(e7, t7) {
    Tt(e7, t7);
  }(e6, t6);
}
function st(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_controlledWritableStream") && e6 instanceof WritableStreamDefaultController);
}
function ut(e6) {
  e6._writeAlgorithm = void 0, e6._closeAlgorithm = void 0, e6._abortAlgorithm = void 0, e6._strategySizeAlgorithm = void 0;
}
function ct(e6) {
  return e6._strategyHWM - e6._queueTotalSize;
}
function dt(e6) {
  const t6 = e6._controlledWritableStream;
  if (!e6._started)
    return;
  if (void 0 !== t6._inFlightWriteRequest)
    return;
  if ("erroring" === t6._state)
    return void tt(t6);
  if (0 === e6._queue.length)
    return;
  const r6 = e6._queue.peek().value;
  r6 === lt ? function(e7) {
    const t7 = e7._controlledWritableStream;
    (function(e8) {
      e8._inFlightCloseRequest = e8._closeRequest, e8._closeRequest = void 0;
    })(t7), se(e7);
    const r7 = e7._closeAlgorithm();
    ut(e7), b5(r7, () => (function(e8) {
      e8._inFlightCloseRequest._resolve(void 0), e8._inFlightCloseRequest = void 0, "erroring" === e8._state && (e8._storedError = void 0, void 0 !== e8._pendingAbortRequest && (e8._pendingAbortRequest._resolve(), e8._pendingAbortRequest = void 0)), e8._state = "closed";
      const t8 = e8._writer;
      void 0 !== t8 && vt(t8);
    }(t7), null), (e8) => (function(e9, t8) {
      e9._inFlightCloseRequest._reject(t8), e9._inFlightCloseRequest = void 0, void 0 !== e9._pendingAbortRequest && (e9._pendingAbortRequest._reject(t8), e9._pendingAbortRequest = void 0), Ze(e9, t8);
    }(t7, e8), null));
  }(e6) : function(e7, t7) {
    const r7 = e7._controlledWritableStream;
    !function(e8) {
      e8._inFlightWriteRequest = e8._writeRequests.shift();
    }(r7);
    b5(e7._writeAlgorithm(t7), () => {
      !function(e8) {
        e8._inFlightWriteRequest._resolve(void 0), e8._inFlightWriteRequest = void 0;
      }(r7);
      const t8 = r7._state;
      if (se(e7), !rt(r7) && "writable" === t8) {
        const t9 = bt(e7);
        nt(r7, t9);
      }
      return dt(e7), null;
    }, (t8) => ("writable" === r7._state && ut(e7), function(e8, t9) {
      e8._inFlightWriteRequest._reject(t9), e8._inFlightWriteRequest = void 0, Ze(e8, t9);
    }(r7, t8), null));
  }(e6, r6);
}
function ft(e6, t6) {
  "writable" === e6._controlledWritableStream._state && ht(e6, t6);
}
function bt(e6) {
  return ct(e6) <= 0;
}
function ht(e6, t6) {
  const r6 = e6._controlledWritableStream;
  ut(e6), et(r6, t6);
}
function _t(e6) {
  return new TypeError(`WritableStream.prototype.${e6} can only be used on a WritableStream`);
}
function pt(e6) {
  return new TypeError(`WritableStreamDefaultController.prototype.${e6} can only be used on a WritableStreamDefaultController`);
}
function mt(e6) {
  return new TypeError(`WritableStreamDefaultWriter.prototype.${e6} can only be used on a WritableStreamDefaultWriter`);
}
function yt(e6) {
  return new TypeError("Cannot " + e6 + " a stream using a released writer");
}
function gt(e6) {
  e6._closedPromise = u5((t6, r6) => {
    e6._closedPromise_resolve = t6, e6._closedPromise_reject = r6, e6._closedPromiseState = "pending";
  });
}
function wt(e6, t6) {
  gt(e6), St(e6, t6);
}
function St(e6, t6) {
  void 0 !== e6._closedPromise_reject && (m5(e6._closedPromise), e6._closedPromise_reject(t6), e6._closedPromise_resolve = void 0, e6._closedPromise_reject = void 0, e6._closedPromiseState = "rejected");
}
function vt(e6) {
  void 0 !== e6._closedPromise_resolve && (e6._closedPromise_resolve(void 0), e6._closedPromise_resolve = void 0, e6._closedPromise_reject = void 0, e6._closedPromiseState = "resolved");
}
function Rt(e6) {
  e6._readyPromise = u5((t6, r6) => {
    e6._readyPromise_resolve = t6, e6._readyPromise_reject = r6;
  }), e6._readyPromiseState = "pending";
}
function Tt(e6, t6) {
  Rt(e6), Ct(e6, t6);
}
function qt(e6) {
  Rt(e6), Et(e6);
}
function Ct(e6, t6) {
  void 0 !== e6._readyPromise_reject && (m5(e6._readyPromise), e6._readyPromise_reject(t6), e6._readyPromise_resolve = void 0, e6._readyPromise_reject = void 0, e6._readyPromiseState = "rejected");
}
function Et(e6) {
  void 0 !== e6._readyPromise_resolve && (e6._readyPromise_resolve(void 0), e6._readyPromise_resolve = void 0, e6._readyPromise_reject = void 0, e6._readyPromiseState = "fulfilled");
}
function kt(e6, t6, r6, o6, n6, a6) {
  const i6 = e6.getReader(), l6 = t6.getWriter();
  Vt(e6) && (e6._disturbed = true);
  let s6, _3, g7, w5 = false, S2 = false, v7 = "readable", R2 = "writable", T2 = false, q6 = false;
  const C3 = u5((e7) => {
    g7 = e7;
  });
  let E3 = Promise.resolve(void 0);
  return u5((P2, W2) => {
    let k6;
    function O2() {
      if (w5)
        return;
      const e7 = u5((e8, t7) => {
        !function r7(o7) {
          o7 ? e8() : f5(function() {
            if (w5)
              return c5(true);
            return f5(l6.ready, () => f5(i6.read(), (e9) => !!e9.done || (E3 = l6.write(e9.value), m5(E3), false)));
          }(), r7, t7);
        }(false);
      });
      m5(e7);
    }
    function B3() {
      return v7 = "closed", r6 ? L2() : z3(() => (Ge(t6) && (T2 = rt(t6), R2 = t6._state), T2 || "closed" === R2 ? c5(void 0) : "erroring" === R2 || "errored" === R2 ? d5(_3) : (T2 = true, l6.close())), false, void 0), null;
    }
    function A3(e7) {
      return w5 || (v7 = "errored", s6 = e7, o6 ? L2(true, e7) : z3(() => l6.abort(e7), true, e7)), null;
    }
    function j6(e7) {
      return S2 || (R2 = "errored", _3 = e7, n6 ? L2(true, e7) : z3(() => i6.cancel(e7), true, e7)), null;
    }
    if (void 0 !== a6 && (k6 = () => {
      const e7 = void 0 !== a6.reason ? a6.reason : new Wt("Aborted", "AbortError"), t7 = [];
      o6 || t7.push(() => "writable" === R2 ? l6.abort(e7) : c5(void 0)), n6 || t7.push(() => "readable" === v7 ? i6.cancel(e7) : c5(void 0)), z3(() => Promise.all(t7.map((e8) => e8())), true, e7);
    }, a6.aborted ? k6() : a6.addEventListener("abort", k6)), Vt(e6) && (v7 = e6._state, s6 = e6._storedError), Ge(t6) && (R2 = t6._state, _3 = t6._storedError, T2 = rt(t6)), Vt(e6) && Ge(t6) && (q6 = true, g7()), "errored" === v7)
      A3(s6);
    else if ("erroring" === R2 || "errored" === R2)
      j6(_3);
    else if ("closed" === v7)
      B3();
    else if (T2 || "closed" === R2) {
      const e7 = new TypeError("the destination writable stream closed before all data could be piped to it");
      n6 ? L2(true, e7) : z3(() => i6.cancel(e7), true, e7);
    }
    function z3(e7, t7, r7) {
      function o7() {
        return "writable" !== R2 || T2 ? n7() : h5(function() {
          let e8;
          return c5(function t8() {
            if (e8 !== E3)
              return e8 = E3, p5(E3, t8, t8);
          }());
        }(), n7), null;
      }
      function n7() {
        return e7 ? b5(e7(), () => F3(t7, r7), (e8) => F3(true, e8)) : F3(t7, r7), null;
      }
      w5 || (w5 = true, q6 ? o7() : h5(C3, o7));
    }
    function L2(e7, t7) {
      z3(void 0, e7, t7);
    }
    function F3(e7, t7) {
      return S2 = true, l6.releaseLock(), i6.releaseLock(), void 0 !== a6 && a6.removeEventListener("abort", k6), e7 ? W2(t7) : P2(void 0), null;
    }
    w5 || (b5(i6.closed, B3, A3), b5(l6.closed, function() {
      return S2 || (R2 = "closed"), null;
    }, j6)), q6 ? O2() : y2(() => {
      q6 = true, g7(), O2();
    });
  });
}
function Ot(e6, t6) {
  return function(e7) {
    try {
      return e7.getReader({ mode: "byob" }).releaseLock(), true;
    } catch (e8) {
      return false;
    }
  }(e6) ? function(e7) {
    let t7, r6, o6, n6, a6, i6 = e7.getReader(), l6 = false, s6 = false, d6 = false, f6 = false, h6 = false, p6 = false;
    const m6 = u5((e8) => {
      a6 = e8;
    });
    function y3(e8) {
      _2(e8.closed, (t8) => (e8 !== i6 || (o6.error(t8), n6.error(t8), h6 && p6 || a6(void 0)), null));
    }
    function g7() {
      l6 && (i6.releaseLock(), i6 = e7.getReader(), y3(i6), l6 = false), b5(i6.read(), (e8) => {
        var t8, r7;
        if (d6 = false, f6 = false, e8.done)
          return h6 || o6.close(), p6 || n6.close(), null === (t8 = o6.byobRequest) || void 0 === t8 || t8.respond(0), null === (r7 = n6.byobRequest) || void 0 === r7 || r7.respond(0), h6 && p6 || a6(void 0), null;
        const l7 = e8.value, u6 = l7;
        let c6 = l7;
        if (!h6 && !p6)
          try {
            c6 = le(l7);
          } catch (e9) {
            return o6.error(e9), n6.error(e9), a6(i6.cancel(e9)), null;
          }
        return h6 || o6.enqueue(u6), p6 || n6.enqueue(c6), s6 = false, d6 ? S2() : f6 && v7(), null;
      }, () => (s6 = false, null));
    }
    function w5(t8, r7) {
      l6 || (i6.releaseLock(), i6 = e7.getReader({ mode: "byob" }), y3(i6), l6 = true);
      const u6 = r7 ? n6 : o6, c6 = r7 ? o6 : n6;
      b5(i6.read(t8), (e8) => {
        var t9;
        d6 = false, f6 = false;
        const o7 = r7 ? p6 : h6, n7 = r7 ? h6 : p6;
        if (e8.done) {
          o7 || u6.close(), n7 || c6.close();
          const r8 = e8.value;
          return void 0 !== r8 && (o7 || u6.byobRequest.respondWithNewView(r8), n7 || null === (t9 = c6.byobRequest) || void 0 === t9 || t9.respond(0)), o7 && n7 || a6(void 0), null;
        }
        const l7 = e8.value;
        if (n7)
          o7 || u6.byobRequest.respondWithNewView(l7);
        else {
          let e9;
          try {
            e9 = le(l7);
          } catch (e10) {
            return u6.error(e10), c6.error(e10), a6(i6.cancel(e10)), null;
          }
          o7 || u6.byobRequest.respondWithNewView(l7), c6.enqueue(e9);
        }
        return s6 = false, d6 ? S2() : f6 && v7(), null;
      }, () => (s6 = false, null));
    }
    function S2() {
      if (s6)
        return d6 = true, c5(void 0);
      s6 = true;
      const e8 = o6.byobRequest;
      return null === e8 ? g7() : w5(e8.view, false), c5(void 0);
    }
    function v7() {
      if (s6)
        return f6 = true, c5(void 0);
      s6 = true;
      const e8 = n6.byobRequest;
      return null === e8 ? g7() : w5(e8.view, true), c5(void 0);
    }
    function R2(e8) {
      if (h6 = true, t7 = e8, p6) {
        const e9 = [t7, r6], o7 = i6.cancel(e9);
        a6(o7);
      }
      return m6;
    }
    function T2(e8) {
      if (p6 = true, r6 = e8, h6) {
        const e9 = [t7, r6], o7 = i6.cancel(e9);
        a6(o7);
      }
      return m6;
    }
    const q6 = new ReadableStream3({ type: "bytes", start(e8) {
      o6 = e8;
    }, pull: S2, cancel: R2 }), C3 = new ReadableStream3({ type: "bytes", start(e8) {
      n6 = e8;
    }, pull: v7, cancel: T2 });
    return y3(i6), [q6, C3];
  }(e6) : function(e7, t7) {
    const r6 = e7.getReader();
    let o6, n6, a6, i6, l6, s6 = false, d6 = false, f6 = false, h6 = false;
    const p6 = u5((e8) => {
      l6 = e8;
    });
    function m6() {
      return s6 ? (d6 = true, c5(void 0)) : (s6 = true, b5(r6.read(), (e8) => {
        if (d6 = false, e8.done)
          return f6 || a6.close(), h6 || i6.close(), f6 && h6 || l6(void 0), null;
        const t8 = e8.value, r7 = t8, o7 = t8;
        return f6 || a6.enqueue(r7), h6 || i6.enqueue(o7), s6 = false, d6 && m6(), null;
      }, () => (s6 = false, null)), c5(void 0));
    }
    function y3(e8) {
      if (f6 = true, o6 = e8, h6) {
        const e9 = [o6, n6], t8 = r6.cancel(e9);
        l6(t8);
      }
      return p6;
    }
    function g7(e8) {
      if (h6 = true, n6 = e8, f6) {
        const e9 = [o6, n6], t8 = r6.cancel(e9);
        l6(t8);
      }
      return p6;
    }
    const w5 = new ReadableStream3({ start(e8) {
      a6 = e8;
    }, pull: m6, cancel: y3 }), S2 = new ReadableStream3({ start(e8) {
      i6 = e8;
    }, pull: m6, cancel: g7 });
    return _2(r6.closed, (e8) => (a6.error(e8), i6.error(e8), f6 && h6 || l6(void 0), null)), [w5, S2];
  }(e6);
}
function Bt(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_controlledReadableStream") && e6 instanceof ReadableStreamDefaultController);
}
function At(e6) {
  const t6 = function(e7) {
    const t7 = e7._controlledReadableStream;
    if (!Ft(e7))
      return false;
    if (!e7._started)
      return false;
    if (Ut(t7) && X(t7) > 0)
      return true;
    if (Lt(e7) > 0)
      return true;
    return false;
  }(e6);
  if (!t6)
    return;
  if (e6._pulling)
    return void (e6._pullAgain = true);
  e6._pulling = true;
  b5(e6._pullAlgorithm(), () => (e6._pulling = false, e6._pullAgain && (e6._pullAgain = false, At(e6)), null), (t7) => (zt(e6, t7), null));
}
function jt(e6) {
  e6._pullAlgorithm = void 0, e6._cancelAlgorithm = void 0, e6._strategySizeAlgorithm = void 0;
}
function zt(e6, t6) {
  const r6 = e6._controlledReadableStream;
  "readable" === r6._state && (ce(e6), jt(e6), Jt(r6, t6));
}
function Lt(e6) {
  const t6 = e6._controlledReadableStream._state;
  return "errored" === t6 ? null : "closed" === t6 ? 0 : e6._strategyHWM - e6._queueTotalSize;
}
function Ft(e6) {
  return !e6._closeRequested && "readable" === e6._controlledReadableStream._state;
}
function It(e6, t6, r6, o6) {
  const n6 = Object.create(ReadableStreamDefaultController.prototype);
  let a6, i6, l6;
  a6 = void 0 !== t6.start ? () => t6.start(n6) : () => {
  }, i6 = void 0 !== t6.pull ? () => t6.pull(n6) : () => c5(void 0), l6 = void 0 !== t6.cancel ? (e7) => t6.cancel(e7) : () => c5(void 0), function(e7, t7, r7, o7, n7, a7, i7) {
    t7._controlledReadableStream = e7, t7._queue = void 0, t7._queueTotalSize = void 0, ce(t7), t7._started = false, t7._closeRequested = false, t7._pullAgain = false, t7._pulling = false, t7._strategySizeAlgorithm = i7, t7._strategyHWM = a7, t7._pullAlgorithm = o7, t7._cancelAlgorithm = n7, e7._readableStreamController = t7, b5(c5(r7()), () => (t7._started = true, At(t7), null), (e8) => (zt(t7, e8), null));
  }(e6, n6, a6, i6, l6, r6, o6);
}
function Dt(e6) {
  return new TypeError(`ReadableStreamDefaultController.prototype.${e6} can only be used on a ReadableStreamDefaultController`);
}
function $t(e6, t6, r6) {
  return I2(e6, r6), (r7) => w4(e6, t6, [r7]);
}
function Mt(e6, t6, r6) {
  return I2(e6, r6), (r7) => w4(e6, t6, [r7]);
}
function Yt(e6, t6, r6) {
  return I2(e6, r6), (r7) => g6(e6, t6, [r7]);
}
function Qt(e6, t6) {
  if ("bytes" !== (e6 = `${e6}`))
    throw new TypeError(`${t6} '${e6}' is not a valid enumeration value for ReadableStreamType`);
  return e6;
}
function Nt(e6, t6) {
  if ("byob" !== (e6 = `${e6}`))
    throw new TypeError(`${t6} '${e6}' is not a valid enumeration value for ReadableStreamReaderMode`);
  return e6;
}
function Ht(e6, t6) {
  F2(e6, t6);
  const r6 = null == e6 ? void 0 : e6.preventAbort, o6 = null == e6 ? void 0 : e6.preventCancel, n6 = null == e6 ? void 0 : e6.preventClose, a6 = null == e6 ? void 0 : e6.signal;
  return void 0 !== a6 && function(e7, t7) {
    if (!function(e8) {
      if ("object" != typeof e8 || null === e8)
        return false;
      try {
        return "boolean" == typeof e8.aborted;
      } catch (e9) {
        return false;
      }
    }(e7))
      throw new TypeError(`${t7} is not an AbortSignal.`);
  }(a6, `${t6} has member 'signal' that`), { preventAbort: Boolean(r6), preventCancel: Boolean(o6), preventClose: Boolean(n6), signal: a6 };
}
function xt(e6, t6) {
  F2(e6, t6);
  const r6 = null == e6 ? void 0 : e6.readable;
  M(r6, "readable", "ReadableWritablePair"), function(e7, t7) {
    if (!H2(e7))
      throw new TypeError(`${t7} is not a ReadableStream.`);
  }(r6, `${t6} has member 'readable' that`);
  const o6 = null == e6 ? void 0 : e6.writable;
  return M(o6, "writable", "ReadableWritablePair"), function(e7, t7) {
    if (!x4(e7))
      throw new TypeError(`${t7} is not a WritableStream.`);
  }(o6, `${t6} has member 'writable' that`), { readable: r6, writable: o6 };
}
function Vt(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_readableStreamController") && e6 instanceof ReadableStream3);
}
function Ut(e6) {
  return void 0 !== e6._reader;
}
function Gt(e6, r6) {
  if (e6._disturbed = true, "closed" === e6._state)
    return c5(void 0);
  if ("errored" === e6._state)
    return d5(e6._storedError);
  Xt(e6);
  const o6 = e6._reader;
  if (void 0 !== o6 && Fe(o6)) {
    const e7 = o6._readIntoRequests;
    o6._readIntoRequests = new S(), e7.forEach((e8) => {
      e8._closeSteps(void 0);
    });
  }
  return p5(e6._readableStreamController[T](r6), t5);
}
function Xt(e6) {
  e6._state = "closed";
  const t6 = e6._reader;
  if (void 0 !== t6 && (j5(t6), K(t6))) {
    const e7 = t6._readRequests;
    t6._readRequests = new S(), e7.forEach((e8) => {
      e8._closeSteps();
    });
  }
}
function Jt(e6, t6) {
  e6._state = "errored", e6._storedError = t6;
  const r6 = e6._reader;
  void 0 !== r6 && (A2(r6, t6), K(r6) ? Z(r6, t6) : Ie(r6, t6));
}
function Kt(e6) {
  return new TypeError(`ReadableStream.prototype.${e6} can only be used on a ReadableStream`);
}
function Zt(e6, t6) {
  F2(e6, t6);
  const r6 = null == e6 ? void 0 : e6.highWaterMark;
  return M(r6, "highWaterMark", "QueuingStrategyInit"), { highWaterMark: Y(r6) };
}
function tr(e6) {
  return new TypeError(`ByteLengthQueuingStrategy.prototype.${e6} can only be used on a ByteLengthQueuingStrategy`);
}
function rr(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_byteLengthQueuingStrategyHighWaterMark") && e6 instanceof ByteLengthQueuingStrategy);
}
function nr(e6) {
  return new TypeError(`CountQueuingStrategy.prototype.${e6} can only be used on a CountQueuingStrategy`);
}
function ar(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_countQueuingStrategyHighWaterMark") && e6 instanceof CountQueuingStrategy);
}
function ir(e6, t6, r6) {
  return I2(e6, r6), (r7) => w4(e6, t6, [r7]);
}
function lr(e6, t6, r6) {
  return I2(e6, r6), (r7) => g6(e6, t6, [r7]);
}
function sr(e6, t6, r6) {
  return I2(e6, r6), (r7, o6) => w4(e6, t6, [r7, o6]);
}
function ur(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_transformStreamController") && e6 instanceof TransformStream);
}
function cr(e6, t6) {
  Sr(e6, t6), dr(e6, t6);
}
function dr(e6, t6) {
  hr(e6._transformStreamController), function(e7, t7) {
    e7._writableController.error(t7);
    "writable" === e7._writableState && Tr(e7, t7);
  }(e6, t6), e6._backpressure && fr(e6, false);
}
function fr(e6, t6) {
  void 0 !== e6._backpressureChangePromise && e6._backpressureChangePromise_resolve(), e6._backpressureChangePromise = u5((t7) => {
    e6._backpressureChangePromise_resolve = t7;
  }), e6._backpressure = t6;
}
function br(e6) {
  return !!r5(e6) && (!!Object.prototype.hasOwnProperty.call(e6, "_controlledTransformStream") && e6 instanceof TransformStreamDefaultController);
}
function hr(e6) {
  e6._transformAlgorithm = void 0, e6._flushAlgorithm = void 0;
}
function _r(e6, t6) {
  const r6 = e6._controlledTransformStream;
  if (!gr(r6))
    throw new TypeError("Readable side is not in a state that permits enqueue");
  try {
    !function(e7, t7) {
      e7._readablePulling = false;
      try {
        e7._readableController.enqueue(t7);
      } catch (t8) {
        throw Sr(e7, t8), t8;
      }
    }(r6, t6);
  } catch (e7) {
    throw dr(r6, e7), r6._readableStoredError;
  }
  const o6 = function(e7) {
    return !function(e8) {
      if (!gr(e8))
        return false;
      if (e8._readablePulling)
        return true;
      if (vr(e8) > 0)
        return true;
      return false;
    }(e7);
  }(r6);
  o6 !== r6._backpressure && fr(r6, true);
}
function pr(e6, t6) {
  return p5(e6._transformAlgorithm(t6), void 0, (t7) => {
    throw cr(e6._controlledTransformStream, t7), t7;
  });
}
function mr(e6) {
  return new TypeError(`TransformStreamDefaultController.prototype.${e6} can only be used on a TransformStreamDefaultController`);
}
function yr(e6) {
  return new TypeError(`TransformStream.prototype.${e6} can only be used on a TransformStream`);
}
function gr(e6) {
  return !e6._readableCloseRequested && "readable" === e6._readableState;
}
function wr(e6) {
  e6._readableState = "closed", e6._readableCloseRequested = true, e6._readableController.close();
}
function Sr(e6, t6) {
  "readable" === e6._readableState && (e6._readableState = "errored", e6._readableStoredError = t6), e6._readableController.error(t6);
}
function vr(e6) {
  return e6._readableController.desiredSize;
}
function Rr(e6, t6) {
  "writable" !== e6._writableState ? qr(e6) : Tr(e6, t6);
}
function Tr(e6, t6) {
  e6._writableState = "erroring", e6._writableStoredError = t6, !function(e7) {
    return e7._writableHasInFlightOperation;
  }(e6) && e6._writableStarted && qr(e6);
}
function qr(e6) {
  e6._writableState = "errored";
}
function Cr(e6) {
  "erroring" === e6._writableState && qr(e6);
}
var e5, o5, a5, i5, l5, s5, y2, S, v6, R, T, q5, C2, z2, L, ReadableStreamDefaultReader, te, re, ae, ReadableStreamBYOBRequest, ReadableByteStreamController, ReadableStreamBYOBReader, Ue, WritableStream2, WritableStreamDefaultWriter, lt, WritableStreamDefaultController, Pt, Wt, ReadableStreamDefaultController, ReadableStream3, er, ByteLengthQueuingStrategy, or, CountQueuingStrategy, TransformStream, TransformStreamDefaultController;
var init_ponyfill = __esm({
  "../../node_modules/.pnpm/web-streams-polyfill@4.0.0-beta.3/node_modules/web-streams-polyfill/dist/ponyfill.mjs"() {
    "use strict";
    e5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? Symbol : (e6) => `Symbol(${e6})`;
    o5 = t5;
    a5 = Promise;
    i5 = Promise.prototype.then;
    l5 = Promise.resolve.bind(a5);
    s5 = Promise.reject.bind(a5);
    y2 = (e6) => {
      if ("function" == typeof queueMicrotask)
        y2 = queueMicrotask;
      else {
        const e7 = c5(void 0);
        y2 = (t6) => f5(e7, t6);
      }
      return y2(e6);
    };
    S = class {
      constructor() {
        this._cursor = 0, this._size = 0, this._front = { _elements: [], _next: void 0 }, this._back = this._front, this._cursor = 0, this._size = 0;
      }
      get length() {
        return this._size;
      }
      push(e6) {
        const t6 = this._back;
        let r6 = t6;
        16383 === t6._elements.length && (r6 = { _elements: [], _next: void 0 }), t6._elements.push(e6), r6 !== t6 && (this._back = r6, t6._next = r6), ++this._size;
      }
      shift() {
        const e6 = this._front;
        let t6 = e6;
        const r6 = this._cursor;
        let o6 = r6 + 1;
        const n6 = e6._elements, a6 = n6[r6];
        return 16384 === o6 && (t6 = e6._next, o6 = 0), --this._size, this._cursor = o6, e6 !== t6 && (this._front = t6), n6[r6] = void 0, a6;
      }
      forEach(e6) {
        let t6 = this._cursor, r6 = this._front, o6 = r6._elements;
        for (; !(t6 === o6.length && void 0 === r6._next || t6 === o6.length && (r6 = r6._next, o6 = r6._elements, t6 = 0, 0 === o6.length)); )
          e6(o6[t6]), ++t6;
      }
      peek() {
        const e6 = this._front, t6 = this._cursor;
        return e6._elements[t6];
      }
    };
    v6 = e5("[[AbortSteps]]");
    R = e5("[[ErrorSteps]]");
    T = e5("[[CancelSteps]]");
    q5 = e5("[[PullSteps]]");
    C2 = e5("[[ReleaseSteps]]");
    z2 = Number.isFinite || function(e6) {
      return "number" == typeof e6 && isFinite(e6);
    };
    L = Math.trunc || function(e6) {
      return e6 < 0 ? Math.ceil(e6) : Math.floor(e6);
    };
    ReadableStreamDefaultReader = class {
      constructor(e6) {
        if ($(e6, 1, "ReadableStreamDefaultReader"), V(e6, "First parameter"), Ut(e6))
          throw new TypeError("This stream has already been locked for exclusive reading by another reader");
        E2(this, e6), this._readRequests = new S();
      }
      get closed() {
        return K(this) ? this._closedPromise : d5(ee("closed"));
      }
      cancel(e6) {
        return K(this) ? void 0 === this._ownerReadableStream ? d5(k5("cancel")) : P(this, e6) : d5(ee("cancel"));
      }
      read() {
        if (!K(this))
          return d5(ee("read"));
        if (void 0 === this._ownerReadableStream)
          return d5(k5("read from"));
        let e6, t6;
        const r6 = u5((r7, o6) => {
          e6 = r7, t6 = o6;
        });
        return function(e7, t7) {
          const r7 = e7._ownerReadableStream;
          r7._disturbed = true, "closed" === r7._state ? t7._closeSteps() : "errored" === r7._state ? t7._errorSteps(r7._storedError) : r7._readableStreamController[q5](t7);
        }(this, { _chunkSteps: (t7) => e6({ value: t7, done: false }), _closeSteps: () => e6({ value: void 0, done: true }), _errorSteps: (e7) => t6(e7) }), r6;
      }
      releaseLock() {
        if (!K(this))
          throw ee("releaseLock");
        void 0 !== this._ownerReadableStream && function(e6) {
          W(e6);
          const t6 = new TypeError("Reader was released");
          Z(e6, t6);
        }(this);
      }
    };
    Object.defineProperties(ReadableStreamDefaultReader.prototype, { cancel: { enumerable: true }, read: { enumerable: true }, releaseLock: { enumerable: true }, closed: { enumerable: true } }), n5(ReadableStreamDefaultReader.prototype.cancel, "cancel"), n5(ReadableStreamDefaultReader.prototype.read, "read"), n5(ReadableStreamDefaultReader.prototype.releaseLock, "releaseLock"), "symbol" == typeof e5.toStringTag && Object.defineProperty(ReadableStreamDefaultReader.prototype, e5.toStringTag, { value: "ReadableStreamDefaultReader", configurable: true });
    te = class {
      constructor(e6, t6) {
        this._ongoingPromise = void 0, this._isFinished = false, this._reader = e6, this._preventCancel = t6;
      }
      next() {
        const e6 = () => this._nextSteps();
        return this._ongoingPromise = this._ongoingPromise ? p5(this._ongoingPromise, e6, e6) : e6(), this._ongoingPromise;
      }
      return(e6) {
        const t6 = () => this._returnSteps(e6);
        return this._ongoingPromise ? p5(this._ongoingPromise, t6, t6) : t6();
      }
      _nextSteps() {
        if (this._isFinished)
          return Promise.resolve({ value: void 0, done: true });
        const e6 = this._reader;
        return void 0 === e6 ? d5(k5("iterate")) : f5(e6.read(), (e7) => {
          var t6;
          return this._ongoingPromise = void 0, e7.done && (this._isFinished = true, null === (t6 = this._reader) || void 0 === t6 || t6.releaseLock(), this._reader = void 0), e7;
        }, (e7) => {
          var t6;
          throw this._ongoingPromise = void 0, this._isFinished = true, null === (t6 = this._reader) || void 0 === t6 || t6.releaseLock(), this._reader = void 0, e7;
        });
      }
      _returnSteps(e6) {
        if (this._isFinished)
          return Promise.resolve({ value: e6, done: true });
        this._isFinished = true;
        const t6 = this._reader;
        if (void 0 === t6)
          return d5(k5("finish iterating"));
        if (this._reader = void 0, !this._preventCancel) {
          const r6 = t6.cancel(e6);
          return t6.releaseLock(), p5(r6, () => ({ value: e6, done: true }));
        }
        return t6.releaseLock(), c5({ value: e6, done: true });
      }
    };
    re = { next() {
      return oe(this) ? this._asyncIteratorImpl.next() : d5(ne("next"));
    }, return(e6) {
      return oe(this) ? this._asyncIteratorImpl.return(e6) : d5(ne("return"));
    } };
    "symbol" == typeof e5.asyncIterator && Object.defineProperty(re, e5.asyncIterator, { value() {
      return this;
    }, writable: true, configurable: true });
    ae = Number.isNaN || function(e6) {
      return e6 != e6;
    };
    ReadableStreamBYOBRequest = class {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get view() {
        if (!fe(this))
          throw Be("view");
        return this._view;
      }
      respond(e6) {
        if (!fe(this))
          throw Be("respond");
        if ($(e6, 1, "respond"), e6 = N(e6, "First parameter"), void 0 === this._associatedReadableByteStreamController)
          throw new TypeError("This BYOB request has been invalidated");
        this._view.buffer, function(e7, t6) {
          const r6 = e7._pendingPullIntos.peek();
          if ("closed" === e7._controlledReadableByteStream._state) {
            if (0 !== t6)
              throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
          } else {
            if (0 === t6)
              throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
            if (r6.bytesFilled + t6 > r6.byteLength)
              throw new RangeError("bytesWritten out of range");
          }
          r6.buffer = r6.buffer, qe(e7, t6);
        }(this._associatedReadableByteStreamController, e6);
      }
      respondWithNewView(e6) {
        if (!fe(this))
          throw Be("respondWithNewView");
        if ($(e6, 1, "respondWithNewView"), !ArrayBuffer.isView(e6))
          throw new TypeError("You can only respond with array buffer views");
        if (void 0 === this._associatedReadableByteStreamController)
          throw new TypeError("This BYOB request has been invalidated");
        e6.buffer, function(e7, t6) {
          const r6 = e7._pendingPullIntos.peek();
          if ("closed" === e7._controlledReadableByteStream._state) {
            if (0 !== t6.byteLength)
              throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
          } else if (0 === t6.byteLength)
            throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
          if (r6.byteOffset + r6.bytesFilled !== t6.byteOffset)
            throw new RangeError("The region specified by view does not match byobRequest");
          if (r6.bufferByteLength !== t6.buffer.byteLength)
            throw new RangeError("The buffer of view has different capacity than byobRequest");
          if (r6.bytesFilled + t6.byteLength > r6.byteLength)
            throw new RangeError("The region specified by view is larger than byobRequest");
          const o6 = t6.byteLength;
          r6.buffer = t6.buffer, qe(e7, o6);
        }(this._associatedReadableByteStreamController, e6);
      }
    };
    Object.defineProperties(ReadableStreamBYOBRequest.prototype, { respond: { enumerable: true }, respondWithNewView: { enumerable: true }, view: { enumerable: true } }), n5(ReadableStreamBYOBRequest.prototype.respond, "respond"), n5(ReadableStreamBYOBRequest.prototype.respondWithNewView, "respondWithNewView"), "symbol" == typeof e5.toStringTag && Object.defineProperty(ReadableStreamBYOBRequest.prototype, e5.toStringTag, { value: "ReadableStreamBYOBRequest", configurable: true });
    ReadableByteStreamController = class {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get byobRequest() {
        if (!de(this))
          throw Ae("byobRequest");
        return function(e6) {
          if (null === e6._byobRequest && e6._pendingPullIntos.length > 0) {
            const t6 = e6._pendingPullIntos.peek(), r6 = new Uint8Array(t6.buffer, t6.byteOffset + t6.bytesFilled, t6.byteLength - t6.bytesFilled), o6 = Object.create(ReadableStreamBYOBRequest.prototype);
            !function(e7, t7, r7) {
              e7._associatedReadableByteStreamController = t7, e7._view = r7;
            }(o6, e6, r6), e6._byobRequest = o6;
          }
          return e6._byobRequest;
        }(this);
      }
      get desiredSize() {
        if (!de(this))
          throw Ae("desiredSize");
        return ke(this);
      }
      close() {
        if (!de(this))
          throw Ae("close");
        if (this._closeRequested)
          throw new TypeError("The stream has already been closed; do not close it again!");
        const e6 = this._controlledReadableByteStream._state;
        if ("readable" !== e6)
          throw new TypeError(`The stream (in ${e6} state) is not in the readable state and cannot be closed`);
        !function(e7) {
          const t6 = e7._controlledReadableByteStream;
          if (e7._closeRequested || "readable" !== t6._state)
            return;
          if (e7._queueTotalSize > 0)
            return void (e7._closeRequested = true);
          if (e7._pendingPullIntos.length > 0) {
            if (e7._pendingPullIntos.peek().bytesFilled > 0) {
              const t7 = new TypeError("Insufficient bytes to fill elements in the given buffer");
              throw Pe(e7, t7), t7;
            }
          }
          Ee(e7), Xt(t6);
        }(this);
      }
      enqueue(e6) {
        if (!de(this))
          throw Ae("enqueue");
        if ($(e6, 1, "enqueue"), !ArrayBuffer.isView(e6))
          throw new TypeError("chunk must be an array buffer view");
        if (0 === e6.byteLength)
          throw new TypeError("chunk must have non-zero byteLength");
        if (0 === e6.buffer.byteLength)
          throw new TypeError("chunk's buffer must have non-zero byteLength");
        if (this._closeRequested)
          throw new TypeError("stream is closed or draining");
        const t6 = this._controlledReadableByteStream._state;
        if ("readable" !== t6)
          throw new TypeError(`The stream (in ${t6} state) is not in the readable state and cannot be enqueued to`);
        !function(e7, t7) {
          const r6 = e7._controlledReadableByteStream;
          if (e7._closeRequested || "readable" !== r6._state)
            return;
          const o6 = t7.buffer, n6 = t7.byteOffset, a6 = t7.byteLength, i6 = o6;
          if (e7._pendingPullIntos.length > 0) {
            const t8 = e7._pendingPullIntos.peek();
            t8.buffer, 0, Re(e7), t8.buffer = t8.buffer, "none" === t8.readerType && ge(e7, t8);
          }
          if (J2(r6))
            if (function(e8) {
              const t8 = e8._controlledReadableByteStream._reader;
              for (; t8._readRequests.length > 0; ) {
                if (0 === e8._queueTotalSize)
                  return;
                We(e8, t8._readRequests.shift());
              }
            }(e7), 0 === X(r6))
              me(e7, i6, n6, a6);
            else {
              e7._pendingPullIntos.length > 0 && Ce(e7);
              G2(r6, new Uint8Array(i6, n6, a6), false);
            }
          else
            Le(r6) ? (me(e7, i6, n6, a6), Te(e7)) : me(e7, i6, n6, a6);
          be(e7);
        }(this, e6);
      }
      error(e6) {
        if (!de(this))
          throw Ae("error");
        Pe(this, e6);
      }
      [T](e6) {
        he(this), ce(this);
        const t6 = this._cancelAlgorithm(e6);
        return Ee(this), t6;
      }
      [q5](e6) {
        const t6 = this._controlledReadableByteStream;
        if (this._queueTotalSize > 0)
          return void We(this, e6);
        const r6 = this._autoAllocateChunkSize;
        if (void 0 !== r6) {
          let t7;
          try {
            t7 = new ArrayBuffer(r6);
          } catch (t8) {
            return void e6._errorSteps(t8);
          }
          const o6 = { buffer: t7, bufferByteLength: r6, byteOffset: 0, byteLength: r6, bytesFilled: 0, elementSize: 1, viewConstructor: Uint8Array, readerType: "default" };
          this._pendingPullIntos.push(o6);
        }
        U(t6, e6), be(this);
      }
      [C2]() {
        if (this._pendingPullIntos.length > 0) {
          const e6 = this._pendingPullIntos.peek();
          e6.readerType = "none", this._pendingPullIntos = new S(), this._pendingPullIntos.push(e6);
        }
      }
    };
    Object.defineProperties(ReadableByteStreamController.prototype, { close: { enumerable: true }, enqueue: { enumerable: true }, error: { enumerable: true }, byobRequest: { enumerable: true }, desiredSize: { enumerable: true } }), n5(ReadableByteStreamController.prototype.close, "close"), n5(ReadableByteStreamController.prototype.enqueue, "enqueue"), n5(ReadableByteStreamController.prototype.error, "error"), "symbol" == typeof e5.toStringTag && Object.defineProperty(ReadableByteStreamController.prototype, e5.toStringTag, { value: "ReadableByteStreamController", configurable: true });
    ReadableStreamBYOBReader = class {
      constructor(e6) {
        if ($(e6, 1, "ReadableStreamBYOBReader"), V(e6, "First parameter"), Ut(e6))
          throw new TypeError("This stream has already been locked for exclusive reading by another reader");
        if (!de(e6._readableStreamController))
          throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
        E2(this, e6), this._readIntoRequests = new S();
      }
      get closed() {
        return Fe(this) ? this._closedPromise : d5(De("closed"));
      }
      cancel(e6) {
        return Fe(this) ? void 0 === this._ownerReadableStream ? d5(k5("cancel")) : P(this, e6) : d5(De("cancel"));
      }
      read(e6) {
        if (!Fe(this))
          return d5(De("read"));
        if (!ArrayBuffer.isView(e6))
          return d5(new TypeError("view must be an array buffer view"));
        if (0 === e6.byteLength)
          return d5(new TypeError("view must have non-zero byteLength"));
        if (0 === e6.buffer.byteLength)
          return d5(new TypeError("view's buffer must have non-zero byteLength"));
        if (e6.buffer, void 0 === this._ownerReadableStream)
          return d5(k5("read from"));
        let t6, r6;
        const o6 = u5((e7, o7) => {
          t6 = e7, r6 = o7;
        });
        return function(e7, t7, r7) {
          const o7 = e7._ownerReadableStream;
          o7._disturbed = true, "errored" === o7._state ? r7._errorSteps(o7._storedError) : function(e8, t8, r8) {
            const o8 = e8._controlledReadableByteStream;
            let n6 = 1;
            t8.constructor !== DataView && (n6 = t8.constructor.BYTES_PER_ELEMENT);
            const a6 = t8.constructor, i6 = t8.buffer, l6 = { buffer: i6, bufferByteLength: i6.byteLength, byteOffset: t8.byteOffset, byteLength: t8.byteLength, bytesFilled: 0, elementSize: n6, viewConstructor: a6, readerType: "byob" };
            if (e8._pendingPullIntos.length > 0)
              return e8._pendingPullIntos.push(l6), void je(o8, r8);
            if ("closed" !== o8._state) {
              if (e8._queueTotalSize > 0) {
                if (we(e8, l6)) {
                  const t9 = pe(l6);
                  return ve(e8), void r8._chunkSteps(t9);
                }
                if (e8._closeRequested) {
                  const t9 = new TypeError("Insufficient bytes to fill elements in the given buffer");
                  return Pe(e8, t9), void r8._errorSteps(t9);
                }
              }
              e8._pendingPullIntos.push(l6), je(o8, r8), be(e8);
            } else {
              const e9 = new a6(l6.buffer, l6.byteOffset, 0);
              r8._closeSteps(e9);
            }
          }(o7._readableStreamController, t7, r7);
        }(this, e6, { _chunkSteps: (e7) => t6({ value: e7, done: false }), _closeSteps: (e7) => t6({ value: e7, done: true }), _errorSteps: (e7) => r6(e7) }), o6;
      }
      releaseLock() {
        if (!Fe(this))
          throw De("releaseLock");
        void 0 !== this._ownerReadableStream && function(e6) {
          W(e6);
          const t6 = new TypeError("Reader was released");
          Ie(e6, t6);
        }(this);
      }
    };
    Object.defineProperties(ReadableStreamBYOBReader.prototype, { cancel: { enumerable: true }, read: { enumerable: true }, releaseLock: { enumerable: true }, closed: { enumerable: true } }), n5(ReadableStreamBYOBReader.prototype.cancel, "cancel"), n5(ReadableStreamBYOBReader.prototype.read, "read"), n5(ReadableStreamBYOBReader.prototype.releaseLock, "releaseLock"), "symbol" == typeof e5.toStringTag && Object.defineProperty(ReadableStreamBYOBReader.prototype, e5.toStringTag, { value: "ReadableStreamBYOBReader", configurable: true });
    Ue = "function" == typeof AbortController;
    WritableStream2 = class {
      constructor(e6 = {}, t6 = {}) {
        void 0 === e6 ? e6 = null : D2(e6, "First parameter");
        const r6 = Ye(t6, "Second parameter"), o6 = function(e7, t7) {
          F2(e7, t7);
          const r7 = null == e7 ? void 0 : e7.abort, o7 = null == e7 ? void 0 : e7.close, n7 = null == e7 ? void 0 : e7.start, a7 = null == e7 ? void 0 : e7.type, i6 = null == e7 ? void 0 : e7.write;
          return { abort: void 0 === r7 ? void 0 : Ne(r7, e7, `${t7} has member 'abort' that`), close: void 0 === o7 ? void 0 : He(o7, e7, `${t7} has member 'close' that`), start: void 0 === n7 ? void 0 : xe(n7, e7, `${t7} has member 'start' that`), write: void 0 === i6 ? void 0 : Ve(i6, e7, `${t7} has member 'write' that`), type: a7 };
        }(e6, "First parameter");
        var n6;
        (n6 = this)._state = "writable", n6._storedError = void 0, n6._writer = void 0, n6._writableStreamController = void 0, n6._writeRequests = new S(), n6._inFlightWriteRequest = void 0, n6._closeRequest = void 0, n6._inFlightCloseRequest = void 0, n6._pendingAbortRequest = void 0, n6._backpressure = false;
        if (void 0 !== o6.type)
          throw new RangeError("Invalid type is specified");
        const a6 = Me(r6);
        !function(e7, t7, r7, o7) {
          const n7 = Object.create(WritableStreamDefaultController.prototype);
          let a7, i6, l6, s6;
          a7 = void 0 !== t7.start ? () => t7.start(n7) : () => {
          };
          i6 = void 0 !== t7.write ? (e8) => t7.write(e8, n7) : () => c5(void 0);
          l6 = void 0 !== t7.close ? () => t7.close() : () => c5(void 0);
          s6 = void 0 !== t7.abort ? (e8) => t7.abort(e8) : () => c5(void 0);
          !function(e8, t8, r8, o8, n8, a8, i7, l7) {
            t8._controlledWritableStream = e8, e8._writableStreamController = t8, t8._queue = void 0, t8._queueTotalSize = void 0, ce(t8), t8._abortReason = void 0, t8._abortController = function() {
              if (Ue)
                return new AbortController();
            }(), t8._started = false, t8._strategySizeAlgorithm = l7, t8._strategyHWM = i7, t8._writeAlgorithm = o8, t8._closeAlgorithm = n8, t8._abortAlgorithm = a8;
            const s7 = bt(t8);
            nt(e8, s7);
            const u6 = r8();
            b5(c5(u6), () => (t8._started = true, dt(t8), null), (r9) => (t8._started = true, Ze(e8, r9), null));
          }(e7, n7, a7, i6, l6, s6, r7, o7);
        }(this, o6, $e(r6, 1), a6);
      }
      get locked() {
        if (!Ge(this))
          throw _t("locked");
        return Xe(this);
      }
      abort(e6) {
        return Ge(this) ? Xe(this) ? d5(new TypeError("Cannot abort a stream that already has a writer")) : Je(this, e6) : d5(_t("abort"));
      }
      close() {
        return Ge(this) ? Xe(this) ? d5(new TypeError("Cannot close a stream that already has a writer")) : rt(this) ? d5(new TypeError("Cannot close an already-closing stream")) : Ke(this) : d5(_t("close"));
      }
      getWriter() {
        if (!Ge(this))
          throw _t("getWriter");
        return new WritableStreamDefaultWriter(this);
      }
    };
    Object.defineProperties(WritableStream2.prototype, { abort: { enumerable: true }, close: { enumerable: true }, getWriter: { enumerable: true }, locked: { enumerable: true } }), n5(WritableStream2.prototype.abort, "abort"), n5(WritableStream2.prototype.close, "close"), n5(WritableStream2.prototype.getWriter, "getWriter"), "symbol" == typeof e5.toStringTag && Object.defineProperty(WritableStream2.prototype, e5.toStringTag, { value: "WritableStream", configurable: true });
    WritableStreamDefaultWriter = class {
      constructor(e6) {
        if ($(e6, 1, "WritableStreamDefaultWriter"), function(e7, t7) {
          if (!Ge(e7))
            throw new TypeError(`${t7} is not a WritableStream.`);
        }(e6, "First parameter"), Xe(e6))
          throw new TypeError("This stream has already been locked for exclusive writing by another writer");
        this._ownerWritableStream = e6, e6._writer = this;
        const t6 = e6._state;
        if ("writable" === t6)
          !rt(e6) && e6._backpressure ? Rt(this) : qt(this), gt(this);
        else if ("erroring" === t6)
          Tt(this, e6._storedError), gt(this);
        else if ("closed" === t6)
          qt(this), gt(r6 = this), vt(r6);
        else {
          const t7 = e6._storedError;
          Tt(this, t7), wt(this, t7);
        }
        var r6;
      }
      get closed() {
        return at(this) ? this._closedPromise : d5(mt("closed"));
      }
      get desiredSize() {
        if (!at(this))
          throw mt("desiredSize");
        if (void 0 === this._ownerWritableStream)
          throw yt("desiredSize");
        return function(e6) {
          const t6 = e6._ownerWritableStream, r6 = t6._state;
          if ("errored" === r6 || "erroring" === r6)
            return null;
          if ("closed" === r6)
            return 0;
          return ct(t6._writableStreamController);
        }(this);
      }
      get ready() {
        return at(this) ? this._readyPromise : d5(mt("ready"));
      }
      abort(e6) {
        return at(this) ? void 0 === this._ownerWritableStream ? d5(yt("abort")) : function(e7, t6) {
          return Je(e7._ownerWritableStream, t6);
        }(this, e6) : d5(mt("abort"));
      }
      close() {
        if (!at(this))
          return d5(mt("close"));
        const e6 = this._ownerWritableStream;
        return void 0 === e6 ? d5(yt("close")) : rt(e6) ? d5(new TypeError("Cannot close an already-closing stream")) : Ke(this._ownerWritableStream);
      }
      releaseLock() {
        if (!at(this))
          throw mt("releaseLock");
        void 0 !== this._ownerWritableStream && function(e6) {
          const t6 = e6._ownerWritableStream, r6 = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
          it(e6, r6), function(e7, t7) {
            "pending" === e7._closedPromiseState ? St(e7, t7) : function(e8, t8) {
              wt(e8, t8);
            }(e7, t7);
          }(e6, r6), t6._writer = void 0, e6._ownerWritableStream = void 0;
        }(this);
      }
      write(e6) {
        return at(this) ? void 0 === this._ownerWritableStream ? d5(yt("write to")) : function(e7, t6) {
          const r6 = e7._ownerWritableStream, o6 = r6._writableStreamController, n6 = function(e8, t7) {
            try {
              return e8._strategySizeAlgorithm(t7);
            } catch (t8) {
              return ft(e8, t8), 1;
            }
          }(o6, t6);
          if (r6 !== e7._ownerWritableStream)
            return d5(yt("write to"));
          const a6 = r6._state;
          if ("errored" === a6)
            return d5(r6._storedError);
          if (rt(r6) || "closed" === a6)
            return d5(new TypeError("The stream is closing or closed and cannot be written to"));
          if ("erroring" === a6)
            return d5(r6._storedError);
          const i6 = function(e8) {
            return u5((t7, r7) => {
              const o7 = { _resolve: t7, _reject: r7 };
              e8._writeRequests.push(o7);
            });
          }(r6);
          return function(e8, t7, r7) {
            try {
              ue(e8, t7, r7);
            } catch (t8) {
              return void ft(e8, t8);
            }
            const o7 = e8._controlledWritableStream;
            if (!rt(o7) && "writable" === o7._state) {
              nt(o7, bt(e8));
            }
            dt(e8);
          }(o6, t6, n6), i6;
        }(this, e6) : d5(mt("write"));
      }
    };
    Object.defineProperties(WritableStreamDefaultWriter.prototype, { abort: { enumerable: true }, close: { enumerable: true }, releaseLock: { enumerable: true }, write: { enumerable: true }, closed: { enumerable: true }, desiredSize: { enumerable: true }, ready: { enumerable: true } }), n5(WritableStreamDefaultWriter.prototype.abort, "abort"), n5(WritableStreamDefaultWriter.prototype.close, "close"), n5(WritableStreamDefaultWriter.prototype.releaseLock, "releaseLock"), n5(WritableStreamDefaultWriter.prototype.write, "write"), "symbol" == typeof e5.toStringTag && Object.defineProperty(WritableStreamDefaultWriter.prototype, e5.toStringTag, { value: "WritableStreamDefaultWriter", configurable: true });
    lt = {};
    WritableStreamDefaultController = class {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get abortReason() {
        if (!st(this))
          throw pt("abortReason");
        return this._abortReason;
      }
      get signal() {
        if (!st(this))
          throw pt("signal");
        if (void 0 === this._abortController)
          throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
        return this._abortController.signal;
      }
      error(e6) {
        if (!st(this))
          throw pt("error");
        "writable" === this._controlledWritableStream._state && ht(this, e6);
      }
      [v6](e6) {
        const t6 = this._abortAlgorithm(e6);
        return ut(this), t6;
      }
      [R]() {
        ce(this);
      }
    };
    Object.defineProperties(WritableStreamDefaultController.prototype, { abortReason: { enumerable: true }, signal: { enumerable: true }, error: { enumerable: true } }), "symbol" == typeof e5.toStringTag && Object.defineProperty(WritableStreamDefaultController.prototype, e5.toStringTag, { value: "WritableStreamDefaultController", configurable: true });
    Pt = "undefined" != typeof DOMException ? DOMException : void 0;
    Wt = function(e6) {
      if ("function" != typeof e6 && "object" != typeof e6)
        return false;
      try {
        return new e6(), true;
      } catch (e7) {
        return false;
      }
    }(Pt) ? Pt : function() {
      const e6 = function(e7, t6) {
        this.message = e7 || "", this.name = t6 || "Error", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
      };
      return e6.prototype = Object.create(Error.prototype), Object.defineProperty(e6.prototype, "constructor", { value: e6, writable: true, configurable: true }), e6;
    }();
    ReadableStreamDefaultController = class {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get desiredSize() {
        if (!Bt(this))
          throw Dt("desiredSize");
        return Lt(this);
      }
      close() {
        if (!Bt(this))
          throw Dt("close");
        if (!Ft(this))
          throw new TypeError("The stream is not in a state that permits close");
        !function(e6) {
          if (!Ft(e6))
            return;
          const t6 = e6._controlledReadableStream;
          e6._closeRequested = true, 0 === e6._queue.length && (jt(e6), Xt(t6));
        }(this);
      }
      enqueue(e6) {
        if (!Bt(this))
          throw Dt("enqueue");
        if (!Ft(this))
          throw new TypeError("The stream is not in a state that permits enqueue");
        return function(e7, t6) {
          if (!Ft(e7))
            return;
          const r6 = e7._controlledReadableStream;
          if (Ut(r6) && X(r6) > 0)
            G2(r6, t6, false);
          else {
            let r7;
            try {
              r7 = e7._strategySizeAlgorithm(t6);
            } catch (t7) {
              throw zt(e7, t7), t7;
            }
            try {
              ue(e7, t6, r7);
            } catch (t7) {
              throw zt(e7, t7), t7;
            }
          }
          At(e7);
        }(this, e6);
      }
      error(e6) {
        if (!Bt(this))
          throw Dt("error");
        zt(this, e6);
      }
      [T](e6) {
        ce(this);
        const t6 = this._cancelAlgorithm(e6);
        return jt(this), t6;
      }
      [q5](e6) {
        const t6 = this._controlledReadableStream;
        if (this._queue.length > 0) {
          const r6 = se(this);
          this._closeRequested && 0 === this._queue.length ? (jt(this), Xt(t6)) : At(this), e6._chunkSteps(r6);
        } else
          U(t6, e6), At(this);
      }
      [C2]() {
      }
    };
    Object.defineProperties(ReadableStreamDefaultController.prototype, { close: { enumerable: true }, enqueue: { enumerable: true }, error: { enumerable: true }, desiredSize: { enumerable: true } }), n5(ReadableStreamDefaultController.prototype.close, "close"), n5(ReadableStreamDefaultController.prototype.enqueue, "enqueue"), n5(ReadableStreamDefaultController.prototype.error, "error"), "symbol" == typeof e5.toStringTag && Object.defineProperty(ReadableStreamDefaultController.prototype, e5.toStringTag, { value: "ReadableStreamDefaultController", configurable: true });
    ReadableStream3 = class {
      constructor(e6 = {}, t6 = {}) {
        void 0 === e6 ? e6 = null : D2(e6, "First parameter");
        const r6 = Ye(t6, "Second parameter"), o6 = function(e7, t7) {
          F2(e7, t7);
          const r7 = e7, o7 = null == r7 ? void 0 : r7.autoAllocateChunkSize, n7 = null == r7 ? void 0 : r7.cancel, a6 = null == r7 ? void 0 : r7.pull, i6 = null == r7 ? void 0 : r7.start, l6 = null == r7 ? void 0 : r7.type;
          return { autoAllocateChunkSize: void 0 === o7 ? void 0 : N(o7, `${t7} has member 'autoAllocateChunkSize' that`), cancel: void 0 === n7 ? void 0 : $t(n7, r7, `${t7} has member 'cancel' that`), pull: void 0 === a6 ? void 0 : Mt(a6, r7, `${t7} has member 'pull' that`), start: void 0 === i6 ? void 0 : Yt(i6, r7, `${t7} has member 'start' that`), type: void 0 === l6 ? void 0 : Qt(l6, `${t7} has member 'type' that`) };
        }(e6, "First parameter");
        var n6;
        if ((n6 = this)._state = "readable", n6._reader = void 0, n6._storedError = void 0, n6._disturbed = false, "bytes" === o6.type) {
          if (void 0 !== r6.size)
            throw new RangeError("The strategy for a byte stream cannot have a size function");
          Oe(this, o6, $e(r6, 0));
        } else {
          const e7 = Me(r6);
          It(this, o6, $e(r6, 1), e7);
        }
      }
      get locked() {
        if (!Vt(this))
          throw Kt("locked");
        return Ut(this);
      }
      cancel(e6) {
        return Vt(this) ? Ut(this) ? d5(new TypeError("Cannot cancel a stream that already has a reader")) : Gt(this, e6) : d5(Kt("cancel"));
      }
      getReader(e6) {
        if (!Vt(this))
          throw Kt("getReader");
        return void 0 === function(e7, t6) {
          F2(e7, t6);
          const r6 = null == e7 ? void 0 : e7.mode;
          return { mode: void 0 === r6 ? void 0 : Nt(r6, `${t6} has member 'mode' that`) };
        }(e6, "First parameter").mode ? new ReadableStreamDefaultReader(this) : function(e7) {
          return new ReadableStreamBYOBReader(e7);
        }(this);
      }
      pipeThrough(e6, t6 = {}) {
        if (!H2(this))
          throw Kt("pipeThrough");
        $(e6, 1, "pipeThrough");
        const r6 = xt(e6, "First parameter"), o6 = Ht(t6, "Second parameter");
        if (this.locked)
          throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
        if (r6.writable.locked)
          throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
        return m5(kt(this, r6.writable, o6.preventClose, o6.preventAbort, o6.preventCancel, o6.signal)), r6.readable;
      }
      pipeTo(e6, t6 = {}) {
        if (!H2(this))
          return d5(Kt("pipeTo"));
        if (void 0 === e6)
          return d5("Parameter 1 is required in 'pipeTo'.");
        if (!x4(e6))
          return d5(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
        let r6;
        try {
          r6 = Ht(t6, "Second parameter");
        } catch (e7) {
          return d5(e7);
        }
        return this.locked ? d5(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")) : e6.locked ? d5(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")) : kt(this, e6, r6.preventClose, r6.preventAbort, r6.preventCancel, r6.signal);
      }
      tee() {
        if (!H2(this))
          throw Kt("tee");
        if (this.locked)
          throw new TypeError("Cannot tee a stream that already has a reader");
        return Ot(this);
      }
      values(e6) {
        if (!H2(this))
          throw Kt("values");
        return function(e7, t6) {
          const r6 = e7.getReader(), o6 = new te(r6, t6), n6 = Object.create(re);
          return n6._asyncIteratorImpl = o6, n6;
        }(this, function(e7, t6) {
          F2(e7, t6);
          const r6 = null == e7 ? void 0 : e7.preventCancel;
          return { preventCancel: Boolean(r6) };
        }(e6, "First parameter").preventCancel);
      }
    };
    Object.defineProperties(ReadableStream3.prototype, { cancel: { enumerable: true }, getReader: { enumerable: true }, pipeThrough: { enumerable: true }, pipeTo: { enumerable: true }, tee: { enumerable: true }, values: { enumerable: true }, locked: { enumerable: true } }), n5(ReadableStream3.prototype.cancel, "cancel"), n5(ReadableStream3.prototype.getReader, "getReader"), n5(ReadableStream3.prototype.pipeThrough, "pipeThrough"), n5(ReadableStream3.prototype.pipeTo, "pipeTo"), n5(ReadableStream3.prototype.tee, "tee"), n5(ReadableStream3.prototype.values, "values"), "symbol" == typeof e5.toStringTag && Object.defineProperty(ReadableStream3.prototype, e5.toStringTag, { value: "ReadableStream", configurable: true }), "symbol" == typeof e5.asyncIterator && Object.defineProperty(ReadableStream3.prototype, e5.asyncIterator, { value: ReadableStream3.prototype.values, writable: true, configurable: true });
    er = (e6) => e6.byteLength;
    n5(er, "size");
    ByteLengthQueuingStrategy = class {
      constructor(e6) {
        $(e6, 1, "ByteLengthQueuingStrategy"), e6 = Zt(e6, "First parameter"), this._byteLengthQueuingStrategyHighWaterMark = e6.highWaterMark;
      }
      get highWaterMark() {
        if (!rr(this))
          throw tr("highWaterMark");
        return this._byteLengthQueuingStrategyHighWaterMark;
      }
      get size() {
        if (!rr(this))
          throw tr("size");
        return er;
      }
    };
    Object.defineProperties(ByteLengthQueuingStrategy.prototype, { highWaterMark: { enumerable: true }, size: { enumerable: true } }), "symbol" == typeof e5.toStringTag && Object.defineProperty(ByteLengthQueuingStrategy.prototype, e5.toStringTag, { value: "ByteLengthQueuingStrategy", configurable: true });
    or = () => 1;
    n5(or, "size");
    CountQueuingStrategy = class {
      constructor(e6) {
        $(e6, 1, "CountQueuingStrategy"), e6 = Zt(e6, "First parameter"), this._countQueuingStrategyHighWaterMark = e6.highWaterMark;
      }
      get highWaterMark() {
        if (!ar(this))
          throw nr("highWaterMark");
        return this._countQueuingStrategyHighWaterMark;
      }
      get size() {
        if (!ar(this))
          throw nr("size");
        return or;
      }
    };
    Object.defineProperties(CountQueuingStrategy.prototype, { highWaterMark: { enumerable: true }, size: { enumerable: true } }), "symbol" == typeof e5.toStringTag && Object.defineProperty(CountQueuingStrategy.prototype, e5.toStringTag, { value: "CountQueuingStrategy", configurable: true });
    TransformStream = class {
      constructor(e6 = {}, t6 = {}, r6 = {}) {
        void 0 === e6 && (e6 = null);
        const o6 = Ye(t6, "Second parameter"), n6 = Ye(r6, "Third parameter"), a6 = function(e7, t7) {
          F2(e7, t7);
          const r7 = null == e7 ? void 0 : e7.flush, o7 = null == e7 ? void 0 : e7.readableType, n7 = null == e7 ? void 0 : e7.start, a7 = null == e7 ? void 0 : e7.transform, i7 = null == e7 ? void 0 : e7.writableType;
          return { flush: void 0 === r7 ? void 0 : ir(r7, e7, `${t7} has member 'flush' that`), readableType: o7, start: void 0 === n7 ? void 0 : lr(n7, e7, `${t7} has member 'start' that`), transform: void 0 === a7 ? void 0 : sr(a7, e7, `${t7} has member 'transform' that`), writableType: i7 };
        }(e6, "First parameter");
        if (void 0 !== a6.readableType)
          throw new RangeError("Invalid readableType specified");
        if (void 0 !== a6.writableType)
          throw new RangeError("Invalid writableType specified");
        const i6 = $e(n6, 0), l6 = Me(n6), s6 = $e(o6, 1), f6 = Me(o6);
        let b6;
        !function(e7, t7, r7, o7, n7, a7) {
          function i7() {
            return t7;
          }
          function l7(t8) {
            return function(e8, t9) {
              const r8 = e8._transformStreamController;
              if (e8._backpressure) {
                return p5(e8._backpressureChangePromise, () => {
                  if ("erroring" === (Ge(e8._writable) ? e8._writable._state : e8._writableState))
                    throw Ge(e8._writable) ? e8._writable._storedError : e8._writableStoredError;
                  return pr(r8, t9);
                });
              }
              return pr(r8, t9);
            }(e7, t8);
          }
          function s7(t8) {
            return function(e8, t9) {
              return cr(e8, t9), c5(void 0);
            }(e7, t8);
          }
          function u6() {
            return function(e8) {
              const t8 = e8._transformStreamController, r8 = t8._flushAlgorithm();
              return hr(t8), p5(r8, () => {
                if ("errored" === e8._readableState)
                  throw e8._readableStoredError;
                gr(e8) && wr(e8);
              }, (t9) => {
                throw cr(e8, t9), e8._readableStoredError;
              });
            }(e7);
          }
          function d6() {
            return function(e8) {
              return fr(e8, false), e8._backpressureChangePromise;
            }(e7);
          }
          function f7(t8) {
            return dr(e7, t8), c5(void 0);
          }
          e7._writableState = "writable", e7._writableStoredError = void 0, e7._writableHasInFlightOperation = false, e7._writableStarted = false, e7._writable = function(e8, t8, r8, o8, n8, a8, i8) {
            return new WritableStream2({ start(r9) {
              e8._writableController = r9;
              try {
                const t9 = r9.signal;
                void 0 !== t9 && t9.addEventListener("abort", () => {
                  "writable" === e8._writableState && (e8._writableState = "erroring", t9.reason && (e8._writableStoredError = t9.reason));
                });
              } catch (e9) {
              }
              return p5(t8(), () => (e8._writableStarted = true, Cr(e8), null), (t9) => {
                throw e8._writableStarted = true, Rr(e8, t9), t9;
              });
            }, write: (t9) => (function(e9) {
              e9._writableHasInFlightOperation = true;
            }(e8), p5(r8(t9), () => (function(e9) {
              e9._writableHasInFlightOperation = false;
            }(e8), Cr(e8), null), (t10) => {
              throw function(e9, t11) {
                e9._writableHasInFlightOperation = false, Rr(e9, t11);
              }(e8, t10), t10;
            })), close: () => (function(e9) {
              e9._writableHasInFlightOperation = true;
            }(e8), p5(o8(), () => (function(e9) {
              e9._writableHasInFlightOperation = false;
              "erroring" === e9._writableState && (e9._writableStoredError = void 0);
              e9._writableState = "closed";
            }(e8), null), (t9) => {
              throw function(e9, t10) {
                e9._writableHasInFlightOperation = false, e9._writableState, Rr(e9, t10);
              }(e8, t9), t9;
            })), abort: (t9) => (e8._writableState = "errored", e8._writableStoredError = t9, n8(t9)) }, { highWaterMark: a8, size: i8 });
          }(e7, i7, l7, u6, s7, r7, o7), e7._readableState = "readable", e7._readableStoredError = void 0, e7._readableCloseRequested = false, e7._readablePulling = false, e7._readable = function(e8, t8, r8, o8, n8, a8) {
            return new ReadableStream3({ start: (r9) => (e8._readableController = r9, t8().catch((t9) => {
              Sr(e8, t9);
            })), pull: () => (e8._readablePulling = true, r8().catch((t9) => {
              Sr(e8, t9);
            })), cancel: (t9) => (e8._readableState = "closed", o8(t9)) }, { highWaterMark: n8, size: a8 });
          }(e7, i7, d6, f7, n7, a7), e7._backpressure = void 0, e7._backpressureChangePromise = void 0, e7._backpressureChangePromise_resolve = void 0, fr(e7, true), e7._transformStreamController = void 0;
        }(this, u5((e7) => {
          b6 = e7;
        }), s6, f6, i6, l6), function(e7, t7) {
          const r7 = Object.create(TransformStreamDefaultController.prototype);
          let o7, n7;
          o7 = void 0 !== t7.transform ? (e8) => t7.transform(e8, r7) : (e8) => {
            try {
              return _r(r7, e8), c5(void 0);
            } catch (e9) {
              return d5(e9);
            }
          };
          n7 = void 0 !== t7.flush ? () => t7.flush(r7) : () => c5(void 0);
          !function(e8, t8, r8, o8) {
            t8._controlledTransformStream = e8, e8._transformStreamController = t8, t8._transformAlgorithm = r8, t8._flushAlgorithm = o8;
          }(e7, r7, o7, n7);
        }(this, a6), void 0 !== a6.start ? b6(a6.start(this._transformStreamController)) : b6(void 0);
      }
      get readable() {
        if (!ur(this))
          throw yr("readable");
        return this._readable;
      }
      get writable() {
        if (!ur(this))
          throw yr("writable");
        return this._writable;
      }
    };
    Object.defineProperties(TransformStream.prototype, { readable: { enumerable: true }, writable: { enumerable: true } }), "symbol" == typeof e5.toStringTag && Object.defineProperty(TransformStream.prototype, e5.toStringTag, { value: "TransformStream", configurable: true });
    TransformStreamDefaultController = class {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get desiredSize() {
        if (!br(this))
          throw mr("desiredSize");
        return vr(this._controlledTransformStream);
      }
      enqueue(e6) {
        if (!br(this))
          throw mr("enqueue");
        _r(this, e6);
      }
      error(e6) {
        if (!br(this))
          throw mr("error");
        var t6;
        t6 = e6, cr(this._controlledTransformStream, t6);
      }
      terminate() {
        if (!br(this))
          throw mr("terminate");
        !function(e6) {
          const t6 = e6._controlledTransformStream;
          gr(t6) && wr(t6);
          const r6 = new TypeError("TransformStream terminated");
          dr(t6, r6);
        }(this);
      }
    };
    Object.defineProperties(TransformStreamDefaultController.prototype, { enqueue: { enumerable: true }, error: { enumerable: true }, terminate: { enumerable: true }, desiredSize: { enumerable: true } }), n5(TransformStreamDefaultController.prototype.enqueue, "enqueue"), n5(TransformStreamDefaultController.prototype.error, "error"), n5(TransformStreamDefaultController.prototype.terminate, "terminate"), "symbol" == typeof e5.toStringTag && Object.defineProperty(TransformStreamDefaultController.prototype, e5.toStringTag, { value: "TransformStreamDefaultController", configurable: true });
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isFunction.js
var isFunction2;
var init_isFunction = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isFunction.js"() {
    "use strict";
    isFunction2 = (value) => typeof value === "function";
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/blobHelpers.js
async function* clonePart(part) {
  const end = part.byteOffset + part.byteLength;
  let position = part.byteOffset;
  while (position !== end) {
    const size = Math.min(end - position, CHUNK_SIZE);
    const chunk = part.buffer.slice(position, position + size);
    position += chunk.byteLength;
    yield new Uint8Array(chunk);
  }
}
async function* consumeNodeBlob(blob) {
  let position = 0;
  while (position !== blob.size) {
    const chunk = blob.slice(position, Math.min(blob.size, position + CHUNK_SIZE));
    const buffer = await chunk.arrayBuffer();
    position += buffer.byteLength;
    yield new Uint8Array(buffer);
  }
}
async function* consumeBlobParts(parts, clone2 = false) {
  for (const part of parts) {
    if (ArrayBuffer.isView(part)) {
      if (clone2) {
        yield* clonePart(part);
      } else {
        yield part;
      }
    } else if (isFunction2(part.stream)) {
      yield* part.stream();
    } else {
      yield* consumeNodeBlob(part);
    }
  }
}
function* sliceBlob(blobParts, blobSize, start = 0, end) {
  end !== null && end !== void 0 ? end : end = blobSize;
  let relativeStart = start < 0 ? Math.max(blobSize + start, 0) : Math.min(start, blobSize);
  let relativeEnd = end < 0 ? Math.max(blobSize + end, 0) : Math.min(end, blobSize);
  const span = Math.max(relativeEnd - relativeStart, 0);
  let added = 0;
  for (const part of blobParts) {
    if (added >= span) {
      break;
    }
    const partSize = ArrayBuffer.isView(part) ? part.byteLength : part.size;
    if (relativeStart && partSize <= relativeStart) {
      relativeStart -= partSize;
      relativeEnd -= partSize;
    } else {
      let chunk;
      if (ArrayBuffer.isView(part)) {
        chunk = part.subarray(relativeStart, Math.min(partSize, relativeEnd));
        added += chunk.byteLength;
      } else {
        chunk = part.slice(relativeStart, Math.min(partSize, relativeEnd));
        added += chunk.size;
      }
      relativeEnd -= partSize;
      relativeStart = 0;
      yield chunk;
    }
  }
}
var CHUNK_SIZE;
var init_blobHelpers = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/blobHelpers.js"() {
    "use strict";
    init_isFunction();
    CHUNK_SIZE = 65536;
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/Blob.js
var __classPrivateFieldGet2, __classPrivateFieldSet2, _Blob_parts, _Blob_type, _Blob_size, Blob4;
var init_Blob = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/Blob.js"() {
    "use strict";
    init_ponyfill();
    init_isFunction();
    init_blobHelpers();
    __classPrivateFieldGet2 = function(receiver, state, kind2, f6) {
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f6 : kind2 === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
    };
    __classPrivateFieldSet2 = function(receiver, state, value, kind2, f6) {
      if (kind2 === "m")
        throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f6.call(receiver, value) : f6 ? f6.value = value : state.set(receiver, value), value;
    };
    Blob4 = class _Blob {
      constructor(blobParts = [], options = {}) {
        _Blob_parts.set(this, []);
        _Blob_type.set(this, "");
        _Blob_size.set(this, 0);
        options !== null && options !== void 0 ? options : options = {};
        if (typeof blobParts !== "object" || blobParts === null) {
          throw new TypeError("Failed to construct 'Blob': The provided value cannot be converted to a sequence.");
        }
        if (!isFunction2(blobParts[Symbol.iterator])) {
          throw new TypeError("Failed to construct 'Blob': The object must have a callable @@iterator property.");
        }
        if (typeof options !== "object" && !isFunction2(options)) {
          throw new TypeError("Failed to construct 'Blob': parameter 2 cannot convert to dictionary.");
        }
        const encoder = new TextEncoder();
        for (const raw of blobParts) {
          let part;
          if (ArrayBuffer.isView(raw)) {
            part = new Uint8Array(raw.buffer.slice(raw.byteOffset, raw.byteOffset + raw.byteLength));
          } else if (raw instanceof ArrayBuffer) {
            part = new Uint8Array(raw.slice(0));
          } else if (raw instanceof _Blob) {
            part = raw;
          } else {
            part = encoder.encode(String(raw));
          }
          __classPrivateFieldSet2(this, _Blob_size, __classPrivateFieldGet2(this, _Blob_size, "f") + (ArrayBuffer.isView(part) ? part.byteLength : part.size), "f");
          __classPrivateFieldGet2(this, _Blob_parts, "f").push(part);
        }
        const type = options.type === void 0 ? "" : String(options.type);
        __classPrivateFieldSet2(this, _Blob_type, /^[\x20-\x7E]*$/.test(type) ? type : "", "f");
      }
      static [(_Blob_parts = /* @__PURE__ */ new WeakMap(), _Blob_type = /* @__PURE__ */ new WeakMap(), _Blob_size = /* @__PURE__ */ new WeakMap(), Symbol.hasInstance)](value) {
        return Boolean(value && typeof value === "object" && isFunction2(value.constructor) && (isFunction2(value.stream) || isFunction2(value.arrayBuffer)) && /^(Blob|File)$/.test(value[Symbol.toStringTag]));
      }
      get type() {
        return __classPrivateFieldGet2(this, _Blob_type, "f");
      }
      get size() {
        return __classPrivateFieldGet2(this, _Blob_size, "f");
      }
      slice(start, end, contentType) {
        return new _Blob(sliceBlob(__classPrivateFieldGet2(this, _Blob_parts, "f"), this.size, start, end), {
          type: contentType
        });
      }
      async text() {
        const decoder = new TextDecoder();
        let result = "";
        for await (const chunk of consumeBlobParts(__classPrivateFieldGet2(this, _Blob_parts, "f"))) {
          result += decoder.decode(chunk, { stream: true });
        }
        result += decoder.decode();
        return result;
      }
      async arrayBuffer() {
        const view = new Uint8Array(this.size);
        let offset = 0;
        for await (const chunk of consumeBlobParts(__classPrivateFieldGet2(this, _Blob_parts, "f"))) {
          view.set(chunk, offset);
          offset += chunk.length;
        }
        return view.buffer;
      }
      stream() {
        const iterator = consumeBlobParts(__classPrivateFieldGet2(this, _Blob_parts, "f"), true);
        return new ReadableStream3({
          async pull(controller) {
            const { value, done } = await iterator.next();
            if (done) {
              return queueMicrotask(() => controller.close());
            }
            controller.enqueue(value);
          },
          async cancel() {
            await iterator.return();
          }
        });
      }
      get [Symbol.toStringTag]() {
        return "Blob";
      }
    };
    Object.defineProperties(Blob4.prototype, {
      type: { enumerable: true },
      size: { enumerable: true },
      slice: { enumerable: true },
      stream: { enumerable: true },
      text: { enumerable: true },
      arrayBuffer: { enumerable: true }
    });
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/File.js
var __classPrivateFieldSet3, __classPrivateFieldGet3, _File_name, _File_lastModified, File2;
var init_File = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/File.js"() {
    "use strict";
    init_Blob();
    __classPrivateFieldSet3 = function(receiver, state, value, kind2, f6) {
      if (kind2 === "m")
        throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f6.call(receiver, value) : f6 ? f6.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet3 = function(receiver, state, kind2, f6) {
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f6 : kind2 === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
    };
    File2 = class extends Blob4 {
      constructor(fileBits, name, options = {}) {
        super(fileBits, options);
        _File_name.set(this, void 0);
        _File_lastModified.set(this, 0);
        if (arguments.length < 2) {
          throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);
        }
        __classPrivateFieldSet3(this, _File_name, String(name), "f");
        const lastModified = options.lastModified === void 0 ? Date.now() : Number(options.lastModified);
        if (!Number.isNaN(lastModified)) {
          __classPrivateFieldSet3(this, _File_lastModified, lastModified, "f");
        }
      }
      static [(_File_name = /* @__PURE__ */ new WeakMap(), _File_lastModified = /* @__PURE__ */ new WeakMap(), Symbol.hasInstance)](value) {
        return value instanceof Blob4 && value[Symbol.toStringTag] === "File" && typeof value.name === "string";
      }
      get name() {
        return __classPrivateFieldGet3(this, _File_name, "f");
      }
      get lastModified() {
        return __classPrivateFieldGet3(this, _File_lastModified, "f");
      }
      get webkitRelativePath() {
        return "";
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
    };
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isFile.js
var isFile;
var init_isFile = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isFile.js"() {
    "use strict";
    init_File();
    isFile = (value) => value instanceof File2;
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isBlob.js
var isBlob2;
var init_isBlob = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isBlob.js"() {
    "use strict";
    init_Blob();
    isBlob2 = (value) => value instanceof Blob4;
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/deprecateConstructorEntries.js
var import_util5, deprecateConstructorEntries;
var init_deprecateConstructorEntries = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/deprecateConstructorEntries.js"() {
    "use strict";
    import_util5 = require("util");
    deprecateConstructorEntries = (0, import_util5.deprecate)(() => {
    }, 'Constructor "entries" argument is not spec-compliant and will be removed in next major release.');
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/FormData.js
var import_util6, __classPrivateFieldGet4, _FormData_instances, _FormData_entries, _FormData_setEntry, FormData3;
var init_FormData = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/FormData.js"() {
    "use strict";
    import_util6 = require("util");
    init_File();
    init_isFile();
    init_isBlob();
    init_isFunction();
    init_deprecateConstructorEntries();
    __classPrivateFieldGet4 = function(receiver, state, kind2, f6) {
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f6 : kind2 === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
    };
    FormData3 = class {
      constructor(entries) {
        _FormData_instances.add(this);
        _FormData_entries.set(this, /* @__PURE__ */ new Map());
        if (entries) {
          deprecateConstructorEntries();
          entries.forEach(({ name, value, fileName }) => this.append(name, value, fileName));
        }
      }
      static [(_FormData_entries = /* @__PURE__ */ new WeakMap(), _FormData_instances = /* @__PURE__ */ new WeakSet(), Symbol.hasInstance)](value) {
        return Boolean(value && isFunction2(value.constructor) && value[Symbol.toStringTag] === "FormData" && isFunction2(value.append) && isFunction2(value.set) && isFunction2(value.get) && isFunction2(value.getAll) && isFunction2(value.has) && isFunction2(value.delete) && isFunction2(value.entries) && isFunction2(value.values) && isFunction2(value.keys) && isFunction2(value[Symbol.iterator]) && isFunction2(value.forEach));
      }
      append(name, value, fileName) {
        __classPrivateFieldGet4(this, _FormData_instances, "m", _FormData_setEntry).call(this, {
          name,
          fileName,
          append: true,
          rawValue: value,
          argsLength: arguments.length
        });
      }
      set(name, value, fileName) {
        __classPrivateFieldGet4(this, _FormData_instances, "m", _FormData_setEntry).call(this, {
          name,
          fileName,
          append: false,
          rawValue: value,
          argsLength: arguments.length
        });
      }
      get(name) {
        const field = __classPrivateFieldGet4(this, _FormData_entries, "f").get(String(name));
        if (!field) {
          return null;
        }
        return field[0];
      }
      getAll(name) {
        const field = __classPrivateFieldGet4(this, _FormData_entries, "f").get(String(name));
        if (!field) {
          return [];
        }
        return field.slice();
      }
      has(name) {
        return __classPrivateFieldGet4(this, _FormData_entries, "f").has(String(name));
      }
      delete(name) {
        __classPrivateFieldGet4(this, _FormData_entries, "f").delete(String(name));
      }
      *keys() {
        for (const key of __classPrivateFieldGet4(this, _FormData_entries, "f").keys()) {
          yield key;
        }
      }
      *entries() {
        for (const name of this.keys()) {
          const values = this.getAll(name);
          for (const value of values) {
            yield [name, value];
          }
        }
      }
      *values() {
        for (const [, value] of this) {
          yield value;
        }
      }
      [(_FormData_setEntry = function _FormData_setEntry2({ name, rawValue, append, fileName, argsLength }) {
        const methodName = append ? "append" : "set";
        if (argsLength < 2) {
          throw new TypeError(`Failed to execute '${methodName}' on 'FormData': 2 arguments required, but only ${argsLength} present.`);
        }
        name = String(name);
        let value;
        if (isFile(rawValue)) {
          value = fileName === void 0 ? rawValue : new File2([rawValue], fileName, {
            type: rawValue.type,
            lastModified: rawValue.lastModified
          });
        } else if (isBlob2(rawValue)) {
          value = new File2([rawValue], fileName === void 0 ? "blob" : fileName, {
            type: rawValue.type
          });
        } else if (fileName) {
          throw new TypeError(`Failed to execute '${methodName}' on 'FormData': parameter 2 is not of type 'Blob'.`);
        } else {
          value = String(rawValue);
        }
        const values = __classPrivateFieldGet4(this, _FormData_entries, "f").get(name);
        if (!values) {
          return void __classPrivateFieldGet4(this, _FormData_entries, "f").set(name, [value]);
        }
        if (!append) {
          return void __classPrivateFieldGet4(this, _FormData_entries, "f").set(name, [value]);
        }
        values.push(value);
      }, Symbol.iterator)]() {
        return this.entries();
      }
      forEach(callback, thisArg) {
        for (const [name, value] of this) {
          callback.call(thisArg, value, name, this);
        }
      }
      get [Symbol.toStringTag]() {
        return "FormData";
      }
      [import_util6.inspect.custom]() {
        return this[Symbol.toStringTag];
      }
    };
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/index.js
var init_esm = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/index.js"() {
    "use strict";
    init_FormData();
    init_Blob();
    init_File();
  }
});

// ../../node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js"(exports2, module2) {
    "use strict";
    var s6 = 1e3;
    var m6 = s6 * 60;
    var h6 = m6 * 60;
    var d6 = h6 * 24;
    var w5 = d6 * 7;
    var y3 = d6 * 365.25;
    module2.exports = function(val2, options) {
      options = options || {};
      var type = typeof val2;
      if (type === "string" && val2.length > 0) {
        return parse2(val2);
      } else if (type === "number" && isFinite(val2)) {
        return options.long ? fmtLong(val2) : fmtShort(val2);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val2)
      );
    };
    function parse2(str2) {
      str2 = String(str2);
      if (str2.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str2
      );
      if (!match) {
        return;
      }
      var n6 = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n6 * y3;
        case "weeks":
        case "week":
        case "w":
          return n6 * w5;
        case "days":
        case "day":
        case "d":
          return n6 * d6;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n6 * h6;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n6 * m6;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n6 * s6;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n6;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d6) {
        return Math.round(ms / d6) + "d";
      }
      if (msAbs >= h6) {
        return Math.round(ms / h6) + "h";
      }
      if (msAbs >= m6) {
        return Math.round(ms / m6) + "m";
      }
      if (msAbs >= s6) {
        return Math.round(ms / s6) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d6) {
        return plural(ms, msAbs, d6, "day");
      }
      if (msAbs >= h6) {
        return plural(ms, msAbs, h6, "hour");
      }
      if (msAbs >= m6) {
        return plural(ms, msAbs, m6, "minute");
      }
      if (msAbs >= s6) {
        return plural(ms, msAbs, s6, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n6, name) {
      var isPlural = msAbs >= n6 * 1.5;
      return Math.round(ms / n6) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/.pnpm/humanize-ms@1.2.1/node_modules/humanize-ms/index.js
var require_humanize_ms = __commonJS({
  "../../node_modules/.pnpm/humanize-ms@1.2.1/node_modules/humanize-ms/index.js"(exports2, module2) {
    "use strict";
    var util = require("util");
    var ms = require_ms();
    module2.exports = function(t6) {
      if (typeof t6 === "number")
        return t6;
      var r6 = ms(t6);
      if (r6 === void 0) {
        var err = new Error(util.format("humanize-ms(%j) result undefined", t6));
        console.warn(err.stack);
      }
      return r6;
    };
  }
});

// ../../node_modules/.pnpm/agentkeepalive@4.5.0/node_modules/agentkeepalive/lib/constants.js
var require_constants2 = __commonJS({
  "../../node_modules/.pnpm/agentkeepalive@4.5.0/node_modules/agentkeepalive/lib/constants.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      // agent
      CURRENT_ID: Symbol("agentkeepalive#currentId"),
      CREATE_ID: Symbol("agentkeepalive#createId"),
      INIT_SOCKET: Symbol("agentkeepalive#initSocket"),
      CREATE_HTTPS_CONNECTION: Symbol("agentkeepalive#createHttpsConnection"),
      // socket
      SOCKET_CREATED_TIME: Symbol("agentkeepalive#socketCreatedTime"),
      SOCKET_NAME: Symbol("agentkeepalive#socketName"),
      SOCKET_REQUEST_COUNT: Symbol("agentkeepalive#socketRequestCount"),
      SOCKET_REQUEST_FINISHED_COUNT: Symbol("agentkeepalive#socketRequestFinishedCount")
    };
  }
});

// ../../node_modules/.pnpm/agentkeepalive@4.5.0/node_modules/agentkeepalive/lib/agent.js
var require_agent = __commonJS({
  "../../node_modules/.pnpm/agentkeepalive@4.5.0/node_modules/agentkeepalive/lib/agent.js"(exports2, module2) {
    "use strict";
    var OriginalAgent = require("http").Agent;
    var ms = require_humanize_ms();
    var debug2 = require("util").debuglog("agentkeepalive");
    var {
      INIT_SOCKET,
      CURRENT_ID,
      CREATE_ID,
      SOCKET_CREATED_TIME,
      SOCKET_NAME,
      SOCKET_REQUEST_COUNT,
      SOCKET_REQUEST_FINISHED_COUNT
    } = require_constants2();
    var defaultTimeoutListenerCount = 1;
    var majorVersion = parseInt(process.version.split(".", 1)[0].substring(1));
    if (majorVersion >= 11 && majorVersion <= 12) {
      defaultTimeoutListenerCount = 2;
    } else if (majorVersion >= 13) {
      defaultTimeoutListenerCount = 3;
    }
    function deprecate2(message) {
      console.log("[agentkeepalive:deprecated] %s", message);
    }
    var Agent = class extends OriginalAgent {
      constructor(options) {
        options = options || {};
        options.keepAlive = options.keepAlive !== false;
        if (options.freeSocketTimeout === void 0) {
          options.freeSocketTimeout = 4e3;
        }
        if (options.keepAliveTimeout) {
          deprecate2("options.keepAliveTimeout is deprecated, please use options.freeSocketTimeout instead");
          options.freeSocketTimeout = options.keepAliveTimeout;
          delete options.keepAliveTimeout;
        }
        if (options.freeSocketKeepAliveTimeout) {
          deprecate2("options.freeSocketKeepAliveTimeout is deprecated, please use options.freeSocketTimeout instead");
          options.freeSocketTimeout = options.freeSocketKeepAliveTimeout;
          delete options.freeSocketKeepAliveTimeout;
        }
        if (options.timeout === void 0) {
          options.timeout = Math.max(options.freeSocketTimeout * 2, 8e3);
        }
        options.timeout = ms(options.timeout);
        options.freeSocketTimeout = ms(options.freeSocketTimeout);
        options.socketActiveTTL = options.socketActiveTTL ? ms(options.socketActiveTTL) : 0;
        super(options);
        this[CURRENT_ID] = 0;
        this.createSocketCount = 0;
        this.createSocketCountLastCheck = 0;
        this.createSocketErrorCount = 0;
        this.createSocketErrorCountLastCheck = 0;
        this.closeSocketCount = 0;
        this.closeSocketCountLastCheck = 0;
        this.errorSocketCount = 0;
        this.errorSocketCountLastCheck = 0;
        this.requestCount = 0;
        this.requestCountLastCheck = 0;
        this.timeoutSocketCount = 0;
        this.timeoutSocketCountLastCheck = 0;
        this.on("free", (socket) => {
          const timeout = this.calcSocketTimeout(socket);
          if (timeout > 0 && socket.timeout !== timeout) {
            socket.setTimeout(timeout);
          }
        });
      }
      get freeSocketKeepAliveTimeout() {
        deprecate2("agent.freeSocketKeepAliveTimeout is deprecated, please use agent.options.freeSocketTimeout instead");
        return this.options.freeSocketTimeout;
      }
      get timeout() {
        deprecate2("agent.timeout is deprecated, please use agent.options.timeout instead");
        return this.options.timeout;
      }
      get socketActiveTTL() {
        deprecate2("agent.socketActiveTTL is deprecated, please use agent.options.socketActiveTTL instead");
        return this.options.socketActiveTTL;
      }
      calcSocketTimeout(socket) {
        let freeSocketTimeout = this.options.freeSocketTimeout;
        const socketActiveTTL = this.options.socketActiveTTL;
        if (socketActiveTTL) {
          const aliveTime = Date.now() - socket[SOCKET_CREATED_TIME];
          const diff = socketActiveTTL - aliveTime;
          if (diff <= 0) {
            return diff;
          }
          if (freeSocketTimeout && diff < freeSocketTimeout) {
            freeSocketTimeout = diff;
          }
        }
        if (freeSocketTimeout) {
          const customFreeSocketTimeout = socket.freeSocketTimeout || socket.freeSocketKeepAliveTimeout;
          return customFreeSocketTimeout || freeSocketTimeout;
        }
      }
      keepSocketAlive(socket) {
        const result = super.keepSocketAlive(socket);
        if (!result)
          return result;
        const customTimeout = this.calcSocketTimeout(socket);
        if (typeof customTimeout === "undefined") {
          return true;
        }
        if (customTimeout <= 0) {
          debug2(
            "%s(requests: %s, finished: %s) free but need to destroy by TTL, request count %s, diff is %s",
            socket[SOCKET_NAME],
            socket[SOCKET_REQUEST_COUNT],
            socket[SOCKET_REQUEST_FINISHED_COUNT],
            customTimeout
          );
          return false;
        }
        if (socket.timeout !== customTimeout) {
          socket.setTimeout(customTimeout);
        }
        return true;
      }
      // only call on addRequest
      reuseSocket(...args) {
        super.reuseSocket(...args);
        const socket = args[0];
        const req = args[1];
        req.reusedSocket = true;
        const agentTimeout = this.options.timeout;
        if (getSocketTimeout(socket) !== agentTimeout) {
          socket.setTimeout(agentTimeout);
          debug2("%s reset timeout to %sms", socket[SOCKET_NAME], agentTimeout);
        }
        socket[SOCKET_REQUEST_COUNT]++;
        debug2(
          "%s(requests: %s, finished: %s) reuse on addRequest, timeout %sms",
          socket[SOCKET_NAME],
          socket[SOCKET_REQUEST_COUNT],
          socket[SOCKET_REQUEST_FINISHED_COUNT],
          getSocketTimeout(socket)
        );
      }
      [CREATE_ID]() {
        const id = this[CURRENT_ID]++;
        if (this[CURRENT_ID] === Number.MAX_SAFE_INTEGER)
          this[CURRENT_ID] = 0;
        return id;
      }
      [INIT_SOCKET](socket, options) {
        if (options.timeout) {
          const timeout = getSocketTimeout(socket);
          if (!timeout) {
            socket.setTimeout(options.timeout);
          }
        }
        if (this.options.keepAlive) {
          socket.setNoDelay(true);
        }
        this.createSocketCount++;
        if (this.options.socketActiveTTL) {
          socket[SOCKET_CREATED_TIME] = Date.now();
        }
        socket[SOCKET_NAME] = `sock[${this[CREATE_ID]()}#${options._agentKey}]`.split("-----BEGIN", 1)[0];
        socket[SOCKET_REQUEST_COUNT] = 1;
        socket[SOCKET_REQUEST_FINISHED_COUNT] = 0;
        installListeners(this, socket, options);
      }
      createConnection(options, oncreate) {
        let called = false;
        const onNewCreate = (err, socket) => {
          if (called)
            return;
          called = true;
          if (err) {
            this.createSocketErrorCount++;
            return oncreate(err);
          }
          this[INIT_SOCKET](socket, options);
          oncreate(err, socket);
        };
        const newSocket = super.createConnection(options, onNewCreate);
        if (newSocket)
          onNewCreate(null, newSocket);
        return newSocket;
      }
      get statusChanged() {
        const changed = this.createSocketCount !== this.createSocketCountLastCheck || this.createSocketErrorCount !== this.createSocketErrorCountLastCheck || this.closeSocketCount !== this.closeSocketCountLastCheck || this.errorSocketCount !== this.errorSocketCountLastCheck || this.timeoutSocketCount !== this.timeoutSocketCountLastCheck || this.requestCount !== this.requestCountLastCheck;
        if (changed) {
          this.createSocketCountLastCheck = this.createSocketCount;
          this.createSocketErrorCountLastCheck = this.createSocketErrorCount;
          this.closeSocketCountLastCheck = this.closeSocketCount;
          this.errorSocketCountLastCheck = this.errorSocketCount;
          this.timeoutSocketCountLastCheck = this.timeoutSocketCount;
          this.requestCountLastCheck = this.requestCount;
        }
        return changed;
      }
      getCurrentStatus() {
        return {
          createSocketCount: this.createSocketCount,
          createSocketErrorCount: this.createSocketErrorCount,
          closeSocketCount: this.closeSocketCount,
          errorSocketCount: this.errorSocketCount,
          timeoutSocketCount: this.timeoutSocketCount,
          requestCount: this.requestCount,
          freeSockets: inspect2(this.freeSockets),
          sockets: inspect2(this.sockets),
          requests: inspect2(this.requests)
        };
      }
    };
    function getSocketTimeout(socket) {
      return socket.timeout || socket._idleTimeout;
    }
    function installListeners(agent, socket, options) {
      debug2("%s create, timeout %sms", socket[SOCKET_NAME], getSocketTimeout(socket));
      function onFree() {
        if (!socket._httpMessage && socket[SOCKET_REQUEST_COUNT] === 1)
          return;
        socket[SOCKET_REQUEST_FINISHED_COUNT]++;
        agent.requestCount++;
        debug2(
          "%s(requests: %s, finished: %s) free",
          socket[SOCKET_NAME],
          socket[SOCKET_REQUEST_COUNT],
          socket[SOCKET_REQUEST_FINISHED_COUNT]
        );
        const name = agent.getName(options);
        if (socket.writable && agent.requests[name] && agent.requests[name].length) {
          socket[SOCKET_REQUEST_COUNT]++;
          debug2(
            "%s(requests: %s, finished: %s) will be reuse on agent free event",
            socket[SOCKET_NAME],
            socket[SOCKET_REQUEST_COUNT],
            socket[SOCKET_REQUEST_FINISHED_COUNT]
          );
        }
      }
      socket.on("free", onFree);
      function onClose(isError) {
        debug2(
          "%s(requests: %s, finished: %s) close, isError: %s",
          socket[SOCKET_NAME],
          socket[SOCKET_REQUEST_COUNT],
          socket[SOCKET_REQUEST_FINISHED_COUNT],
          isError
        );
        agent.closeSocketCount++;
      }
      socket.on("close", onClose);
      function onTimeout() {
        const listenerCount = socket.listeners("timeout").length;
        const timeout = getSocketTimeout(socket);
        const req = socket._httpMessage;
        const reqTimeoutListenerCount = req && req.listeners("timeout").length || 0;
        debug2(
          "%s(requests: %s, finished: %s) timeout after %sms, listeners %s, defaultTimeoutListenerCount %s, hasHttpRequest %s, HttpRequest timeoutListenerCount %s",
          socket[SOCKET_NAME],
          socket[SOCKET_REQUEST_COUNT],
          socket[SOCKET_REQUEST_FINISHED_COUNT],
          timeout,
          listenerCount,
          defaultTimeoutListenerCount,
          !!req,
          reqTimeoutListenerCount
        );
        if (debug2.enabled) {
          debug2("timeout listeners: %s", socket.listeners("timeout").map((f6) => f6.name).join(", "));
        }
        agent.timeoutSocketCount++;
        const name = agent.getName(options);
        if (agent.freeSockets[name] && agent.freeSockets[name].indexOf(socket) !== -1) {
          socket.destroy();
          agent.removeSocket(socket, options);
          debug2("%s is free, destroy quietly", socket[SOCKET_NAME]);
        } else {
          if (reqTimeoutListenerCount === 0) {
            const error2 = new Error("Socket timeout");
            error2.code = "ERR_SOCKET_TIMEOUT";
            error2.timeout = timeout;
            socket.destroy(error2);
            agent.removeSocket(socket, options);
            debug2("%s destroy with timeout error", socket[SOCKET_NAME]);
          }
        }
      }
      socket.on("timeout", onTimeout);
      function onError(err) {
        const listenerCount = socket.listeners("error").length;
        debug2(
          "%s(requests: %s, finished: %s) error: %s, listenerCount: %s",
          socket[SOCKET_NAME],
          socket[SOCKET_REQUEST_COUNT],
          socket[SOCKET_REQUEST_FINISHED_COUNT],
          err,
          listenerCount
        );
        agent.errorSocketCount++;
        if (listenerCount === 1) {
          debug2("%s emit uncaught error event", socket[SOCKET_NAME]);
          socket.removeListener("error", onError);
          socket.emit("error", err);
        }
      }
      socket.on("error", onError);
      function onRemove() {
        debug2(
          "%s(requests: %s, finished: %s) agentRemove",
          socket[SOCKET_NAME],
          socket[SOCKET_REQUEST_COUNT],
          socket[SOCKET_REQUEST_FINISHED_COUNT]
        );
        socket.removeListener("close", onClose);
        socket.removeListener("error", onError);
        socket.removeListener("free", onFree);
        socket.removeListener("timeout", onTimeout);
        socket.removeListener("agentRemove", onRemove);
      }
      socket.on("agentRemove", onRemove);
    }
    module2.exports = Agent;
    function inspect2(obj) {
      const res = {};
      for (const key in obj) {
        res[key] = obj[key].length;
      }
      return res;
    }
  }
});

// ../../node_modules/.pnpm/agentkeepalive@4.5.0/node_modules/agentkeepalive/lib/https_agent.js
var require_https_agent = __commonJS({
  "../../node_modules/.pnpm/agentkeepalive@4.5.0/node_modules/agentkeepalive/lib/https_agent.js"(exports2, module2) {
    "use strict";
    var OriginalHttpsAgent = require("https").Agent;
    var HttpAgent = require_agent();
    var {
      INIT_SOCKET,
      CREATE_HTTPS_CONNECTION
    } = require_constants2();
    var HttpsAgent = class extends HttpAgent {
      constructor(options) {
        super(options);
        this.defaultPort = 443;
        this.protocol = "https:";
        this.maxCachedSessions = this.options.maxCachedSessions;
        if (this.maxCachedSessions === void 0) {
          this.maxCachedSessions = 100;
        }
        this._sessionCache = {
          map: {},
          list: []
        };
      }
      createConnection(options, oncreate) {
        const socket = this[CREATE_HTTPS_CONNECTION](options, oncreate);
        this[INIT_SOCKET](socket, options);
        return socket;
      }
    };
    HttpsAgent.prototype[CREATE_HTTPS_CONNECTION] = OriginalHttpsAgent.prototype.createConnection;
    [
      "getName",
      "_getSession",
      "_cacheSession",
      // https://github.com/nodejs/node/pull/4982
      "_evictSession"
    ].forEach(function(method) {
      if (typeof OriginalHttpsAgent.prototype[method] === "function") {
        HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];
      }
    });
    module2.exports = HttpsAgent;
  }
});

// ../../node_modules/.pnpm/agentkeepalive@4.5.0/node_modules/agentkeepalive/index.js
var require_agentkeepalive = __commonJS({
  "../../node_modules/.pnpm/agentkeepalive@4.5.0/node_modules/agentkeepalive/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_agent();
    module2.exports.HttpsAgent = require_https_agent();
    module2.exports.constants = require_constants2();
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/createBoundary.js
function createBoundary() {
  let size = 16;
  let res = "";
  while (size--) {
    res += alphabet[Math.random() * alphabet.length << 0];
  }
  return res;
}
var alphabet, createBoundary_default;
var init_createBoundary = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/createBoundary.js"() {
    "use strict";
    alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";
    createBoundary_default = createBoundary;
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isPlainObject.js
function isPlainObject(value) {
  if (getType(value) !== "object") {
    return false;
  }
  const pp = Object.getPrototypeOf(value);
  if (pp === null || pp === void 0) {
    return true;
  }
  const Ctor = pp.constructor && pp.constructor.toString();
  return Ctor === Object.toString();
}
var getType, isPlainObject_default;
var init_isPlainObject = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isPlainObject.js"() {
    "use strict";
    getType = (value) => Object.prototype.toString.call(value).slice(8, -1).toLowerCase();
    isPlainObject_default = isPlainObject;
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/normalizeValue.js
var normalizeValue2, normalizeValue_default;
var init_normalizeValue = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/normalizeValue.js"() {
    "use strict";
    normalizeValue2 = (value) => String(value).replace(/\r|\n/g, (match, i6, str2) => {
      if (match === "\r" && str2[i6 + 1] !== "\n" || match === "\n" && str2[i6 - 1] !== "\r") {
        return "\r\n";
      }
      return match;
    });
    normalizeValue_default = normalizeValue2;
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/escapeName.js
var escapeName, escapeName_default;
var init_escapeName = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/escapeName.js"() {
    "use strict";
    escapeName = (name) => String(name).replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/"/g, "%22");
    escapeName_default = escapeName;
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isFunction.js
var isFunction3, isFunction_default;
var init_isFunction2 = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isFunction.js"() {
    "use strict";
    isFunction3 = (value) => typeof value === "function";
    isFunction_default = isFunction3;
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isFileLike.js
var isFileLike;
var init_isFileLike = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isFileLike.js"() {
    "use strict";
    init_isFunction2();
    isFileLike = (value) => Boolean(value && typeof value === "object" && isFunction_default(value.constructor) && value[Symbol.toStringTag] === "File" && isFunction_default(value.stream) && value.name != null && value.size != null && value.lastModified != null);
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isFormData.js
var isFormData;
var init_isFormData = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/util/isFormData.js"() {
    "use strict";
    init_isFunction2();
    isFormData = (value) => Boolean(value && isFunction_default(value.constructor) && value[Symbol.toStringTag] === "FormData" && isFunction_default(value.append) && isFunction_default(value.getAll) && isFunction_default(value.entries) && isFunction_default(value[Symbol.iterator]));
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/FormDataEncoder.js
var __classPrivateFieldSet4, __classPrivateFieldGet5, _FormDataEncoder_instances, _FormDataEncoder_CRLF, _FormDataEncoder_CRLF_BYTES, _FormDataEncoder_CRLF_BYTES_LENGTH, _FormDataEncoder_DASHES, _FormDataEncoder_encoder, _FormDataEncoder_footer, _FormDataEncoder_form, _FormDataEncoder_options, _FormDataEncoder_getFieldHeader, defaultOptions, FormDataEncoder;
var init_FormDataEncoder = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/FormDataEncoder.js"() {
    "use strict";
    init_createBoundary();
    init_isPlainObject();
    init_normalizeValue();
    init_escapeName();
    init_isFileLike();
    init_isFormData();
    __classPrivateFieldSet4 = function(receiver, state, value, kind2, f6) {
      if (kind2 === "m")
        throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f6.call(receiver, value) : f6 ? f6.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet5 = function(receiver, state, kind2, f6) {
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f6 : kind2 === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
    };
    defaultOptions = {
      enableAdditionalHeaders: false
    };
    FormDataEncoder = class {
      constructor(form, boundaryOrOptions, options) {
        _FormDataEncoder_instances.add(this);
        _FormDataEncoder_CRLF.set(this, "\r\n");
        _FormDataEncoder_CRLF_BYTES.set(this, void 0);
        _FormDataEncoder_CRLF_BYTES_LENGTH.set(this, void 0);
        _FormDataEncoder_DASHES.set(this, "-".repeat(2));
        _FormDataEncoder_encoder.set(this, new TextEncoder());
        _FormDataEncoder_footer.set(this, void 0);
        _FormDataEncoder_form.set(this, void 0);
        _FormDataEncoder_options.set(this, void 0);
        if (!isFormData(form)) {
          throw new TypeError("Expected first argument to be a FormData instance.");
        }
        let boundary;
        if (isPlainObject_default(boundaryOrOptions)) {
          options = boundaryOrOptions;
        } else {
          boundary = boundaryOrOptions;
        }
        if (!boundary) {
          boundary = createBoundary_default();
        }
        if (typeof boundary !== "string") {
          throw new TypeError("Expected boundary argument to be a string.");
        }
        if (options && !isPlainObject_default(options)) {
          throw new TypeError("Expected options argument to be an object.");
        }
        __classPrivateFieldSet4(this, _FormDataEncoder_form, form, "f");
        __classPrivateFieldSet4(this, _FormDataEncoder_options, { ...defaultOptions, ...options }, "f");
        __classPrivateFieldSet4(this, _FormDataEncoder_CRLF_BYTES, __classPrivateFieldGet5(this, _FormDataEncoder_encoder, "f").encode(__classPrivateFieldGet5(this, _FormDataEncoder_CRLF, "f")), "f");
        __classPrivateFieldSet4(this, _FormDataEncoder_CRLF_BYTES_LENGTH, __classPrivateFieldGet5(this, _FormDataEncoder_CRLF_BYTES, "f").byteLength, "f");
        this.boundary = `form-data-boundary-${boundary}`;
        this.contentType = `multipart/form-data; boundary=${this.boundary}`;
        __classPrivateFieldSet4(this, _FormDataEncoder_footer, __classPrivateFieldGet5(this, _FormDataEncoder_encoder, "f").encode(`${__classPrivateFieldGet5(this, _FormDataEncoder_DASHES, "f")}${this.boundary}${__classPrivateFieldGet5(this, _FormDataEncoder_DASHES, "f")}${__classPrivateFieldGet5(this, _FormDataEncoder_CRLF, "f").repeat(2)}`), "f");
        this.contentLength = String(this.getContentLength());
        this.headers = Object.freeze({
          "Content-Type": this.contentType,
          "Content-Length": this.contentLength
        });
        Object.defineProperties(this, {
          boundary: { writable: false, configurable: false },
          contentType: { writable: false, configurable: false },
          contentLength: { writable: false, configurable: false },
          headers: { writable: false, configurable: false }
        });
      }
      getContentLength() {
        let length = 0;
        for (const [name, raw] of __classPrivateFieldGet5(this, _FormDataEncoder_form, "f")) {
          const value = isFileLike(raw) ? raw : __classPrivateFieldGet5(this, _FormDataEncoder_encoder, "f").encode(normalizeValue_default(raw));
          length += __classPrivateFieldGet5(this, _FormDataEncoder_instances, "m", _FormDataEncoder_getFieldHeader).call(this, name, value).byteLength;
          length += isFileLike(value) ? value.size : value.byteLength;
          length += __classPrivateFieldGet5(this, _FormDataEncoder_CRLF_BYTES_LENGTH, "f");
        }
        return length + __classPrivateFieldGet5(this, _FormDataEncoder_footer, "f").byteLength;
      }
      *values() {
        for (const [name, raw] of __classPrivateFieldGet5(this, _FormDataEncoder_form, "f").entries()) {
          const value = isFileLike(raw) ? raw : __classPrivateFieldGet5(this, _FormDataEncoder_encoder, "f").encode(normalizeValue_default(raw));
          yield __classPrivateFieldGet5(this, _FormDataEncoder_instances, "m", _FormDataEncoder_getFieldHeader).call(this, name, value);
          yield value;
          yield __classPrivateFieldGet5(this, _FormDataEncoder_CRLF_BYTES, "f");
        }
        yield __classPrivateFieldGet5(this, _FormDataEncoder_footer, "f");
      }
      async *encode() {
        for (const part of this.values()) {
          if (isFileLike(part)) {
            yield* part.stream();
          } else {
            yield part;
          }
        }
      }
      [(_FormDataEncoder_CRLF = /* @__PURE__ */ new WeakMap(), _FormDataEncoder_CRLF_BYTES = /* @__PURE__ */ new WeakMap(), _FormDataEncoder_CRLF_BYTES_LENGTH = /* @__PURE__ */ new WeakMap(), _FormDataEncoder_DASHES = /* @__PURE__ */ new WeakMap(), _FormDataEncoder_encoder = /* @__PURE__ */ new WeakMap(), _FormDataEncoder_footer = /* @__PURE__ */ new WeakMap(), _FormDataEncoder_form = /* @__PURE__ */ new WeakMap(), _FormDataEncoder_options = /* @__PURE__ */ new WeakMap(), _FormDataEncoder_instances = /* @__PURE__ */ new WeakSet(), _FormDataEncoder_getFieldHeader = function _FormDataEncoder_getFieldHeader2(name, value) {
        let header = "";
        header += `${__classPrivateFieldGet5(this, _FormDataEncoder_DASHES, "f")}${this.boundary}${__classPrivateFieldGet5(this, _FormDataEncoder_CRLF, "f")}`;
        header += `Content-Disposition: form-data; name="${escapeName_default(name)}"`;
        if (isFileLike(value)) {
          header += `; filename="${escapeName_default(value.name)}"${__classPrivateFieldGet5(this, _FormDataEncoder_CRLF, "f")}`;
          header += `Content-Type: ${value.type || "application/octet-stream"}`;
        }
        if (__classPrivateFieldGet5(this, _FormDataEncoder_options, "f").enableAdditionalHeaders === true) {
          header += `${__classPrivateFieldGet5(this, _FormDataEncoder_CRLF, "f")}Content-Length: ${isFileLike(value) ? value.size : value.byteLength}`;
        }
        return __classPrivateFieldGet5(this, _FormDataEncoder_encoder, "f").encode(`${header}${__classPrivateFieldGet5(this, _FormDataEncoder_CRLF, "f").repeat(2)}`);
      }, Symbol.iterator)]() {
        return this.values();
      }
      [Symbol.asyncIterator]() {
        return this.encode();
      }
    };
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/FileLike.js
var init_FileLike = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/FileLike.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/FormDataLike.js
var init_FormDataLike = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/FormDataLike.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/index.js
var init_esm2 = __esm({
  "../../node_modules/.pnpm/form-data-encoder@1.7.2/node_modules/form-data-encoder/lib/esm/index.js"() {
    "use strict";
    init_FormDataEncoder();
    init_FileLike();
    init_FormDataLike();
    init_isFileLike();
    init_isFormData();
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/_shims/MultipartBody.mjs
var MultipartBody;
var init_MultipartBody = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/_shims/MultipartBody.mjs"() {
    "use strict";
    MultipartBody = class {
      constructor(body) {
        this.body = body;
      }
      get [Symbol.toStringTag]() {
        return "MultipartBody";
      }
    };
  }
});

// ../../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/dist/ponyfill.es2018.js
var require_ponyfill_es2018 = __commonJS({
  "../../node_modules/.pnpm/web-streams-polyfill@3.3.3/node_modules/web-streams-polyfill/dist/ponyfill.es2018.js"(exports2, module2) {
    "use strict";
    (function(global2, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.WebStreamsPolyfill = {}));
    })(exports2, function(exports3) {
      "use strict";
      function noop() {
        return void 0;
      }
      function typeIsObject(x5) {
        return typeof x5 === "object" && x5 !== null || typeof x5 === "function";
      }
      const rethrowAssertionErrorRejection = noop;
      function setFunctionName(fn, name) {
        try {
          Object.defineProperty(fn, "name", {
            value: name,
            configurable: true
          });
        } catch (_a4) {
        }
      }
      const originalPromise = Promise;
      const originalPromiseThen = Promise.prototype.then;
      const originalPromiseReject = Promise.reject.bind(originalPromise);
      function newPromise(executor) {
        return new originalPromise(executor);
      }
      function promiseResolvedWith(value) {
        return newPromise((resolve2) => resolve2(value));
      }
      function promiseRejectedWith(reason) {
        return originalPromiseReject(reason);
      }
      function PerformPromiseThen(promise, onFulfilled, onRejected) {
        return originalPromiseThen.call(promise, onFulfilled, onRejected);
      }
      function uponPromise(promise, onFulfilled, onRejected) {
        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), void 0, rethrowAssertionErrorRejection);
      }
      function uponFulfillment(promise, onFulfilled) {
        uponPromise(promise, onFulfilled);
      }
      function uponRejection(promise, onRejected) {
        uponPromise(promise, void 0, onRejected);
      }
      function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
      }
      function setPromiseIsHandledToTrue(promise) {
        PerformPromiseThen(promise, void 0, rethrowAssertionErrorRejection);
      }
      let _queueMicrotask = (callback) => {
        if (typeof queueMicrotask === "function") {
          _queueMicrotask = queueMicrotask;
        } else {
          const resolvedPromise = promiseResolvedWith(void 0);
          _queueMicrotask = (cb) => PerformPromiseThen(resolvedPromise, cb);
        }
        return _queueMicrotask(callback);
      };
      function reflectCall(F3, V2, args) {
        if (typeof F3 !== "function") {
          throw new TypeError("Argument is not a function");
        }
        return Function.prototype.apply.call(F3, V2, args);
      }
      function promiseCall(F3, V2, args) {
        try {
          return promiseResolvedWith(reflectCall(F3, V2, args));
        } catch (value) {
          return promiseRejectedWith(value);
        }
      }
      const QUEUE_MAX_ARRAY_SIZE = 16384;
      class SimpleQueue {
        constructor() {
          this._cursor = 0;
          this._size = 0;
          this._front = {
            _elements: [],
            _next: void 0
          };
          this._back = this._front;
          this._cursor = 0;
          this._size = 0;
        }
        get length() {
          return this._size;
        }
        // For exception safety, this method is structured in order:
        // 1. Read state
        // 2. Calculate required state mutations
        // 3. Perform state mutations
        push(element) {
          const oldBack = this._back;
          let newBack = oldBack;
          if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
            newBack = {
              _elements: [],
              _next: void 0
            };
          }
          oldBack._elements.push(element);
          if (newBack !== oldBack) {
            this._back = newBack;
            oldBack._next = newBack;
          }
          ++this._size;
        }
        // Like push(), shift() follows the read -> calculate -> mutate pattern for
        // exception safety.
        shift() {
          const oldFront = this._front;
          let newFront = oldFront;
          const oldCursor = this._cursor;
          let newCursor = oldCursor + 1;
          const elements = oldFront._elements;
          const element = elements[oldCursor];
          if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
            newFront = oldFront._next;
            newCursor = 0;
          }
          --this._size;
          this._cursor = newCursor;
          if (oldFront !== newFront) {
            this._front = newFront;
          }
          elements[oldCursor] = void 0;
          return element;
        }
        // The tricky thing about forEach() is that it can be called
        // re-entrantly. The queue may be mutated inside the callback. It is easy to
        // see that push() within the callback has no negative effects since the end
        // of the queue is checked for on every iteration. If shift() is called
        // repeatedly within the callback then the next iteration may return an
        // element that has been removed. In this case the callback will be called
        // with undefined values until we either "catch up" with elements that still
        // exist or reach the back of the queue.
        forEach(callback) {
          let i6 = this._cursor;
          let node = this._front;
          let elements = node._elements;
          while (i6 !== elements.length || node._next !== void 0) {
            if (i6 === elements.length) {
              node = node._next;
              elements = node._elements;
              i6 = 0;
              if (elements.length === 0) {
                break;
              }
            }
            callback(elements[i6]);
            ++i6;
          }
        }
        // Return the element that would be returned if shift() was called now,
        // without modifying the queue.
        peek() {
          const front = this._front;
          const cursor = this._cursor;
          return front._elements[cursor];
        }
      }
      const AbortSteps = Symbol("[[AbortSteps]]");
      const ErrorSteps = Symbol("[[ErrorSteps]]");
      const CancelSteps = Symbol("[[CancelSteps]]");
      const PullSteps = Symbol("[[PullSteps]]");
      const ReleaseSteps = Symbol("[[ReleaseSteps]]");
      function ReadableStreamReaderGenericInitialize(reader, stream) {
        reader._ownerReadableStream = stream;
        stream._reader = reader;
        if (stream._state === "readable") {
          defaultReaderClosedPromiseInitialize(reader);
        } else if (stream._state === "closed") {
          defaultReaderClosedPromiseInitializeAsResolved(reader);
        } else {
          defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
        }
      }
      function ReadableStreamReaderGenericCancel(reader, reason) {
        const stream = reader._ownerReadableStream;
        return ReadableStreamCancel(stream, reason);
      }
      function ReadableStreamReaderGenericRelease(reader) {
        const stream = reader._ownerReadableStream;
        if (stream._state === "readable") {
          defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        } else {
          defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        }
        stream._readableStreamController[ReleaseSteps]();
        stream._reader = void 0;
        reader._ownerReadableStream = void 0;
      }
      function readerLockException(name) {
        return new TypeError("Cannot " + name + " a stream using a released reader");
      }
      function defaultReaderClosedPromiseInitialize(reader) {
        reader._closedPromise = newPromise((resolve2, reject) => {
          reader._closedPromise_resolve = resolve2;
          reader._closedPromise_reject = reject;
        });
      }
      function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseReject(reader, reason);
      }
      function defaultReaderClosedPromiseInitializeAsResolved(reader) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseResolve(reader);
      }
      function defaultReaderClosedPromiseReject(reader, reason) {
        if (reader._closedPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(reader._closedPromise);
        reader._closedPromise_reject(reason);
        reader._closedPromise_resolve = void 0;
        reader._closedPromise_reject = void 0;
      }
      function defaultReaderClosedPromiseResetToRejected(reader, reason) {
        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
      }
      function defaultReaderClosedPromiseResolve(reader) {
        if (reader._closedPromise_resolve === void 0) {
          return;
        }
        reader._closedPromise_resolve(void 0);
        reader._closedPromise_resolve = void 0;
        reader._closedPromise_reject = void 0;
      }
      const NumberIsFinite = Number.isFinite || function(x5) {
        return typeof x5 === "number" && isFinite(x5);
      };
      const MathTrunc = Math.trunc || function(v7) {
        return v7 < 0 ? Math.ceil(v7) : Math.floor(v7);
      };
      function isDictionary(x5) {
        return typeof x5 === "object" || typeof x5 === "function";
      }
      function assertDictionary(obj, context) {
        if (obj !== void 0 && !isDictionary(obj)) {
          throw new TypeError(`${context} is not an object.`);
        }
      }
      function assertFunction(x5, context) {
        if (typeof x5 !== "function") {
          throw new TypeError(`${context} is not a function.`);
        }
      }
      function isObject(x5) {
        return typeof x5 === "object" && x5 !== null || typeof x5 === "function";
      }
      function assertObject(x5, context) {
        if (!isObject(x5)) {
          throw new TypeError(`${context} is not an object.`);
        }
      }
      function assertRequiredArgument(x5, position, context) {
        if (x5 === void 0) {
          throw new TypeError(`Parameter ${position} is required in '${context}'.`);
        }
      }
      function assertRequiredField(x5, field, context) {
        if (x5 === void 0) {
          throw new TypeError(`${field} is required in '${context}'.`);
        }
      }
      function convertUnrestrictedDouble(value) {
        return Number(value);
      }
      function censorNegativeZero(x5) {
        return x5 === 0 ? 0 : x5;
      }
      function integerPart(x5) {
        return censorNegativeZero(MathTrunc(x5));
      }
      function convertUnsignedLongLongWithEnforceRange(value, context) {
        const lowerBound = 0;
        const upperBound = Number.MAX_SAFE_INTEGER;
        let x5 = Number(value);
        x5 = censorNegativeZero(x5);
        if (!NumberIsFinite(x5)) {
          throw new TypeError(`${context} is not a finite number`);
        }
        x5 = integerPart(x5);
        if (x5 < lowerBound || x5 > upperBound) {
          throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);
        }
        if (!NumberIsFinite(x5) || x5 === 0) {
          return 0;
        }
        return x5;
      }
      function assertReadableStream(x5, context) {
        if (!IsReadableStream(x5)) {
          throw new TypeError(`${context} is not a ReadableStream.`);
        }
      }
      function AcquireReadableStreamDefaultReader(stream) {
        return new ReadableStreamDefaultReader2(stream);
      }
      function ReadableStreamAddReadRequest(stream, readRequest) {
        stream._reader._readRequests.push(readRequest);
      }
      function ReadableStreamFulfillReadRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readRequest = reader._readRequests.shift();
        if (done) {
          readRequest._closeSteps();
        } else {
          readRequest._chunkSteps(chunk);
        }
      }
      function ReadableStreamGetNumReadRequests(stream) {
        return stream._reader._readRequests.length;
      }
      function ReadableStreamHasDefaultReader(stream) {
        const reader = stream._reader;
        if (reader === void 0) {
          return false;
        }
        if (!IsReadableStreamDefaultReader(reader)) {
          return false;
        }
        return true;
      }
      class ReadableStreamDefaultReader2 {
        constructor(stream) {
          assertRequiredArgument(stream, 1, "ReadableStreamDefaultReader");
          assertReadableStream(stream, "First parameter");
          if (IsReadableStreamLocked(stream)) {
            throw new TypeError("This stream has already been locked for exclusive reading by another reader");
          }
          ReadableStreamReaderGenericInitialize(this, stream);
          this._readRequests = new SimpleQueue();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed,
         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.
         */
        get closed() {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(defaultReaderBrandCheckException("closed"));
          }
          return this._closedPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = void 0) {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(defaultReaderBrandCheckException("cancel"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("cancel"));
          }
          return ReadableStreamReaderGenericCancel(this, reason);
        }
        /**
         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read() {
          if (!IsReadableStreamDefaultReader(this)) {
            return promiseRejectedWith(defaultReaderBrandCheckException("read"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("read from"));
          }
          let resolvePromise;
          let rejectPromise;
          const promise = newPromise((resolve2, reject) => {
            resolvePromise = resolve2;
            rejectPromise = reject;
          });
          const readRequest = {
            _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
            _closeSteps: () => resolvePromise({ value: void 0, done: true }),
            _errorSteps: (e6) => rejectPromise(e6)
          };
          ReadableStreamDefaultReaderRead(this, readRequest);
          return promise;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
          if (!IsReadableStreamDefaultReader(this)) {
            throw defaultReaderBrandCheckException("releaseLock");
          }
          if (this._ownerReadableStream === void 0) {
            return;
          }
          ReadableStreamDefaultReaderRelease(this);
        }
      }
      Object.defineProperties(ReadableStreamDefaultReader2.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
      });
      setFunctionName(ReadableStreamDefaultReader2.prototype.cancel, "cancel");
      setFunctionName(ReadableStreamDefaultReader2.prototype.read, "read");
      setFunctionName(ReadableStreamDefaultReader2.prototype.releaseLock, "releaseLock");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamDefaultReader2.prototype, Symbol.toStringTag, {
          value: "ReadableStreamDefaultReader",
          configurable: true
        });
      }
      function IsReadableStreamDefaultReader(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_readRequests")) {
          return false;
        }
        return x5 instanceof ReadableStreamDefaultReader2;
      }
      function ReadableStreamDefaultReaderRead(reader, readRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === "closed") {
          readRequest._closeSteps();
        } else if (stream._state === "errored") {
          readRequest._errorSteps(stream._storedError);
        } else {
          stream._readableStreamController[PullSteps](readRequest);
        }
      }
      function ReadableStreamDefaultReaderRelease(reader) {
        ReadableStreamReaderGenericRelease(reader);
        const e6 = new TypeError("Reader was released");
        ReadableStreamDefaultReaderErrorReadRequests(reader, e6);
      }
      function ReadableStreamDefaultReaderErrorReadRequests(reader, e6) {
        const readRequests = reader._readRequests;
        reader._readRequests = new SimpleQueue();
        readRequests.forEach((readRequest) => {
          readRequest._errorSteps(e6);
        });
      }
      function defaultReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);
      }
      const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
      }).prototype);
      class ReadableStreamAsyncIteratorImpl {
        constructor(reader, preventCancel) {
          this._ongoingPromise = void 0;
          this._isFinished = false;
          this._reader = reader;
          this._preventCancel = preventCancel;
        }
        next() {
          const nextSteps = () => this._nextSteps();
          this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();
          return this._ongoingPromise;
        }
        return(value) {
          const returnSteps = () => this._returnSteps(value);
          return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();
        }
        _nextSteps() {
          if (this._isFinished) {
            return Promise.resolve({ value: void 0, done: true });
          }
          const reader = this._reader;
          let resolvePromise;
          let rejectPromise;
          const promise = newPromise((resolve2, reject) => {
            resolvePromise = resolve2;
            rejectPromise = reject;
          });
          const readRequest = {
            _chunkSteps: (chunk) => {
              this._ongoingPromise = void 0;
              _queueMicrotask(() => resolvePromise({ value: chunk, done: false }));
            },
            _closeSteps: () => {
              this._ongoingPromise = void 0;
              this._isFinished = true;
              ReadableStreamReaderGenericRelease(reader);
              resolvePromise({ value: void 0, done: true });
            },
            _errorSteps: (reason) => {
              this._ongoingPromise = void 0;
              this._isFinished = true;
              ReadableStreamReaderGenericRelease(reader);
              rejectPromise(reason);
            }
          };
          ReadableStreamDefaultReaderRead(reader, readRequest);
          return promise;
        }
        _returnSteps(value) {
          if (this._isFinished) {
            return Promise.resolve({ value, done: true });
          }
          this._isFinished = true;
          const reader = this._reader;
          if (!this._preventCancel) {
            const result = ReadableStreamReaderGenericCancel(reader, value);
            ReadableStreamReaderGenericRelease(reader);
            return transformPromiseWith(result, () => ({ value, done: true }));
          }
          ReadableStreamReaderGenericRelease(reader);
          return promiseResolvedWith({ value, done: true });
        }
      }
      const ReadableStreamAsyncIteratorPrototype = {
        next() {
          if (!IsReadableStreamAsyncIterator(this)) {
            return promiseRejectedWith(streamAsyncIteratorBrandCheckException("next"));
          }
          return this._asyncIteratorImpl.next();
        },
        return(value) {
          if (!IsReadableStreamAsyncIterator(this)) {
            return promiseRejectedWith(streamAsyncIteratorBrandCheckException("return"));
          }
          return this._asyncIteratorImpl.return(value);
        }
      };
      Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
      function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
        iterator._asyncIteratorImpl = impl;
        return iterator;
      }
      function IsReadableStreamAsyncIterator(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_asyncIteratorImpl")) {
          return false;
        }
        try {
          return x5._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;
        } catch (_a4) {
          return false;
        }
      }
      function streamAsyncIteratorBrandCheckException(name) {
        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);
      }
      const NumberIsNaN = Number.isNaN || function(x5) {
        return x5 !== x5;
      };
      var _a3, _b, _c;
      function CreateArrayFromList(elements) {
        return elements.slice();
      }
      function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n6) {
        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n6), destOffset);
      }
      let TransferArrayBuffer = (O2) => {
        if (typeof O2.transfer === "function") {
          TransferArrayBuffer = (buffer) => buffer.transfer();
        } else if (typeof structuredClone === "function") {
          TransferArrayBuffer = (buffer) => structuredClone(buffer, { transfer: [buffer] });
        } else {
          TransferArrayBuffer = (buffer) => buffer;
        }
        return TransferArrayBuffer(O2);
      };
      let IsDetachedBuffer = (O2) => {
        if (typeof O2.detached === "boolean") {
          IsDetachedBuffer = (buffer) => buffer.detached;
        } else {
          IsDetachedBuffer = (buffer) => buffer.byteLength === 0;
        }
        return IsDetachedBuffer(O2);
      };
      function ArrayBufferSlice(buffer, begin, end) {
        if (buffer.slice) {
          return buffer.slice(begin, end);
        }
        const length = end - begin;
        const slice = new ArrayBuffer(length);
        CopyDataBlockBytes(slice, 0, buffer, begin, length);
        return slice;
      }
      function GetMethod(receiver, prop) {
        const func = receiver[prop];
        if (func === void 0 || func === null) {
          return void 0;
        }
        if (typeof func !== "function") {
          throw new TypeError(`${String(prop)} is not a function`);
        }
        return func;
      }
      function CreateAsyncFromSyncIterator(syncIteratorRecord) {
        const syncIterable = {
          [Symbol.iterator]: () => syncIteratorRecord.iterator
        };
        const asyncIterator = async function* () {
          return yield* syncIterable;
        }();
        const nextMethod = asyncIterator.next;
        return { iterator: asyncIterator, nextMethod, done: false };
      }
      const SymbolAsyncIterator = (_c = (_a3 = Symbol.asyncIterator) !== null && _a3 !== void 0 ? _a3 : (_b = Symbol.for) === null || _b === void 0 ? void 0 : _b.call(Symbol, "Symbol.asyncIterator")) !== null && _c !== void 0 ? _c : "@@asyncIterator";
      function GetIterator(obj, hint = "sync", method) {
        if (method === void 0) {
          if (hint === "async") {
            method = GetMethod(obj, SymbolAsyncIterator);
            if (method === void 0) {
              const syncMethod = GetMethod(obj, Symbol.iterator);
              const syncIteratorRecord = GetIterator(obj, "sync", syncMethod);
              return CreateAsyncFromSyncIterator(syncIteratorRecord);
            }
          } else {
            method = GetMethod(obj, Symbol.iterator);
          }
        }
        if (method === void 0) {
          throw new TypeError("The object is not iterable");
        }
        const iterator = reflectCall(method, obj, []);
        if (!typeIsObject(iterator)) {
          throw new TypeError("The iterator method must return an object");
        }
        const nextMethod = iterator.next;
        return { iterator, nextMethod, done: false };
      }
      function IteratorNext(iteratorRecord) {
        const result = reflectCall(iteratorRecord.nextMethod, iteratorRecord.iterator, []);
        if (!typeIsObject(result)) {
          throw new TypeError("The iterator.next() method must return an object");
        }
        return result;
      }
      function IteratorComplete(iterResult) {
        return Boolean(iterResult.done);
      }
      function IteratorValue(iterResult) {
        return iterResult.value;
      }
      function IsNonNegativeNumber(v7) {
        if (typeof v7 !== "number") {
          return false;
        }
        if (NumberIsNaN(v7)) {
          return false;
        }
        if (v7 < 0) {
          return false;
        }
        return true;
      }
      function CloneAsUint8Array(O2) {
        const buffer = ArrayBufferSlice(O2.buffer, O2.byteOffset, O2.byteOffset + O2.byteLength);
        return new Uint8Array(buffer);
      }
      function DequeueValue(container) {
        const pair = container._queue.shift();
        container._queueTotalSize -= pair.size;
        if (container._queueTotalSize < 0) {
          container._queueTotalSize = 0;
        }
        return pair.value;
      }
      function EnqueueValueWithSize(container, value, size) {
        if (!IsNonNegativeNumber(size) || size === Infinity) {
          throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
        }
        container._queue.push({ value, size });
        container._queueTotalSize += size;
      }
      function PeekQueueValue(container) {
        const pair = container._queue.peek();
        return pair.value;
      }
      function ResetQueue(container) {
        container._queue = new SimpleQueue();
        container._queueTotalSize = 0;
      }
      function isDataViewConstructor(ctor) {
        return ctor === DataView;
      }
      function isDataView2(view) {
        return isDataViewConstructor(view.constructor);
      }
      function arrayBufferViewElementSize(ctor) {
        if (isDataViewConstructor(ctor)) {
          return 1;
        }
        return ctor.BYTES_PER_ELEMENT;
      }
      class ReadableStreamBYOBRequest2 {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.
         */
        get view() {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException("view");
          }
          return this._view;
        }
        respond(bytesWritten) {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException("respond");
          }
          assertRequiredArgument(bytesWritten, 1, "respond");
          bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, "First parameter");
          if (this._associatedReadableByteStreamController === void 0) {
            throw new TypeError("This BYOB request has been invalidated");
          }
          if (IsDetachedBuffer(this._view.buffer)) {
            throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);
          }
          ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
        }
        respondWithNewView(view) {
          if (!IsReadableStreamBYOBRequest(this)) {
            throw byobRequestBrandCheckException("respondWithNewView");
          }
          assertRequiredArgument(view, 1, "respondWithNewView");
          if (!ArrayBuffer.isView(view)) {
            throw new TypeError("You can only respond with array buffer views");
          }
          if (this._associatedReadableByteStreamController === void 0) {
            throw new TypeError("This BYOB request has been invalidated");
          }
          if (IsDetachedBuffer(view.buffer)) {
            throw new TypeError("The given view's buffer has been detached and so cannot be used as a response");
          }
          ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
        }
      }
      Object.defineProperties(ReadableStreamBYOBRequest2.prototype, {
        respond: { enumerable: true },
        respondWithNewView: { enumerable: true },
        view: { enumerable: true }
      });
      setFunctionName(ReadableStreamBYOBRequest2.prototype.respond, "respond");
      setFunctionName(ReadableStreamBYOBRequest2.prototype.respondWithNewView, "respondWithNewView");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamBYOBRequest2.prototype, Symbol.toStringTag, {
          value: "ReadableStreamBYOBRequest",
          configurable: true
        });
      }
      class ReadableByteStreamController2 {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the current BYOB pull request, or `null` if there isn't one.
         */
        get byobRequest() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("byobRequest");
          }
          return ReadableByteStreamControllerGetBYOBRequest(this);
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("desiredSize");
          }
          return ReadableByteStreamControllerGetDesiredSize(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("close");
          }
          if (this._closeRequested) {
            throw new TypeError("The stream has already been closed; do not close it again!");
          }
          const state = this._controlledReadableByteStream._state;
          if (state !== "readable") {
            throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);
          }
          ReadableByteStreamControllerClose(this);
        }
        enqueue(chunk) {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("enqueue");
          }
          assertRequiredArgument(chunk, 1, "enqueue");
          if (!ArrayBuffer.isView(chunk)) {
            throw new TypeError("chunk must be an array buffer view");
          }
          if (chunk.byteLength === 0) {
            throw new TypeError("chunk must have non-zero byteLength");
          }
          if (chunk.buffer.byteLength === 0) {
            throw new TypeError(`chunk's buffer must have non-zero byteLength`);
          }
          if (this._closeRequested) {
            throw new TypeError("stream is closed or draining");
          }
          const state = this._controlledReadableByteStream._state;
          if (state !== "readable") {
            throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);
          }
          ReadableByteStreamControllerEnqueue(this, chunk);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e6 = void 0) {
          if (!IsReadableByteStreamController(this)) {
            throw byteStreamControllerBrandCheckException("error");
          }
          ReadableByteStreamControllerError(this, e6);
        }
        /** @internal */
        [CancelSteps](reason) {
          ReadableByteStreamControllerClearPendingPullIntos(this);
          ResetQueue(this);
          const result = this._cancelAlgorithm(reason);
          ReadableByteStreamControllerClearAlgorithms(this);
          return result;
        }
        /** @internal */
        [PullSteps](readRequest) {
          const stream = this._controlledReadableByteStream;
          if (this._queueTotalSize > 0) {
            ReadableByteStreamControllerFillReadRequestFromQueue(this, readRequest);
            return;
          }
          const autoAllocateChunkSize = this._autoAllocateChunkSize;
          if (autoAllocateChunkSize !== void 0) {
            let buffer;
            try {
              buffer = new ArrayBuffer(autoAllocateChunkSize);
            } catch (bufferE) {
              readRequest._errorSteps(bufferE);
              return;
            }
            const pullIntoDescriptor = {
              buffer,
              bufferByteLength: autoAllocateChunkSize,
              byteOffset: 0,
              byteLength: autoAllocateChunkSize,
              bytesFilled: 0,
              minimumFill: 1,
              elementSize: 1,
              viewConstructor: Uint8Array,
              readerType: "default"
            };
            this._pendingPullIntos.push(pullIntoDescriptor);
          }
          ReadableStreamAddReadRequest(stream, readRequest);
          ReadableByteStreamControllerCallPullIfNeeded(this);
        }
        /** @internal */
        [ReleaseSteps]() {
          if (this._pendingPullIntos.length > 0) {
            const firstPullInto = this._pendingPullIntos.peek();
            firstPullInto.readerType = "none";
            this._pendingPullIntos = new SimpleQueue();
            this._pendingPullIntos.push(firstPullInto);
          }
        }
      }
      Object.defineProperties(ReadableByteStreamController2.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        byobRequest: { enumerable: true },
        desiredSize: { enumerable: true }
      });
      setFunctionName(ReadableByteStreamController2.prototype.close, "close");
      setFunctionName(ReadableByteStreamController2.prototype.enqueue, "enqueue");
      setFunctionName(ReadableByteStreamController2.prototype.error, "error");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableByteStreamController2.prototype, Symbol.toStringTag, {
          value: "ReadableByteStreamController",
          configurable: true
        });
      }
      function IsReadableByteStreamController(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_controlledReadableByteStream")) {
          return false;
        }
        return x5 instanceof ReadableByteStreamController2;
      }
      function IsReadableStreamBYOBRequest(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_associatedReadableByteStreamController")) {
          return false;
        }
        return x5 instanceof ReadableStreamBYOBRequest2;
      }
      function ReadableByteStreamControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
        if (!shouldPull) {
          return;
        }
        if (controller._pulling) {
          controller._pullAgain = true;
          return;
        }
        controller._pulling = true;
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
          controller._pulling = false;
          if (controller._pullAgain) {
            controller._pullAgain = false;
            ReadableByteStreamControllerCallPullIfNeeded(controller);
          }
          return null;
        }, (e6) => {
          ReadableByteStreamControllerError(controller, e6);
          return null;
        });
      }
      function ReadableByteStreamControllerClearPendingPullIntos(controller) {
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        controller._pendingPullIntos = new SimpleQueue();
      }
      function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
        let done = false;
        if (stream._state === "closed") {
          done = true;
        }
        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
        if (pullIntoDescriptor.readerType === "default") {
          ReadableStreamFulfillReadRequest(stream, filledView, done);
        } else {
          ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
        }
      }
      function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
        const bytesFilled = pullIntoDescriptor.bytesFilled;
        const elementSize = pullIntoDescriptor.elementSize;
        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
      }
      function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
        controller._queue.push({ buffer, byteOffset, byteLength });
        controller._queueTotalSize += byteLength;
      }
      function ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, buffer, byteOffset, byteLength) {
        let clonedChunk;
        try {
          clonedChunk = ArrayBufferSlice(buffer, byteOffset, byteOffset + byteLength);
        } catch (cloneE) {
          ReadableByteStreamControllerError(controller, cloneE);
          throw cloneE;
        }
        ReadableByteStreamControllerEnqueueChunkToQueue(controller, clonedChunk, 0, byteLength);
      }
      function ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstDescriptor) {
        if (firstDescriptor.bytesFilled > 0) {
          ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, firstDescriptor.buffer, firstDescriptor.byteOffset, firstDescriptor.bytesFilled);
        }
        ReadableByteStreamControllerShiftPendingPullInto(controller);
      }
      function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
        let totalBytesToCopyRemaining = maxBytesToCopy;
        let ready = false;
        const remainderBytes = maxBytesFilled % pullIntoDescriptor.elementSize;
        const maxAlignedBytes = maxBytesFilled - remainderBytes;
        if (maxAlignedBytes >= pullIntoDescriptor.minimumFill) {
          totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
          ready = true;
        }
        const queue = controller._queue;
        while (totalBytesToCopyRemaining > 0) {
          const headOfQueue = queue.peek();
          const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
          const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
          CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
          if (headOfQueue.byteLength === bytesToCopy) {
            queue.shift();
          } else {
            headOfQueue.byteOffset += bytesToCopy;
            headOfQueue.byteLength -= bytesToCopy;
          }
          controller._queueTotalSize -= bytesToCopy;
          ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
          totalBytesToCopyRemaining -= bytesToCopy;
        }
        return ready;
      }
      function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
        pullIntoDescriptor.bytesFilled += size;
      }
      function ReadableByteStreamControllerHandleQueueDrain(controller) {
        if (controller._queueTotalSize === 0 && controller._closeRequested) {
          ReadableByteStreamControllerClearAlgorithms(controller);
          ReadableStreamClose(controller._controlledReadableByteStream);
        } else {
          ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
      }
      function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
        if (controller._byobRequest === null) {
          return;
        }
        controller._byobRequest._associatedReadableByteStreamController = void 0;
        controller._byobRequest._view = null;
        controller._byobRequest = null;
      }
      function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
        while (controller._pendingPullIntos.length > 0) {
          if (controller._queueTotalSize === 0) {
            return;
          }
          const pullIntoDescriptor = controller._pendingPullIntos.peek();
          if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
            ReadableByteStreamControllerShiftPendingPullInto(controller);
            ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
          }
        }
      }
      function ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller) {
        const reader = controller._controlledReadableByteStream._reader;
        while (reader._readRequests.length > 0) {
          if (controller._queueTotalSize === 0) {
            return;
          }
          const readRequest = reader._readRequests.shift();
          ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest);
        }
      }
      function ReadableByteStreamControllerPullInto(controller, view, min, readIntoRequest) {
        const stream = controller._controlledReadableByteStream;
        const ctor = view.constructor;
        const elementSize = arrayBufferViewElementSize(ctor);
        const { byteOffset, byteLength } = view;
        const minimumFill = min * elementSize;
        let buffer;
        try {
          buffer = TransferArrayBuffer(view.buffer);
        } catch (e6) {
          readIntoRequest._errorSteps(e6);
          return;
        }
        const pullIntoDescriptor = {
          buffer,
          bufferByteLength: buffer.byteLength,
          byteOffset,
          byteLength,
          bytesFilled: 0,
          minimumFill,
          elementSize,
          viewConstructor: ctor,
          readerType: "byob"
        };
        if (controller._pendingPullIntos.length > 0) {
          controller._pendingPullIntos.push(pullIntoDescriptor);
          ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
          return;
        }
        if (stream._state === "closed") {
          const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
          readIntoRequest._closeSteps(emptyView);
          return;
        }
        if (controller._queueTotalSize > 0) {
          if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
            const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
            ReadableByteStreamControllerHandleQueueDrain(controller);
            readIntoRequest._chunkSteps(filledView);
            return;
          }
          if (controller._closeRequested) {
            const e6 = new TypeError("Insufficient bytes to fill elements in the given buffer");
            ReadableByteStreamControllerError(controller, e6);
            readIntoRequest._errorSteps(e6);
            return;
          }
        }
        controller._pendingPullIntos.push(pullIntoDescriptor);
        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
        if (firstDescriptor.readerType === "none") {
          ReadableByteStreamControllerShiftPendingPullInto(controller);
        }
        const stream = controller._controlledReadableByteStream;
        if (ReadableStreamHasBYOBReader(stream)) {
          while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
            const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
            ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
          }
        }
      }
      function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
        if (pullIntoDescriptor.readerType === "none") {
          ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, pullIntoDescriptor);
          ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
          return;
        }
        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.minimumFill) {
          return;
        }
        ReadableByteStreamControllerShiftPendingPullInto(controller);
        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
        if (remainderSize > 0) {
          const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
          ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, pullIntoDescriptor.buffer, end - remainderSize, remainderSize);
        }
        pullIntoDescriptor.bytesFilled -= remainderSize;
        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
      }
      function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        const state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);
        } else {
          ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerShiftPendingPullInto(controller) {
        const descriptor = controller._pendingPullIntos.shift();
        return descriptor;
      }
      function ReadableByteStreamControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== "readable") {
          return false;
        }
        if (controller._closeRequested) {
          return false;
        }
        if (!controller._started) {
          return false;
        }
        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
          return true;
        }
        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
          return true;
        }
        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
          return true;
        }
        return false;
      }
      function ReadableByteStreamControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = void 0;
        controller._cancelAlgorithm = void 0;
      }
      function ReadableByteStreamControllerClose(controller) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== "readable") {
          return;
        }
        if (controller._queueTotalSize > 0) {
          controller._closeRequested = true;
          return;
        }
        if (controller._pendingPullIntos.length > 0) {
          const firstPendingPullInto = controller._pendingPullIntos.peek();
          if (firstPendingPullInto.bytesFilled % firstPendingPullInto.elementSize !== 0) {
            const e6 = new TypeError("Insufficient bytes to fill elements in the given buffer");
            ReadableByteStreamControllerError(controller, e6);
            throw e6;
          }
        }
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamClose(stream);
      }
      function ReadableByteStreamControllerEnqueue(controller, chunk) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== "readable") {
          return;
        }
        const { buffer, byteOffset, byteLength } = chunk;
        if (IsDetachedBuffer(buffer)) {
          throw new TypeError("chunk's buffer is detached and so cannot be enqueued");
        }
        const transferredBuffer = TransferArrayBuffer(buffer);
        if (controller._pendingPullIntos.length > 0) {
          const firstPendingPullInto = controller._pendingPullIntos.peek();
          if (IsDetachedBuffer(firstPendingPullInto.buffer)) {
            throw new TypeError("The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk");
          }
          ReadableByteStreamControllerInvalidateBYOBRequest(controller);
          firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
          if (firstPendingPullInto.readerType === "none") {
            ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstPendingPullInto);
          }
        }
        if (ReadableStreamHasDefaultReader(stream)) {
          ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller);
          if (ReadableStreamGetNumReadRequests(stream) === 0) {
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
          } else {
            if (controller._pendingPullIntos.length > 0) {
              ReadableByteStreamControllerShiftPendingPullInto(controller);
            }
            const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
            ReadableStreamFulfillReadRequest(stream, transferredView, false);
          }
        } else if (ReadableStreamHasBYOBReader(stream)) {
          ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
          ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
        } else {
          ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
      function ReadableByteStreamControllerError(controller, e6) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== "readable") {
          return;
        }
        ReadableByteStreamControllerClearPendingPullIntos(controller);
        ResetQueue(controller);
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e6);
      }
      function ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest) {
        const entry = controller._queue.shift();
        controller._queueTotalSize -= entry.byteLength;
        ReadableByteStreamControllerHandleQueueDrain(controller);
        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
        readRequest._chunkSteps(view);
      }
      function ReadableByteStreamControllerGetBYOBRequest(controller) {
        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
          const firstDescriptor = controller._pendingPullIntos.peek();
          const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
          const byobRequest = Object.create(ReadableStreamBYOBRequest2.prototype);
          SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
          controller._byobRequest = byobRequest;
        }
        return controller._byobRequest;
      }
      function ReadableByteStreamControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableByteStream._state;
        if (state === "errored") {
          return null;
        }
        if (state === "closed") {
          return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
      }
      function ReadableByteStreamControllerRespond(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          if (bytesWritten !== 0) {
            throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
          }
        } else {
          if (bytesWritten === 0) {
            throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
          }
          if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
            throw new RangeError("bytesWritten out of range");
          }
        }
        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
      }
      function ReadableByteStreamControllerRespondWithNewView(controller, view) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === "closed") {
          if (view.byteLength !== 0) {
            throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
          }
        } else {
          if (view.byteLength === 0) {
            throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
          }
        }
        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
          throw new RangeError("The region specified by view does not match byobRequest");
        }
        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
          throw new RangeError("The buffer of view has different capacity than byobRequest");
        }
        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
          throw new RangeError("The region specified by view is larger than byobRequest");
        }
        const viewByteLength = view.byteLength;
        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
      }
      function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
        controller._controlledReadableByteStream = stream;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._byobRequest = null;
        controller._queue = controller._queueTotalSize = void 0;
        ResetQueue(controller);
        controller._closeRequested = false;
        controller._started = false;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        controller._autoAllocateChunkSize = autoAllocateChunkSize;
        controller._pendingPullIntos = new SimpleQueue();
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
          controller._started = true;
          ReadableByteStreamControllerCallPullIfNeeded(controller);
          return null;
        }, (r6) => {
          ReadableByteStreamControllerError(controller, r6);
          return null;
        });
      }
      function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
        const controller = Object.create(ReadableByteStreamController2.prototype);
        let startAlgorithm;
        let pullAlgorithm;
        let cancelAlgorithm;
        if (underlyingByteSource.start !== void 0) {
          startAlgorithm = () => underlyingByteSource.start(controller);
        } else {
          startAlgorithm = () => void 0;
        }
        if (underlyingByteSource.pull !== void 0) {
          pullAlgorithm = () => underlyingByteSource.pull(controller);
        } else {
          pullAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingByteSource.cancel !== void 0) {
          cancelAlgorithm = (reason) => underlyingByteSource.cancel(reason);
        } else {
          cancelAlgorithm = () => promiseResolvedWith(void 0);
        }
        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
        if (autoAllocateChunkSize === 0) {
          throw new TypeError("autoAllocateChunkSize must be greater than 0");
        }
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
      }
      function SetUpReadableStreamBYOBRequest(request2, controller, view) {
        request2._associatedReadableByteStreamController = controller;
        request2._view = view;
      }
      function byobRequestBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);
      }
      function byteStreamControllerBrandCheckException(name) {
        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);
      }
      function convertReaderOptions(options, context) {
        assertDictionary(options, context);
        const mode = options === null || options === void 0 ? void 0 : options.mode;
        return {
          mode: mode === void 0 ? void 0 : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)
        };
      }
      function convertReadableStreamReaderMode(mode, context) {
        mode = `${mode}`;
        if (mode !== "byob") {
          throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);
        }
        return mode;
      }
      function convertByobReadOptions(options, context) {
        var _a4;
        assertDictionary(options, context);
        const min = (_a4 = options === null || options === void 0 ? void 0 : options.min) !== null && _a4 !== void 0 ? _a4 : 1;
        return {
          min: convertUnsignedLongLongWithEnforceRange(min, `${context} has member 'min' that`)
        };
      }
      function AcquireReadableStreamBYOBReader(stream) {
        return new ReadableStreamBYOBReader2(stream);
      }
      function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
        stream._reader._readIntoRequests.push(readIntoRequest);
      }
      function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readIntoRequest = reader._readIntoRequests.shift();
        if (done) {
          readIntoRequest._closeSteps(chunk);
        } else {
          readIntoRequest._chunkSteps(chunk);
        }
      }
      function ReadableStreamGetNumReadIntoRequests(stream) {
        return stream._reader._readIntoRequests.length;
      }
      function ReadableStreamHasBYOBReader(stream) {
        const reader = stream._reader;
        if (reader === void 0) {
          return false;
        }
        if (!IsReadableStreamBYOBReader(reader)) {
          return false;
        }
        return true;
      }
      class ReadableStreamBYOBReader2 {
        constructor(stream) {
          assertRequiredArgument(stream, 1, "ReadableStreamBYOBReader");
          assertReadableStream(stream, "First parameter");
          if (IsReadableStreamLocked(stream)) {
            throw new TypeError("This stream has already been locked for exclusive reading by another reader");
          }
          if (!IsReadableByteStreamController(stream._readableStreamController)) {
            throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
          }
          ReadableStreamReaderGenericInitialize(this, stream);
          this._readIntoRequests = new SimpleQueue();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the reader's lock is released before the stream finishes closing.
         */
        get closed() {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException("closed"));
          }
          return this._closedPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = void 0) {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException("cancel"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("cancel"));
          }
          return ReadableStreamReaderGenericCancel(this, reason);
        }
        read(view, rawOptions = {}) {
          if (!IsReadableStreamBYOBReader(this)) {
            return promiseRejectedWith(byobReaderBrandCheckException("read"));
          }
          if (!ArrayBuffer.isView(view)) {
            return promiseRejectedWith(new TypeError("view must be an array buffer view"));
          }
          if (view.byteLength === 0) {
            return promiseRejectedWith(new TypeError("view must have non-zero byteLength"));
          }
          if (view.buffer.byteLength === 0) {
            return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));
          }
          if (IsDetachedBuffer(view.buffer)) {
            return promiseRejectedWith(new TypeError("view's buffer has been detached"));
          }
          let options;
          try {
            options = convertByobReadOptions(rawOptions, "options");
          } catch (e6) {
            return promiseRejectedWith(e6);
          }
          const min = options.min;
          if (min === 0) {
            return promiseRejectedWith(new TypeError("options.min must be greater than 0"));
          }
          if (!isDataView2(view)) {
            if (min > view.length) {
              return promiseRejectedWith(new RangeError("options.min must be less than or equal to view's length"));
            }
          } else if (min > view.byteLength) {
            return promiseRejectedWith(new RangeError("options.min must be less than or equal to view's byteLength"));
          }
          if (this._ownerReadableStream === void 0) {
            return promiseRejectedWith(readerLockException("read from"));
          }
          let resolvePromise;
          let rejectPromise;
          const promise = newPromise((resolve2, reject) => {
            resolvePromise = resolve2;
            rejectPromise = reject;
          });
          const readIntoRequest = {
            _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
            _closeSteps: (chunk) => resolvePromise({ value: chunk, done: true }),
            _errorSteps: (e6) => rejectPromise(e6)
          };
          ReadableStreamBYOBReaderRead(this, view, min, readIntoRequest);
          return promise;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
          if (!IsReadableStreamBYOBReader(this)) {
            throw byobReaderBrandCheckException("releaseLock");
          }
          if (this._ownerReadableStream === void 0) {
            return;
          }
          ReadableStreamBYOBReaderRelease(this);
        }
      }
      Object.defineProperties(ReadableStreamBYOBReader2.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
      });
      setFunctionName(ReadableStreamBYOBReader2.prototype.cancel, "cancel");
      setFunctionName(ReadableStreamBYOBReader2.prototype.read, "read");
      setFunctionName(ReadableStreamBYOBReader2.prototype.releaseLock, "releaseLock");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamBYOBReader2.prototype, Symbol.toStringTag, {
          value: "ReadableStreamBYOBReader",
          configurable: true
        });
      }
      function IsReadableStreamBYOBReader(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_readIntoRequests")) {
          return false;
        }
        return x5 instanceof ReadableStreamBYOBReader2;
      }
      function ReadableStreamBYOBReaderRead(reader, view, min, readIntoRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === "errored") {
          readIntoRequest._errorSteps(stream._storedError);
        } else {
          ReadableByteStreamControllerPullInto(stream._readableStreamController, view, min, readIntoRequest);
        }
      }
      function ReadableStreamBYOBReaderRelease(reader) {
        ReadableStreamReaderGenericRelease(reader);
        const e6 = new TypeError("Reader was released");
        ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e6);
      }
      function ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e6) {
        const readIntoRequests = reader._readIntoRequests;
        reader._readIntoRequests = new SimpleQueue();
        readIntoRequests.forEach((readIntoRequest) => {
          readIntoRequest._errorSteps(e6);
        });
      }
      function byobReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);
      }
      function ExtractHighWaterMark(strategy, defaultHWM) {
        const { highWaterMark } = strategy;
        if (highWaterMark === void 0) {
          return defaultHWM;
        }
        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
          throw new RangeError("Invalid highWaterMark");
        }
        return highWaterMark;
      }
      function ExtractSizeAlgorithm(strategy) {
        const { size } = strategy;
        if (!size) {
          return () => 1;
        }
        return size;
      }
      function convertQueuingStrategy(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        const size = init === null || init === void 0 ? void 0 : init.size;
        return {
          highWaterMark: highWaterMark === void 0 ? void 0 : convertUnrestrictedDouble(highWaterMark),
          size: size === void 0 ? void 0 : convertQueuingStrategySize(size, `${context} has member 'size' that`)
        };
      }
      function convertQueuingStrategySize(fn, context) {
        assertFunction(fn, context);
        return (chunk) => convertUnrestrictedDouble(fn(chunk));
      }
      function convertUnderlyingSink(original, context) {
        assertDictionary(original, context);
        const abort = original === null || original === void 0 ? void 0 : original.abort;
        const close = original === null || original === void 0 ? void 0 : original.close;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        const write = original === null || original === void 0 ? void 0 : original.write;
        return {
          abort: abort === void 0 ? void 0 : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),
          close: close === void 0 ? void 0 : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),
          start: start === void 0 ? void 0 : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),
          write: write === void 0 ? void 0 : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),
          type
        };
      }
      function convertUnderlyingSinkAbortCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
      }
      function convertUnderlyingSinkCloseCallback(fn, original, context) {
        assertFunction(fn, context);
        return () => promiseCall(fn, original, []);
      }
      function convertUnderlyingSinkStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
      }
      function convertUnderlyingSinkWriteCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
      }
      function assertWritableStream(x5, context) {
        if (!IsWritableStream(x5)) {
          throw new TypeError(`${context} is not a WritableStream.`);
        }
      }
      function isAbortSignal2(value) {
        if (typeof value !== "object" || value === null) {
          return false;
        }
        try {
          return typeof value.aborted === "boolean";
        } catch (_a4) {
          return false;
        }
      }
      const supportsAbortController = typeof AbortController === "function";
      function createAbortController() {
        if (supportsAbortController) {
          return new AbortController();
        }
        return void 0;
      }
      class WritableStream3 {
        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
          if (rawUnderlyingSink === void 0) {
            rawUnderlyingSink = null;
          } else {
            assertObject(rawUnderlyingSink, "First parameter");
          }
          const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
          const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, "First parameter");
          InitializeWritableStream(this);
          const type = underlyingSink.type;
          if (type !== void 0) {
            throw new RangeError("Invalid type is specified");
          }
          const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
          const highWaterMark = ExtractHighWaterMark(strategy, 1);
          SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
        }
        /**
         * Returns whether or not the writable stream is locked to a writer.
         */
        get locked() {
          if (!IsWritableStream(this)) {
            throw streamBrandCheckException$2("locked");
          }
          return IsWritableStreamLocked(this);
        }
        /**
         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be
         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort
         * mechanism of the underlying sink.
         *
         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled
         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel
         * the stream) if the stream is currently locked.
         */
        abort(reason = void 0) {
          if (!IsWritableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$2("abort"));
          }
          if (IsWritableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("Cannot abort a stream that already has a writer"));
          }
          return WritableStreamAbort(this, reason);
        }
        /**
         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its
         * close behavior. During this time any further attempts to write will fail (without erroring the stream).
         *
         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream
         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with
         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.
         */
        close() {
          if (!IsWritableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$2("close"));
          }
          if (IsWritableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("Cannot close a stream that already has a writer"));
          }
          if (WritableStreamCloseQueuedOrInFlight(this)) {
            return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
          }
          return WritableStreamClose(this);
        }
        /**
         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream
         * is locked, no other writer can be acquired until this one is released.
         *
         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream
         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at
         * the same time, which would cause the resulting written data to be unpredictable and probably useless.
         */
        getWriter() {
          if (!IsWritableStream(this)) {
            throw streamBrandCheckException$2("getWriter");
          }
          return AcquireWritableStreamDefaultWriter(this);
        }
      }
      Object.defineProperties(WritableStream3.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        getWriter: { enumerable: true },
        locked: { enumerable: true }
      });
      setFunctionName(WritableStream3.prototype.abort, "abort");
      setFunctionName(WritableStream3.prototype.close, "close");
      setFunctionName(WritableStream3.prototype.getWriter, "getWriter");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(WritableStream3.prototype, Symbol.toStringTag, {
          value: "WritableStream",
          configurable: true
        });
      }
      function AcquireWritableStreamDefaultWriter(stream) {
        return new WritableStreamDefaultWriter2(stream);
      }
      function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(WritableStream3.prototype);
        InitializeWritableStream(stream);
        const controller = Object.create(WritableStreamDefaultController2.prototype);
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
      }
      function InitializeWritableStream(stream) {
        stream._state = "writable";
        stream._storedError = void 0;
        stream._writer = void 0;
        stream._writableStreamController = void 0;
        stream._writeRequests = new SimpleQueue();
        stream._inFlightWriteRequest = void 0;
        stream._closeRequest = void 0;
        stream._inFlightCloseRequest = void 0;
        stream._pendingAbortRequest = void 0;
        stream._backpressure = false;
      }
      function IsWritableStream(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_writableStreamController")) {
          return false;
        }
        return x5 instanceof WritableStream3;
      }
      function IsWritableStreamLocked(stream) {
        if (stream._writer === void 0) {
          return false;
        }
        return true;
      }
      function WritableStreamAbort(stream, reason) {
        var _a4;
        if (stream._state === "closed" || stream._state === "errored") {
          return promiseResolvedWith(void 0);
        }
        stream._writableStreamController._abortReason = reason;
        (_a4 = stream._writableStreamController._abortController) === null || _a4 === void 0 ? void 0 : _a4.abort(reason);
        const state = stream._state;
        if (state === "closed" || state === "errored") {
          return promiseResolvedWith(void 0);
        }
        if (stream._pendingAbortRequest !== void 0) {
          return stream._pendingAbortRequest._promise;
        }
        let wasAlreadyErroring = false;
        if (state === "erroring") {
          wasAlreadyErroring = true;
          reason = void 0;
        }
        const promise = newPromise((resolve2, reject) => {
          stream._pendingAbortRequest = {
            _promise: void 0,
            _resolve: resolve2,
            _reject: reject,
            _reason: reason,
            _wasAlreadyErroring: wasAlreadyErroring
          };
        });
        stream._pendingAbortRequest._promise = promise;
        if (!wasAlreadyErroring) {
          WritableStreamStartErroring(stream, reason);
        }
        return promise;
      }
      function WritableStreamClose(stream) {
        const state = stream._state;
        if (state === "closed" || state === "errored") {
          return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));
        }
        const promise = newPromise((resolve2, reject) => {
          const closeRequest = {
            _resolve: resolve2,
            _reject: reject
          };
          stream._closeRequest = closeRequest;
        });
        const writer = stream._writer;
        if (writer !== void 0 && stream._backpressure && state === "writable") {
          defaultWriterReadyPromiseResolve(writer);
        }
        WritableStreamDefaultControllerClose(stream._writableStreamController);
        return promise;
      }
      function WritableStreamAddWriteRequest(stream) {
        const promise = newPromise((resolve2, reject) => {
          const writeRequest = {
            _resolve: resolve2,
            _reject: reject
          };
          stream._writeRequests.push(writeRequest);
        });
        return promise;
      }
      function WritableStreamDealWithRejection(stream, error2) {
        const state = stream._state;
        if (state === "writable") {
          WritableStreamStartErroring(stream, error2);
          return;
        }
        WritableStreamFinishErroring(stream);
      }
      function WritableStreamStartErroring(stream, reason) {
        const controller = stream._writableStreamController;
        stream._state = "erroring";
        stream._storedError = reason;
        const writer = stream._writer;
        if (writer !== void 0) {
          WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
        }
        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
          WritableStreamFinishErroring(stream);
        }
      }
      function WritableStreamFinishErroring(stream) {
        stream._state = "errored";
        stream._writableStreamController[ErrorSteps]();
        const storedError = stream._storedError;
        stream._writeRequests.forEach((writeRequest) => {
          writeRequest._reject(storedError);
        });
        stream._writeRequests = new SimpleQueue();
        if (stream._pendingAbortRequest === void 0) {
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return;
        }
        const abortRequest = stream._pendingAbortRequest;
        stream._pendingAbortRequest = void 0;
        if (abortRequest._wasAlreadyErroring) {
          abortRequest._reject(storedError);
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return;
        }
        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
        uponPromise(promise, () => {
          abortRequest._resolve();
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return null;
        }, (reason) => {
          abortRequest._reject(reason);
          WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
          return null;
        });
      }
      function WritableStreamFinishInFlightWrite(stream) {
        stream._inFlightWriteRequest._resolve(void 0);
        stream._inFlightWriteRequest = void 0;
      }
      function WritableStreamFinishInFlightWriteWithError(stream, error2) {
        stream._inFlightWriteRequest._reject(error2);
        stream._inFlightWriteRequest = void 0;
        WritableStreamDealWithRejection(stream, error2);
      }
      function WritableStreamFinishInFlightClose(stream) {
        stream._inFlightCloseRequest._resolve(void 0);
        stream._inFlightCloseRequest = void 0;
        const state = stream._state;
        if (state === "erroring") {
          stream._storedError = void 0;
          if (stream._pendingAbortRequest !== void 0) {
            stream._pendingAbortRequest._resolve();
            stream._pendingAbortRequest = void 0;
          }
        }
        stream._state = "closed";
        const writer = stream._writer;
        if (writer !== void 0) {
          defaultWriterClosedPromiseResolve(writer);
        }
      }
      function WritableStreamFinishInFlightCloseWithError(stream, error2) {
        stream._inFlightCloseRequest._reject(error2);
        stream._inFlightCloseRequest = void 0;
        if (stream._pendingAbortRequest !== void 0) {
          stream._pendingAbortRequest._reject(error2);
          stream._pendingAbortRequest = void 0;
        }
        WritableStreamDealWithRejection(stream, error2);
      }
      function WritableStreamCloseQueuedOrInFlight(stream) {
        if (stream._closeRequest === void 0 && stream._inFlightCloseRequest === void 0) {
          return false;
        }
        return true;
      }
      function WritableStreamHasOperationMarkedInFlight(stream) {
        if (stream._inFlightWriteRequest === void 0 && stream._inFlightCloseRequest === void 0) {
          return false;
        }
        return true;
      }
      function WritableStreamMarkCloseRequestInFlight(stream) {
        stream._inFlightCloseRequest = stream._closeRequest;
        stream._closeRequest = void 0;
      }
      function WritableStreamMarkFirstWriteRequestInFlight(stream) {
        stream._inFlightWriteRequest = stream._writeRequests.shift();
      }
      function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
        if (stream._closeRequest !== void 0) {
          stream._closeRequest._reject(stream._storedError);
          stream._closeRequest = void 0;
        }
        const writer = stream._writer;
        if (writer !== void 0) {
          defaultWriterClosedPromiseReject(writer, stream._storedError);
        }
      }
      function WritableStreamUpdateBackpressure(stream, backpressure) {
        const writer = stream._writer;
        if (writer !== void 0 && backpressure !== stream._backpressure) {
          if (backpressure) {
            defaultWriterReadyPromiseReset(writer);
          } else {
            defaultWriterReadyPromiseResolve(writer);
          }
        }
        stream._backpressure = backpressure;
      }
      class WritableStreamDefaultWriter2 {
        constructor(stream) {
          assertRequiredArgument(stream, 1, "WritableStreamDefaultWriter");
          assertWritableStream(stream, "First parameter");
          if (IsWritableStreamLocked(stream)) {
            throw new TypeError("This stream has already been locked for exclusive writing by another writer");
          }
          this._ownerWritableStream = stream;
          stream._writer = this;
          const state = stream._state;
          if (state === "writable") {
            if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
              defaultWriterReadyPromiseInitialize(this);
            } else {
              defaultWriterReadyPromiseInitializeAsResolved(this);
            }
            defaultWriterClosedPromiseInitialize(this);
          } else if (state === "erroring") {
            defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
            defaultWriterClosedPromiseInitialize(this);
          } else if (state === "closed") {
            defaultWriterReadyPromiseInitializeAsResolved(this);
            defaultWriterClosedPromiseInitializeAsResolved(this);
          } else {
            const storedError = stream._storedError;
            defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
            defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
          }
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the writer’s lock is released before the stream finishes closing.
         */
        get closed() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("closed"));
          }
          return this._closedPromise;
        }
        /**
         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.
         * A producer can use this information to determine the right amount of data to write.
         *
         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort
         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when
         * the writer’s lock is released.
         */
        get desiredSize() {
          if (!IsWritableStreamDefaultWriter(this)) {
            throw defaultWriterBrandCheckException("desiredSize");
          }
          if (this._ownerWritableStream === void 0) {
            throw defaultWriterLockException("desiredSize");
          }
          return WritableStreamDefaultWriterGetDesiredSize(this);
        }
        /**
         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions
         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips
         * back to zero or below, the getter will return a new promise that stays pending until the next transition.
         *
         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become
         * rejected.
         */
        get ready() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("ready"));
          }
          return this._readyPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.
         */
        abort(reason = void 0) {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("abort"));
          }
          if (this._ownerWritableStream === void 0) {
            return promiseRejectedWith(defaultWriterLockException("abort"));
          }
          return WritableStreamDefaultWriterAbort(this, reason);
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.
         */
        close() {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("close"));
          }
          const stream = this._ownerWritableStream;
          if (stream === void 0) {
            return promiseRejectedWith(defaultWriterLockException("close"));
          }
          if (WritableStreamCloseQueuedOrInFlight(stream)) {
            return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
          }
          return WritableStreamDefaultWriterClose(this);
        }
        /**
         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.
         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from
         * now on; otherwise, the writer will appear closed.
         *
         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the
         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).
         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents
         * other producers from writing in an interleaved manner.
         */
        releaseLock() {
          if (!IsWritableStreamDefaultWriter(this)) {
            throw defaultWriterBrandCheckException("releaseLock");
          }
          const stream = this._ownerWritableStream;
          if (stream === void 0) {
            return;
          }
          WritableStreamDefaultWriterRelease(this);
        }
        write(chunk = void 0) {
          if (!IsWritableStreamDefaultWriter(this)) {
            return promiseRejectedWith(defaultWriterBrandCheckException("write"));
          }
          if (this._ownerWritableStream === void 0) {
            return promiseRejectedWith(defaultWriterLockException("write to"));
          }
          return WritableStreamDefaultWriterWrite(this, chunk);
        }
      }
      Object.defineProperties(WritableStreamDefaultWriter2.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        releaseLock: { enumerable: true },
        write: { enumerable: true },
        closed: { enumerable: true },
        desiredSize: { enumerable: true },
        ready: { enumerable: true }
      });
      setFunctionName(WritableStreamDefaultWriter2.prototype.abort, "abort");
      setFunctionName(WritableStreamDefaultWriter2.prototype.close, "close");
      setFunctionName(WritableStreamDefaultWriter2.prototype.releaseLock, "releaseLock");
      setFunctionName(WritableStreamDefaultWriter2.prototype.write, "write");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(WritableStreamDefaultWriter2.prototype, Symbol.toStringTag, {
          value: "WritableStreamDefaultWriter",
          configurable: true
        });
      }
      function IsWritableStreamDefaultWriter(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_ownerWritableStream")) {
          return false;
        }
        return x5 instanceof WritableStreamDefaultWriter2;
      }
      function WritableStreamDefaultWriterAbort(writer, reason) {
        const stream = writer._ownerWritableStream;
        return WritableStreamAbort(stream, reason);
      }
      function WritableStreamDefaultWriterClose(writer) {
        const stream = writer._ownerWritableStream;
        return WritableStreamClose(stream);
      }
      function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
          return promiseResolvedWith(void 0);
        }
        if (state === "errored") {
          return promiseRejectedWith(stream._storedError);
        }
        return WritableStreamDefaultWriterClose(writer);
      }
      function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error2) {
        if (writer._closedPromiseState === "pending") {
          defaultWriterClosedPromiseReject(writer, error2);
        } else {
          defaultWriterClosedPromiseResetToRejected(writer, error2);
        }
      }
      function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error2) {
        if (writer._readyPromiseState === "pending") {
          defaultWriterReadyPromiseReject(writer, error2);
        } else {
          defaultWriterReadyPromiseResetToRejected(writer, error2);
        }
      }
      function WritableStreamDefaultWriterGetDesiredSize(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (state === "errored" || state === "erroring") {
          return null;
        }
        if (state === "closed") {
          return 0;
        }
        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
      }
      function WritableStreamDefaultWriterRelease(writer) {
        const stream = writer._ownerWritableStream;
        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);
        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
        stream._writer = void 0;
        writer._ownerWritableStream = void 0;
      }
      function WritableStreamDefaultWriterWrite(writer, chunk) {
        const stream = writer._ownerWritableStream;
        const controller = stream._writableStreamController;
        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
        if (stream !== writer._ownerWritableStream) {
          return promiseRejectedWith(defaultWriterLockException("write to"));
        }
        const state = stream._state;
        if (state === "errored") {
          return promiseRejectedWith(stream._storedError);
        }
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
          return promiseRejectedWith(new TypeError("The stream is closing or closed and cannot be written to"));
        }
        if (state === "erroring") {
          return promiseRejectedWith(stream._storedError);
        }
        const promise = WritableStreamAddWriteRequest(stream);
        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
        return promise;
      }
      const closeSentinel = {};
      class WritableStreamDefaultController2 {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.
         *
         * @deprecated
         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.
         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.
         */
        get abortReason() {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2("abortReason");
          }
          return this._abortReason;
        }
        /**
         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.
         */
        get signal() {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2("signal");
          }
          if (this._abortController === void 0) {
            throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
          }
          return this._abortController.signal;
        }
        /**
         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.
         *
         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying
         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the
         * normal lifecycle of interactions with the underlying sink.
         */
        error(e6 = void 0) {
          if (!IsWritableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$2("error");
          }
          const state = this._controlledWritableStream._state;
          if (state !== "writable") {
            return;
          }
          WritableStreamDefaultControllerError(this, e6);
        }
        /** @internal */
        [AbortSteps](reason) {
          const result = this._abortAlgorithm(reason);
          WritableStreamDefaultControllerClearAlgorithms(this);
          return result;
        }
        /** @internal */
        [ErrorSteps]() {
          ResetQueue(this);
        }
      }
      Object.defineProperties(WritableStreamDefaultController2.prototype, {
        abortReason: { enumerable: true },
        signal: { enumerable: true },
        error: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(WritableStreamDefaultController2.prototype, Symbol.toStringTag, {
          value: "WritableStreamDefaultController",
          configurable: true
        });
      }
      function IsWritableStreamDefaultController(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_controlledWritableStream")) {
          return false;
        }
        return x5 instanceof WritableStreamDefaultController2;
      }
      function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledWritableStream = stream;
        stream._writableStreamController = controller;
        controller._queue = void 0;
        controller._queueTotalSize = void 0;
        ResetQueue(controller);
        controller._abortReason = void 0;
        controller._abortController = createAbortController();
        controller._started = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._writeAlgorithm = writeAlgorithm;
        controller._closeAlgorithm = closeAlgorithm;
        controller._abortAlgorithm = abortAlgorithm;
        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
        WritableStreamUpdateBackpressure(stream, backpressure);
        const startResult = startAlgorithm();
        const startPromise = promiseResolvedWith(startResult);
        uponPromise(startPromise, () => {
          controller._started = true;
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
          return null;
        }, (r6) => {
          controller._started = true;
          WritableStreamDealWithRejection(stream, r6);
          return null;
        });
      }
      function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(WritableStreamDefaultController2.prototype);
        let startAlgorithm;
        let writeAlgorithm;
        let closeAlgorithm;
        let abortAlgorithm;
        if (underlyingSink.start !== void 0) {
          startAlgorithm = () => underlyingSink.start(controller);
        } else {
          startAlgorithm = () => void 0;
        }
        if (underlyingSink.write !== void 0) {
          writeAlgorithm = (chunk) => underlyingSink.write(chunk, controller);
        } else {
          writeAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingSink.close !== void 0) {
          closeAlgorithm = () => underlyingSink.close();
        } else {
          closeAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingSink.abort !== void 0) {
          abortAlgorithm = (reason) => underlyingSink.abort(reason);
        } else {
          abortAlgorithm = () => promiseResolvedWith(void 0);
        }
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
      }
      function WritableStreamDefaultControllerClearAlgorithms(controller) {
        controller._writeAlgorithm = void 0;
        controller._closeAlgorithm = void 0;
        controller._abortAlgorithm = void 0;
        controller._strategySizeAlgorithm = void 0;
      }
      function WritableStreamDefaultControllerClose(controller) {
        EnqueueValueWithSize(controller, closeSentinel, 0);
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }
      function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
        try {
          return controller._strategySizeAlgorithm(chunk);
        } catch (chunkSizeE) {
          WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
          return 1;
        }
      }
      function WritableStreamDefaultControllerGetDesiredSize(controller) {
        return controller._strategyHWM - controller._queueTotalSize;
      }
      function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
        try {
          EnqueueValueWithSize(controller, chunk, chunkSize);
        } catch (enqueueE) {
          WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
          return;
        }
        const stream = controller._controlledWritableStream;
        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === "writable") {
          const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
          WritableStreamUpdateBackpressure(stream, backpressure);
        }
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }
      function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
        const stream = controller._controlledWritableStream;
        if (!controller._started) {
          return;
        }
        if (stream._inFlightWriteRequest !== void 0) {
          return;
        }
        const state = stream._state;
        if (state === "erroring") {
          WritableStreamFinishErroring(stream);
          return;
        }
        if (controller._queue.length === 0) {
          return;
        }
        const value = PeekQueueValue(controller);
        if (value === closeSentinel) {
          WritableStreamDefaultControllerProcessClose(controller);
        } else {
          WritableStreamDefaultControllerProcessWrite(controller, value);
        }
      }
      function WritableStreamDefaultControllerErrorIfNeeded(controller, error2) {
        if (controller._controlledWritableStream._state === "writable") {
          WritableStreamDefaultControllerError(controller, error2);
        }
      }
      function WritableStreamDefaultControllerProcessClose(controller) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkCloseRequestInFlight(stream);
        DequeueValue(controller);
        const sinkClosePromise = controller._closeAlgorithm();
        WritableStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(sinkClosePromise, () => {
          WritableStreamFinishInFlightClose(stream);
          return null;
        }, (reason) => {
          WritableStreamFinishInFlightCloseWithError(stream, reason);
          return null;
        });
      }
      function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkFirstWriteRequestInFlight(stream);
        const sinkWritePromise = controller._writeAlgorithm(chunk);
        uponPromise(sinkWritePromise, () => {
          WritableStreamFinishInFlightWrite(stream);
          const state = stream._state;
          DequeueValue(controller);
          if (!WritableStreamCloseQueuedOrInFlight(stream) && state === "writable") {
            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
            WritableStreamUpdateBackpressure(stream, backpressure);
          }
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
          return null;
        }, (reason) => {
          if (stream._state === "writable") {
            WritableStreamDefaultControllerClearAlgorithms(controller);
          }
          WritableStreamFinishInFlightWriteWithError(stream, reason);
          return null;
        });
      }
      function WritableStreamDefaultControllerGetBackpressure(controller) {
        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
        return desiredSize <= 0;
      }
      function WritableStreamDefaultControllerError(controller, error2) {
        const stream = controller._controlledWritableStream;
        WritableStreamDefaultControllerClearAlgorithms(controller);
        WritableStreamStartErroring(stream, error2);
      }
      function streamBrandCheckException$2(name) {
        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);
      }
      function defaultControllerBrandCheckException$2(name) {
        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);
      }
      function defaultWriterBrandCheckException(name) {
        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);
      }
      function defaultWriterLockException(name) {
        return new TypeError("Cannot " + name + " a stream using a released writer");
      }
      function defaultWriterClosedPromiseInitialize(writer) {
        writer._closedPromise = newPromise((resolve2, reject) => {
          writer._closedPromise_resolve = resolve2;
          writer._closedPromise_reject = reject;
          writer._closedPromiseState = "pending";
        });
      }
      function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseReject(writer, reason);
      }
      function defaultWriterClosedPromiseInitializeAsResolved(writer) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseResolve(writer);
      }
      function defaultWriterClosedPromiseReject(writer, reason) {
        if (writer._closedPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(writer._closedPromise);
        writer._closedPromise_reject(reason);
        writer._closedPromise_resolve = void 0;
        writer._closedPromise_reject = void 0;
        writer._closedPromiseState = "rejected";
      }
      function defaultWriterClosedPromiseResetToRejected(writer, reason) {
        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
      }
      function defaultWriterClosedPromiseResolve(writer) {
        if (writer._closedPromise_resolve === void 0) {
          return;
        }
        writer._closedPromise_resolve(void 0);
        writer._closedPromise_resolve = void 0;
        writer._closedPromise_reject = void 0;
        writer._closedPromiseState = "resolved";
      }
      function defaultWriterReadyPromiseInitialize(writer) {
        writer._readyPromise = newPromise((resolve2, reject) => {
          writer._readyPromise_resolve = resolve2;
          writer._readyPromise_reject = reject;
        });
        writer._readyPromiseState = "pending";
      }
      function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseReject(writer, reason);
      }
      function defaultWriterReadyPromiseInitializeAsResolved(writer) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseResolve(writer);
      }
      function defaultWriterReadyPromiseReject(writer, reason) {
        if (writer._readyPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(writer._readyPromise);
        writer._readyPromise_reject(reason);
        writer._readyPromise_resolve = void 0;
        writer._readyPromise_reject = void 0;
        writer._readyPromiseState = "rejected";
      }
      function defaultWriterReadyPromiseReset(writer) {
        defaultWriterReadyPromiseInitialize(writer);
      }
      function defaultWriterReadyPromiseResetToRejected(writer, reason) {
        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
      }
      function defaultWriterReadyPromiseResolve(writer) {
        if (writer._readyPromise_resolve === void 0) {
          return;
        }
        writer._readyPromise_resolve(void 0);
        writer._readyPromise_resolve = void 0;
        writer._readyPromise_reject = void 0;
        writer._readyPromiseState = "fulfilled";
      }
      function getGlobals() {
        if (typeof globalThis !== "undefined") {
          return globalThis;
        } else if (typeof self !== "undefined") {
          return self;
        } else if (typeof global !== "undefined") {
          return global;
        }
        return void 0;
      }
      const globals = getGlobals();
      function isDOMExceptionConstructor(ctor) {
        if (!(typeof ctor === "function" || typeof ctor === "object")) {
          return false;
        }
        if (ctor.name !== "DOMException") {
          return false;
        }
        try {
          new ctor();
          return true;
        } catch (_a4) {
          return false;
        }
      }
      function getFromGlobal() {
        const ctor = globals === null || globals === void 0 ? void 0 : globals.DOMException;
        return isDOMExceptionConstructor(ctor) ? ctor : void 0;
      }
      function createPolyfill() {
        const ctor = function DOMException5(message, name) {
          this.message = message || "";
          this.name = name || "Error";
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          }
        };
        setFunctionName(ctor, "DOMException");
        ctor.prototype = Object.create(Error.prototype);
        Object.defineProperty(ctor.prototype, "constructor", { value: ctor, writable: true, configurable: true });
        return ctor;
      }
      const DOMException4 = getFromGlobal() || createPolyfill();
      function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
        const reader = AcquireReadableStreamDefaultReader(source);
        const writer = AcquireWritableStreamDefaultWriter(dest);
        source._disturbed = true;
        let shuttingDown = false;
        let currentWrite = promiseResolvedWith(void 0);
        return newPromise((resolve2, reject) => {
          let abortAlgorithm;
          if (signal !== void 0) {
            abortAlgorithm = () => {
              const error2 = signal.reason !== void 0 ? signal.reason : new DOMException4("Aborted", "AbortError");
              const actions = [];
              if (!preventAbort) {
                actions.push(() => {
                  if (dest._state === "writable") {
                    return WritableStreamAbort(dest, error2);
                  }
                  return promiseResolvedWith(void 0);
                });
              }
              if (!preventCancel) {
                actions.push(() => {
                  if (source._state === "readable") {
                    return ReadableStreamCancel(source, error2);
                  }
                  return promiseResolvedWith(void 0);
                });
              }
              shutdownWithAction(() => Promise.all(actions.map((action) => action())), true, error2);
            };
            if (signal.aborted) {
              abortAlgorithm();
              return;
            }
            signal.addEventListener("abort", abortAlgorithm);
          }
          function pipeLoop() {
            return newPromise((resolveLoop, rejectLoop) => {
              function next(done) {
                if (done) {
                  resolveLoop();
                } else {
                  PerformPromiseThen(pipeStep(), next, rejectLoop);
                }
              }
              next(false);
            });
          }
          function pipeStep() {
            if (shuttingDown) {
              return promiseResolvedWith(true);
            }
            return PerformPromiseThen(writer._readyPromise, () => {
              return newPromise((resolveRead, rejectRead) => {
                ReadableStreamDefaultReaderRead(reader, {
                  _chunkSteps: (chunk) => {
                    currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), void 0, noop);
                    resolveRead(false);
                  },
                  _closeSteps: () => resolveRead(true),
                  _errorSteps: rejectRead
                });
              });
            });
          }
          isOrBecomesErrored(source, reader._closedPromise, (storedError) => {
            if (!preventAbort) {
              shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);
            } else {
              shutdown(true, storedError);
            }
            return null;
          });
          isOrBecomesErrored(dest, writer._closedPromise, (storedError) => {
            if (!preventCancel) {
              shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);
            } else {
              shutdown(true, storedError);
            }
            return null;
          });
          isOrBecomesClosed(source, reader._closedPromise, () => {
            if (!preventClose) {
              shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));
            } else {
              shutdown();
            }
            return null;
          });
          if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === "closed") {
            const destClosed = new TypeError("the destination writable stream closed before all data could be piped to it");
            if (!preventCancel) {
              shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);
            } else {
              shutdown(true, destClosed);
            }
          }
          setPromiseIsHandledToTrue(pipeLoop());
          function waitForWritesToFinish() {
            const oldCurrentWrite = currentWrite;
            return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : void 0);
          }
          function isOrBecomesErrored(stream, promise, action) {
            if (stream._state === "errored") {
              action(stream._storedError);
            } else {
              uponRejection(promise, action);
            }
          }
          function isOrBecomesClosed(stream, promise, action) {
            if (stream._state === "closed") {
              action();
            } else {
              uponFulfillment(promise, action);
            }
          }
          function shutdownWithAction(action, originalIsError, originalError) {
            if (shuttingDown) {
              return;
            }
            shuttingDown = true;
            if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
              uponFulfillment(waitForWritesToFinish(), doTheRest);
            } else {
              doTheRest();
            }
            function doTheRest() {
              uponPromise(action(), () => finalize(originalIsError, originalError), (newError) => finalize(true, newError));
              return null;
            }
          }
          function shutdown(isError, error2) {
            if (shuttingDown) {
              return;
            }
            shuttingDown = true;
            if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
              uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error2));
            } else {
              finalize(isError, error2);
            }
          }
          function finalize(isError, error2) {
            WritableStreamDefaultWriterRelease(writer);
            ReadableStreamReaderGenericRelease(reader);
            if (signal !== void 0) {
              signal.removeEventListener("abort", abortAlgorithm);
            }
            if (isError) {
              reject(error2);
            } else {
              resolve2(void 0);
            }
            return null;
          }
        });
      }
      class ReadableStreamDefaultController2 {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("desiredSize");
          }
          return ReadableStreamDefaultControllerGetDesiredSize(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("close");
          }
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
            throw new TypeError("The stream is not in a state that permits close");
          }
          ReadableStreamDefaultControllerClose(this);
        }
        enqueue(chunk = void 0) {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("enqueue");
          }
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
            throw new TypeError("The stream is not in a state that permits enqueue");
          }
          return ReadableStreamDefaultControllerEnqueue(this, chunk);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e6 = void 0) {
          if (!IsReadableStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException$1("error");
          }
          ReadableStreamDefaultControllerError(this, e6);
        }
        /** @internal */
        [CancelSteps](reason) {
          ResetQueue(this);
          const result = this._cancelAlgorithm(reason);
          ReadableStreamDefaultControllerClearAlgorithms(this);
          return result;
        }
        /** @internal */
        [PullSteps](readRequest) {
          const stream = this._controlledReadableStream;
          if (this._queue.length > 0) {
            const chunk = DequeueValue(this);
            if (this._closeRequested && this._queue.length === 0) {
              ReadableStreamDefaultControllerClearAlgorithms(this);
              ReadableStreamClose(stream);
            } else {
              ReadableStreamDefaultControllerCallPullIfNeeded(this);
            }
            readRequest._chunkSteps(chunk);
          } else {
            ReadableStreamAddReadRequest(stream, readRequest);
            ReadableStreamDefaultControllerCallPullIfNeeded(this);
          }
        }
        /** @internal */
        [ReleaseSteps]() {
        }
      }
      Object.defineProperties(ReadableStreamDefaultController2.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        desiredSize: { enumerable: true }
      });
      setFunctionName(ReadableStreamDefaultController2.prototype.close, "close");
      setFunctionName(ReadableStreamDefaultController2.prototype.enqueue, "enqueue");
      setFunctionName(ReadableStreamDefaultController2.prototype.error, "error");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStreamDefaultController2.prototype, Symbol.toStringTag, {
          value: "ReadableStreamDefaultController",
          configurable: true
        });
      }
      function IsReadableStreamDefaultController(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_controlledReadableStream")) {
          return false;
        }
        return x5 instanceof ReadableStreamDefaultController2;
      }
      function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
        if (!shouldPull) {
          return;
        }
        if (controller._pulling) {
          controller._pullAgain = true;
          return;
        }
        controller._pulling = true;
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
          controller._pulling = false;
          if (controller._pullAgain) {
            controller._pullAgain = false;
            ReadableStreamDefaultControllerCallPullIfNeeded(controller);
          }
          return null;
        }, (e6) => {
          ReadableStreamDefaultControllerError(controller, e6);
          return null;
        });
      }
      function ReadableStreamDefaultControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableStream;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return false;
        }
        if (!controller._started) {
          return false;
        }
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
          return true;
        }
        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
          return true;
        }
        return false;
      }
      function ReadableStreamDefaultControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = void 0;
        controller._cancelAlgorithm = void 0;
        controller._strategySizeAlgorithm = void 0;
      }
      function ReadableStreamDefaultControllerClose(controller) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return;
        }
        const stream = controller._controlledReadableStream;
        controller._closeRequested = true;
        if (controller._queue.length === 0) {
          ReadableStreamDefaultControllerClearAlgorithms(controller);
          ReadableStreamClose(stream);
        }
      }
      function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
          return;
        }
        const stream = controller._controlledReadableStream;
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
          ReadableStreamFulfillReadRequest(stream, chunk, false);
        } else {
          let chunkSize;
          try {
            chunkSize = controller._strategySizeAlgorithm(chunk);
          } catch (chunkSizeE) {
            ReadableStreamDefaultControllerError(controller, chunkSizeE);
            throw chunkSizeE;
          }
          try {
            EnqueueValueWithSize(controller, chunk, chunkSize);
          } catch (enqueueE) {
            ReadableStreamDefaultControllerError(controller, enqueueE);
            throw enqueueE;
          }
        }
        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
      }
      function ReadableStreamDefaultControllerError(controller, e6) {
        const stream = controller._controlledReadableStream;
        if (stream._state !== "readable") {
          return;
        }
        ResetQueue(controller);
        ReadableStreamDefaultControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e6);
      }
      function ReadableStreamDefaultControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableStream._state;
        if (state === "errored") {
          return null;
        }
        if (state === "closed") {
          return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
      }
      function ReadableStreamDefaultControllerHasBackpressure(controller) {
        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
          return false;
        }
        return true;
      }
      function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
        const state = controller._controlledReadableStream._state;
        if (!controller._closeRequested && state === "readable") {
          return true;
        }
        return false;
      }
      function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledReadableStream = stream;
        controller._queue = void 0;
        controller._queueTotalSize = void 0;
        ResetQueue(controller);
        controller._started = false;
        controller._closeRequested = false;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
          controller._started = true;
          ReadableStreamDefaultControllerCallPullIfNeeded(controller);
          return null;
        }, (r6) => {
          ReadableStreamDefaultControllerError(controller, r6);
          return null;
        });
      }
      function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(ReadableStreamDefaultController2.prototype);
        let startAlgorithm;
        let pullAlgorithm;
        let cancelAlgorithm;
        if (underlyingSource.start !== void 0) {
          startAlgorithm = () => underlyingSource.start(controller);
        } else {
          startAlgorithm = () => void 0;
        }
        if (underlyingSource.pull !== void 0) {
          pullAlgorithm = () => underlyingSource.pull(controller);
        } else {
          pullAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (underlyingSource.cancel !== void 0) {
          cancelAlgorithm = (reason) => underlyingSource.cancel(reason);
        } else {
          cancelAlgorithm = () => promiseResolvedWith(void 0);
        }
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
      }
      function defaultControllerBrandCheckException$1(name) {
        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);
      }
      function ReadableStreamTee(stream, cloneForBranch2) {
        if (IsReadableByteStreamController(stream._readableStreamController)) {
          return ReadableByteStreamTee(stream);
        }
        return ReadableStreamDefaultTee(stream);
      }
      function ReadableStreamDefaultTee(stream, cloneForBranch2) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgain = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise((resolve2) => {
          resolveCancelPromise = resolve2;
        });
        function pullAlgorithm() {
          if (reading) {
            readAgain = true;
            return promiseResolvedWith(void 0);
          }
          reading = true;
          const readRequest = {
            _chunkSteps: (chunk) => {
              _queueMicrotask(() => {
                readAgain = false;
                const chunk1 = chunk;
                const chunk2 = chunk;
                if (!canceled1) {
                  ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
                }
                if (!canceled2) {
                  ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
                }
                reading = false;
                if (readAgain) {
                  pullAlgorithm();
                }
              });
            },
            _closeSteps: () => {
              reading = false;
              if (!canceled1) {
                ReadableStreamDefaultControllerClose(branch1._readableStreamController);
              }
              if (!canceled2) {
                ReadableStreamDefaultControllerClose(branch2._readableStreamController);
              }
              if (!canceled1 || !canceled2) {
                resolveCancelPromise(void 0);
              }
            },
            _errorSteps: () => {
              reading = false;
            }
          };
          ReadableStreamDefaultReaderRead(reader, readRequest);
          return promiseResolvedWith(void 0);
        }
        function cancel1Algorithm(reason) {
          canceled1 = true;
          reason1 = reason;
          if (canceled2) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function cancel2Algorithm(reason) {
          canceled2 = true;
          reason2 = reason;
          if (canceled1) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function startAlgorithm() {
        }
        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
        uponRejection(reader._closedPromise, (r6) => {
          ReadableStreamDefaultControllerError(branch1._readableStreamController, r6);
          ReadableStreamDefaultControllerError(branch2._readableStreamController, r6);
          if (!canceled1 || !canceled2) {
            resolveCancelPromise(void 0);
          }
          return null;
        });
        return [branch1, branch2];
      }
      function ReadableByteStreamTee(stream) {
        let reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgainForBranch1 = false;
        let readAgainForBranch2 = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise((resolve2) => {
          resolveCancelPromise = resolve2;
        });
        function forwardReaderError(thisReader) {
          uponRejection(thisReader._closedPromise, (r6) => {
            if (thisReader !== reader) {
              return null;
            }
            ReadableByteStreamControllerError(branch1._readableStreamController, r6);
            ReadableByteStreamControllerError(branch2._readableStreamController, r6);
            if (!canceled1 || !canceled2) {
              resolveCancelPromise(void 0);
            }
            return null;
          });
        }
        function pullWithDefaultReader() {
          if (IsReadableStreamBYOBReader(reader)) {
            ReadableStreamReaderGenericRelease(reader);
            reader = AcquireReadableStreamDefaultReader(stream);
            forwardReaderError(reader);
          }
          const readRequest = {
            _chunkSteps: (chunk) => {
              _queueMicrotask(() => {
                readAgainForBranch1 = false;
                readAgainForBranch2 = false;
                const chunk1 = chunk;
                let chunk2 = chunk;
                if (!canceled1 && !canceled2) {
                  try {
                    chunk2 = CloneAsUint8Array(chunk);
                  } catch (cloneE) {
                    ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                    ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                    resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                    return;
                  }
                }
                if (!canceled1) {
                  ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
                }
                if (!canceled2) {
                  ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
                }
                reading = false;
                if (readAgainForBranch1) {
                  pull1Algorithm();
                } else if (readAgainForBranch2) {
                  pull2Algorithm();
                }
              });
            },
            _closeSteps: () => {
              reading = false;
              if (!canceled1) {
                ReadableByteStreamControllerClose(branch1._readableStreamController);
              }
              if (!canceled2) {
                ReadableByteStreamControllerClose(branch2._readableStreamController);
              }
              if (branch1._readableStreamController._pendingPullIntos.length > 0) {
                ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
              }
              if (branch2._readableStreamController._pendingPullIntos.length > 0) {
                ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
              }
              if (!canceled1 || !canceled2) {
                resolveCancelPromise(void 0);
              }
            },
            _errorSteps: () => {
              reading = false;
            }
          };
          ReadableStreamDefaultReaderRead(reader, readRequest);
        }
        function pullWithBYOBReader(view, forBranch2) {
          if (IsReadableStreamDefaultReader(reader)) {
            ReadableStreamReaderGenericRelease(reader);
            reader = AcquireReadableStreamBYOBReader(stream);
            forwardReaderError(reader);
          }
          const byobBranch = forBranch2 ? branch2 : branch1;
          const otherBranch = forBranch2 ? branch1 : branch2;
          const readIntoRequest = {
            _chunkSteps: (chunk) => {
              _queueMicrotask(() => {
                readAgainForBranch1 = false;
                readAgainForBranch2 = false;
                const byobCanceled = forBranch2 ? canceled2 : canceled1;
                const otherCanceled = forBranch2 ? canceled1 : canceled2;
                if (!otherCanceled) {
                  let clonedChunk;
                  try {
                    clonedChunk = CloneAsUint8Array(chunk);
                  } catch (cloneE) {
                    ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                    ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                    resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                    return;
                  }
                  if (!byobCanceled) {
                    ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                  }
                  ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
                } else if (!byobCanceled) {
                  ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                }
                reading = false;
                if (readAgainForBranch1) {
                  pull1Algorithm();
                } else if (readAgainForBranch2) {
                  pull2Algorithm();
                }
              });
            },
            _closeSteps: (chunk) => {
              reading = false;
              const byobCanceled = forBranch2 ? canceled2 : canceled1;
              const otherCanceled = forBranch2 ? canceled1 : canceled2;
              if (!byobCanceled) {
                ReadableByteStreamControllerClose(byobBranch._readableStreamController);
              }
              if (!otherCanceled) {
                ReadableByteStreamControllerClose(otherBranch._readableStreamController);
              }
              if (chunk !== void 0) {
                if (!byobCanceled) {
                  ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                }
                if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                  ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
                }
              }
              if (!byobCanceled || !otherCanceled) {
                resolveCancelPromise(void 0);
              }
            },
            _errorSteps: () => {
              reading = false;
            }
          };
          ReadableStreamBYOBReaderRead(reader, view, 1, readIntoRequest);
        }
        function pull1Algorithm() {
          if (reading) {
            readAgainForBranch1 = true;
            return promiseResolvedWith(void 0);
          }
          reading = true;
          const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
          if (byobRequest === null) {
            pullWithDefaultReader();
          } else {
            pullWithBYOBReader(byobRequest._view, false);
          }
          return promiseResolvedWith(void 0);
        }
        function pull2Algorithm() {
          if (reading) {
            readAgainForBranch2 = true;
            return promiseResolvedWith(void 0);
          }
          reading = true;
          const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
          if (byobRequest === null) {
            pullWithDefaultReader();
          } else {
            pullWithBYOBReader(byobRequest._view, true);
          }
          return promiseResolvedWith(void 0);
        }
        function cancel1Algorithm(reason) {
          canceled1 = true;
          reason1 = reason;
          if (canceled2) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function cancel2Algorithm(reason) {
          canceled2 = true;
          reason2 = reason;
          if (canceled1) {
            const compositeReason = CreateArrayFromList([reason1, reason2]);
            const cancelResult = ReadableStreamCancel(stream, compositeReason);
            resolveCancelPromise(cancelResult);
          }
          return cancelPromise;
        }
        function startAlgorithm() {
          return;
        }
        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
        forwardReaderError(reader);
        return [branch1, branch2];
      }
      function isReadableStreamLike(stream) {
        return typeIsObject(stream) && typeof stream.getReader !== "undefined";
      }
      function ReadableStreamFrom(source) {
        if (isReadableStreamLike(source)) {
          return ReadableStreamFromDefaultReader(source.getReader());
        }
        return ReadableStreamFromIterable(source);
      }
      function ReadableStreamFromIterable(asyncIterable) {
        let stream;
        const iteratorRecord = GetIterator(asyncIterable, "async");
        const startAlgorithm = noop;
        function pullAlgorithm() {
          let nextResult;
          try {
            nextResult = IteratorNext(iteratorRecord);
          } catch (e6) {
            return promiseRejectedWith(e6);
          }
          const nextPromise = promiseResolvedWith(nextResult);
          return transformPromiseWith(nextPromise, (iterResult) => {
            if (!typeIsObject(iterResult)) {
              throw new TypeError("The promise returned by the iterator.next() method must fulfill with an object");
            }
            const done = IteratorComplete(iterResult);
            if (done) {
              ReadableStreamDefaultControllerClose(stream._readableStreamController);
            } else {
              const value = IteratorValue(iterResult);
              ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);
            }
          });
        }
        function cancelAlgorithm(reason) {
          const iterator = iteratorRecord.iterator;
          let returnMethod;
          try {
            returnMethod = GetMethod(iterator, "return");
          } catch (e6) {
            return promiseRejectedWith(e6);
          }
          if (returnMethod === void 0) {
            return promiseResolvedWith(void 0);
          }
          let returnResult;
          try {
            returnResult = reflectCall(returnMethod, iterator, [reason]);
          } catch (e6) {
            return promiseRejectedWith(e6);
          }
          const returnPromise = promiseResolvedWith(returnResult);
          return transformPromiseWith(returnPromise, (iterResult) => {
            if (!typeIsObject(iterResult)) {
              throw new TypeError("The promise returned by the iterator.return() method must fulfill with an object");
            }
            return void 0;
          });
        }
        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);
        return stream;
      }
      function ReadableStreamFromDefaultReader(reader) {
        let stream;
        const startAlgorithm = noop;
        function pullAlgorithm() {
          let readPromise;
          try {
            readPromise = reader.read();
          } catch (e6) {
            return promiseRejectedWith(e6);
          }
          return transformPromiseWith(readPromise, (readResult) => {
            if (!typeIsObject(readResult)) {
              throw new TypeError("The promise returned by the reader.read() method must fulfill with an object");
            }
            if (readResult.done) {
              ReadableStreamDefaultControllerClose(stream._readableStreamController);
            } else {
              const value = readResult.value;
              ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);
            }
          });
        }
        function cancelAlgorithm(reason) {
          try {
            return promiseResolvedWith(reader.cancel(reason));
          } catch (e6) {
            return promiseRejectedWith(e6);
          }
        }
        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);
        return stream;
      }
      function convertUnderlyingDefaultOrByteSource(source, context) {
        assertDictionary(source, context);
        const original = source;
        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;
        const cancel = original === null || original === void 0 ? void 0 : original.cancel;
        const pull = original === null || original === void 0 ? void 0 : original.pull;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        return {
          autoAllocateChunkSize: autoAllocateChunkSize === void 0 ? void 0 : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),
          cancel: cancel === void 0 ? void 0 : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),
          pull: pull === void 0 ? void 0 : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),
          start: start === void 0 ? void 0 : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),
          type: type === void 0 ? void 0 : convertReadableStreamType(type, `${context} has member 'type' that`)
        };
      }
      function convertUnderlyingSourceCancelCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
      }
      function convertUnderlyingSourcePullCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
      }
      function convertUnderlyingSourceStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
      }
      function convertReadableStreamType(type, context) {
        type = `${type}`;
        if (type !== "bytes") {
          throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);
        }
        return type;
      }
      function convertIteratorOptions(options, context) {
        assertDictionary(options, context);
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        return { preventCancel: Boolean(preventCancel) };
      }
      function convertPipeOptions(options, context) {
        assertDictionary(options, context);
        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;
        const signal = options === null || options === void 0 ? void 0 : options.signal;
        if (signal !== void 0) {
          assertAbortSignal(signal, `${context} has member 'signal' that`);
        }
        return {
          preventAbort: Boolean(preventAbort),
          preventCancel: Boolean(preventCancel),
          preventClose: Boolean(preventClose),
          signal
        };
      }
      function assertAbortSignal(signal, context) {
        if (!isAbortSignal2(signal)) {
          throw new TypeError(`${context} is not an AbortSignal.`);
        }
      }
      function convertReadableWritablePair(pair, context) {
        assertDictionary(pair, context);
        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;
        assertRequiredField(readable, "readable", "ReadableWritablePair");
        assertReadableStream(readable, `${context} has member 'readable' that`);
        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;
        assertRequiredField(writable, "writable", "ReadableWritablePair");
        assertWritableStream(writable, `${context} has member 'writable' that`);
        return { readable, writable };
      }
      class ReadableStream5 {
        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
          if (rawUnderlyingSource === void 0) {
            rawUnderlyingSource = null;
          } else {
            assertObject(rawUnderlyingSource, "First parameter");
          }
          const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
          const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, "First parameter");
          InitializeReadableStream(this);
          if (underlyingSource.type === "bytes") {
            if (strategy.size !== void 0) {
              throw new RangeError("The strategy for a byte stream cannot have a size function");
            }
            const highWaterMark = ExtractHighWaterMark(strategy, 0);
            SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
          } else {
            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
            const highWaterMark = ExtractHighWaterMark(strategy, 1);
            SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
          }
        }
        /**
         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.
         */
        get locked() {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("locked");
          }
          return IsReadableStreamLocked(this);
        }
        /**
         * Cancels the stream, signaling a loss of interest in the stream by a consumer.
         *
         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}
         * method, which might or might not use it.
         */
        cancel(reason = void 0) {
          if (!IsReadableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$1("cancel"));
          }
          if (IsReadableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("Cannot cancel a stream that already has a reader"));
          }
          return ReadableStreamCancel(this, reason);
        }
        getReader(rawOptions = void 0) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("getReader");
          }
          const options = convertReaderOptions(rawOptions, "First parameter");
          if (options.mode === void 0) {
            return AcquireReadableStreamDefaultReader(this);
          }
          return AcquireReadableStreamBYOBReader(this);
        }
        pipeThrough(rawTransform, rawOptions = {}) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("pipeThrough");
          }
          assertRequiredArgument(rawTransform, 1, "pipeThrough");
          const transform = convertReadableWritablePair(rawTransform, "First parameter");
          const options = convertPipeOptions(rawOptions, "Second parameter");
          if (IsReadableStreamLocked(this)) {
            throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
          }
          if (IsWritableStreamLocked(transform.writable)) {
            throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
          }
          const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
          setPromiseIsHandledToTrue(promise);
          return transform.readable;
        }
        pipeTo(destination, rawOptions = {}) {
          if (!IsReadableStream(this)) {
            return promiseRejectedWith(streamBrandCheckException$1("pipeTo"));
          }
          if (destination === void 0) {
            return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);
          }
          if (!IsWritableStream(destination)) {
            return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));
          }
          let options;
          try {
            options = convertPipeOptions(rawOptions, "Second parameter");
          } catch (e6) {
            return promiseRejectedWith(e6);
          }
          if (IsReadableStreamLocked(this)) {
            return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));
          }
          if (IsWritableStreamLocked(destination)) {
            return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));
          }
          return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
        }
        /**
         * Tees this readable stream, returning a two-element array containing the two resulting branches as
         * new {@link ReadableStream} instances.
         *
         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.
         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be
         * propagated to the stream's underlying source.
         *
         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,
         * this could allow interference between the two branches.
         */
        tee() {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("tee");
          }
          const branches = ReadableStreamTee(this);
          return CreateArrayFromList(branches);
        }
        values(rawOptions = void 0) {
          if (!IsReadableStream(this)) {
            throw streamBrandCheckException$1("values");
          }
          const options = convertIteratorOptions(rawOptions, "First parameter");
          return AcquireReadableStreamAsyncIterator(this, options.preventCancel);
        }
        [SymbolAsyncIterator](options) {
          return this.values(options);
        }
        /**
         * Creates a new ReadableStream wrapping the provided iterable or async iterable.
         *
         * This can be used to adapt various kinds of objects into a readable stream,
         * such as an array, an async generator, or a Node.js readable stream.
         */
        static from(asyncIterable) {
          return ReadableStreamFrom(asyncIterable);
        }
      }
      Object.defineProperties(ReadableStream5, {
        from: { enumerable: true }
      });
      Object.defineProperties(ReadableStream5.prototype, {
        cancel: { enumerable: true },
        getReader: { enumerable: true },
        pipeThrough: { enumerable: true },
        pipeTo: { enumerable: true },
        tee: { enumerable: true },
        values: { enumerable: true },
        locked: { enumerable: true }
      });
      setFunctionName(ReadableStream5.from, "from");
      setFunctionName(ReadableStream5.prototype.cancel, "cancel");
      setFunctionName(ReadableStream5.prototype.getReader, "getReader");
      setFunctionName(ReadableStream5.prototype.pipeThrough, "pipeThrough");
      setFunctionName(ReadableStream5.prototype.pipeTo, "pipeTo");
      setFunctionName(ReadableStream5.prototype.tee, "tee");
      setFunctionName(ReadableStream5.prototype.values, "values");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ReadableStream5.prototype, Symbol.toStringTag, {
          value: "ReadableStream",
          configurable: true
        });
      }
      Object.defineProperty(ReadableStream5.prototype, SymbolAsyncIterator, {
        value: ReadableStream5.prototype.values,
        writable: true,
        configurable: true
      });
      function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(ReadableStream5.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableStreamDefaultController2.prototype);
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
      }
      function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
        const stream = Object.create(ReadableStream5.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableByteStreamController2.prototype);
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, void 0);
        return stream;
      }
      function InitializeReadableStream(stream) {
        stream._state = "readable";
        stream._reader = void 0;
        stream._storedError = void 0;
        stream._disturbed = false;
      }
      function IsReadableStream(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_readableStreamController")) {
          return false;
        }
        return x5 instanceof ReadableStream5;
      }
      function IsReadableStreamLocked(stream) {
        if (stream._reader === void 0) {
          return false;
        }
        return true;
      }
      function ReadableStreamCancel(stream, reason) {
        stream._disturbed = true;
        if (stream._state === "closed") {
          return promiseResolvedWith(void 0);
        }
        if (stream._state === "errored") {
          return promiseRejectedWith(stream._storedError);
        }
        ReadableStreamClose(stream);
        const reader = stream._reader;
        if (reader !== void 0 && IsReadableStreamBYOBReader(reader)) {
          const readIntoRequests = reader._readIntoRequests;
          reader._readIntoRequests = new SimpleQueue();
          readIntoRequests.forEach((readIntoRequest) => {
            readIntoRequest._closeSteps(void 0);
          });
        }
        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
        return transformPromiseWith(sourceCancelPromise, noop);
      }
      function ReadableStreamClose(stream) {
        stream._state = "closed";
        const reader = stream._reader;
        if (reader === void 0) {
          return;
        }
        defaultReaderClosedPromiseResolve(reader);
        if (IsReadableStreamDefaultReader(reader)) {
          const readRequests = reader._readRequests;
          reader._readRequests = new SimpleQueue();
          readRequests.forEach((readRequest) => {
            readRequest._closeSteps();
          });
        }
      }
      function ReadableStreamError(stream, e6) {
        stream._state = "errored";
        stream._storedError = e6;
        const reader = stream._reader;
        if (reader === void 0) {
          return;
        }
        defaultReaderClosedPromiseReject(reader, e6);
        if (IsReadableStreamDefaultReader(reader)) {
          ReadableStreamDefaultReaderErrorReadRequests(reader, e6);
        } else {
          ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e6);
        }
      }
      function streamBrandCheckException$1(name) {
        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);
      }
      function convertQueuingStrategyInit(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        assertRequiredField(highWaterMark, "highWaterMark", "QueuingStrategyInit");
        return {
          highWaterMark: convertUnrestrictedDouble(highWaterMark)
        };
      }
      const byteLengthSizeFunction = (chunk) => {
        return chunk.byteLength;
      };
      setFunctionName(byteLengthSizeFunction, "size");
      class ByteLengthQueuingStrategy2 {
        constructor(options) {
          assertRequiredArgument(options, 1, "ByteLengthQueuingStrategy");
          options = convertQueuingStrategyInit(options, "First parameter");
          this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
          if (!IsByteLengthQueuingStrategy(this)) {
            throw byteLengthBrandCheckException("highWaterMark");
          }
          return this._byteLengthQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by returning the value of its `byteLength` property.
         */
        get size() {
          if (!IsByteLengthQueuingStrategy(this)) {
            throw byteLengthBrandCheckException("size");
          }
          return byteLengthSizeFunction;
        }
      }
      Object.defineProperties(ByteLengthQueuingStrategy2.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(ByteLengthQueuingStrategy2.prototype, Symbol.toStringTag, {
          value: "ByteLengthQueuingStrategy",
          configurable: true
        });
      }
      function byteLengthBrandCheckException(name) {
        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);
      }
      function IsByteLengthQueuingStrategy(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_byteLengthQueuingStrategyHighWaterMark")) {
          return false;
        }
        return x5 instanceof ByteLengthQueuingStrategy2;
      }
      const countSizeFunction = () => {
        return 1;
      };
      setFunctionName(countSizeFunction, "size");
      class CountQueuingStrategy2 {
        constructor(options) {
          assertRequiredArgument(options, 1, "CountQueuingStrategy");
          options = convertQueuingStrategyInit(options, "First parameter");
          this._countQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
          if (!IsCountQueuingStrategy(this)) {
            throw countBrandCheckException("highWaterMark");
          }
          return this._countQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by always returning 1.
         * This ensures that the total queue size is a count of the number of chunks in the queue.
         */
        get size() {
          if (!IsCountQueuingStrategy(this)) {
            throw countBrandCheckException("size");
          }
          return countSizeFunction;
        }
      }
      Object.defineProperties(CountQueuingStrategy2.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(CountQueuingStrategy2.prototype, Symbol.toStringTag, {
          value: "CountQueuingStrategy",
          configurable: true
        });
      }
      function countBrandCheckException(name) {
        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);
      }
      function IsCountQueuingStrategy(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_countQueuingStrategyHighWaterMark")) {
          return false;
        }
        return x5 instanceof CountQueuingStrategy2;
      }
      function convertTransformer(original, context) {
        assertDictionary(original, context);
        const cancel = original === null || original === void 0 ? void 0 : original.cancel;
        const flush = original === null || original === void 0 ? void 0 : original.flush;
        const readableType = original === null || original === void 0 ? void 0 : original.readableType;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const transform = original === null || original === void 0 ? void 0 : original.transform;
        const writableType = original === null || original === void 0 ? void 0 : original.writableType;
        return {
          cancel: cancel === void 0 ? void 0 : convertTransformerCancelCallback(cancel, original, `${context} has member 'cancel' that`),
          flush: flush === void 0 ? void 0 : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),
          readableType,
          start: start === void 0 ? void 0 : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),
          transform: transform === void 0 ? void 0 : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),
          writableType
        };
      }
      function convertTransformerFlushCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
      }
      function convertTransformerStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
      }
      function convertTransformerTransformCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
      }
      function convertTransformerCancelCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
      }
      class TransformStream2 {
        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {
          if (rawTransformer === void 0) {
            rawTransformer = null;
          }
          const writableStrategy = convertQueuingStrategy(rawWritableStrategy, "Second parameter");
          const readableStrategy = convertQueuingStrategy(rawReadableStrategy, "Third parameter");
          const transformer = convertTransformer(rawTransformer, "First parameter");
          if (transformer.readableType !== void 0) {
            throw new RangeError("Invalid readableType specified");
          }
          if (transformer.writableType !== void 0) {
            throw new RangeError("Invalid writableType specified");
          }
          const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
          const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
          const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
          const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
          let startPromise_resolve;
          const startPromise = newPromise((resolve2) => {
            startPromise_resolve = resolve2;
          });
          InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
          SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
          if (transformer.start !== void 0) {
            startPromise_resolve(transformer.start(this._transformStreamController));
          } else {
            startPromise_resolve(void 0);
          }
        }
        /**
         * The readable side of the transform stream.
         */
        get readable() {
          if (!IsTransformStream(this)) {
            throw streamBrandCheckException("readable");
          }
          return this._readable;
        }
        /**
         * The writable side of the transform stream.
         */
        get writable() {
          if (!IsTransformStream(this)) {
            throw streamBrandCheckException("writable");
          }
          return this._writable;
        }
      }
      Object.defineProperties(TransformStream2.prototype, {
        readable: { enumerable: true },
        writable: { enumerable: true }
      });
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(TransformStream2.prototype, Symbol.toStringTag, {
          value: "TransformStream",
          configurable: true
        });
      }
      function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
        function startAlgorithm() {
          return startPromise;
        }
        function writeAlgorithm(chunk) {
          return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
        }
        function abortAlgorithm(reason) {
          return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
        }
        function closeAlgorithm() {
          return TransformStreamDefaultSinkCloseAlgorithm(stream);
        }
        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
        function pullAlgorithm() {
          return TransformStreamDefaultSourcePullAlgorithm(stream);
        }
        function cancelAlgorithm(reason) {
          return TransformStreamDefaultSourceCancelAlgorithm(stream, reason);
        }
        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
        stream._backpressure = void 0;
        stream._backpressureChangePromise = void 0;
        stream._backpressureChangePromise_resolve = void 0;
        TransformStreamSetBackpressure(stream, true);
        stream._transformStreamController = void 0;
      }
      function IsTransformStream(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_transformStreamController")) {
          return false;
        }
        return x5 instanceof TransformStream2;
      }
      function TransformStreamError(stream, e6) {
        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e6);
        TransformStreamErrorWritableAndUnblockWrite(stream, e6);
      }
      function TransformStreamErrorWritableAndUnblockWrite(stream, e6) {
        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e6);
        TransformStreamUnblockWrite(stream);
      }
      function TransformStreamUnblockWrite(stream) {
        if (stream._backpressure) {
          TransformStreamSetBackpressure(stream, false);
        }
      }
      function TransformStreamSetBackpressure(stream, backpressure) {
        if (stream._backpressureChangePromise !== void 0) {
          stream._backpressureChangePromise_resolve();
        }
        stream._backpressureChangePromise = newPromise((resolve2) => {
          stream._backpressureChangePromise_resolve = resolve2;
        });
        stream._backpressure = backpressure;
      }
      class TransformStreamDefaultController2 {
        constructor() {
          throw new TypeError("Illegal constructor");
        }
        /**
         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.
         */
        get desiredSize() {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("desiredSize");
          }
          const readableController = this._controlledTransformStream._readable._readableStreamController;
          return ReadableStreamDefaultControllerGetDesiredSize(readableController);
        }
        enqueue(chunk = void 0) {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("enqueue");
          }
          TransformStreamDefaultControllerEnqueue(this, chunk);
        }
        /**
         * Errors both the readable side and the writable side of the controlled transform stream, making all future
         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.
         */
        error(reason = void 0) {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("error");
          }
          TransformStreamDefaultControllerError(this, reason);
        }
        /**
         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the
         * transformer only needs to consume a portion of the chunks written to the writable side.
         */
        terminate() {
          if (!IsTransformStreamDefaultController(this)) {
            throw defaultControllerBrandCheckException("terminate");
          }
          TransformStreamDefaultControllerTerminate(this);
        }
      }
      Object.defineProperties(TransformStreamDefaultController2.prototype, {
        enqueue: { enumerable: true },
        error: { enumerable: true },
        terminate: { enumerable: true },
        desiredSize: { enumerable: true }
      });
      setFunctionName(TransformStreamDefaultController2.prototype.enqueue, "enqueue");
      setFunctionName(TransformStreamDefaultController2.prototype.error, "error");
      setFunctionName(TransformStreamDefaultController2.prototype.terminate, "terminate");
      if (typeof Symbol.toStringTag === "symbol") {
        Object.defineProperty(TransformStreamDefaultController2.prototype, Symbol.toStringTag, {
          value: "TransformStreamDefaultController",
          configurable: true
        });
      }
      function IsTransformStreamDefaultController(x5) {
        if (!typeIsObject(x5)) {
          return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x5, "_controlledTransformStream")) {
          return false;
        }
        return x5 instanceof TransformStreamDefaultController2;
      }
      function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm) {
        controller._controlledTransformStream = stream;
        stream._transformStreamController = controller;
        controller._transformAlgorithm = transformAlgorithm;
        controller._flushAlgorithm = flushAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        controller._finishPromise = void 0;
        controller._finishPromise_resolve = void 0;
        controller._finishPromise_reject = void 0;
      }
      function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
        const controller = Object.create(TransformStreamDefaultController2.prototype);
        let transformAlgorithm;
        let flushAlgorithm;
        let cancelAlgorithm;
        if (transformer.transform !== void 0) {
          transformAlgorithm = (chunk) => transformer.transform(chunk, controller);
        } else {
          transformAlgorithm = (chunk) => {
            try {
              TransformStreamDefaultControllerEnqueue(controller, chunk);
              return promiseResolvedWith(void 0);
            } catch (transformResultE) {
              return promiseRejectedWith(transformResultE);
            }
          };
        }
        if (transformer.flush !== void 0) {
          flushAlgorithm = () => transformer.flush(controller);
        } else {
          flushAlgorithm = () => promiseResolvedWith(void 0);
        }
        if (transformer.cancel !== void 0) {
          cancelAlgorithm = (reason) => transformer.cancel(reason);
        } else {
          cancelAlgorithm = () => promiseResolvedWith(void 0);
        }
        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm);
      }
      function TransformStreamDefaultControllerClearAlgorithms(controller) {
        controller._transformAlgorithm = void 0;
        controller._flushAlgorithm = void 0;
        controller._cancelAlgorithm = void 0;
      }
      function TransformStreamDefaultControllerEnqueue(controller, chunk) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
          throw new TypeError("Readable side is not in a state that permits enqueue");
        }
        try {
          ReadableStreamDefaultControllerEnqueue(readableController, chunk);
        } catch (e6) {
          TransformStreamErrorWritableAndUnblockWrite(stream, e6);
          throw stream._readable._storedError;
        }
        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
        if (backpressure !== stream._backpressure) {
          TransformStreamSetBackpressure(stream, true);
        }
      }
      function TransformStreamDefaultControllerError(controller, e6) {
        TransformStreamError(controller._controlledTransformStream, e6);
      }
      function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
        const transformPromise = controller._transformAlgorithm(chunk);
        return transformPromiseWith(transformPromise, void 0, (r6) => {
          TransformStreamError(controller._controlledTransformStream, r6);
          throw r6;
        });
      }
      function TransformStreamDefaultControllerTerminate(controller) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        ReadableStreamDefaultControllerClose(readableController);
        const error2 = new TypeError("TransformStream terminated");
        TransformStreamErrorWritableAndUnblockWrite(stream, error2);
      }
      function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
        const controller = stream._transformStreamController;
        if (stream._backpressure) {
          const backpressureChangePromise = stream._backpressureChangePromise;
          return transformPromiseWith(backpressureChangePromise, () => {
            const writable = stream._writable;
            const state = writable._state;
            if (state === "erroring") {
              throw writable._storedError;
            }
            return TransformStreamDefaultControllerPerformTransform(controller, chunk);
          });
        }
        return TransformStreamDefaultControllerPerformTransform(controller, chunk);
      }
      function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
        const controller = stream._transformStreamController;
        if (controller._finishPromise !== void 0) {
          return controller._finishPromise;
        }
        const readable = stream._readable;
        controller._finishPromise = newPromise((resolve2, reject) => {
          controller._finishPromise_resolve = resolve2;
          controller._finishPromise_reject = reject;
        });
        const cancelPromise = controller._cancelAlgorithm(reason);
        TransformStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(cancelPromise, () => {
          if (readable._state === "errored") {
            defaultControllerFinishPromiseReject(controller, readable._storedError);
          } else {
            ReadableStreamDefaultControllerError(readable._readableStreamController, reason);
            defaultControllerFinishPromiseResolve(controller);
          }
          return null;
        }, (r6) => {
          ReadableStreamDefaultControllerError(readable._readableStreamController, r6);
          defaultControllerFinishPromiseReject(controller, r6);
          return null;
        });
        return controller._finishPromise;
      }
      function TransformStreamDefaultSinkCloseAlgorithm(stream) {
        const controller = stream._transformStreamController;
        if (controller._finishPromise !== void 0) {
          return controller._finishPromise;
        }
        const readable = stream._readable;
        controller._finishPromise = newPromise((resolve2, reject) => {
          controller._finishPromise_resolve = resolve2;
          controller._finishPromise_reject = reject;
        });
        const flushPromise = controller._flushAlgorithm();
        TransformStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(flushPromise, () => {
          if (readable._state === "errored") {
            defaultControllerFinishPromiseReject(controller, readable._storedError);
          } else {
            ReadableStreamDefaultControllerClose(readable._readableStreamController);
            defaultControllerFinishPromiseResolve(controller);
          }
          return null;
        }, (r6) => {
          ReadableStreamDefaultControllerError(readable._readableStreamController, r6);
          defaultControllerFinishPromiseReject(controller, r6);
          return null;
        });
        return controller._finishPromise;
      }
      function TransformStreamDefaultSourcePullAlgorithm(stream) {
        TransformStreamSetBackpressure(stream, false);
        return stream._backpressureChangePromise;
      }
      function TransformStreamDefaultSourceCancelAlgorithm(stream, reason) {
        const controller = stream._transformStreamController;
        if (controller._finishPromise !== void 0) {
          return controller._finishPromise;
        }
        const writable = stream._writable;
        controller._finishPromise = newPromise((resolve2, reject) => {
          controller._finishPromise_resolve = resolve2;
          controller._finishPromise_reject = reject;
        });
        const cancelPromise = controller._cancelAlgorithm(reason);
        TransformStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(cancelPromise, () => {
          if (writable._state === "errored") {
            defaultControllerFinishPromiseReject(controller, writable._storedError);
          } else {
            WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, reason);
            TransformStreamUnblockWrite(stream);
            defaultControllerFinishPromiseResolve(controller);
          }
          return null;
        }, (r6) => {
          WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, r6);
          TransformStreamUnblockWrite(stream);
          defaultControllerFinishPromiseReject(controller, r6);
          return null;
        });
        return controller._finishPromise;
      }
      function defaultControllerBrandCheckException(name) {
        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);
      }
      function defaultControllerFinishPromiseResolve(controller) {
        if (controller._finishPromise_resolve === void 0) {
          return;
        }
        controller._finishPromise_resolve();
        controller._finishPromise_resolve = void 0;
        controller._finishPromise_reject = void 0;
      }
      function defaultControllerFinishPromiseReject(controller, reason) {
        if (controller._finishPromise_reject === void 0) {
          return;
        }
        setPromiseIsHandledToTrue(controller._finishPromise);
        controller._finishPromise_reject(reason);
        controller._finishPromise_resolve = void 0;
        controller._finishPromise_reject = void 0;
      }
      function streamBrandCheckException(name) {
        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);
      }
      exports3.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy2;
      exports3.CountQueuingStrategy = CountQueuingStrategy2;
      exports3.ReadableByteStreamController = ReadableByteStreamController2;
      exports3.ReadableStream = ReadableStream5;
      exports3.ReadableStreamBYOBReader = ReadableStreamBYOBReader2;
      exports3.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest2;
      exports3.ReadableStreamDefaultController = ReadableStreamDefaultController2;
      exports3.ReadableStreamDefaultReader = ReadableStreamDefaultReader2;
      exports3.TransformStream = TransformStream2;
      exports3.TransformStreamDefaultController = TransformStreamDefaultController2;
      exports3.WritableStream = WritableStream3;
      exports3.WritableStreamDefaultController = WritableStreamDefaultController2;
      exports3.WritableStreamDefaultWriter = WritableStreamDefaultWriter2;
    });
  }
});

// ../../node_modules/.pnpm/node-domexception@1.0.0/node_modules/node-domexception/index.js
var require_node_domexception = __commonJS({
  "../../node_modules/.pnpm/node-domexception@1.0.0/node_modules/node-domexception/index.js"(exports2, module2) {
    "use strict";
    if (!globalThis.DOMException) {
      try {
        const { MessageChannel } = require("worker_threads"), port = new MessageChannel().port1, ab = new ArrayBuffer();
        port.postMessage(ab, [ab, ab]);
      } catch (err) {
        err.constructor.name === "DOMException" && (globalThis.DOMException = err.constructor);
      }
    }
    module2.exports = globalThis.DOMException;
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isPlainObject.js
function isPlainObject2(value) {
  if (getType2(value) !== "object") {
    return false;
  }
  const pp = Object.getPrototypeOf(value);
  if (pp === null || pp === void 0) {
    return true;
  }
  const Ctor = pp.constructor && pp.constructor.toString();
  return Ctor === Object.toString();
}
var getType2, isPlainObject_default2;
var init_isPlainObject2 = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/isPlainObject.js"() {
    "use strict";
    getType2 = (value) => Object.prototype.toString.call(value).slice(8, -1).toLowerCase();
    isPlainObject_default2 = isPlainObject2;
  }
});

// ../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/fileFromPath.js
var fileFromPath_exports = {};
__export(fileFromPath_exports, {
  fileFromPath: () => fileFromPath2,
  fileFromPathSync: () => fileFromPathSync,
  isFile: () => isFile
});
function createFileFromPath(path, { mtimeMs, size }, filenameOrOptions, options = {}) {
  let filename;
  if (isPlainObject_default2(filenameOrOptions)) {
    [options, filename] = [filenameOrOptions, void 0];
  } else {
    filename = filenameOrOptions;
  }
  const file = new FileFromPath({ path, size, lastModified: mtimeMs });
  if (!filename) {
    filename = file.name;
  }
  return new File2([file], filename, {
    ...options,
    lastModified: file.lastModified
  });
}
function fileFromPathSync(path, filenameOrOptions, options = {}) {
  const stats = (0, import_fs7.statSync)(path);
  return createFileFromPath(path, stats, filenameOrOptions, options);
}
async function fileFromPath2(path, filenameOrOptions, options) {
  const stats = await import_fs7.promises.stat(path);
  return createFileFromPath(path, stats, filenameOrOptions, options);
}
var import_fs7, import_path6, import_node_domexception, __classPrivateFieldSet5, __classPrivateFieldGet6, _FileFromPath_path, _FileFromPath_start, MESSAGE, FileFromPath;
var init_fileFromPath = __esm({
  "../../node_modules/.pnpm/formdata-node@4.4.1/node_modules/formdata-node/lib/esm/fileFromPath.js"() {
    "use strict";
    import_fs7 = require("fs");
    import_path6 = require("path");
    import_node_domexception = __toESM(require_node_domexception(), 1);
    init_File();
    init_isPlainObject2();
    init_isFile();
    __classPrivateFieldSet5 = function(receiver, state, value, kind2, f6) {
      if (kind2 === "m")
        throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f6.call(receiver, value) : f6 ? f6.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet6 = function(receiver, state, kind2, f6) {
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f6 : kind2 === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
    };
    MESSAGE = "The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.";
    FileFromPath = class _FileFromPath {
      constructor(input) {
        _FileFromPath_path.set(this, void 0);
        _FileFromPath_start.set(this, void 0);
        __classPrivateFieldSet5(this, _FileFromPath_path, input.path, "f");
        __classPrivateFieldSet5(this, _FileFromPath_start, input.start || 0, "f");
        this.name = (0, import_path6.basename)(__classPrivateFieldGet6(this, _FileFromPath_path, "f"));
        this.size = input.size;
        this.lastModified = input.lastModified;
      }
      slice(start, end) {
        return new _FileFromPath({
          path: __classPrivateFieldGet6(this, _FileFromPath_path, "f"),
          lastModified: this.lastModified,
          size: end - start,
          start
        });
      }
      async *stream() {
        const { mtimeMs } = await import_fs7.promises.stat(__classPrivateFieldGet6(this, _FileFromPath_path, "f"));
        if (mtimeMs > this.lastModified) {
          throw new import_node_domexception.default(MESSAGE, "NotReadableError");
        }
        if (this.size) {
          yield* (0, import_fs7.createReadStream)(__classPrivateFieldGet6(this, _FileFromPath_path, "f"), {
            start: __classPrivateFieldGet6(this, _FileFromPath_start, "f"),
            end: __classPrivateFieldGet6(this, _FileFromPath_start, "f") + this.size - 1
          });
        }
      }
      get [(_FileFromPath_path = /* @__PURE__ */ new WeakMap(), _FileFromPath_start = /* @__PURE__ */ new WeakMap(), Symbol.toStringTag)]() {
        return "File";
      }
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/_shims/node-runtime.mjs
async function fileFromPath3(path, ...args) {
  const { fileFromPath: _fileFromPath } = await Promise.resolve().then(() => (init_fileFromPath(), fileFromPath_exports));
  if (!fileFromPathWarned) {
    console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);
    fileFromPathWarned = true;
  }
  return await _fileFromPath(path, ...args);
}
async function getMultipartRequestOptions2(form, opts) {
  const encoder = new FormDataEncoder(form);
  const readable = import_node_stream.Readable.from(encoder);
  const body = new MultipartBody(readable);
  const headers = {
    ...opts.headers,
    ...encoder.headers,
    "Content-Length": encoder.contentLength
  };
  return { ...opts, body, headers };
}
function getRuntime() {
  if (typeof AbortController === "undefined") {
    globalThis.AbortController = import_abort_controller.AbortController;
  }
  return {
    kind: "node",
    fetch: lib_default,
    Request: Request2,
    Response,
    Headers: Headers2,
    FormData: FormData3,
    Blob: Blob4,
    File: File2,
    ReadableStream: import_ponyfill_es2018.ReadableStream,
    getMultipartRequestOptions: getMultipartRequestOptions2,
    getDefaultAgent: (url) => url.startsWith("https") ? defaultHttpsAgent : defaultHttpAgent,
    fileFromPath: fileFromPath3,
    isFsReadStream: (value) => value instanceof import_node_fs.ReadStream
  };
}
var import_agentkeepalive, import_abort_controller, import_node_fs, import_node_stream, import_ponyfill_es2018, fileFromPathWarned, defaultHttpAgent, defaultHttpsAgent;
var init_node_runtime = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/_shims/node-runtime.mjs"() {
    "use strict";
    init_lib();
    init_esm();
    import_agentkeepalive = __toESM(require_agentkeepalive(), 1);
    import_abort_controller = __toESM(require_abort_controller(), 1);
    import_node_fs = require("fs");
    init_esm2();
    import_node_stream = require("stream");
    init_MultipartBody();
    import_ponyfill_es2018 = __toESM(require_ponyfill_es2018(), 1);
    fileFromPathWarned = false;
    defaultHttpAgent = new import_agentkeepalive.default({ keepAlive: true, timeout: 5 * 60 * 1e3 });
    defaultHttpsAgent = new import_agentkeepalive.default.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1e3 });
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/_shims/auto/runtime-node.mjs
var init_runtime_node = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/_shims/auto/runtime-node.mjs"() {
    "use strict";
    init_node_runtime();
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/_shims/index.mjs
var init_shims = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/_shims/index.mjs"() {
    "use strict";
    init_registry();
    init_runtime_node();
    init_registry();
    if (!kind)
      setShims(getRuntime(), { auto: true });
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/error.mjs
var error_exports = {};
__export(error_exports, {
  APIConnectionError: () => APIConnectionError,
  APIConnectionTimeoutError: () => APIConnectionTimeoutError,
  APIError: () => APIError,
  APIUserAbortError: () => APIUserAbortError,
  AuthenticationError: () => AuthenticationError,
  BadRequestError: () => BadRequestError,
  ConflictError: () => ConflictError,
  InternalServerError: () => InternalServerError,
  NotFoundError: () => NotFoundError,
  OpenAIError: () => OpenAIError,
  PermissionDeniedError: () => PermissionDeniedError,
  RateLimitError: () => RateLimitError,
  UnprocessableEntityError: () => UnprocessableEntityError
});
var OpenAIError, APIError, APIUserAbortError, APIConnectionError, APIConnectionTimeoutError, BadRequestError, AuthenticationError, PermissionDeniedError, NotFoundError, ConflictError, UnprocessableEntityError, RateLimitError, InternalServerError;
var init_error = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/error.mjs"() {
    "use strict";
    init_core();
    OpenAIError = class extends Error {
    };
    APIError = class _APIError extends OpenAIError {
      constructor(status, error2, message, headers) {
        super(`${_APIError.makeMessage(status, error2, message)}`);
        this.status = status;
        this.headers = headers;
        this.request_id = headers?.["x-request-id"];
        const data = error2;
        this.error = data;
        this.code = data?.["code"];
        this.param = data?.["param"];
        this.type = data?.["type"];
      }
      static makeMessage(status, error2, message) {
        const msg = error2?.message ? typeof error2.message === "string" ? error2.message : JSON.stringify(error2.message) : error2 ? JSON.stringify(error2) : message;
        if (status && msg) {
          return `${status} ${msg}`;
        }
        if (status) {
          return `${status} status code (no body)`;
        }
        if (msg) {
          return msg;
        }
        return "(no status code or body)";
      }
      static generate(status, errorResponse, message, headers) {
        if (!status) {
          return new APIConnectionError({ cause: castToError(errorResponse) });
        }
        const error2 = errorResponse?.["error"];
        if (status === 400) {
          return new BadRequestError(status, error2, message, headers);
        }
        if (status === 401) {
          return new AuthenticationError(status, error2, message, headers);
        }
        if (status === 403) {
          return new PermissionDeniedError(status, error2, message, headers);
        }
        if (status === 404) {
          return new NotFoundError(status, error2, message, headers);
        }
        if (status === 409) {
          return new ConflictError(status, error2, message, headers);
        }
        if (status === 422) {
          return new UnprocessableEntityError(status, error2, message, headers);
        }
        if (status === 429) {
          return new RateLimitError(status, error2, message, headers);
        }
        if (status >= 500) {
          return new InternalServerError(status, error2, message, headers);
        }
        return new _APIError(status, error2, message, headers);
      }
    };
    APIUserAbortError = class extends APIError {
      constructor({ message } = {}) {
        super(void 0, void 0, message || "Request was aborted.", void 0);
        this.status = void 0;
      }
    };
    APIConnectionError = class extends APIError {
      constructor({ message, cause }) {
        super(void 0, void 0, message || "Connection error.", void 0);
        this.status = void 0;
        if (cause)
          this.cause = cause;
      }
    };
    APIConnectionTimeoutError = class extends APIConnectionError {
      constructor({ message } = {}) {
        super({ message: message ?? "Request timed out." });
      }
    };
    BadRequestError = class extends APIError {
      constructor() {
        super(...arguments);
        this.status = 400;
      }
    };
    AuthenticationError = class extends APIError {
      constructor() {
        super(...arguments);
        this.status = 401;
      }
    };
    PermissionDeniedError = class extends APIError {
      constructor() {
        super(...arguments);
        this.status = 403;
      }
    };
    NotFoundError = class extends APIError {
      constructor() {
        super(...arguments);
        this.status = 404;
      }
    };
    ConflictError = class extends APIError {
      constructor() {
        super(...arguments);
        this.status = 409;
      }
    };
    UnprocessableEntityError = class extends APIError {
      constructor() {
        super(...arguments);
        this.status = 422;
      }
    };
    RateLimitError = class extends APIError {
      constructor() {
        super(...arguments);
        this.status = 429;
      }
    };
    InternalServerError = class extends APIError {
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/streaming.mjs
async function* _iterSSEMessages(response, controller) {
  if (!response.body) {
    controller.abort();
    throw new OpenAIError(`Attempted to iterate over a response with no body`);
  }
  const sseDecoder = new SSEDecoder();
  const lineDecoder = new LineDecoder();
  const iter = readableStreamAsyncIterable(response.body);
  for await (const sseChunk of iterSSEChunks(iter)) {
    for (const line of lineDecoder.decode(sseChunk)) {
      const sse = sseDecoder.decode(line);
      if (sse)
        yield sse;
    }
  }
  for (const line of lineDecoder.flush()) {
    const sse = sseDecoder.decode(line);
    if (sse)
      yield sse;
  }
}
async function* iterSSEChunks(iterator) {
  let data = new Uint8Array();
  for await (const chunk of iterator) {
    if (chunk == null) {
      continue;
    }
    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === "string" ? new TextEncoder().encode(chunk) : chunk;
    let newData = new Uint8Array(data.length + binaryChunk.length);
    newData.set(data);
    newData.set(binaryChunk, data.length);
    data = newData;
    let patternIndex;
    while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {
      yield data.slice(0, patternIndex);
      data = data.slice(patternIndex);
    }
  }
  if (data.length > 0) {
    yield data;
  }
}
function findDoubleNewlineIndex(buffer) {
  const newline = 10;
  const carriage = 13;
  for (let i6 = 0; i6 < buffer.length - 2; i6++) {
    if (buffer[i6] === newline && buffer[i6 + 1] === newline) {
      return i6 + 2;
    }
    if (buffer[i6] === carriage && buffer[i6 + 1] === carriage) {
      return i6 + 2;
    }
    if (buffer[i6] === carriage && buffer[i6 + 1] === newline && i6 + 3 < buffer.length && buffer[i6 + 2] === carriage && buffer[i6 + 3] === newline) {
      return i6 + 4;
    }
  }
  return -1;
}
function partition2(str2, delimiter2) {
  const index2 = str2.indexOf(delimiter2);
  if (index2 !== -1) {
    return [str2.substring(0, index2), delimiter2, str2.substring(index2 + delimiter2.length)];
  }
  return [str2, "", ""];
}
function readableStreamAsyncIterable(stream) {
  if (stream[Symbol.asyncIterator])
    return stream;
  const reader = stream.getReader();
  return {
    async next() {
      try {
        const result = await reader.read();
        if (result?.done)
          reader.releaseLock();
        return result;
      } catch (e6) {
        reader.releaseLock();
        throw e6;
      }
    },
    async return() {
      const cancelPromise = reader.cancel();
      reader.releaseLock();
      await cancelPromise;
      return { done: true, value: void 0 };
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
var Stream2, SSEDecoder, LineDecoder;
var init_streaming = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/streaming.mjs"() {
    "use strict";
    init_shims();
    init_error();
    init_error();
    Stream2 = class _Stream {
      constructor(iterator, controller) {
        this.iterator = iterator;
        this.controller = controller;
      }
      static fromSSEResponse(response, controller) {
        let consumed2 = false;
        async function* iterator() {
          if (consumed2) {
            throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
          }
          consumed2 = true;
          let done = false;
          try {
            for await (const sse of _iterSSEMessages(response, controller)) {
              if (done)
                continue;
              if (sse.data.startsWith("[DONE]")) {
                done = true;
                continue;
              }
              if (sse.event === null) {
                let data;
                try {
                  data = JSON.parse(sse.data);
                } catch (e6) {
                  console.error(`Could not parse message into JSON:`, sse.data);
                  console.error(`From chunk:`, sse.raw);
                  throw e6;
                }
                if (data && data.error) {
                  throw new APIError(void 0, data.error, void 0, void 0);
                }
                yield data;
              } else {
                let data;
                try {
                  data = JSON.parse(sse.data);
                } catch (e6) {
                  console.error(`Could not parse message into JSON:`, sse.data);
                  console.error(`From chunk:`, sse.raw);
                  throw e6;
                }
                if (sse.event == "error") {
                  throw new APIError(void 0, data.error, data.message, void 0);
                }
                yield { event: sse.event, data };
              }
            }
            done = true;
          } catch (e6) {
            if (e6 instanceof Error && e6.name === "AbortError")
              return;
            throw e6;
          } finally {
            if (!done)
              controller.abort();
          }
        }
        return new _Stream(iterator, controller);
      }
      /**
       * Generates a Stream from a newline-separated ReadableStream
       * where each item is a JSON value.
       */
      static fromReadableStream(readableStream, controller) {
        let consumed2 = false;
        async function* iterLines() {
          const lineDecoder = new LineDecoder();
          const iter = readableStreamAsyncIterable(readableStream);
          for await (const chunk of iter) {
            for (const line of lineDecoder.decode(chunk)) {
              yield line;
            }
          }
          for (const line of lineDecoder.flush()) {
            yield line;
          }
        }
        async function* iterator() {
          if (consumed2) {
            throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
          }
          consumed2 = true;
          let done = false;
          try {
            for await (const line of iterLines()) {
              if (done)
                continue;
              if (line)
                yield JSON.parse(line);
            }
            done = true;
          } catch (e6) {
            if (e6 instanceof Error && e6.name === "AbortError")
              return;
            throw e6;
          } finally {
            if (!done)
              controller.abort();
          }
        }
        return new _Stream(iterator, controller);
      }
      [Symbol.asyncIterator]() {
        return this.iterator();
      }
      /**
       * Splits the stream into two streams which can be
       * independently read from at different speeds.
       */
      tee() {
        const left = [];
        const right = [];
        const iterator = this.iterator();
        const teeIterator = (queue) => {
          return {
            next: () => {
              if (queue.length === 0) {
                const result = iterator.next();
                left.push(result);
                right.push(result);
              }
              return queue.shift();
            }
          };
        };
        return [
          new _Stream(() => teeIterator(left), this.controller),
          new _Stream(() => teeIterator(right), this.controller)
        ];
      }
      /**
       * Converts this stream to a newline-separated ReadableStream of
       * JSON stringified values in the stream
       * which can be turned back into a Stream with `Stream.fromReadableStream()`.
       */
      toReadableStream() {
        const self2 = this;
        let iter;
        const encoder = new TextEncoder();
        return new ReadableStream2({
          async start() {
            iter = self2[Symbol.asyncIterator]();
          },
          async pull(ctrl) {
            try {
              const { value, done } = await iter.next();
              if (done)
                return ctrl.close();
              const bytes = encoder.encode(JSON.stringify(value) + "\n");
              ctrl.enqueue(bytes);
            } catch (err) {
              ctrl.error(err);
            }
          },
          async cancel() {
            await iter.return?.();
          }
        });
      }
    };
    SSEDecoder = class {
      constructor() {
        this.event = null;
        this.data = [];
        this.chunks = [];
      }
      decode(line) {
        if (line.endsWith("\r")) {
          line = line.substring(0, line.length - 1);
        }
        if (!line) {
          if (!this.event && !this.data.length)
            return null;
          const sse = {
            event: this.event,
            data: this.data.join("\n"),
            raw: this.chunks
          };
          this.event = null;
          this.data = [];
          this.chunks = [];
          return sse;
        }
        this.chunks.push(line);
        if (line.startsWith(":")) {
          return null;
        }
        let [fieldname, _3, value] = partition2(line, ":");
        if (value.startsWith(" ")) {
          value = value.substring(1);
        }
        if (fieldname === "event") {
          this.event = value;
        } else if (fieldname === "data") {
          this.data.push(value);
        }
        return null;
      }
    };
    LineDecoder = class _LineDecoder {
      constructor() {
        this.buffer = [];
        this.trailingCR = false;
      }
      decode(chunk) {
        let text = this.decodeText(chunk);
        if (this.trailingCR) {
          text = "\r" + text;
          this.trailingCR = false;
        }
        if (text.endsWith("\r")) {
          this.trailingCR = true;
          text = text.slice(0, -1);
        }
        if (!text) {
          return [];
        }
        const trailingNewline = _LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || "");
        let lines = text.split(_LineDecoder.NEWLINE_REGEXP);
        if (trailingNewline) {
          lines.pop();
        }
        if (lines.length === 1 && !trailingNewline) {
          this.buffer.push(lines[0]);
          return [];
        }
        if (this.buffer.length > 0) {
          lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
          this.buffer = [];
        }
        if (!trailingNewline) {
          this.buffer = [lines.pop() || ""];
        }
        return lines;
      }
      decodeText(bytes) {
        if (bytes == null)
          return "";
        if (typeof bytes === "string")
          return bytes;
        if (typeof Buffer !== "undefined") {
          if (bytes instanceof Buffer) {
            return bytes.toString();
          }
          if (bytes instanceof Uint8Array) {
            return Buffer.from(bytes).toString();
          }
          throw new OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`);
        }
        if (typeof TextDecoder !== "undefined") {
          if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
            this.textDecoder ?? (this.textDecoder = new TextDecoder("utf8"));
            return this.textDecoder.decode(bytes);
          }
          throw new OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);
        }
        throw new OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);
      }
      flush() {
        if (!this.buffer.length && !this.trailingCR) {
          return [];
        }
        const lines = [this.buffer.join("")];
        this.buffer = [];
        this.trailingCR = false;
        return lines;
      }
    };
    LineDecoder.NEWLINE_CHARS = /* @__PURE__ */ new Set(["\n", "\r"]);
    LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r]/g;
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/uploads.mjs
async function toFile(value, name, options) {
  value = await value;
  options ?? (options = isFileLike2(value) ? { lastModified: value.lastModified, type: value.type } : {});
  if (isResponseLike(value)) {
    const blob = await value.blob();
    name || (name = new URL(value.url).pathname.split(/[\\/]/).pop() ?? "unknown_file");
    return new File([blob], name, options);
  }
  const bits = await getBytes(value);
  name || (name = getName(value) ?? "unknown_file");
  if (!options.type) {
    const type = bits[0]?.type;
    if (typeof type === "string") {
      options = { ...options, type };
    }
  }
  return new File(bits, name, options);
}
async function getBytes(value) {
  let parts = [];
  if (typeof value === "string" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.
  value instanceof ArrayBuffer) {
    parts.push(value);
  } else if (isBlobLike(value)) {
    parts.push(await value.arrayBuffer());
  } else if (isAsyncIterableIterator(value)) {
    for await (const chunk of value) {
      parts.push(chunk);
    }
  } else {
    throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor?.name}; props: ${propsForError(value)}`);
  }
  return parts;
}
function propsForError(value) {
  const props = Object.getOwnPropertyNames(value);
  return `[${props.map((p6) => `"${p6}"`).join(", ")}]`;
}
function getName(value) {
  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || // For fs.ReadStream
  getStringFromMaybeBuffer(value.path)?.split(/[\\/]/).pop();
}
var isResponseLike, isFileLike2, isBlobLike, isUploadable, getStringFromMaybeBuffer, isAsyncIterableIterator, isMultipartBody, multipartFormRequestOptions, createForm, addFormValue;
var init_uploads = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/uploads.mjs"() {
    "use strict";
    init_shims();
    init_shims();
    isResponseLike = (value) => value != null && typeof value === "object" && typeof value.url === "string" && typeof value.blob === "function";
    isFileLike2 = (value) => value != null && typeof value === "object" && typeof value.name === "string" && typeof value.lastModified === "number" && isBlobLike(value);
    isBlobLike = (value) => value != null && typeof value === "object" && typeof value.size === "number" && typeof value.type === "string" && typeof value.text === "function" && typeof value.slice === "function" && typeof value.arrayBuffer === "function";
    isUploadable = (value) => {
      return isFileLike2(value) || isResponseLike(value) || isFsReadStream(value);
    };
    getStringFromMaybeBuffer = (x5) => {
      if (typeof x5 === "string")
        return x5;
      if (typeof Buffer !== "undefined" && x5 instanceof Buffer)
        return String(x5);
      return void 0;
    };
    isAsyncIterableIterator = (value) => value != null && typeof value === "object" && typeof value[Symbol.asyncIterator] === "function";
    isMultipartBody = (body) => body && typeof body === "object" && body.body && body[Symbol.toStringTag] === "MultipartBody";
    multipartFormRequestOptions = async (opts) => {
      const form = await createForm(opts.body);
      return getMultipartRequestOptions(form, opts);
    };
    createForm = async (body) => {
      const form = new FormData2();
      await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));
      return form;
    };
    addFormValue = async (form, key, value) => {
      if (value === void 0)
        return;
      if (value == null) {
        throw new TypeError(`Received null for "${key}"; to pass null in FormData, you must use the string 'null'`);
      }
      if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
        form.append(key, String(value));
      } else if (isUploadable(value)) {
        const file = await toFile(value);
        form.append(key, file);
      } else if (Array.isArray(value)) {
        await Promise.all(value.map((entry) => addFormValue(form, key + "[]", entry)));
      } else if (typeof value === "object") {
        await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));
      } else {
        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);
      }
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/core.mjs
async function defaultParseResponse(props) {
  const { response } = props;
  if (props.options.stream) {
    debug("response", response.status, response.url, response.headers, response.body);
    if (props.options.__streamClass) {
      return props.options.__streamClass.fromSSEResponse(response, props.controller);
    }
    return Stream2.fromSSEResponse(response, props.controller);
  }
  if (response.status === 204) {
    return null;
  }
  if (props.options.__binaryResponse) {
    return response;
  }
  const contentType = response.headers.get("content-type");
  const isJSON = contentType?.includes("application/json") || contentType?.includes("application/vnd.api+json");
  if (isJSON) {
    const json = await response.json();
    debug("response", response.status, response.url, response.headers, json);
    return json;
  }
  const text = await response.text();
  debug("response", response.status, response.url, response.headers, text);
  return text;
}
function getBrowserInfo() {
  if (typeof navigator === "undefined" || !navigator) {
    return null;
  }
  const browserPatterns = [
    { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "safari", pattern: /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/ }
  ];
  for (const { key, pattern } of browserPatterns) {
    const match = pattern.exec(navigator.userAgent);
    if (match) {
      const major = match[1] || 0;
      const minor = match[2] || 0;
      const patch = match[3] || 0;
      return { browser: key, version: `${major}.${minor}.${patch}` };
    }
  }
  return null;
}
function isEmptyObj(obj) {
  if (!obj)
    return true;
  for (const _k in obj)
    return false;
  return true;
}
function hasOwn(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function applyHeadersMut(targetHeaders, newHeaders) {
  for (const k6 in newHeaders) {
    if (!hasOwn(newHeaders, k6))
      continue;
    const lowerKey = k6.toLowerCase();
    if (!lowerKey)
      continue;
    const val2 = newHeaders[k6];
    if (val2 === null) {
      delete targetHeaders[lowerKey];
    } else if (val2 !== void 0) {
      targetHeaders[lowerKey] = val2;
    }
  }
}
function debug(action, ...args) {
  if (typeof process !== "undefined" && process?.env?.["DEBUG"] === "true") {
    console.log(`OpenAI:DEBUG:${action}`, ...args);
  }
}
function isObj(obj) {
  return obj != null && typeof obj === "object" && !Array.isArray(obj);
}
var __classPrivateFieldSet6, __classPrivateFieldGet7, _AbstractPage_client, APIPromise, APIClient, AbstractPage, PagePromise, createResponseHeaders, requestOptionsKeys, isRequestOptions, getPlatformProperties, normalizeArch, normalizePlatform, _platformHeaders, getPlatformHeaders, safeJSON, startsWithSchemeRegexp, isAbsoluteURL, sleep, validatePositiveInteger, castToError, readEnv, uuid4, isRunningInBrowser;
var init_core = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/core.mjs"() {
    "use strict";
    init_version();
    init_streaming();
    init_error();
    init_shims();
    init_uploads();
    init_uploads();
    __classPrivateFieldSet6 = function(receiver, state, value, kind2, f6) {
      if (kind2 === "m")
        throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f6.call(receiver, value) : f6 ? f6.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet7 = function(receiver, state, kind2, f6) {
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f6 : kind2 === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
    };
    APIPromise = class _APIPromise extends Promise {
      constructor(responsePromise, parseResponse = defaultParseResponse) {
        super((resolve2) => {
          resolve2(null);
        });
        this.responsePromise = responsePromise;
        this.parseResponse = parseResponse;
      }
      _thenUnwrap(transform) {
        return new _APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));
      }
      /**
       * Gets the raw `Response` instance instead of parsing the response
       * data.
       *
       * If you want to parse the response body but still get the `Response`
       * instance, you can use {@link withResponse()}.
       *
       * 👋 Getting the wrong TypeScript type for `Response`?
       * Try setting `"moduleResolution": "NodeNext"` if you can,
       * or add one of these imports before your first `import … from 'openai'`:
       * - `import 'openai/shims/node'` (if you're running on Node)
       * - `import 'openai/shims/web'` (otherwise)
       */
      asResponse() {
        return this.responsePromise.then((p6) => p6.response);
      }
      /**
       * Gets the parsed response data and the raw `Response` instance.
       *
       * If you just want to get the raw `Response` instance without parsing it,
       * you can use {@link asResponse()}.
       *
       *
       * 👋 Getting the wrong TypeScript type for `Response`?
       * Try setting `"moduleResolution": "NodeNext"` if you can,
       * or add one of these imports before your first `import … from 'openai'`:
       * - `import 'openai/shims/node'` (if you're running on Node)
       * - `import 'openai/shims/web'` (otherwise)
       */
      async withResponse() {
        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);
        return { data, response };
      }
      parse() {
        if (!this.parsedPromise) {
          this.parsedPromise = this.responsePromise.then(this.parseResponse);
        }
        return this.parsedPromise;
      }
      then(onfulfilled, onrejected) {
        return this.parse().then(onfulfilled, onrejected);
      }
      catch(onrejected) {
        return this.parse().catch(onrejected);
      }
      finally(onfinally) {
        return this.parse().finally(onfinally);
      }
    };
    APIClient = class {
      constructor({
        baseURL,
        maxRetries = 2,
        timeout = 6e5,
        // 10 minutes
        httpAgent,
        fetch: overridenFetch
      }) {
        this.baseURL = baseURL;
        this.maxRetries = validatePositiveInteger("maxRetries", maxRetries);
        this.timeout = validatePositiveInteger("timeout", timeout);
        this.httpAgent = httpAgent;
        this.fetch = overridenFetch ?? fetch4;
      }
      authHeaders(opts) {
        return {};
      }
      /**
       * Override this to add your own default headers, for example:
       *
       *  {
       *    ...super.defaultHeaders(),
       *    Authorization: 'Bearer 123',
       *  }
       */
      defaultHeaders(opts) {
        return {
          Accept: "application/json",
          "Content-Type": "application/json",
          "User-Agent": this.getUserAgent(),
          ...getPlatformHeaders(),
          ...this.authHeaders(opts)
        };
      }
      /**
       * Override this to add your own headers validation:
       */
      validateHeaders(headers, customHeaders) {
      }
      defaultIdempotencyKey() {
        return `stainless-node-retry-${uuid4()}`;
      }
      get(path, opts) {
        return this.methodRequest("get", path, opts);
      }
      post(path, opts) {
        return this.methodRequest("post", path, opts);
      }
      patch(path, opts) {
        return this.methodRequest("patch", path, opts);
      }
      put(path, opts) {
        return this.methodRequest("put", path, opts);
      }
      delete(path, opts) {
        return this.methodRequest("delete", path, opts);
      }
      methodRequest(method, path, opts) {
        return this.request(Promise.resolve(opts).then(async (opts2) => {
          const body = opts2 && isBlobLike(opts2?.body) ? new DataView(await opts2.body.arrayBuffer()) : opts2?.body instanceof DataView ? opts2.body : opts2?.body instanceof ArrayBuffer ? new DataView(opts2.body) : opts2 && ArrayBuffer.isView(opts2?.body) ? new DataView(opts2.body.buffer) : opts2?.body;
          return { method, path, ...opts2, body };
        }));
      }
      getAPIList(path, Page2, opts) {
        return this.requestAPIList(Page2, { method: "get", path, ...opts });
      }
      calculateContentLength(body) {
        if (typeof body === "string") {
          if (typeof Buffer !== "undefined") {
            return Buffer.byteLength(body, "utf8").toString();
          }
          if (typeof TextEncoder !== "undefined") {
            const encoder = new TextEncoder();
            const encoded = encoder.encode(body);
            return encoded.length.toString();
          }
        } else if (ArrayBuffer.isView(body)) {
          return body.byteLength.toString();
        }
        return null;
      }
      buildRequest(options) {
        const { method, path, query, headers = {} } = options;
        const body = ArrayBuffer.isView(options.body) || options.__binaryRequest && typeof options.body === "string" ? options.body : isMultipartBody(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;
        const contentLength = this.calculateContentLength(body);
        const url = this.buildURL(path, query);
        if ("timeout" in options)
          validatePositiveInteger("timeout", options.timeout);
        const timeout = options.timeout ?? this.timeout;
        const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);
        const minAgentTimeout = timeout + 1e3;
        if (typeof httpAgent?.options?.timeout === "number" && minAgentTimeout > (httpAgent.options.timeout ?? 0)) {
          httpAgent.options.timeout = minAgentTimeout;
        }
        if (this.idempotencyHeader && method !== "get") {
          if (!options.idempotencyKey)
            options.idempotencyKey = this.defaultIdempotencyKey();
          headers[this.idempotencyHeader] = options.idempotencyKey;
        }
        const reqHeaders = this.buildHeaders({ options, headers, contentLength });
        const req = {
          method,
          ...body && { body },
          headers: reqHeaders,
          ...httpAgent && { agent: httpAgent },
          // @ts-ignore node-fetch uses a custom AbortSignal type that is
          // not compatible with standard web types
          signal: options.signal ?? null
        };
        return { req, url, timeout };
      }
      buildHeaders({ options, headers, contentLength }) {
        const reqHeaders = {};
        if (contentLength) {
          reqHeaders["content-length"] = contentLength;
        }
        const defaultHeaders = this.defaultHeaders(options);
        applyHeadersMut(reqHeaders, defaultHeaders);
        applyHeadersMut(reqHeaders, headers);
        if (isMultipartBody(options.body) && kind !== "node") {
          delete reqHeaders["content-type"];
        }
        this.validateHeaders(reqHeaders, headers);
        return reqHeaders;
      }
      /**
       * Used as a callback for mutating the given `FinalRequestOptions` object.
       */
      async prepareOptions(options) {
      }
      /**
       * Used as a callback for mutating the given `RequestInit` object.
       *
       * This is useful for cases where you want to add certain headers based off of
       * the request properties, e.g. `method` or `url`.
       */
      async prepareRequest(request2, { url, options }) {
      }
      parseHeaders(headers) {
        return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header) => [...header])) : { ...headers };
      }
      makeStatusError(status, error2, message, headers) {
        return APIError.generate(status, error2, message, headers);
      }
      request(options, remainingRetries = null) {
        return new APIPromise(this.makeRequest(options, remainingRetries));
      }
      async makeRequest(optionsInput, retriesRemaining) {
        const options = await optionsInput;
        if (retriesRemaining == null) {
          retriesRemaining = options.maxRetries ?? this.maxRetries;
        }
        await this.prepareOptions(options);
        const { req, url, timeout } = this.buildRequest(options);
        await this.prepareRequest(req, { url, options });
        debug("request", url, options, req.headers);
        if (options.signal?.aborted) {
          throw new APIUserAbortError();
        }
        const controller = new AbortController();
        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);
        if (response instanceof Error) {
          if (options.signal?.aborted) {
            throw new APIUserAbortError();
          }
          if (retriesRemaining) {
            return this.retryRequest(options, retriesRemaining);
          }
          if (response.name === "AbortError") {
            throw new APIConnectionTimeoutError();
          }
          throw new APIConnectionError({ cause: response });
        }
        const responseHeaders = createResponseHeaders(response.headers);
        if (!response.ok) {
          if (retriesRemaining && this.shouldRetry(response)) {
            const retryMessage2 = `retrying, ${retriesRemaining} attempts remaining`;
            debug(`response (error; ${retryMessage2})`, response.status, url, responseHeaders);
            return this.retryRequest(options, retriesRemaining, responseHeaders);
          }
          const errText = await response.text().catch((e6) => castToError(e6).message);
          const errJSON = safeJSON(errText);
          const errMessage = errJSON ? void 0 : errText;
          const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;
          debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);
          const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);
          throw err;
        }
        return { response, options, controller };
      }
      requestAPIList(Page2, options) {
        const request2 = this.makeRequest(options, null);
        return new PagePromise(this, request2, Page2);
      }
      buildURL(path, query) {
        const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith("/") && path.startsWith("/") ? path.slice(1) : path));
        const defaultQuery = this.defaultQuery();
        if (!isEmptyObj(defaultQuery)) {
          query = { ...defaultQuery, ...query };
        }
        if (typeof query === "object" && query && !Array.isArray(query)) {
          url.search = this.stringifyQuery(query);
        }
        return url.toString();
      }
      stringifyQuery(query) {
        return Object.entries(query).filter(([_3, value]) => typeof value !== "undefined").map(([key, value]) => {
          if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
            return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
          }
          if (value === null) {
            return `${encodeURIComponent(key)}=`;
          }
          throw new OpenAIError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);
        }).join("&");
      }
      async fetchWithTimeout(url, init, ms, controller) {
        const { signal, ...options } = init || {};
        if (signal)
          signal.addEventListener("abort", () => controller.abort());
        const timeout = setTimeout(() => controller.abort(), ms);
        return this.getRequestClient().fetch.call(void 0, url, { signal: controller.signal, ...options }).finally(() => {
          clearTimeout(timeout);
        });
      }
      getRequestClient() {
        return { fetch: this.fetch };
      }
      shouldRetry(response) {
        const shouldRetryHeader = response.headers.get("x-should-retry");
        if (shouldRetryHeader === "true")
          return true;
        if (shouldRetryHeader === "false")
          return false;
        if (response.status === 408)
          return true;
        if (response.status === 409)
          return true;
        if (response.status === 429)
          return true;
        if (response.status >= 500)
          return true;
        return false;
      }
      async retryRequest(options, retriesRemaining, responseHeaders) {
        let timeoutMillis;
        const retryAfterMillisHeader = responseHeaders?.["retry-after-ms"];
        if (retryAfterMillisHeader) {
          const timeoutMs = parseFloat(retryAfterMillisHeader);
          if (!Number.isNaN(timeoutMs)) {
            timeoutMillis = timeoutMs;
          }
        }
        const retryAfterHeader = responseHeaders?.["retry-after"];
        if (retryAfterHeader && !timeoutMillis) {
          const timeoutSeconds = parseFloat(retryAfterHeader);
          if (!Number.isNaN(timeoutSeconds)) {
            timeoutMillis = timeoutSeconds * 1e3;
          } else {
            timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
          }
        }
        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1e3)) {
          const maxRetries = options.maxRetries ?? this.maxRetries;
          timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);
        }
        await sleep(timeoutMillis);
        return this.makeRequest(options, retriesRemaining - 1);
      }
      calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
        const initialRetryDelay = 0.5;
        const maxRetryDelay = 8;
        const numRetries = maxRetries - retriesRemaining;
        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);
        const jitter = 1 - Math.random() * 0.25;
        return sleepSeconds * jitter * 1e3;
      }
      getUserAgent() {
        return `${this.constructor.name}/JS ${VERSION}`;
      }
    };
    AbstractPage = class {
      constructor(client, response, body, options) {
        _AbstractPage_client.set(this, void 0);
        __classPrivateFieldSet6(this, _AbstractPage_client, client, "f");
        this.options = options;
        this.response = response;
        this.body = body;
      }
      hasNextPage() {
        const items = this.getPaginatedItems();
        if (!items.length)
          return false;
        return this.nextPageInfo() != null;
      }
      async getNextPage() {
        const nextInfo = this.nextPageInfo();
        if (!nextInfo) {
          throw new OpenAIError("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.");
        }
        const nextOptions = { ...this.options };
        if ("params" in nextInfo && typeof nextOptions.query === "object") {
          nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
        } else if ("url" in nextInfo) {
          const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];
          for (const [key, value] of params) {
            nextInfo.url.searchParams.set(key, value);
          }
          nextOptions.query = void 0;
          nextOptions.path = nextInfo.url.toString();
        }
        return await __classPrivateFieldGet7(this, _AbstractPage_client, "f").requestAPIList(this.constructor, nextOptions);
      }
      async *iterPages() {
        let page = this;
        yield page;
        while (page.hasNextPage()) {
          page = await page.getNextPage();
          yield page;
        }
      }
      async *[(_AbstractPage_client = /* @__PURE__ */ new WeakMap(), Symbol.asyncIterator)]() {
        for await (const page of this.iterPages()) {
          for (const item of page.getPaginatedItems()) {
            yield item;
          }
        }
      }
    };
    PagePromise = class extends APIPromise {
      constructor(client, request2, Page2) {
        super(request2, async (props) => new Page2(client, props.response, await defaultParseResponse(props), props.options));
      }
      /**
       * Allow auto-paginating iteration on an unawaited list call, eg:
       *
       *    for await (const item of client.items.list()) {
       *      console.log(item)
       *    }
       */
      async *[Symbol.asyncIterator]() {
        const page = await this;
        for await (const item of page) {
          yield item;
        }
      }
    };
    createResponseHeaders = (headers) => {
      return new Proxy(Object.fromEntries(
        // @ts-ignore
        headers.entries()
      ), {
        get(target, name) {
          const key = name.toString();
          return target[key.toLowerCase()] || target[key];
        }
      });
    };
    requestOptionsKeys = {
      method: true,
      path: true,
      query: true,
      body: true,
      headers: true,
      maxRetries: true,
      stream: true,
      timeout: true,
      httpAgent: true,
      signal: true,
      idempotencyKey: true,
      __binaryRequest: true,
      __binaryResponse: true,
      __streamClass: true
    };
    isRequestOptions = (obj) => {
      return typeof obj === "object" && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every((k6) => hasOwn(requestOptionsKeys, k6));
    };
    getPlatformProperties = () => {
      if (typeof Deno !== "undefined" && Deno.build != null) {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": normalizePlatform(Deno.build.os),
          "X-Stainless-Arch": normalizeArch(Deno.build.arch),
          "X-Stainless-Runtime": "deno",
          "X-Stainless-Runtime-Version": typeof Deno.version === "string" ? Deno.version : Deno.version?.deno ?? "unknown"
        };
      }
      if (typeof EdgeRuntime !== "undefined") {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": "Unknown",
          "X-Stainless-Arch": `other:${EdgeRuntime}`,
          "X-Stainless-Runtime": "edge",
          "X-Stainless-Runtime-Version": process.version
        };
      }
      if (Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]") {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": normalizePlatform(process.platform),
          "X-Stainless-Arch": normalizeArch(process.arch),
          "X-Stainless-Runtime": "node",
          "X-Stainless-Runtime-Version": process.version
        };
      }
      const browserInfo = getBrowserInfo();
      if (browserInfo) {
        return {
          "X-Stainless-Lang": "js",
          "X-Stainless-Package-Version": VERSION,
          "X-Stainless-OS": "Unknown",
          "X-Stainless-Arch": "unknown",
          "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
          "X-Stainless-Runtime-Version": browserInfo.version
        };
      }
      return {
        "X-Stainless-Lang": "js",
        "X-Stainless-Package-Version": VERSION,
        "X-Stainless-OS": "Unknown",
        "X-Stainless-Arch": "unknown",
        "X-Stainless-Runtime": "unknown",
        "X-Stainless-Runtime-Version": "unknown"
      };
    };
    normalizeArch = (arch) => {
      if (arch === "x32")
        return "x32";
      if (arch === "x86_64" || arch === "x64")
        return "x64";
      if (arch === "arm")
        return "arm";
      if (arch === "aarch64" || arch === "arm64")
        return "arm64";
      if (arch)
        return `other:${arch}`;
      return "unknown";
    };
    normalizePlatform = (platform2) => {
      platform2 = platform2.toLowerCase();
      if (platform2.includes("ios"))
        return "iOS";
      if (platform2 === "android")
        return "Android";
      if (platform2 === "darwin")
        return "MacOS";
      if (platform2 === "win32")
        return "Windows";
      if (platform2 === "freebsd")
        return "FreeBSD";
      if (platform2 === "openbsd")
        return "OpenBSD";
      if (platform2 === "linux")
        return "Linux";
      if (platform2)
        return `Other:${platform2}`;
      return "Unknown";
    };
    getPlatformHeaders = () => {
      return _platformHeaders ?? (_platformHeaders = getPlatformProperties());
    };
    safeJSON = (text) => {
      try {
        return JSON.parse(text);
      } catch (err) {
        return void 0;
      }
    };
    startsWithSchemeRegexp = new RegExp("^(?:[a-z]+:)?//", "i");
    isAbsoluteURL = (url) => {
      return startsWithSchemeRegexp.test(url);
    };
    sleep = (ms) => new Promise((resolve2) => setTimeout(resolve2, ms));
    validatePositiveInteger = (name, n6) => {
      if (typeof n6 !== "number" || !Number.isInteger(n6)) {
        throw new OpenAIError(`${name} must be an integer`);
      }
      if (n6 < 0) {
        throw new OpenAIError(`${name} must be a positive integer`);
      }
      return n6;
    };
    castToError = (err) => {
      if (err instanceof Error)
        return err;
      return new Error(err);
    };
    readEnv = (env2) => {
      if (typeof process !== "undefined") {
        return process.env?.[env2]?.trim() ?? void 0;
      }
      if (typeof Deno !== "undefined") {
        return Deno.env?.get?.(env2)?.trim();
      }
      return void 0;
    };
    uuid4 = () => {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c6) => {
        const r6 = Math.random() * 16 | 0;
        const v7 = c6 === "x" ? r6 : r6 & 3 | 8;
        return v7.toString(16);
      });
    };
    isRunningInBrowser = () => {
      return (
        // @ts-ignore
        typeof window !== "undefined" && // @ts-ignore
        typeof window.document !== "undefined" && // @ts-ignore
        typeof navigator !== "undefined"
      );
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/pagination.mjs
var Page, CursorPage;
var init_pagination5 = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/pagination.mjs"() {
    "use strict";
    init_core();
    Page = class extends AbstractPage {
      constructor(client, response, body, options) {
        super(client, response, body, options);
        this.data = body.data || [];
        this.object = body.object;
      }
      getPaginatedItems() {
        return this.data ?? [];
      }
      // @deprecated Please use `nextPageInfo()` instead
      /**
       * This page represents a response that isn't actually paginated at the API level
       * so there will never be any next page params.
       */
      nextPageParams() {
        return null;
      }
      nextPageInfo() {
        return null;
      }
    };
    CursorPage = class extends AbstractPage {
      constructor(client, response, body, options) {
        super(client, response, body, options);
        this.data = body.data || [];
      }
      getPaginatedItems() {
        return this.data ?? [];
      }
      // @deprecated Please use `nextPageInfo()` instead
      nextPageParams() {
        const info = this.nextPageInfo();
        if (!info)
          return null;
        if ("params" in info)
          return info.params;
        const params = Object.fromEntries(info.url.searchParams);
        if (!Object.keys(params).length)
          return null;
        return params;
      }
      nextPageInfo() {
        const data = this.getPaginatedItems();
        if (!data.length) {
          return null;
        }
        const id = data[data.length - 1]?.id;
        if (!id) {
          return null;
        }
        return { params: { after: id } };
      }
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resource.mjs
var APIResource;
var init_resource = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resource.mjs"() {
    "use strict";
    APIResource = class {
      constructor(client) {
        this._client = client;
      }
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/chat/completions.mjs
var Completions;
var init_completions = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/chat/completions.mjs"() {
    "use strict";
    init_resource();
    Completions = class extends APIResource {
      create(body, options) {
        return this._client.post("/chat/completions", { body, ...options, stream: body.stream ?? false });
      }
    };
    /* @__PURE__ */ (function(Completions4) {
    })(Completions || (Completions = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/chat/chat.mjs
var Chat;
var init_chat = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/chat/chat.mjs"() {
    "use strict";
    init_resource();
    init_completions();
    Chat = class extends APIResource {
      constructor() {
        super(...arguments);
        this.completions = new Completions(this._client);
      }
    };
    (function(Chat3) {
      Chat3.Completions = Completions;
    })(Chat || (Chat = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/chat/index.mjs
var init_chat2 = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/chat/index.mjs"() {
    "use strict";
    init_chat();
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/shared.mjs
var init_shared5 = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/shared.mjs"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/audio/speech.mjs
var Speech;
var init_speech = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/audio/speech.mjs"() {
    "use strict";
    init_resource();
    Speech = class extends APIResource {
      /**
       * Generates audio from the input text.
       */
      create(body, options) {
        return this._client.post("/audio/speech", { body, ...options, __binaryResponse: true });
      }
    };
    /* @__PURE__ */ (function(Speech2) {
    })(Speech || (Speech = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/audio/transcriptions.mjs
var Transcriptions;
var init_transcriptions = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/audio/transcriptions.mjs"() {
    "use strict";
    init_resource();
    init_core();
    Transcriptions = class extends APIResource {
      /**
       * Transcribes audio into the input language.
       */
      create(body, options) {
        return this._client.post("/audio/transcriptions", multipartFormRequestOptions({ body, ...options }));
      }
    };
    /* @__PURE__ */ (function(Transcriptions2) {
    })(Transcriptions || (Transcriptions = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/audio/translations.mjs
var Translations;
var init_translations = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/audio/translations.mjs"() {
    "use strict";
    init_resource();
    init_core();
    Translations = class extends APIResource {
      /**
       * Translates audio into English.
       */
      create(body, options) {
        return this._client.post("/audio/translations", multipartFormRequestOptions({ body, ...options }));
      }
    };
    /* @__PURE__ */ (function(Translations2) {
    })(Translations || (Translations = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/audio/audio.mjs
var Audio;
var init_audio = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/audio/audio.mjs"() {
    "use strict";
    init_resource();
    init_speech();
    init_transcriptions();
    init_translations();
    Audio = class extends APIResource {
      constructor() {
        super(...arguments);
        this.transcriptions = new Transcriptions(this._client);
        this.translations = new Translations(this._client);
        this.speech = new Speech(this._client);
      }
    };
    (function(Audio2) {
      Audio2.Transcriptions = Transcriptions;
      Audio2.Translations = Translations;
      Audio2.Speech = Speech;
    })(Audio || (Audio = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/batches.mjs
var Batches, BatchesPage;
var init_batches = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/batches.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_batches();
    init_pagination5();
    Batches = class extends APIResource {
      /**
       * Creates and executes a batch from an uploaded file of requests
       */
      create(body, options) {
        return this._client.post("/batches", { body, ...options });
      }
      /**
       * Retrieves a batch.
       */
      retrieve(batchId, options) {
        return this._client.get(`/batches/${batchId}`, options);
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/batches", BatchesPage, { query, ...options });
      }
      /**
       * Cancels an in-progress batch. The batch will be in status `cancelling` for up to
       * 10 minutes, before changing to `cancelled`, where it will have partial results
       * (if any) available in the output file.
       */
      cancel(batchId, options) {
        return this._client.post(`/batches/${batchId}/cancel`, options);
      }
    };
    BatchesPage = class extends CursorPage {
    };
    (function(Batches2) {
      Batches2.BatchesPage = BatchesPage;
    })(Batches || (Batches = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/assistants.mjs
var Assistants, AssistantsPage;
var init_assistants = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/assistants.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_assistants();
    init_pagination5();
    Assistants = class extends APIResource {
      /**
       * Create an assistant with a model and instructions.
       */
      create(body, options) {
        return this._client.post("/assistants", {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Retrieves an assistant.
       */
      retrieve(assistantId, options) {
        return this._client.get(`/assistants/${assistantId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Modifies an assistant.
       */
      update(assistantId, body, options) {
        return this._client.post(`/assistants/${assistantId}`, {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/assistants", AssistantsPage, {
          query,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Delete an assistant.
       */
      del(assistantId, options) {
        return this._client.delete(`/assistants/${assistantId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
    };
    AssistantsPage = class extends CursorPage {
    };
    (function(Assistants2) {
      Assistants2.AssistantsPage = AssistantsPage;
    })(Assistants || (Assistants = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/RunnableFunction.mjs
function isRunnableFunctionWithParse(fn) {
  return typeof fn.parse === "function";
}
var init_RunnableFunction = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/RunnableFunction.mjs"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/chatCompletionUtils.mjs
var isAssistantMessage, isFunctionMessage, isToolMessage;
var init_chatCompletionUtils = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/chatCompletionUtils.mjs"() {
    "use strict";
    isAssistantMessage = (message) => {
      return message?.role === "assistant";
    };
    isFunctionMessage = (message) => {
      return message?.role === "function";
    };
    isToolMessage = (message) => {
      return message?.role === "tool";
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/AbstractChatCompletionRunner.mjs
var __classPrivateFieldSet7, __classPrivateFieldGet8, _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_connectedPromise, _AbstractChatCompletionRunner_resolveConnectedPromise, _AbstractChatCompletionRunner_rejectConnectedPromise, _AbstractChatCompletionRunner_endPromise, _AbstractChatCompletionRunner_resolveEndPromise, _AbstractChatCompletionRunner_rejectEndPromise, _AbstractChatCompletionRunner_listeners, _AbstractChatCompletionRunner_ended, _AbstractChatCompletionRunner_errored, _AbstractChatCompletionRunner_aborted, _AbstractChatCompletionRunner_catchingPromiseCreated, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_handleError, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult, DEFAULT_MAX_CHAT_COMPLETIONS, AbstractChatCompletionRunner;
var init_AbstractChatCompletionRunner = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/AbstractChatCompletionRunner.mjs"() {
    "use strict";
    init_error();
    init_RunnableFunction();
    init_chatCompletionUtils();
    __classPrivateFieldSet7 = function(receiver, state, value, kind2, f6) {
      if (kind2 === "m")
        throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f6.call(receiver, value) : f6 ? f6.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet8 = function(receiver, state, kind2, f6) {
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f6 : kind2 === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
    };
    DEFAULT_MAX_CHAT_COMPLETIONS = 10;
    AbstractChatCompletionRunner = class {
      constructor() {
        _AbstractChatCompletionRunner_instances.add(this);
        this.controller = new AbortController();
        _AbstractChatCompletionRunner_connectedPromise.set(this, void 0);
        _AbstractChatCompletionRunner_resolveConnectedPromise.set(this, () => {
        });
        _AbstractChatCompletionRunner_rejectConnectedPromise.set(this, () => {
        });
        _AbstractChatCompletionRunner_endPromise.set(this, void 0);
        _AbstractChatCompletionRunner_resolveEndPromise.set(this, () => {
        });
        _AbstractChatCompletionRunner_rejectEndPromise.set(this, () => {
        });
        _AbstractChatCompletionRunner_listeners.set(this, {});
        this._chatCompletions = [];
        this.messages = [];
        _AbstractChatCompletionRunner_ended.set(this, false);
        _AbstractChatCompletionRunner_errored.set(this, false);
        _AbstractChatCompletionRunner_aborted.set(this, false);
        _AbstractChatCompletionRunner_catchingPromiseCreated.set(this, false);
        _AbstractChatCompletionRunner_handleError.set(this, (error2) => {
          __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_errored, true, "f");
          if (error2 instanceof Error && error2.name === "AbortError") {
            error2 = new APIUserAbortError();
          }
          if (error2 instanceof APIUserAbortError) {
            __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_aborted, true, "f");
            return this._emit("abort", error2);
          }
          if (error2 instanceof OpenAIError) {
            return this._emit("error", error2);
          }
          if (error2 instanceof Error) {
            const openAIError = new OpenAIError(error2.message);
            openAIError.cause = error2;
            return this._emit("error", openAIError);
          }
          return this._emit("error", new OpenAIError(String(error2)));
        });
        __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_connectedPromise, new Promise((resolve2, reject) => {
          __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_resolveConnectedPromise, resolve2, "f");
          __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_rejectConnectedPromise, reject, "f");
        }), "f");
        __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_endPromise, new Promise((resolve2, reject) => {
          __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_resolveEndPromise, resolve2, "f");
          __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_rejectEndPromise, reject, "f");
        }), "f");
        __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_connectedPromise, "f").catch(() => {
        });
        __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_endPromise, "f").catch(() => {
        });
      }
      _run(executor) {
        setTimeout(() => {
          executor().then(() => {
            this._emitFinal();
            this._emit("end");
          }, __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_handleError, "f"));
        }, 0);
      }
      _addChatCompletion(chatCompletion) {
        this._chatCompletions.push(chatCompletion);
        this._emit("chatCompletion", chatCompletion);
        const message = chatCompletion.choices[0]?.message;
        if (message)
          this._addMessage(message);
        return chatCompletion;
      }
      _addMessage(message, emit = true) {
        if (!("content" in message))
          message.content = null;
        this.messages.push(message);
        if (emit) {
          this._emit("message", message);
          if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {
            this._emit("functionCallResult", message.content);
          } else if (isAssistantMessage(message) && message.function_call) {
            this._emit("functionCall", message.function_call);
          } else if (isAssistantMessage(message) && message.tool_calls) {
            for (const tool_call of message.tool_calls) {
              if (tool_call.type === "function") {
                this._emit("functionCall", tool_call.function);
              }
            }
          }
        }
      }
      _connected() {
        if (this.ended)
          return;
        __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_resolveConnectedPromise, "f").call(this);
        this._emit("connect");
      }
      get ended() {
        return __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_ended, "f");
      }
      get errored() {
        return __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_errored, "f");
      }
      get aborted() {
        return __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_aborted, "f");
      }
      abort() {
        this.controller.abort();
      }
      /**
       * Adds the listener function to the end of the listeners array for the event.
       * No checks are made to see if the listener has already been added. Multiple calls passing
       * the same combination of event and listener will result in the listener being added, and
       * called, multiple times.
       * @returns this ChatCompletionStream, so that calls can be chained
       */
      on(event, listener) {
        const listeners = __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_listeners, "f")[event] || (__classPrivateFieldGet8(this, _AbstractChatCompletionRunner_listeners, "f")[event] = []);
        listeners.push({ listener });
        return this;
      }
      /**
       * Removes the specified listener from the listener array for the event.
       * off() will remove, at most, one instance of a listener from the listener array. If any single
       * listener has been added multiple times to the listener array for the specified event, then
       * off() must be called multiple times to remove each instance.
       * @returns this ChatCompletionStream, so that calls can be chained
       */
      off(event, listener) {
        const listeners = __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_listeners, "f")[event];
        if (!listeners)
          return this;
        const index2 = listeners.findIndex((l6) => l6.listener === listener);
        if (index2 >= 0)
          listeners.splice(index2, 1);
        return this;
      }
      /**
       * Adds a one-time listener function for the event. The next time the event is triggered,
       * this listener is removed and then invoked.
       * @returns this ChatCompletionStream, so that calls can be chained
       */
      once(event, listener) {
        const listeners = __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_listeners, "f")[event] || (__classPrivateFieldGet8(this, _AbstractChatCompletionRunner_listeners, "f")[event] = []);
        listeners.push({ listener, once: true });
        return this;
      }
      /**
       * This is similar to `.once()`, but returns a Promise that resolves the next time
       * the event is triggered, instead of calling a listener callback.
       * @returns a Promise that resolves the next time given event is triggered,
       * or rejects if an error is emitted.  (If you request the 'error' event,
       * returns a promise that resolves with the error).
       *
       * Example:
       *
       *   const message = await stream.emitted('message') // rejects if the stream errors
       */
      emitted(event) {
        return new Promise((resolve2, reject) => {
          __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, "f");
          if (event !== "error")
            this.once("error", reject);
          this.once(event, resolve2);
        });
      }
      async done() {
        __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, "f");
        await __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_endPromise, "f");
      }
      /**
       * @returns a promise that resolves with the final ChatCompletion, or rejects
       * if an error occurred or the stream ended prematurely without producing a ChatCompletion.
       */
      async finalChatCompletion() {
        await this.done();
        const completion = this._chatCompletions[this._chatCompletions.length - 1];
        if (!completion)
          throw new OpenAIError("stream ended without producing a ChatCompletion");
        return completion;
      }
      /**
       * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects
       * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
       */
      async finalContent() {
        await this.done();
        return __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalContent).call(this);
      }
      /**
       * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,
       * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
       */
      async finalMessage() {
        await this.done();
        return __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this);
      }
      /**
       * @returns a promise that resolves with the content of the final FunctionCall, or rejects
       * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
       */
      async finalFunctionCall() {
        await this.done();
        return __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);
      }
      async finalFunctionCallResult() {
        await this.done();
        return __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);
      }
      async totalUsage() {
        await this.done();
        return __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);
      }
      allChatCompletions() {
        return [...this._chatCompletions];
      }
      _emit(event, ...args) {
        if (__classPrivateFieldGet8(this, _AbstractChatCompletionRunner_ended, "f")) {
          return;
        }
        if (event === "end") {
          __classPrivateFieldSet7(this, _AbstractChatCompletionRunner_ended, true, "f");
          __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_resolveEndPromise, "f").call(this);
        }
        const listeners = __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_listeners, "f")[event];
        if (listeners) {
          __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_listeners, "f")[event] = listeners.filter((l6) => !l6.once);
          listeners.forEach(({ listener }) => listener(...args));
        }
        if (event === "abort") {
          const error2 = args[0];
          if (!__classPrivateFieldGet8(this, _AbstractChatCompletionRunner_catchingPromiseCreated, "f") && !listeners?.length) {
            Promise.reject(error2);
          }
          __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_rejectConnectedPromise, "f").call(this, error2);
          __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_rejectEndPromise, "f").call(this, error2);
          this._emit("end");
          return;
        }
        if (event === "error") {
          const error2 = args[0];
          if (!__classPrivateFieldGet8(this, _AbstractChatCompletionRunner_catchingPromiseCreated, "f") && !listeners?.length) {
            Promise.reject(error2);
          }
          __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_rejectConnectedPromise, "f").call(this, error2);
          __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_rejectEndPromise, "f").call(this, error2);
          this._emit("end");
        }
      }
      _emitFinal() {
        const completion = this._chatCompletions[this._chatCompletions.length - 1];
        if (completion)
          this._emit("finalChatCompletion", completion);
        const finalMessage = __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this);
        if (finalMessage)
          this._emit("finalMessage", finalMessage);
        const finalContent = __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalContent).call(this);
        if (finalContent)
          this._emit("finalContent", finalContent);
        const finalFunctionCall = __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);
        if (finalFunctionCall)
          this._emit("finalFunctionCall", finalFunctionCall);
        const finalFunctionCallResult = __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);
        if (finalFunctionCallResult != null)
          this._emit("finalFunctionCallResult", finalFunctionCallResult);
        if (this._chatCompletions.some((c6) => c6.usage)) {
          this._emit("totalUsage", __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));
        }
      }
      async _createChatCompletion(completions, params, options) {
        const signal = options?.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_validateParams).call(this, params);
        const chatCompletion = await completions.create({ ...params, stream: false }, { ...options, signal: this.controller.signal });
        this._connected();
        return this._addChatCompletion(chatCompletion);
      }
      async _runChatCompletion(completions, params, options) {
        for (const message of params.messages) {
          this._addMessage(message, false);
        }
        return await this._createChatCompletion(completions, params, options);
      }
      async _runFunctions(completions, params, options) {
        const role = "function";
        const { function_call = "auto", stream, ...restParams } = params;
        const singleFunctionToCall = typeof function_call !== "string" && function_call?.name;
        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
        const functionsByName = {};
        for (const f6 of params.functions) {
          functionsByName[f6.name || f6.function.name] = f6;
        }
        const functions = params.functions.map((f6) => ({
          name: f6.name || f6.function.name,
          parameters: f6.parameters,
          description: f6.description
        }));
        for (const message of params.messages) {
          this._addMessage(message, false);
        }
        for (let i6 = 0; i6 < maxChatCompletions; ++i6) {
          const chatCompletion = await this._createChatCompletion(completions, {
            ...restParams,
            function_call,
            functions,
            messages: [...this.messages]
          }, options);
          const message = chatCompletion.choices[0]?.message;
          if (!message) {
            throw new OpenAIError(`missing message in ChatCompletion response`);
          }
          if (!message.function_call)
            return;
          const { name, arguments: args } = message.function_call;
          const fn = functionsByName[name];
          if (!fn) {
            const content2 = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions.map((f6) => JSON.stringify(f6.name)).join(", ")}. Please try again`;
            this._addMessage({ role, name, content: content2 });
            continue;
          } else if (singleFunctionToCall && singleFunctionToCall !== name) {
            const content2 = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;
            this._addMessage({ role, name, content: content2 });
            continue;
          }
          let parsed;
          try {
            parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;
          } catch (error2) {
            this._addMessage({
              role,
              name,
              content: error2 instanceof Error ? error2.message : String(error2)
            });
            continue;
          }
          const rawContent = await fn.function(parsed, this);
          const content = __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);
          this._addMessage({ role, name, content });
          if (singleFunctionToCall)
            return;
        }
      }
      async _runTools(completions, params, options) {
        const role = "tool";
        const { tool_choice = "auto", stream, ...restParams } = params;
        const singleFunctionToCall = typeof tool_choice !== "string" && tool_choice?.function?.name;
        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
        const functionsByName = {};
        for (const f6 of params.tools) {
          if (f6.type === "function") {
            functionsByName[f6.function.name || f6.function.function.name] = f6.function;
          }
        }
        const tools = "tools" in params ? params.tools.map((t6) => t6.type === "function" ? {
          type: "function",
          function: {
            name: t6.function.name || t6.function.function.name,
            parameters: t6.function.parameters,
            description: t6.function.description
          }
        } : t6) : void 0;
        for (const message of params.messages) {
          this._addMessage(message, false);
        }
        for (let i6 = 0; i6 < maxChatCompletions; ++i6) {
          const chatCompletion = await this._createChatCompletion(completions, {
            ...restParams,
            tool_choice,
            tools,
            messages: [...this.messages]
          }, options);
          const message = chatCompletion.choices[0]?.message;
          if (!message) {
            throw new OpenAIError(`missing message in ChatCompletion response`);
          }
          if (!message.tool_calls) {
            return;
          }
          for (const tool_call of message.tool_calls) {
            if (tool_call.type !== "function")
              continue;
            const tool_call_id = tool_call.id;
            const { name, arguments: args } = tool_call.function;
            const fn = functionsByName[name];
            if (!fn) {
              const content2 = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${tools.map((f6) => JSON.stringify(f6.function.name)).join(", ")}. Please try again`;
              this._addMessage({ role, tool_call_id, content: content2 });
              continue;
            } else if (singleFunctionToCall && singleFunctionToCall !== name) {
              const content2 = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;
              this._addMessage({ role, tool_call_id, content: content2 });
              continue;
            }
            let parsed;
            try {
              parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;
            } catch (error2) {
              const content2 = error2 instanceof Error ? error2.message : String(error2);
              this._addMessage({ role, tool_call_id, content: content2 });
              continue;
            }
            const rawContent = await fn.function(parsed, this);
            const content = __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);
            this._addMessage({ role, tool_call_id, content });
            if (singleFunctionToCall) {
              return;
            }
          }
        }
        return;
      }
    };
    _AbstractChatCompletionRunner_connectedPromise = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_resolveConnectedPromise = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_rejectConnectedPromise = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_endPromise = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_resolveEndPromise = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_rejectEndPromise = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_listeners = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_ended = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_errored = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_aborted = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_catchingPromiseCreated = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_handleError = /* @__PURE__ */ new WeakMap(), _AbstractChatCompletionRunner_instances = /* @__PURE__ */ new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent2() {
      return __classPrivateFieldGet8(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;
    }, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage2() {
      let i6 = this.messages.length;
      while (i6-- > 0) {
        const message = this.messages[i6];
        if (isAssistantMessage(message)) {
          const { function_call, ...rest } = message;
          const ret = { ...rest, content: message.content ?? null };
          if (function_call) {
            ret.function_call = function_call;
          }
          return ret;
        }
      }
      throw new OpenAIError("stream ended without producing a ChatCompletionMessage with role=assistant");
    }, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall2() {
      for (let i6 = this.messages.length - 1; i6 >= 0; i6--) {
        const message = this.messages[i6];
        if (isAssistantMessage(message) && message?.function_call) {
          return message.function_call;
        }
        if (isAssistantMessage(message) && message?.tool_calls?.length) {
          return message.tool_calls.at(-1)?.function;
        }
      }
      return;
    }, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult2() {
      for (let i6 = this.messages.length - 1; i6 >= 0; i6--) {
        const message = this.messages[i6];
        if (isFunctionMessage(message) && message.content != null) {
          return message.content;
        }
        if (isToolMessage(message) && message.content != null && this.messages.some((x5) => x5.role === "assistant" && x5.tool_calls?.some((y3) => y3.type === "function" && y3.id === message.tool_call_id))) {
          return message.content;
        }
      }
      return;
    }, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage2() {
      const total = {
        completion_tokens: 0,
        prompt_tokens: 0,
        total_tokens: 0
      };
      for (const { usage } of this._chatCompletions) {
        if (usage) {
          total.completion_tokens += usage.completion_tokens;
          total.prompt_tokens += usage.prompt_tokens;
          total.total_tokens += usage.total_tokens;
        }
      }
      return total;
    }, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams2(params) {
      if (params.n != null && params.n > 1) {
        throw new OpenAIError("ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.");
      }
    }, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult2(rawContent) {
      return typeof rawContent === "string" ? rawContent : rawContent === void 0 ? "undefined" : JSON.stringify(rawContent);
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/ChatCompletionRunner.mjs
var ChatCompletionRunner;
var init_ChatCompletionRunner = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/ChatCompletionRunner.mjs"() {
    "use strict";
    init_AbstractChatCompletionRunner();
    init_chatCompletionUtils();
    ChatCompletionRunner = class _ChatCompletionRunner extends AbstractChatCompletionRunner {
      /** @deprecated - please use `runTools` instead. */
      static runFunctions(completions, params, options) {
        const runner = new _ChatCompletionRunner();
        const opts = {
          ...options,
          headers: { ...options?.headers, "X-Stainless-Helper-Method": "runFunctions" }
        };
        runner._run(() => runner._runFunctions(completions, params, opts));
        return runner;
      }
      static runTools(completions, params, options) {
        const runner = new _ChatCompletionRunner();
        const opts = {
          ...options,
          headers: { ...options?.headers, "X-Stainless-Helper-Method": "runTools" }
        };
        runner._run(() => runner._runTools(completions, params, opts));
        return runner;
      }
      _addMessage(message) {
        super._addMessage(message);
        if (isAssistantMessage(message) && message.content) {
          this._emit("content", message.content);
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/ChatCompletionStream.mjs
function finalizeChatCompletion(snapshot) {
  const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;
  return {
    ...rest,
    id,
    choices: choices.map(({ message, finish_reason, index: index2, logprobs, ...choiceRest }) => {
      if (!finish_reason)
        throw new OpenAIError(`missing finish_reason for choice ${index2}`);
      const { content = null, function_call, tool_calls, ...messageRest } = message;
      const role = message.role;
      if (!role)
        throw new OpenAIError(`missing role for choice ${index2}`);
      if (function_call) {
        const { arguments: args, name } = function_call;
        if (args == null)
          throw new OpenAIError(`missing function_call.arguments for choice ${index2}`);
        if (!name)
          throw new OpenAIError(`missing function_call.name for choice ${index2}`);
        return {
          ...choiceRest,
          message: { content, function_call: { arguments: args, name }, role },
          finish_reason,
          index: index2,
          logprobs
        };
      }
      if (tool_calls) {
        return {
          ...choiceRest,
          index: index2,
          finish_reason,
          logprobs,
          message: {
            ...messageRest,
            role,
            content,
            tool_calls: tool_calls.map((tool_call, i6) => {
              const { function: fn, type, id: id2, ...toolRest } = tool_call;
              const { arguments: args, name, ...fnRest } = fn || {};
              if (id2 == null)
                throw new OpenAIError(`missing choices[${index2}].tool_calls[${i6}].id
${str(snapshot)}`);
              if (type == null)
                throw new OpenAIError(`missing choices[${index2}].tool_calls[${i6}].type
${str(snapshot)}`);
              if (name == null)
                throw new OpenAIError(`missing choices[${index2}].tool_calls[${i6}].function.name
${str(snapshot)}`);
              if (args == null)
                throw new OpenAIError(`missing choices[${index2}].tool_calls[${i6}].function.arguments
${str(snapshot)}`);
              return { ...toolRest, id: id2, type, function: { ...fnRest, name, arguments: args } };
            })
          }
        };
      }
      return {
        ...choiceRest,
        message: { ...messageRest, content, role },
        finish_reason,
        index: index2,
        logprobs
      };
    }),
    created,
    model,
    object: "chat.completion",
    ...system_fingerprint ? { system_fingerprint } : {}
  };
}
function str(x5) {
  return JSON.stringify(x5);
}
var __classPrivateFieldGet9, __classPrivateFieldSet8, _ChatCompletionStream_instances, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_addChunk, _ChatCompletionStream_endRequest, _ChatCompletionStream_accumulateChatCompletion, ChatCompletionStream;
var init_ChatCompletionStream = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/ChatCompletionStream.mjs"() {
    "use strict";
    init_error();
    init_AbstractChatCompletionRunner();
    init_streaming();
    __classPrivateFieldGet9 = function(receiver, state, kind2, f6) {
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f6 : kind2 === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
    };
    __classPrivateFieldSet8 = function(receiver, state, value, kind2, f6) {
      if (kind2 === "m")
        throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f6.call(receiver, value) : f6 ? f6.value = value : state.set(receiver, value), value;
    };
    ChatCompletionStream = class _ChatCompletionStream extends AbstractChatCompletionRunner {
      constructor() {
        super(...arguments);
        _ChatCompletionStream_instances.add(this);
        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);
      }
      get currentChatCompletionSnapshot() {
        return __classPrivateFieldGet9(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
      }
      /**
       * Intended for use on the frontend, consuming a stream produced with
       * `.toReadableStream()` on the backend.
       *
       * Note that messages sent to the model do not appear in `.on('message')`
       * in this context.
       */
      static fromReadableStream(stream) {
        const runner = new _ChatCompletionStream();
        runner._run(() => runner._fromReadableStream(stream));
        return runner;
      }
      static createChatCompletion(completions, params, options) {
        const runner = new _ChatCompletionStream();
        runner._run(() => runner._runChatCompletion(completions, { ...params, stream: true }, { ...options, headers: { ...options?.headers, "X-Stainless-Helper-Method": "stream" } }));
        return runner;
      }
      async _createChatCompletion(completions, params, options) {
        const signal = options?.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet9(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_beginRequest).call(this);
        const stream = await completions.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });
        this._connected();
        for await (const chunk of stream) {
          __classPrivateFieldGet9(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_addChunk).call(this, chunk);
        }
        if (stream.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addChatCompletion(__classPrivateFieldGet9(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
      }
      async _fromReadableStream(readableStream, options) {
        const signal = options?.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        __classPrivateFieldGet9(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_beginRequest).call(this);
        this._connected();
        const stream = Stream2.fromReadableStream(readableStream, this.controller);
        let chatId;
        for await (const chunk of stream) {
          if (chatId && chatId !== chunk.id) {
            this._addChatCompletion(__classPrivateFieldGet9(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
          }
          __classPrivateFieldGet9(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_addChunk).call(this, chunk);
          chatId = chunk.id;
        }
        if (stream.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addChatCompletion(__classPrivateFieldGet9(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
      }
      [(_ChatCompletionStream_currentChatCompletionSnapshot = /* @__PURE__ */ new WeakMap(), _ChatCompletionStream_instances = /* @__PURE__ */ new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest2() {
        if (this.ended)
          return;
        __classPrivateFieldSet8(this, _ChatCompletionStream_currentChatCompletionSnapshot, void 0, "f");
      }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk2(chunk) {
        if (this.ended)
          return;
        const completion = __classPrivateFieldGet9(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);
        this._emit("chunk", chunk, completion);
        const delta = chunk.choices[0]?.delta?.content;
        const snapshot = completion.choices[0]?.message;
        if (delta != null && snapshot?.role === "assistant" && snapshot?.content) {
          this._emit("content", delta, snapshot.content);
        }
      }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest2() {
        if (this.ended) {
          throw new OpenAIError(`stream has ended, this shouldn't happen`);
        }
        const snapshot = __classPrivateFieldGet9(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
        if (!snapshot) {
          throw new OpenAIError(`request ended without sending any chunks`);
        }
        __classPrivateFieldSet8(this, _ChatCompletionStream_currentChatCompletionSnapshot, void 0, "f");
        return finalizeChatCompletion(snapshot);
      }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion2(chunk) {
        var _a3, _b, _c;
        let snapshot = __classPrivateFieldGet9(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
        const { choices, ...rest } = chunk;
        if (!snapshot) {
          snapshot = __classPrivateFieldSet8(this, _ChatCompletionStream_currentChatCompletionSnapshot, {
            ...rest,
            choices: []
          }, "f");
        } else {
          Object.assign(snapshot, rest);
        }
        for (const { delta, finish_reason, index: index2, logprobs = null, ...other } of chunk.choices) {
          let choice = snapshot.choices[index2];
          if (!choice) {
            choice = snapshot.choices[index2] = { finish_reason, index: index2, message: {}, logprobs, ...other };
          }
          if (logprobs) {
            if (!choice.logprobs) {
              choice.logprobs = Object.assign({}, logprobs);
            } else {
              const { content: content2, ...rest3 } = logprobs;
              Object.assign(choice.logprobs, rest3);
              if (content2) {
                (_a3 = choice.logprobs).content ?? (_a3.content = []);
                choice.logprobs.content.push(...content2);
              }
            }
          }
          if (finish_reason)
            choice.finish_reason = finish_reason;
          Object.assign(choice, other);
          if (!delta)
            continue;
          const { content, function_call, role, tool_calls, ...rest2 } = delta;
          Object.assign(choice.message, rest2);
          if (content)
            choice.message.content = (choice.message.content || "") + content;
          if (role)
            choice.message.role = role;
          if (function_call) {
            if (!choice.message.function_call) {
              choice.message.function_call = function_call;
            } else {
              if (function_call.name)
                choice.message.function_call.name = function_call.name;
              if (function_call.arguments) {
                (_b = choice.message.function_call).arguments ?? (_b.arguments = "");
                choice.message.function_call.arguments += function_call.arguments;
              }
            }
          }
          if (tool_calls) {
            if (!choice.message.tool_calls)
              choice.message.tool_calls = [];
            for (const { index: index3, id, type, function: fn, ...rest3 } of tool_calls) {
              const tool_call = (_c = choice.message.tool_calls)[index3] ?? (_c[index3] = {});
              Object.assign(tool_call, rest3);
              if (id)
                tool_call.id = id;
              if (type)
                tool_call.type = type;
              if (fn)
                tool_call.function ?? (tool_call.function = { arguments: "" });
              if (fn?.name)
                tool_call.function.name = fn.name;
              if (fn?.arguments)
                tool_call.function.arguments += fn.arguments;
            }
          }
        }
        return snapshot;
      }, Symbol.asyncIterator)]() {
        const pushQueue = [];
        const readQueue = [];
        let done = false;
        this.on("chunk", (chunk) => {
          const reader = readQueue.shift();
          if (reader) {
            reader.resolve(chunk);
          } else {
            pushQueue.push(chunk);
          }
        });
        this.on("end", () => {
          done = true;
          for (const reader of readQueue) {
            reader.resolve(void 0);
          }
          readQueue.length = 0;
        });
        this.on("abort", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        this.on("error", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        return {
          next: async () => {
            if (!pushQueue.length) {
              if (done) {
                return { value: void 0, done: true };
              }
              return new Promise((resolve2, reject) => readQueue.push({ resolve: resolve2, reject })).then((chunk2) => chunk2 ? { value: chunk2, done: false } : { value: void 0, done: true });
            }
            const chunk = pushQueue.shift();
            return { value: chunk, done: false };
          },
          return: async () => {
            this.abort();
            return { value: void 0, done: true };
          }
        };
      }
      toReadableStream() {
        const stream = new Stream2(this[Symbol.asyncIterator].bind(this), this.controller);
        return stream.toReadableStream();
      }
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/ChatCompletionStreamingRunner.mjs
var ChatCompletionStreamingRunner;
var init_ChatCompletionStreamingRunner = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/ChatCompletionStreamingRunner.mjs"() {
    "use strict";
    init_ChatCompletionStream();
    ChatCompletionStreamingRunner = class _ChatCompletionStreamingRunner extends ChatCompletionStream {
      static fromReadableStream(stream) {
        const runner = new _ChatCompletionStreamingRunner();
        runner._run(() => runner._fromReadableStream(stream));
        return runner;
      }
      /** @deprecated - please use `runTools` instead. */
      static runFunctions(completions, params, options) {
        const runner = new _ChatCompletionStreamingRunner();
        const opts = {
          ...options,
          headers: { ...options?.headers, "X-Stainless-Helper-Method": "runFunctions" }
        };
        runner._run(() => runner._runFunctions(completions, params, opts));
        return runner;
      }
      static runTools(completions, params, options) {
        const runner = new _ChatCompletionStreamingRunner();
        const opts = {
          ...options,
          headers: { ...options?.headers, "X-Stainless-Helper-Method": "runTools" }
        };
        runner._run(() => runner._runTools(completions, params, opts));
        return runner;
      }
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/chat/completions.mjs
var Completions2;
var init_completions2 = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/chat/completions.mjs"() {
    "use strict";
    init_resource();
    init_ChatCompletionRunner();
    init_ChatCompletionStreamingRunner();
    init_ChatCompletionStream();
    Completions2 = class extends APIResource {
      runFunctions(body, options) {
        if (body.stream) {
          return ChatCompletionStreamingRunner.runFunctions(this._client.chat.completions, body, options);
        }
        return ChatCompletionRunner.runFunctions(this._client.chat.completions, body, options);
      }
      runTools(body, options) {
        if (body.stream) {
          return ChatCompletionStreamingRunner.runTools(this._client.chat.completions, body, options);
        }
        return ChatCompletionRunner.runTools(this._client.chat.completions, body, options);
      }
      /**
       * Creates a chat completion stream
       */
      stream(body, options) {
        return ChatCompletionStream.createChatCompletion(this._client.chat.completions, body, options);
      }
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/chat/chat.mjs
var Chat2;
var init_chat3 = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/chat/chat.mjs"() {
    "use strict";
    init_resource();
    init_completions2();
    Chat2 = class extends APIResource {
      constructor() {
        super(...arguments);
        this.completions = new Completions2(this._client);
      }
    };
    (function(Chat3) {
      Chat3.Completions = Completions2;
    })(Chat2 || (Chat2 = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/AbstractAssistantStreamRunner.mjs
var __classPrivateFieldSet9, __classPrivateFieldGet10, _AbstractAssistantStreamRunner_connectedPromise, _AbstractAssistantStreamRunner_resolveConnectedPromise, _AbstractAssistantStreamRunner_rejectConnectedPromise, _AbstractAssistantStreamRunner_endPromise, _AbstractAssistantStreamRunner_resolveEndPromise, _AbstractAssistantStreamRunner_rejectEndPromise, _AbstractAssistantStreamRunner_listeners, _AbstractAssistantStreamRunner_ended, _AbstractAssistantStreamRunner_errored, _AbstractAssistantStreamRunner_aborted, _AbstractAssistantStreamRunner_catchingPromiseCreated, _AbstractAssistantStreamRunner_handleError, AbstractAssistantStreamRunner;
var init_AbstractAssistantStreamRunner = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/AbstractAssistantStreamRunner.mjs"() {
    "use strict";
    init_error();
    __classPrivateFieldSet9 = function(receiver, state, value, kind2, f6) {
      if (kind2 === "m")
        throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f6.call(receiver, value) : f6 ? f6.value = value : state.set(receiver, value), value;
    };
    __classPrivateFieldGet10 = function(receiver, state, kind2, f6) {
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f6 : kind2 === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
    };
    AbstractAssistantStreamRunner = class {
      constructor() {
        this.controller = new AbortController();
        _AbstractAssistantStreamRunner_connectedPromise.set(this, void 0);
        _AbstractAssistantStreamRunner_resolveConnectedPromise.set(this, () => {
        });
        _AbstractAssistantStreamRunner_rejectConnectedPromise.set(this, () => {
        });
        _AbstractAssistantStreamRunner_endPromise.set(this, void 0);
        _AbstractAssistantStreamRunner_resolveEndPromise.set(this, () => {
        });
        _AbstractAssistantStreamRunner_rejectEndPromise.set(this, () => {
        });
        _AbstractAssistantStreamRunner_listeners.set(this, {});
        _AbstractAssistantStreamRunner_ended.set(this, false);
        _AbstractAssistantStreamRunner_errored.set(this, false);
        _AbstractAssistantStreamRunner_aborted.set(this, false);
        _AbstractAssistantStreamRunner_catchingPromiseCreated.set(this, false);
        _AbstractAssistantStreamRunner_handleError.set(this, (error2) => {
          __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_errored, true, "f");
          if (error2 instanceof Error && error2.name === "AbortError") {
            error2 = new APIUserAbortError();
          }
          if (error2 instanceof APIUserAbortError) {
            __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_aborted, true, "f");
            return this._emit("abort", error2);
          }
          if (error2 instanceof OpenAIError) {
            return this._emit("error", error2);
          }
          if (error2 instanceof Error) {
            const openAIError = new OpenAIError(error2.message);
            openAIError.cause = error2;
            return this._emit("error", openAIError);
          }
          return this._emit("error", new OpenAIError(String(error2)));
        });
        __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_connectedPromise, new Promise((resolve2, reject) => {
          __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_resolveConnectedPromise, resolve2, "f");
          __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_rejectConnectedPromise, reject, "f");
        }), "f");
        __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_endPromise, new Promise((resolve2, reject) => {
          __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_resolveEndPromise, resolve2, "f");
          __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_rejectEndPromise, reject, "f");
        }), "f");
        __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_connectedPromise, "f").catch(() => {
        });
        __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_endPromise, "f").catch(() => {
        });
      }
      _run(executor) {
        setTimeout(() => {
          executor().then(() => {
            this._emit("end");
          }, __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_handleError, "f"));
        }, 0);
      }
      _addRun(run) {
        return run;
      }
      _connected() {
        if (this.ended)
          return;
        __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_resolveConnectedPromise, "f").call(this);
        this._emit("connect");
      }
      get ended() {
        return __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_ended, "f");
      }
      get errored() {
        return __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_errored, "f");
      }
      get aborted() {
        return __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_aborted, "f");
      }
      abort() {
        this.controller.abort();
      }
      /**
       * Adds the listener function to the end of the listeners array for the event.
       * No checks are made to see if the listener has already been added. Multiple calls passing
       * the same combination of event and listener will result in the listener being added, and
       * called, multiple times.
       * @returns this ChatCompletionStream, so that calls can be chained
       */
      on(event, listener) {
        const listeners = __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_listeners, "f")[event] || (__classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_listeners, "f")[event] = []);
        listeners.push({ listener });
        return this;
      }
      /**
       * Removes the specified listener from the listener array for the event.
       * off() will remove, at most, one instance of a listener from the listener array. If any single
       * listener has been added multiple times to the listener array for the specified event, then
       * off() must be called multiple times to remove each instance.
       * @returns this ChatCompletionStream, so that calls can be chained
       */
      off(event, listener) {
        const listeners = __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_listeners, "f")[event];
        if (!listeners)
          return this;
        const index2 = listeners.findIndex((l6) => l6.listener === listener);
        if (index2 >= 0)
          listeners.splice(index2, 1);
        return this;
      }
      /**
       * Adds a one-time listener function for the event. The next time the event is triggered,
       * this listener is removed and then invoked.
       * @returns this ChatCompletionStream, so that calls can be chained
       */
      once(event, listener) {
        const listeners = __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_listeners, "f")[event] || (__classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_listeners, "f")[event] = []);
        listeners.push({ listener, once: true });
        return this;
      }
      /**
       * This is similar to `.once()`, but returns a Promise that resolves the next time
       * the event is triggered, instead of calling a listener callback.
       * @returns a Promise that resolves the next time given event is triggered,
       * or rejects if an error is emitted.  (If you request the 'error' event,
       * returns a promise that resolves with the error).
       *
       * Example:
       *
       *   const message = await stream.emitted('message') // rejects if the stream errors
       */
      emitted(event) {
        return new Promise((resolve2, reject) => {
          __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_catchingPromiseCreated, true, "f");
          if (event !== "error")
            this.once("error", reject);
          this.once(event, resolve2);
        });
      }
      async done() {
        __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_catchingPromiseCreated, true, "f");
        await __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_endPromise, "f");
      }
      _emit(event, ...args) {
        if (__classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_ended, "f")) {
          return;
        }
        if (event === "end") {
          __classPrivateFieldSet9(this, _AbstractAssistantStreamRunner_ended, true, "f");
          __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_resolveEndPromise, "f").call(this);
        }
        const listeners = __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_listeners, "f")[event];
        if (listeners) {
          __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_listeners, "f")[event] = listeners.filter((l6) => !l6.once);
          listeners.forEach(({ listener }) => listener(...args));
        }
        if (event === "abort") {
          const error2 = args[0];
          if (!__classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_catchingPromiseCreated, "f") && !listeners?.length) {
            Promise.reject(error2);
          }
          __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_rejectConnectedPromise, "f").call(this, error2);
          __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_rejectEndPromise, "f").call(this, error2);
          this._emit("end");
          return;
        }
        if (event === "error") {
          const error2 = args[0];
          if (!__classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_catchingPromiseCreated, "f") && !listeners?.length) {
            Promise.reject(error2);
          }
          __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_rejectConnectedPromise, "f").call(this, error2);
          __classPrivateFieldGet10(this, _AbstractAssistantStreamRunner_rejectEndPromise, "f").call(this, error2);
          this._emit("end");
        }
      }
      async _threadAssistantStream(body, thread, options) {
        return await this._createThreadAssistantStream(thread, body, options);
      }
      async _runAssistantStream(threadId, runs, params, options) {
        return await this._createAssistantStream(runs, threadId, params, options);
      }
      async _runToolAssistantStream(threadId, runId, runs, params, options) {
        return await this._createToolAssistantStream(runs, threadId, runId, params, options);
      }
      async _createThreadAssistantStream(thread, body, options) {
        const signal = options?.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        const runResult = await thread.createAndRun({ ...body, stream: false }, { ...options, signal: this.controller.signal });
        this._connected();
        return this._addRun(runResult);
      }
      async _createToolAssistantStream(run, threadId, runId, params, options) {
        const signal = options?.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        const runResult = await run.submitToolOutputs(threadId, runId, { ...params, stream: false }, { ...options, signal: this.controller.signal });
        this._connected();
        return this._addRun(runResult);
      }
      async _createAssistantStream(run, threadId, params, options) {
        const signal = options?.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        const runResult = await run.create(threadId, { ...params, stream: false }, { ...options, signal: this.controller.signal });
        this._connected();
        return this._addRun(runResult);
      }
    };
    _AbstractAssistantStreamRunner_connectedPromise = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_resolveConnectedPromise = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_rejectConnectedPromise = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_endPromise = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_resolveEndPromise = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_rejectEndPromise = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_listeners = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_ended = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_errored = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_aborted = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_catchingPromiseCreated = /* @__PURE__ */ new WeakMap(), _AbstractAssistantStreamRunner_handleError = /* @__PURE__ */ new WeakMap();
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/AssistantStream.mjs
var __classPrivateFieldGet11, __classPrivateFieldSet10, _AssistantStream_instances, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun, AssistantStream;
var init_AssistantStream = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/AssistantStream.mjs"() {
    "use strict";
    init_core();
    init_AbstractAssistantStreamRunner();
    init_streaming();
    init_error();
    __classPrivateFieldGet11 = function(receiver, state, kind2, f6) {
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind2 === "m" ? f6 : kind2 === "a" ? f6.call(receiver) : f6 ? f6.value : state.get(receiver);
    };
    __classPrivateFieldSet10 = function(receiver, state, value, kind2, f6) {
      if (kind2 === "m")
        throw new TypeError("Private method is not writable");
      if (kind2 === "a" && !f6)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f6 : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind2 === "a" ? f6.call(receiver, value) : f6 ? f6.value = value : state.set(receiver, value), value;
    };
    AssistantStream = class _AssistantStream extends AbstractAssistantStreamRunner {
      constructor() {
        super(...arguments);
        _AssistantStream_instances.add(this);
        _AssistantStream_events.set(this, []);
        _AssistantStream_runStepSnapshots.set(this, {});
        _AssistantStream_messageSnapshots.set(this, {});
        _AssistantStream_messageSnapshot.set(this, void 0);
        _AssistantStream_finalRun.set(this, void 0);
        _AssistantStream_currentContentIndex.set(this, void 0);
        _AssistantStream_currentContent.set(this, void 0);
        _AssistantStream_currentToolCallIndex.set(this, void 0);
        _AssistantStream_currentToolCall.set(this, void 0);
        _AssistantStream_currentEvent.set(this, void 0);
        _AssistantStream_currentRunSnapshot.set(this, void 0);
        _AssistantStream_currentRunStepSnapshot.set(this, void 0);
      }
      [(_AssistantStream_events = /* @__PURE__ */ new WeakMap(), _AssistantStream_runStepSnapshots = /* @__PURE__ */ new WeakMap(), _AssistantStream_messageSnapshots = /* @__PURE__ */ new WeakMap(), _AssistantStream_messageSnapshot = /* @__PURE__ */ new WeakMap(), _AssistantStream_finalRun = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentContentIndex = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentContent = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentToolCallIndex = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentToolCall = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentEvent = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentRunSnapshot = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentRunStepSnapshot = /* @__PURE__ */ new WeakMap(), _AssistantStream_instances = /* @__PURE__ */ new WeakSet(), Symbol.asyncIterator)]() {
        const pushQueue = [];
        const readQueue = [];
        let done = false;
        this.on("event", (event) => {
          const reader = readQueue.shift();
          if (reader) {
            reader.resolve(event);
          } else {
            pushQueue.push(event);
          }
        });
        this.on("end", () => {
          done = true;
          for (const reader of readQueue) {
            reader.resolve(void 0);
          }
          readQueue.length = 0;
        });
        this.on("abort", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        this.on("error", (err) => {
          done = true;
          for (const reader of readQueue) {
            reader.reject(err);
          }
          readQueue.length = 0;
        });
        return {
          next: async () => {
            if (!pushQueue.length) {
              if (done) {
                return { value: void 0, done: true };
              }
              return new Promise((resolve2, reject) => readQueue.push({ resolve: resolve2, reject })).then((chunk2) => chunk2 ? { value: chunk2, done: false } : { value: void 0, done: true });
            }
            const chunk = pushQueue.shift();
            return { value: chunk, done: false };
          },
          return: async () => {
            this.abort();
            return { value: void 0, done: true };
          }
        };
      }
      static fromReadableStream(stream) {
        const runner = new _AssistantStream();
        runner._run(() => runner._fromReadableStream(stream));
        return runner;
      }
      async _fromReadableStream(readableStream, options) {
        const signal = options?.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        this._connected();
        const stream = Stream2.fromReadableStream(readableStream, this.controller);
        for await (const event of stream) {
          __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
        }
        if (stream.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addRun(__classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
      }
      toReadableStream() {
        const stream = new Stream2(this[Symbol.asyncIterator].bind(this), this.controller);
        return stream.toReadableStream();
      }
      static createToolAssistantStream(threadId, runId, runs, body, options) {
        const runner = new _AssistantStream();
        runner._run(() => runner._runToolAssistantStream(threadId, runId, runs, body, {
          ...options,
          headers: { ...options?.headers, "X-Stainless-Helper-Method": "stream" }
        }));
        return runner;
      }
      async _createToolAssistantStream(run, threadId, runId, params, options) {
        const signal = options?.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        const body = { ...params, stream: true };
        const stream = await run.submitToolOutputs(threadId, runId, body, {
          ...options,
          signal: this.controller.signal
        });
        this._connected();
        for await (const event of stream) {
          __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
        }
        if (stream.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addRun(__classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
      }
      static createThreadAssistantStream(body, thread, options) {
        const runner = new _AssistantStream();
        runner._run(() => runner._threadAssistantStream(body, thread, {
          ...options,
          headers: { ...options?.headers, "X-Stainless-Helper-Method": "stream" }
        }));
        return runner;
      }
      static createAssistantStream(threadId, runs, params, options) {
        const runner = new _AssistantStream();
        runner._run(() => runner._runAssistantStream(threadId, runs, params, {
          ...options,
          headers: { ...options?.headers, "X-Stainless-Helper-Method": "stream" }
        }));
        return runner;
      }
      currentEvent() {
        return __classPrivateFieldGet11(this, _AssistantStream_currentEvent, "f");
      }
      currentRun() {
        return __classPrivateFieldGet11(this, _AssistantStream_currentRunSnapshot, "f");
      }
      currentMessageSnapshot() {
        return __classPrivateFieldGet11(this, _AssistantStream_messageSnapshot, "f");
      }
      currentRunStepSnapshot() {
        return __classPrivateFieldGet11(this, _AssistantStream_currentRunStepSnapshot, "f");
      }
      async finalRunSteps() {
        await this.done();
        return Object.values(__classPrivateFieldGet11(this, _AssistantStream_runStepSnapshots, "f"));
      }
      async finalMessages() {
        await this.done();
        return Object.values(__classPrivateFieldGet11(this, _AssistantStream_messageSnapshots, "f"));
      }
      async finalRun() {
        await this.done();
        if (!__classPrivateFieldGet11(this, _AssistantStream_finalRun, "f"))
          throw Error("Final run was not received.");
        return __classPrivateFieldGet11(this, _AssistantStream_finalRun, "f");
      }
      async _createThreadAssistantStream(thread, params, options) {
        const signal = options?.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        const body = { ...params, stream: true };
        const stream = await thread.createAndRun(body, { ...options, signal: this.controller.signal });
        this._connected();
        for await (const event of stream) {
          __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
        }
        if (stream.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addRun(__classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
      }
      async _createAssistantStream(run, threadId, params, options) {
        const signal = options?.signal;
        if (signal) {
          if (signal.aborted)
            this.controller.abort();
          signal.addEventListener("abort", () => this.controller.abort());
        }
        const body = { ...params, stream: true };
        const stream = await run.create(threadId, body, { ...options, signal: this.controller.signal });
        this._connected();
        for await (const event of stream) {
          __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
        }
        if (stream.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addRun(__classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
      }
      static accumulateDelta(acc, delta) {
        for (const [key, deltaValue] of Object.entries(delta)) {
          if (!acc.hasOwnProperty(key)) {
            acc[key] = deltaValue;
            continue;
          }
          let accValue = acc[key];
          if (accValue === null || accValue === void 0) {
            acc[key] = deltaValue;
            continue;
          }
          if (key === "index" || key === "type") {
            acc[key] = deltaValue;
            continue;
          }
          if (typeof accValue === "string" && typeof deltaValue === "string") {
            accValue += deltaValue;
          } else if (typeof accValue === "number" && typeof deltaValue === "number") {
            accValue += deltaValue;
          } else if (isObj(accValue) && isObj(deltaValue)) {
            accValue = this.accumulateDelta(accValue, deltaValue);
          } else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {
            if (accValue.every((x5) => typeof x5 === "string" || typeof x5 === "number")) {
              accValue.push(...deltaValue);
              continue;
            }
          } else {
            throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);
          }
          acc[key] = accValue;
        }
        return acc;
      }
    };
    _AssistantStream_addEvent = function _AssistantStream_addEvent2(event) {
      if (this.ended)
        return;
      __classPrivateFieldSet10(this, _AssistantStream_currentEvent, event, "f");
      __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_handleEvent).call(this, event);
      switch (event.event) {
        case "thread.created":
          break;
        case "thread.run.created":
        case "thread.run.queued":
        case "thread.run.in_progress":
        case "thread.run.requires_action":
        case "thread.run.completed":
        case "thread.run.failed":
        case "thread.run.cancelling":
        case "thread.run.cancelled":
        case "thread.run.expired":
          __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_handleRun).call(this, event);
          break;
        case "thread.run.step.created":
        case "thread.run.step.in_progress":
        case "thread.run.step.delta":
        case "thread.run.step.completed":
        case "thread.run.step.failed":
        case "thread.run.step.cancelled":
        case "thread.run.step.expired":
          __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_handleRunStep).call(this, event);
          break;
        case "thread.message.created":
        case "thread.message.in_progress":
        case "thread.message.delta":
        case "thread.message.completed":
        case "thread.message.incomplete":
          __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_handleMessage).call(this, event);
          break;
        case "error":
          throw new Error("Encountered an error event in event processing - errors should be processed earlier");
      }
    }, _AssistantStream_endRequest = function _AssistantStream_endRequest2() {
      if (this.ended) {
        throw new OpenAIError(`stream has ended, this shouldn't happen`);
      }
      if (!__classPrivateFieldGet11(this, _AssistantStream_finalRun, "f"))
        throw Error("Final run has not been received");
      return __classPrivateFieldGet11(this, _AssistantStream_finalRun, "f");
    }, _AssistantStream_handleMessage = function _AssistantStream_handleMessage2(event) {
      const [accumulatedMessage, newContent] = __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_accumulateMessage).call(this, event, __classPrivateFieldGet11(this, _AssistantStream_messageSnapshot, "f"));
      __classPrivateFieldSet10(this, _AssistantStream_messageSnapshot, accumulatedMessage, "f");
      __classPrivateFieldGet11(this, _AssistantStream_messageSnapshots, "f")[accumulatedMessage.id] = accumulatedMessage;
      for (const content of newContent) {
        const snapshotContent = accumulatedMessage.content[content.index];
        if (snapshotContent?.type == "text") {
          this._emit("textCreated", snapshotContent.text);
        }
      }
      switch (event.event) {
        case "thread.message.created":
          this._emit("messageCreated", event.data);
          break;
        case "thread.message.in_progress":
          break;
        case "thread.message.delta":
          this._emit("messageDelta", event.data.delta, accumulatedMessage);
          if (event.data.delta.content) {
            for (const content of event.data.delta.content) {
              if (content.type == "text" && content.text) {
                let textDelta = content.text;
                let snapshot = accumulatedMessage.content[content.index];
                if (snapshot && snapshot.type == "text") {
                  this._emit("textDelta", textDelta, snapshot.text);
                } else {
                  throw Error("The snapshot associated with this text delta is not text or missing");
                }
              }
              if (content.index != __classPrivateFieldGet11(this, _AssistantStream_currentContentIndex, "f")) {
                if (__classPrivateFieldGet11(this, _AssistantStream_currentContent, "f")) {
                  switch (__classPrivateFieldGet11(this, _AssistantStream_currentContent, "f").type) {
                    case "text":
                      this._emit("textDone", __classPrivateFieldGet11(this, _AssistantStream_currentContent, "f").text, __classPrivateFieldGet11(this, _AssistantStream_messageSnapshot, "f"));
                      break;
                    case "image_file":
                      this._emit("imageFileDone", __classPrivateFieldGet11(this, _AssistantStream_currentContent, "f").image_file, __classPrivateFieldGet11(this, _AssistantStream_messageSnapshot, "f"));
                      break;
                  }
                }
                __classPrivateFieldSet10(this, _AssistantStream_currentContentIndex, content.index, "f");
              }
              __classPrivateFieldSet10(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], "f");
            }
          }
          break;
        case "thread.message.completed":
        case "thread.message.incomplete":
          if (__classPrivateFieldGet11(this, _AssistantStream_currentContentIndex, "f") !== void 0) {
            const currentContent = event.data.content[__classPrivateFieldGet11(this, _AssistantStream_currentContentIndex, "f")];
            if (currentContent) {
              switch (currentContent.type) {
                case "image_file":
                  this._emit("imageFileDone", currentContent.image_file, __classPrivateFieldGet11(this, _AssistantStream_messageSnapshot, "f"));
                  break;
                case "text":
                  this._emit("textDone", currentContent.text, __classPrivateFieldGet11(this, _AssistantStream_messageSnapshot, "f"));
                  break;
              }
            }
          }
          if (__classPrivateFieldGet11(this, _AssistantStream_messageSnapshot, "f")) {
            this._emit("messageDone", event.data);
          }
          __classPrivateFieldSet10(this, _AssistantStream_messageSnapshot, void 0, "f");
      }
    }, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep2(event) {
      const accumulatedRunStep = __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_accumulateRunStep).call(this, event);
      __classPrivateFieldSet10(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, "f");
      switch (event.event) {
        case "thread.run.step.created":
          this._emit("runStepCreated", event.data);
          break;
        case "thread.run.step.delta":
          const delta = event.data.delta;
          if (delta.step_details && delta.step_details.type == "tool_calls" && delta.step_details.tool_calls && accumulatedRunStep.step_details.type == "tool_calls") {
            for (const toolCall of delta.step_details.tool_calls) {
              if (toolCall.index == __classPrivateFieldGet11(this, _AssistantStream_currentToolCallIndex, "f")) {
                this._emit("toolCallDelta", toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);
              } else {
                if (__classPrivateFieldGet11(this, _AssistantStream_currentToolCall, "f")) {
                  this._emit("toolCallDone", __classPrivateFieldGet11(this, _AssistantStream_currentToolCall, "f"));
                }
                __classPrivateFieldSet10(this, _AssistantStream_currentToolCallIndex, toolCall.index, "f");
                __classPrivateFieldSet10(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], "f");
                if (__classPrivateFieldGet11(this, _AssistantStream_currentToolCall, "f"))
                  this._emit("toolCallCreated", __classPrivateFieldGet11(this, _AssistantStream_currentToolCall, "f"));
              }
            }
          }
          this._emit("runStepDelta", event.data.delta, accumulatedRunStep);
          break;
        case "thread.run.step.completed":
        case "thread.run.step.failed":
        case "thread.run.step.cancelled":
        case "thread.run.step.expired":
          __classPrivateFieldSet10(this, _AssistantStream_currentRunStepSnapshot, void 0, "f");
          const details = event.data.step_details;
          if (details.type == "tool_calls") {
            if (__classPrivateFieldGet11(this, _AssistantStream_currentToolCall, "f")) {
              this._emit("toolCallDone", __classPrivateFieldGet11(this, _AssistantStream_currentToolCall, "f"));
              __classPrivateFieldSet10(this, _AssistantStream_currentToolCall, void 0, "f");
            }
          }
          this._emit("runStepDone", event.data, accumulatedRunStep);
          break;
        case "thread.run.step.in_progress":
          break;
      }
    }, _AssistantStream_handleEvent = function _AssistantStream_handleEvent2(event) {
      __classPrivateFieldGet11(this, _AssistantStream_events, "f").push(event);
      this._emit("event", event);
    }, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep2(event) {
      switch (event.event) {
        case "thread.run.step.created":
          __classPrivateFieldGet11(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = event.data;
          return event.data;
        case "thread.run.step.delta":
          let snapshot = __classPrivateFieldGet11(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
          if (!snapshot) {
            throw Error("Received a RunStepDelta before creation of a snapshot");
          }
          let data = event.data;
          if (data.delta) {
            const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta);
            __classPrivateFieldGet11(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = accumulated;
          }
          return __classPrivateFieldGet11(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
        case "thread.run.step.completed":
        case "thread.run.step.failed":
        case "thread.run.step.cancelled":
        case "thread.run.step.expired":
        case "thread.run.step.in_progress":
          __classPrivateFieldGet11(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = event.data;
          break;
      }
      if (__classPrivateFieldGet11(this, _AssistantStream_runStepSnapshots, "f")[event.data.id])
        return __classPrivateFieldGet11(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
      throw new Error("No snapshot available");
    }, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage2(event, snapshot) {
      let newContent = [];
      switch (event.event) {
        case "thread.message.created":
          return [event.data, newContent];
        case "thread.message.delta":
          if (!snapshot) {
            throw Error("Received a delta with no existing snapshot (there should be one from message creation)");
          }
          let data = event.data;
          if (data.delta.content) {
            for (const contentElement of data.delta.content) {
              if (contentElement.index in snapshot.content) {
                let currentContent = snapshot.content[contentElement.index];
                snapshot.content[contentElement.index] = __classPrivateFieldGet11(this, _AssistantStream_instances, "m", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);
              } else {
                snapshot.content[contentElement.index] = contentElement;
                newContent.push(contentElement);
              }
            }
          }
          return [snapshot, newContent];
        case "thread.message.in_progress":
        case "thread.message.completed":
        case "thread.message.incomplete":
          if (snapshot) {
            return [snapshot, newContent];
          } else {
            throw Error("Received thread message event with no existing snapshot");
          }
      }
      throw Error("Tried to accumulate a non-message event");
    }, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent2(contentElement, currentContent) {
      return AssistantStream.accumulateDelta(currentContent, contentElement);
    }, _AssistantStream_handleRun = function _AssistantStream_handleRun2(event) {
      __classPrivateFieldSet10(this, _AssistantStream_currentRunSnapshot, event.data, "f");
      switch (event.event) {
        case "thread.run.created":
          break;
        case "thread.run.queued":
          break;
        case "thread.run.in_progress":
          break;
        case "thread.run.requires_action":
        case "thread.run.cancelled":
        case "thread.run.failed":
        case "thread.run.completed":
        case "thread.run.expired":
          __classPrivateFieldSet10(this, _AssistantStream_finalRun, event.data, "f");
          if (__classPrivateFieldGet11(this, _AssistantStream_currentToolCall, "f")) {
            this._emit("toolCallDone", __classPrivateFieldGet11(this, _AssistantStream_currentToolCall, "f"));
            __classPrivateFieldSet10(this, _AssistantStream_currentToolCall, void 0, "f");
          }
          break;
        case "thread.run.cancelling":
          break;
      }
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/threads/messages.mjs
var Messages, MessagesPage;
var init_messages = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/threads/messages.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_messages();
    init_pagination5();
    Messages = class extends APIResource {
      /**
       * Create a message.
       */
      create(threadId, body, options) {
        return this._client.post(`/threads/${threadId}/messages`, {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Retrieve a message.
       */
      retrieve(threadId, messageId, options) {
        return this._client.get(`/threads/${threadId}/messages/${messageId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Modifies a message.
       */
      update(threadId, messageId, body, options) {
        return this._client.post(`/threads/${threadId}/messages/${messageId}`, {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      list(threadId, query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list(threadId, {}, query);
        }
        return this._client.getAPIList(`/threads/${threadId}/messages`, MessagesPage, {
          query,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Deletes a message.
       */
      del(threadId, messageId, options) {
        return this._client.delete(`/threads/${threadId}/messages/${messageId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
    };
    MessagesPage = class extends CursorPage {
    };
    (function(Messages2) {
      Messages2.MessagesPage = MessagesPage;
    })(Messages || (Messages = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/threads/runs/steps.mjs
var Steps, RunStepsPage;
var init_steps = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/threads/runs/steps.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_steps();
    init_pagination5();
    Steps = class extends APIResource {
      /**
       * Retrieves a run step.
       */
      retrieve(threadId, runId, stepId, options) {
        return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      list(threadId, runId, query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list(threadId, runId, {}, query);
        }
        return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {
          query,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
    };
    RunStepsPage = class extends CursorPage {
    };
    (function(Steps2) {
      Steps2.RunStepsPage = RunStepsPage;
    })(Steps || (Steps = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/threads/runs/runs.mjs
var Runs, RunsPage;
var init_runs = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/threads/runs/runs.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_AssistantStream();
    init_core();
    init_runs();
    init_steps();
    init_pagination5();
    Runs = class extends APIResource {
      constructor() {
        super(...arguments);
        this.steps = new Steps(this._client);
      }
      create(threadId, body, options) {
        return this._client.post(`/threads/${threadId}/runs`, {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers },
          stream: body.stream ?? false
        });
      }
      /**
       * Retrieves a run.
       */
      retrieve(threadId, runId, options) {
        return this._client.get(`/threads/${threadId}/runs/${runId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Modifies a run.
       */
      update(threadId, runId, body, options) {
        return this._client.post(`/threads/${threadId}/runs/${runId}`, {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      list(threadId, query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list(threadId, {}, query);
        }
        return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {
          query,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Cancels a run that is `in_progress`.
       */
      cancel(threadId, runId, options) {
        return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * A helper to create a run an poll for a terminal state. More information on Run
       * lifecycles can be found here:
       * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
       */
      async createAndPoll(threadId, body, options) {
        const run = await this.create(threadId, body, options);
        return await this.poll(threadId, run.id, options);
      }
      /**
       * Create a Run stream
       *
       * @deprecated use `stream` instead
       */
      createAndStream(threadId, body, options) {
        return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);
      }
      /**
       * A helper to poll a run status until it reaches a terminal state. More
       * information on Run lifecycles can be found here:
       * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
       */
      async poll(threadId, runId, options) {
        const headers = { ...options?.headers, "X-Stainless-Poll-Helper": "true" };
        if (options?.pollIntervalMs) {
          headers["X-Stainless-Custom-Poll-Interval"] = options.pollIntervalMs.toString();
        }
        while (true) {
          const { data: run, response } = await this.retrieve(threadId, runId, {
            ...options,
            headers: { ...options?.headers, ...headers }
          }).withResponse();
          switch (run.status) {
            case "queued":
            case "in_progress":
            case "cancelling":
              let sleepInterval = 5e3;
              if (options?.pollIntervalMs) {
                sleepInterval = options.pollIntervalMs;
              } else {
                const headerInterval = response.headers.get("openai-poll-after-ms");
                if (headerInterval) {
                  const headerIntervalMs = parseInt(headerInterval);
                  if (!isNaN(headerIntervalMs)) {
                    sleepInterval = headerIntervalMs;
                  }
                }
              }
              await sleep(sleepInterval);
              break;
            case "requires_action":
            case "incomplete":
            case "cancelled":
            case "completed":
            case "failed":
            case "expired":
              return run;
          }
        }
      }
      /**
       * Create a Run stream
       */
      stream(threadId, body, options) {
        return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);
      }
      submitToolOutputs(threadId, runId, body, options) {
        return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers },
          stream: body.stream ?? false
        });
      }
      /**
       * A helper to submit a tool output to a run and poll for a terminal run state.
       * More information on Run lifecycles can be found here:
       * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
       */
      async submitToolOutputsAndPoll(threadId, runId, body, options) {
        const run = await this.submitToolOutputs(threadId, runId, body, options);
        return await this.poll(threadId, run.id, options);
      }
      /**
       * Submit the tool outputs from a previous run and stream the run to a terminal
       * state. More information on Run lifecycles can be found here:
       * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
       */
      submitToolOutputsStream(threadId, runId, body, options) {
        return AssistantStream.createToolAssistantStream(threadId, runId, this._client.beta.threads.runs, body, options);
      }
    };
    RunsPage = class extends CursorPage {
    };
    (function(Runs2) {
      Runs2.RunsPage = RunsPage;
      Runs2.Steps = Steps;
      Runs2.RunStepsPage = RunStepsPage;
    })(Runs || (Runs = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/threads/threads.mjs
var Threads;
var init_threads = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/threads/threads.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_AssistantStream();
    init_messages();
    init_runs();
    Threads = class extends APIResource {
      constructor() {
        super(...arguments);
        this.runs = new Runs(this._client);
        this.messages = new Messages(this._client);
      }
      create(body = {}, options) {
        if (isRequestOptions(body)) {
          return this.create({}, body);
        }
        return this._client.post("/threads", {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Retrieves a thread.
       */
      retrieve(threadId, options) {
        return this._client.get(`/threads/${threadId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Modifies a thread.
       */
      update(threadId, body, options) {
        return this._client.post(`/threads/${threadId}`, {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Delete a thread.
       */
      del(threadId, options) {
        return this._client.delete(`/threads/${threadId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      createAndRun(body, options) {
        return this._client.post("/threads/runs", {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers },
          stream: body.stream ?? false
        });
      }
      /**
       * A helper to create a thread, start a run and then poll for a terminal state.
       * More information on Run lifecycles can be found here:
       * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
       */
      async createAndRunPoll(body, options) {
        const run = await this.createAndRun(body, options);
        return await this.runs.poll(run.thread_id, run.id, options);
      }
      /**
       * Create a thread and stream the run back
       */
      createAndRunStream(body, options) {
        return AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);
      }
    };
    (function(Threads2) {
      Threads2.Runs = Runs;
      Threads2.RunsPage = RunsPage;
      Threads2.Messages = Messages;
      Threads2.MessagesPage = MessagesPage;
    })(Threads || (Threads = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/Util.mjs
var allSettledWithThrow;
var init_Util = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/lib/Util.mjs"() {
    "use strict";
    allSettledWithThrow = async (promises2) => {
      const results = await Promise.allSettled(promises2);
      const rejected = results.filter((result) => result.status === "rejected");
      if (rejected.length) {
        for (const result of rejected) {
          console.error(result.reason);
        }
        throw new Error(`${rejected.length} promise(s) failed - see the above errors`);
      }
      const values = [];
      for (const result of results) {
        if (result.status === "fulfilled") {
          values.push(result.value);
        }
      }
      return values;
    };
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/vector-stores/files.mjs
var Files, VectorStoreFilesPage;
var init_files = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/vector-stores/files.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_core();
    init_files();
    init_pagination5();
    Files = class extends APIResource {
      /**
       * Create a vector store file by attaching a
       * [File](https://platform.openai.com/docs/api-reference/files) to a
       * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).
       */
      create(vectorStoreId, body, options) {
        return this._client.post(`/vector_stores/${vectorStoreId}/files`, {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Retrieves a vector store file.
       */
      retrieve(vectorStoreId, fileId, options) {
        return this._client.get(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      list(vectorStoreId, query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list(vectorStoreId, {}, query);
        }
        return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files`, VectorStoreFilesPage, {
          query,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Delete a vector store file. This will remove the file from the vector store but
       * the file itself will not be deleted. To delete the file, use the
       * [delete file](https://platform.openai.com/docs/api-reference/files/delete)
       * endpoint.
       */
      del(vectorStoreId, fileId, options) {
        return this._client.delete(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Attach a file to the given vector store and wait for it to be processed.
       */
      async createAndPoll(vectorStoreId, body, options) {
        const file = await this.create(vectorStoreId, body, options);
        return await this.poll(vectorStoreId, file.id, options);
      }
      /**
       * Wait for the vector store file to finish processing.
       *
       * Note: this will return even if the file failed to process, you need to check
       * file.last_error and file.status to handle these cases
       */
      async poll(vectorStoreId, fileId, options) {
        const headers = { ...options?.headers, "X-Stainless-Poll-Helper": "true" };
        if (options?.pollIntervalMs) {
          headers["X-Stainless-Custom-Poll-Interval"] = options.pollIntervalMs.toString();
        }
        while (true) {
          const fileResponse = await this.retrieve(vectorStoreId, fileId, {
            ...options,
            headers
          }).withResponse();
          const file = fileResponse.data;
          switch (file.status) {
            case "in_progress":
              let sleepInterval = 5e3;
              if (options?.pollIntervalMs) {
                sleepInterval = options.pollIntervalMs;
              } else {
                const headerInterval = fileResponse.response.headers.get("openai-poll-after-ms");
                if (headerInterval) {
                  const headerIntervalMs = parseInt(headerInterval);
                  if (!isNaN(headerIntervalMs)) {
                    sleepInterval = headerIntervalMs;
                  }
                }
              }
              await sleep(sleepInterval);
              break;
            case "failed":
            case "completed":
              return file;
          }
        }
      }
      /**
       * Upload a file to the `files` API and then attach it to the given vector store.
       *
       * Note the file will be asynchronously processed (you can use the alternative
       * polling helper method to wait for processing to complete).
       */
      async upload(vectorStoreId, file, options) {
        const fileInfo = await this._client.files.create({ file, purpose: "assistants" }, options);
        return this.create(vectorStoreId, { file_id: fileInfo.id }, options);
      }
      /**
       * Add a file to a vector store and poll until processing is complete.
       */
      async uploadAndPoll(vectorStoreId, file, options) {
        const fileInfo = await this.upload(vectorStoreId, file, options);
        return await this.poll(vectorStoreId, fileInfo.id, options);
      }
    };
    VectorStoreFilesPage = class extends CursorPage {
    };
    (function(Files3) {
      Files3.VectorStoreFilesPage = VectorStoreFilesPage;
    })(Files || (Files = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/vector-stores/file-batches.mjs
var FileBatches;
var init_file_batches = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/vector-stores/file-batches.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_core();
    init_Util();
    init_files();
    FileBatches = class extends APIResource {
      /**
       * Create a vector store file batch.
       */
      create(vectorStoreId, body, options) {
        return this._client.post(`/vector_stores/${vectorStoreId}/file_batches`, {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Retrieves a vector store file batch.
       */
      retrieve(vectorStoreId, batchId, options) {
        return this._client.get(`/vector_stores/${vectorStoreId}/file_batches/${batchId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Cancel a vector store file batch. This attempts to cancel the processing of
       * files in this batch as soon as possible.
       */
      cancel(vectorStoreId, batchId, options) {
        return this._client.post(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Create a vector store batch and poll until all files have been processed.
       */
      async createAndPoll(vectorStoreId, body, options) {
        const batch = await this.create(vectorStoreId, body);
        return await this.poll(vectorStoreId, batch.id, options);
      }
      listFiles(vectorStoreId, batchId, query = {}, options) {
        if (isRequestOptions(query)) {
          return this.listFiles(vectorStoreId, batchId, {}, query);
        }
        return this._client.getAPIList(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`, VectorStoreFilesPage, { query, ...options, headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers } });
      }
      /**
       * Wait for the given file batch to be processed.
       *
       * Note: this will return even if one of the files failed to process, you need to
       * check batch.file_counts.failed_count to handle this case.
       */
      async poll(vectorStoreId, batchId, options) {
        const headers = { ...options?.headers, "X-Stainless-Poll-Helper": "true" };
        if (options?.pollIntervalMs) {
          headers["X-Stainless-Custom-Poll-Interval"] = options.pollIntervalMs.toString();
        }
        while (true) {
          const { data: batch, response } = await this.retrieve(vectorStoreId, batchId, {
            ...options,
            headers
          }).withResponse();
          switch (batch.status) {
            case "in_progress":
              let sleepInterval = 5e3;
              if (options?.pollIntervalMs) {
                sleepInterval = options.pollIntervalMs;
              } else {
                const headerInterval = response.headers.get("openai-poll-after-ms");
                if (headerInterval) {
                  const headerIntervalMs = parseInt(headerInterval);
                  if (!isNaN(headerIntervalMs)) {
                    sleepInterval = headerIntervalMs;
                  }
                }
              }
              await sleep(sleepInterval);
              break;
            case "failed":
            case "cancelled":
            case "completed":
              return batch;
          }
        }
      }
      /**
       * Uploads the given files concurrently and then creates a vector store file batch.
       *
       * The concurrency limit is configurable using the `maxConcurrency` parameter.
       */
      async uploadAndPoll(vectorStoreId, { files, fileIds = [] }, options) {
        if (files === null || files.length == 0) {
          throw new Error("No files provided to process.");
        }
        const configuredConcurrency = options?.maxConcurrency ?? 5;
        const concurrencyLimit = Math.min(configuredConcurrency, files.length);
        const client = this._client;
        const fileIterator = files.values();
        const allFileIds = [...fileIds];
        async function processFiles(iterator) {
          for (let item of iterator) {
            const fileObj = await client.files.create({ file: item, purpose: "assistants" }, options);
            allFileIds.push(fileObj.id);
          }
        }
        const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);
        await allSettledWithThrow(workers);
        return await this.createAndPoll(vectorStoreId, {
          file_ids: allFileIds
        });
      }
    };
    /* @__PURE__ */ (function(FileBatches2) {
    })(FileBatches || (FileBatches = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/vector-stores/vector-stores.mjs
var VectorStores, VectorStoresPage;
var init_vector_stores = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/vector-stores/vector-stores.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_vector_stores();
    init_file_batches();
    init_files();
    init_pagination5();
    VectorStores = class extends APIResource {
      constructor() {
        super(...arguments);
        this.files = new Files(this._client);
        this.fileBatches = new FileBatches(this._client);
      }
      /**
       * Create a vector store.
       */
      create(body, options) {
        return this._client.post("/vector_stores", {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Retrieves a vector store.
       */
      retrieve(vectorStoreId, options) {
        return this._client.get(`/vector_stores/${vectorStoreId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Modifies a vector store.
       */
      update(vectorStoreId, body, options) {
        return this._client.post(`/vector_stores/${vectorStoreId}`, {
          body,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/vector_stores", VectorStoresPage, {
          query,
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
      /**
       * Delete a vector store.
       */
      del(vectorStoreId, options) {
        return this._client.delete(`/vector_stores/${vectorStoreId}`, {
          ...options,
          headers: { "OpenAI-Beta": "assistants=v2", ...options?.headers }
        });
      }
    };
    VectorStoresPage = class extends CursorPage {
    };
    (function(VectorStores2) {
      VectorStores2.VectorStoresPage = VectorStoresPage;
      VectorStores2.Files = Files;
      VectorStores2.VectorStoreFilesPage = VectorStoreFilesPage;
      VectorStores2.FileBatches = FileBatches;
    })(VectorStores || (VectorStores = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/beta.mjs
var Beta;
var init_beta = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/beta/beta.mjs"() {
    "use strict";
    init_resource();
    init_assistants();
    init_chat3();
    init_threads();
    init_vector_stores();
    Beta = class extends APIResource {
      constructor() {
        super(...arguments);
        this.vectorStores = new VectorStores(this._client);
        this.chat = new Chat2(this._client);
        this.assistants = new Assistants(this._client);
        this.threads = new Threads(this._client);
      }
    };
    (function(Beta2) {
      Beta2.VectorStores = VectorStores;
      Beta2.VectorStoresPage = VectorStoresPage;
      Beta2.Chat = Chat2;
      Beta2.Assistants = Assistants;
      Beta2.AssistantsPage = AssistantsPage;
      Beta2.Threads = Threads;
    })(Beta || (Beta = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/completions.mjs
var Completions3;
var init_completions3 = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/completions.mjs"() {
    "use strict";
    init_resource();
    Completions3 = class extends APIResource {
      create(body, options) {
        return this._client.post("/completions", { body, ...options, stream: body.stream ?? false });
      }
    };
    /* @__PURE__ */ (function(Completions4) {
    })(Completions3 || (Completions3 = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/embeddings.mjs
var Embeddings;
var init_embeddings = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/embeddings.mjs"() {
    "use strict";
    init_resource();
    Embeddings = class extends APIResource {
      /**
       * Creates an embedding vector representing the input text.
       */
      create(body, options) {
        return this._client.post("/embeddings", { body, ...options });
      }
    };
    /* @__PURE__ */ (function(Embeddings3) {
    })(Embeddings || (Embeddings = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/files.mjs
var Files2, FileObjectsPage;
var init_files2 = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/files.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_core();
    init_error();
    init_files2();
    init_core();
    init_pagination5();
    Files2 = class extends APIResource {
      /**
       * Upload a file that can be used across various endpoints. Individual files can be
       * up to 512 MB, and the size of all files uploaded by one organization can be up
       * to 100 GB.
       *
       * The Assistants API supports files up to 2 million tokens and of specific file
       * types. See the
       * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for
       * details.
       *
       * The Fine-tuning API only supports `.jsonl` files. The input also has certain
       * required formats for fine-tuning
       * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or
       * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)
       * models.
       *
       * The Batch API only supports `.jsonl` files up to 100 MB in size. The input also
       * has a specific required
       * [format](https://platform.openai.com/docs/api-reference/batch/request-input).
       *
       * Please [contact us](https://help.openai.com/) if you need to increase these
       * storage limits.
       */
      create(body, options) {
        return this._client.post("/files", multipartFormRequestOptions({ body, ...options }));
      }
      /**
       * Returns information about a specific file.
       */
      retrieve(fileId, options) {
        return this._client.get(`/files/${fileId}`, options);
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/files", FileObjectsPage, { query, ...options });
      }
      /**
       * Delete a file.
       */
      del(fileId, options) {
        return this._client.delete(`/files/${fileId}`, options);
      }
      /**
       * Returns the contents of the specified file.
       */
      content(fileId, options) {
        return this._client.get(`/files/${fileId}/content`, { ...options, __binaryResponse: true });
      }
      /**
       * Returns the contents of the specified file.
       *
       * @deprecated The `.content()` method should be used instead
       */
      retrieveContent(fileId, options) {
        return this._client.get(`/files/${fileId}/content`, {
          ...options,
          headers: { Accept: "application/json", ...options?.headers }
        });
      }
      /**
       * Waits for the given file to be processed, default timeout is 30 mins.
       */
      async waitForProcessing(id, { pollInterval = 5e3, maxWait = 30 * 60 * 1e3 } = {}) {
        const TERMINAL_STATES = /* @__PURE__ */ new Set(["processed", "error", "deleted"]);
        const start = Date.now();
        let file = await this.retrieve(id);
        while (!file.status || !TERMINAL_STATES.has(file.status)) {
          await sleep(pollInterval);
          file = await this.retrieve(id);
          if (Date.now() - start > maxWait) {
            throw new APIConnectionTimeoutError({
              message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`
            });
          }
        }
        return file;
      }
    };
    FileObjectsPage = class extends Page {
    };
    (function(Files3) {
      Files3.FileObjectsPage = FileObjectsPage;
    })(Files2 || (Files2 = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs
var Checkpoints, FineTuningJobCheckpointsPage;
var init_checkpoints = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_checkpoints();
    init_pagination5();
    Checkpoints = class extends APIResource {
      list(fineTuningJobId, query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list(fineTuningJobId, {}, query);
        }
        return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/checkpoints`, FineTuningJobCheckpointsPage, { query, ...options });
      }
    };
    FineTuningJobCheckpointsPage = class extends CursorPage {
    };
    (function(Checkpoints2) {
      Checkpoints2.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;
    })(Checkpoints || (Checkpoints = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/fine-tuning/jobs/jobs.mjs
var Jobs, FineTuningJobsPage, FineTuningJobEventsPage;
var init_jobs = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/fine-tuning/jobs/jobs.mjs"() {
    "use strict";
    init_resource();
    init_core();
    init_jobs();
    init_checkpoints();
    init_pagination5();
    Jobs = class extends APIResource {
      constructor() {
        super(...arguments);
        this.checkpoints = new Checkpoints(this._client);
      }
      /**
       * Creates a fine-tuning job which begins the process of creating a new model from
       * a given dataset.
       *
       * Response includes details of the enqueued job including job status and the name
       * of the fine-tuned models once complete.
       *
       * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
       */
      create(body, options) {
        return this._client.post("/fine_tuning/jobs", { body, ...options });
      }
      /**
       * Get info about a fine-tuning job.
       *
       * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
       */
      retrieve(fineTuningJobId, options) {
        return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);
      }
      list(query = {}, options) {
        if (isRequestOptions(query)) {
          return this.list({}, query);
        }
        return this._client.getAPIList("/fine_tuning/jobs", FineTuningJobsPage, { query, ...options });
      }
      /**
       * Immediately cancel a fine-tune job.
       */
      cancel(fineTuningJobId, options) {
        return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);
      }
      listEvents(fineTuningJobId, query = {}, options) {
        if (isRequestOptions(query)) {
          return this.listEvents(fineTuningJobId, {}, query);
        }
        return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {
          query,
          ...options
        });
      }
    };
    FineTuningJobsPage = class extends CursorPage {
    };
    FineTuningJobEventsPage = class extends CursorPage {
    };
    (function(Jobs2) {
      Jobs2.FineTuningJobsPage = FineTuningJobsPage;
      Jobs2.FineTuningJobEventsPage = FineTuningJobEventsPage;
      Jobs2.Checkpoints = Checkpoints;
      Jobs2.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;
    })(Jobs || (Jobs = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/fine-tuning/fine-tuning.mjs
var FineTuning;
var init_fine_tuning = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/fine-tuning/fine-tuning.mjs"() {
    "use strict";
    init_resource();
    init_jobs();
    FineTuning = class extends APIResource {
      constructor() {
        super(...arguments);
        this.jobs = new Jobs(this._client);
      }
    };
    (function(FineTuning2) {
      FineTuning2.Jobs = Jobs;
      FineTuning2.FineTuningJobsPage = FineTuningJobsPage;
      FineTuning2.FineTuningJobEventsPage = FineTuningJobEventsPage;
    })(FineTuning || (FineTuning = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/images.mjs
var Images;
var init_images = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/images.mjs"() {
    "use strict";
    init_resource();
    init_core();
    Images = class extends APIResource {
      /**
       * Creates a variation of a given image.
       */
      createVariation(body, options) {
        return this._client.post("/images/variations", multipartFormRequestOptions({ body, ...options }));
      }
      /**
       * Creates an edited or extended image given an original image and a prompt.
       */
      edit(body, options) {
        return this._client.post("/images/edits", multipartFormRequestOptions({ body, ...options }));
      }
      /**
       * Creates an image given a prompt.
       */
      generate(body, options) {
        return this._client.post("/images/generations", { body, ...options });
      }
    };
    /* @__PURE__ */ (function(Images2) {
    })(Images || (Images = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/models.mjs
var Models, ModelsPage;
var init_models5 = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/models.mjs"() {
    "use strict";
    init_resource();
    init_models5();
    init_pagination5();
    Models = class extends APIResource {
      /**
       * Retrieves a model instance, providing basic information about the model such as
       * the owner and permissioning.
       */
      retrieve(model, options) {
        return this._client.get(`/models/${model}`, options);
      }
      /**
       * Lists the currently available models, and provides basic information about each
       * one such as the owner and availability.
       */
      list(options) {
        return this._client.getAPIList("/models", ModelsPage, options);
      }
      /**
       * Delete a fine-tuned model. You must have the Owner role in your organization to
       * delete a model.
       */
      del(model, options) {
        return this._client.delete(`/models/${model}`, options);
      }
    };
    ModelsPage = class extends Page {
    };
    (function(Models2) {
      Models2.ModelsPage = ModelsPage;
    })(Models || (Models = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/moderations.mjs
var Moderations;
var init_moderations = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/moderations.mjs"() {
    "use strict";
    init_resource();
    Moderations = class extends APIResource {
      /**
       * Classifies if text is potentially harmful.
       */
      create(body, options) {
        return this._client.post("/moderations", { body, ...options });
      }
    };
    /* @__PURE__ */ (function(Moderations2) {
    })(Moderations || (Moderations = {}));
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/index.mjs
var init_resources = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/resources/index.mjs"() {
    "use strict";
    init_chat2();
    init_shared5();
    init_audio();
    init_batches();
    init_beta();
    init_completions3();
    init_embeddings();
    init_files2();
    init_fine_tuning();
    init_images();
    init_models5();
    init_moderations();
  }
});

// ../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/index.mjs
var openai_exports = {};
__export(openai_exports, {
  APIConnectionError: () => APIConnectionError2,
  APIConnectionTimeoutError: () => APIConnectionTimeoutError2,
  APIError: () => APIError2,
  APIUserAbortError: () => APIUserAbortError2,
  AuthenticationError: () => AuthenticationError2,
  AzureOpenAI: () => AzureOpenAI,
  BadRequestError: () => BadRequestError2,
  ConflictError: () => ConflictError2,
  InternalServerError: () => InternalServerError2,
  NotFoundError: () => NotFoundError2,
  OpenAI: () => OpenAI,
  OpenAIError: () => OpenAIError2,
  PermissionDeniedError: () => PermissionDeniedError2,
  RateLimitError: () => RateLimitError2,
  UnprocessableEntityError: () => UnprocessableEntityError2,
  default: () => openai_default,
  fileFromPath: () => fileFromPath4,
  toFile: () => toFile2
});
var _a2, OpenAI, OpenAIError2, APIError2, APIConnectionError2, APIConnectionTimeoutError2, APIUserAbortError2, NotFoundError2, ConflictError2, RateLimitError2, BadRequestError2, AuthenticationError2, InternalServerError2, PermissionDeniedError2, UnprocessableEntityError2, toFile2, fileFromPath4, AzureOpenAI, _deployments_endpoints, API_KEY_SENTINEL, openai_default;
var init_openai = __esm({
  "../../node_modules/.pnpm/openai@4.51.0/node_modules/openai/index.mjs"() {
    "use strict";
    init_core();
    init_error();
    init_uploads();
    init_pagination5();
    init_resources();
    OpenAI = class extends APIClient {
      /**
       * API Client for interfacing with the OpenAI API.
       *
       * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]
       * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]
       * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]
       * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.
       * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
       * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
       * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
       * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
       * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
       * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
       * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
       */
      constructor({ baseURL = readEnv("OPENAI_BASE_URL"), apiKey = readEnv("OPENAI_API_KEY"), organization = readEnv("OPENAI_ORG_ID") ?? null, project = readEnv("OPENAI_PROJECT_ID") ?? null, ...opts } = {}) {
        if (apiKey === void 0) {
          throw new OpenAIError("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).");
        }
        const options = {
          apiKey,
          organization,
          project,
          ...opts,
          baseURL: baseURL || `https://api.openai.com/v1`
        };
        if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {
          throw new OpenAIError("It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n");
        }
        super({
          baseURL: options.baseURL,
          timeout: options.timeout ?? 6e5,
          httpAgent: options.httpAgent,
          maxRetries: options.maxRetries,
          fetch: options.fetch
        });
        this.completions = new Completions3(this);
        this.chat = new Chat(this);
        this.embeddings = new Embeddings(this);
        this.files = new Files2(this);
        this.images = new Images(this);
        this.audio = new Audio(this);
        this.moderations = new Moderations(this);
        this.models = new Models(this);
        this.fineTuning = new FineTuning(this);
        this.beta = new Beta(this);
        this.batches = new Batches(this);
        this._options = options;
        this.apiKey = apiKey;
        this.organization = organization;
        this.project = project;
      }
      defaultQuery() {
        return this._options.defaultQuery;
      }
      defaultHeaders(opts) {
        return {
          ...super.defaultHeaders(opts),
          "OpenAI-Organization": this.organization,
          "OpenAI-Project": this.project,
          ...this._options.defaultHeaders
        };
      }
      authHeaders(opts) {
        return { Authorization: `Bearer ${this.apiKey}` };
      }
    };
    _a2 = OpenAI;
    OpenAI.OpenAI = _a2;
    OpenAI.OpenAIError = OpenAIError;
    OpenAI.APIError = APIError;
    OpenAI.APIConnectionError = APIConnectionError;
    OpenAI.APIConnectionTimeoutError = APIConnectionTimeoutError;
    OpenAI.APIUserAbortError = APIUserAbortError;
    OpenAI.NotFoundError = NotFoundError;
    OpenAI.ConflictError = ConflictError;
    OpenAI.RateLimitError = RateLimitError;
    OpenAI.BadRequestError = BadRequestError;
    OpenAI.AuthenticationError = AuthenticationError;
    OpenAI.InternalServerError = InternalServerError;
    OpenAI.PermissionDeniedError = PermissionDeniedError;
    OpenAI.UnprocessableEntityError = UnprocessableEntityError;
    OpenAI.toFile = toFile;
    OpenAI.fileFromPath = fileFromPath;
    ({ OpenAIError: OpenAIError2, APIError: APIError2, APIConnectionError: APIConnectionError2, APIConnectionTimeoutError: APIConnectionTimeoutError2, APIUserAbortError: APIUserAbortError2, NotFoundError: NotFoundError2, ConflictError: ConflictError2, RateLimitError: RateLimitError2, BadRequestError: BadRequestError2, AuthenticationError: AuthenticationError2, InternalServerError: InternalServerError2, PermissionDeniedError: PermissionDeniedError2, UnprocessableEntityError: UnprocessableEntityError2 } = error_exports);
    toFile2 = toFile;
    fileFromPath4 = fileFromPath;
    (function(OpenAI2) {
      OpenAI2.Page = Page;
      OpenAI2.CursorPage = CursorPage;
      OpenAI2.Completions = Completions3;
      OpenAI2.Chat = Chat;
      OpenAI2.Embeddings = Embeddings;
      OpenAI2.Files = Files2;
      OpenAI2.FileObjectsPage = FileObjectsPage;
      OpenAI2.Images = Images;
      OpenAI2.Audio = Audio;
      OpenAI2.Moderations = Moderations;
      OpenAI2.Models = Models;
      OpenAI2.ModelsPage = ModelsPage;
      OpenAI2.FineTuning = FineTuning;
      OpenAI2.Beta = Beta;
      OpenAI2.Batches = Batches;
      OpenAI2.BatchesPage = BatchesPage;
    })(OpenAI || (OpenAI = {}));
    AzureOpenAI = class extends OpenAI {
      /**
       * API Client for interfacing with the Azure OpenAI API.
       *
       * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]
       * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`
       * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]
       * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.
       * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]
       * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API.
       * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
       * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
       * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
       * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
       * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
       * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
       * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
       */
      constructor({ baseURL = readEnv("OPENAI_BASE_URL"), apiKey = readEnv("AZURE_OPENAI_API_KEY"), apiVersion = readEnv("OPENAI_API_VERSION"), endpoint, deployment, azureADTokenProvider, dangerouslyAllowBrowser, ...opts } = {}) {
        if (!apiVersion) {
          throw new OpenAIError("The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).");
        }
        if (typeof azureADTokenProvider === "function") {
          dangerouslyAllowBrowser = true;
        }
        if (!azureADTokenProvider && !apiKey) {
          throw new OpenAIError("Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.");
        }
        if (azureADTokenProvider && apiKey) {
          throw new OpenAIError("The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.");
        }
        apiKey ?? (apiKey = API_KEY_SENTINEL);
        opts.defaultQuery = { ...opts.defaultQuery, "api-version": apiVersion };
        if (!baseURL) {
          if (!endpoint) {
            endpoint = process.env["AZURE_OPENAI_ENDPOINT"];
          }
          if (!endpoint) {
            throw new OpenAIError("Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable");
          }
          baseURL = `${endpoint}/openai`;
        } else {
          if (endpoint) {
            throw new OpenAIError("baseURL and endpoint are mutually exclusive");
          }
        }
        super({
          apiKey,
          baseURL,
          ...opts,
          ...dangerouslyAllowBrowser !== void 0 ? { dangerouslyAllowBrowser } : {}
        });
        this.apiVersion = "";
        this._azureADTokenProvider = azureADTokenProvider;
        this.apiVersion = apiVersion;
        this._deployment = deployment;
      }
      buildRequest(options) {
        if (_deployments_endpoints.has(options.path) && options.method === "post" && options.body !== void 0) {
          if (!isObj(options.body)) {
            throw new Error("Expected request body to be an object");
          }
          const model = this._deployment || options.body["model"];
          delete options.body["model"];
          if (model !== void 0 && !this.baseURL.includes("/deployments")) {
            options.path = `/deployments/${model}${options.path}`;
          }
        }
        return super.buildRequest(options);
      }
      async _getAzureADToken() {
        if (typeof this._azureADTokenProvider === "function") {
          const token = await this._azureADTokenProvider();
          if (!token || typeof token !== "string") {
            throw new OpenAIError(`Expected 'azureADTokenProvider' argument to return a string but it returned ${token}`);
          }
          return token;
        }
        return void 0;
      }
      authHeaders(opts) {
        return {};
      }
      async prepareOptions(opts) {
        if (opts.headers?.["Authorization"] || opts.headers?.["api-key"]) {
          return super.prepareOptions(opts);
        }
        const token = await this._getAzureADToken();
        opts.headers ?? (opts.headers = {});
        if (token) {
          opts.headers["Authorization"] = `Bearer ${token}`;
        } else if (this.apiKey !== API_KEY_SENTINEL) {
          opts.headers["api-key"] = this.apiKey;
        } else {
          throw new OpenAIError("Unable to handle auth");
        }
        return super.prepareOptions(opts);
      }
    };
    _deployments_endpoints = /* @__PURE__ */ new Set([
      "/completions",
      "/chat/completions",
      "/embeddings",
      "/audio/transcriptions",
      "/audio/translations",
      "/audio/speech",
      "/images/generations"
    ]);
    API_KEY_SENTINEL = "<Missing Key>";
    openai_default = OpenAI;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/EmbedRequestInput.js
var require_EmbedRequestInput = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/EmbedRequestInput.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/EmbedRequestInputType.js
var require_EmbedRequestInputType = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/EmbedRequestInputType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedRequestInputType = void 0;
    exports2.EmbedRequestInputType = {
      Query: "query",
      Document: "document"
    };
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/EmbedResponseDataItem.js
var require_EmbedResponseDataItem = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/EmbedResponseDataItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/EmbedResponseUsage.js
var require_EmbedResponseUsage = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/EmbedResponseUsage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/EmbedResponse.js
var require_EmbedResponse3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/EmbedResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/RerankResponseDataItem.js
var require_RerankResponseDataItem = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/RerankResponseDataItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/RerankResponseUsage.js
var require_RerankResponseUsage = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/RerankResponseUsage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/RerankResponse.js
var require_RerankResponse3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/RerankResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedRequestInputsItemContentItem.js
var require_MultimodalEmbedRequestInputsItemContentItem = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedRequestInputsItemContentItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedRequestInputsItem.js
var require_MultimodalEmbedRequestInputsItem = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedRequestInputsItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedRequestInputType.js
var require_MultimodalEmbedRequestInputType = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedRequestInputType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultimodalEmbedRequestInputType = void 0;
    exports2.MultimodalEmbedRequestInputType = {
      Query: "query",
      Document: "document"
    };
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedResponseDataItem.js
var require_MultimodalEmbedResponseDataItem = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedResponseDataItem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedResponseUsage.js
var require_MultimodalEmbedResponseUsage = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedResponseUsage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedResponse.js
var require_MultimodalEmbedResponse = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/MultimodalEmbedResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/index.js
var require_types9 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_EmbedRequestInput(), exports2);
    __exportStar2(require_EmbedRequestInputType(), exports2);
    __exportStar2(require_EmbedResponseDataItem(), exports2);
    __exportStar2(require_EmbedResponseUsage(), exports2);
    __exportStar2(require_EmbedResponse3(), exports2);
    __exportStar2(require_RerankResponseDataItem(), exports2);
    __exportStar2(require_RerankResponseUsage(), exports2);
    __exportStar2(require_RerankResponse3(), exports2);
    __exportStar2(require_MultimodalEmbedRequestInputsItemContentItem(), exports2);
    __exportStar2(require_MultimodalEmbedRequestInputsItem(), exports2);
    __exportStar2(require_MultimodalEmbedRequestInputType(), exports2);
    __exportStar2(require_MultimodalEmbedResponseDataItem(), exports2);
    __exportStar2(require_MultimodalEmbedResponseUsage(), exports2);
    __exportStar2(require_MultimodalEmbedResponse(), exports2);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/client/requests/index.js
var require_requests11 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/client/index.js
var require_client12 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests11(), exports2);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/index.js
var require_api2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/api/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_types9(), exports2);
    __exportStar2(require_client12(), exports2);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/environments.js
var require_environments2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/environments.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VoyageAIEnvironment = void 0;
    exports2.VoyageAIEnvironment = {
      Default: "https://api.voyageai.com/v1"
    };
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/createRequestUrl.js
var require_createRequestUrl = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/createRequestUrl.js"(exports2) {
    "use strict";
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createRequestUrl = void 0;
    var qs_1 = __importDefault2(require_lib2());
    function createRequestUrl(baseUrl, queryParameters) {
      return Object.keys(queryParameters !== null && queryParameters !== void 0 ? queryParameters : {}).length > 0 ? `${baseUrl}?${qs_1.default.stringify(queryParameters, { arrayFormat: "repeat" })}` : baseUrl;
    }
    exports2.createRequestUrl = createRequestUrl;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/runtime/runtime.js
var require_runtime3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/runtime/runtime.js"(exports2) {
    "use strict";
    var _a3;
    var _b;
    var _c;
    var _d;
    var _e2;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RUNTIME = void 0;
    var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
    var isWebWorker = typeof self === "object" && // @ts-ignore
    typeof (self === null || self === void 0 ? void 0 : self.importScripts) === "function" && (((_a3 = self.constructor) === null || _a3 === void 0 ? void 0 : _a3.name) === "DedicatedWorkerGlobalScope" || ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === "ServiceWorkerGlobalScope" || ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === "SharedWorkerGlobalScope");
    var isDeno = typeof Deno !== "undefined" && typeof Deno.version !== "undefined" && typeof Deno.version.deno !== "undefined";
    var isBun = typeof Bun !== "undefined" && typeof Bun.version !== "undefined";
    var isNode = typeof process !== "undefined" && Boolean(process.version) && Boolean((_d = process.versions) === null || _d === void 0 ? void 0 : _d.node) && // Deno spoofs process.versions.node, see https://deno.land/std@0.177.0/node/process.ts?s=versions
    !isDeno && !isBun;
    var isReactNative = typeof navigator !== "undefined" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === "ReactNative";
    var isCloudflare = typeof globalThis !== "undefined" && ((_e2 = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _e2 === void 0 ? void 0 : _e2.userAgent) === "Cloudflare-Workers";
    exports2.RUNTIME = evaluateRuntime();
    function evaluateRuntime() {
      if (isBrowser) {
        return {
          type: "browser",
          version: window.navigator.userAgent
        };
      }
      if (isCloudflare) {
        return {
          type: "workerd"
        };
      }
      if (isWebWorker) {
        return {
          type: "web-worker"
        };
      }
      if (isDeno) {
        return {
          type: "deno",
          version: Deno.version.deno
        };
      }
      if (isBun) {
        return {
          type: "bun",
          version: Bun.version
        };
      }
      if (isNode) {
        return {
          type: "node",
          version: process.versions.node,
          parsedVersion: Number(process.versions.node.split(".")[0])
        };
      }
      if (isReactNative) {
        return {
          type: "react-native"
        };
      }
      return {
        type: "unknown"
      };
    }
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/runtime/index.js
var require_runtime4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/runtime/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RUNTIME = void 0;
    var runtime_1 = require_runtime3();
    Object.defineProperty(exports2, "RUNTIME", { enumerable: true, get: function() {
      return runtime_1.RUNTIME;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/getFetchFn.js
var require_getFetchFn = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/getFetchFn.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFetchFn = void 0;
    var runtime_1 = require_runtime4();
    function getFetchFn() {
      return __awaiter2(this, void 0, void 0, function* () {
        if (runtime_1.RUNTIME.type === "node" && runtime_1.RUNTIME.parsedVersion != null && runtime_1.RUNTIME.parsedVersion >= 18) {
          return fetch;
        }
        if (runtime_1.RUNTIME.type === "node") {
          return (yield Promise.resolve().then(() => __importStar2((init_lib(), __toCommonJS(lib_exports))))).default;
        }
        if (typeof fetch == "function") {
          return fetch;
        }
        return (yield Promise.resolve().then(() => __importStar2((init_lib(), __toCommonJS(lib_exports))))).default;
      });
    }
    exports2.getFetchFn = getFetchFn;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/getRequestBody.js
var require_getRequestBody = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/getRequestBody.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRequestBody = void 0;
    function getRequestBody({ body, type }) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (type.includes("json")) {
          return JSON.stringify(body);
        } else {
          return body;
        }
      });
    }
    exports2.getRequestBody = getRequestBody;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/stream-wrappers/Node18UniversalStreamWrapper.js
var require_Node18UniversalStreamWrapper = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/stream-wrappers/Node18UniversalStreamWrapper.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Node18UniversalStreamWrapper = void 0;
    var Node18UniversalStreamWrapper = class _Node18UniversalStreamWrapper {
      constructor(readableStream) {
        this.readableStream = readableStream;
        this.reader = this.readableStream.getReader();
        this.events = {
          data: [],
          end: [],
          error: [],
          readable: [],
          close: [],
          pause: [],
          resume: []
        };
        this.paused = false;
        this.resumeCallback = null;
        this.encoding = null;
      }
      on(event, callback) {
        var _a3;
        (_a3 = this.events[event]) === null || _a3 === void 0 ? void 0 : _a3.push(callback);
      }
      off(event, callback) {
        var _a3;
        this.events[event] = (_a3 = this.events[event]) === null || _a3 === void 0 ? void 0 : _a3.filter((cb) => cb !== callback);
      }
      pipe(dest) {
        this.on("data", (chunk) => __awaiter2(this, void 0, void 0, function* () {
          if (dest instanceof _Node18UniversalStreamWrapper) {
            dest._write(chunk);
          } else if (dest instanceof WritableStream) {
            const writer = dest.getWriter();
            writer.write(chunk).then(() => writer.releaseLock());
          } else {
            dest.write(chunk);
          }
        }));
        this.on("end", () => __awaiter2(this, void 0, void 0, function* () {
          if (dest instanceof _Node18UniversalStreamWrapper) {
            dest._end();
          } else if (dest instanceof WritableStream) {
            const writer = dest.getWriter();
            writer.close();
          } else {
            dest.end();
          }
        }));
        this.on("error", (error2) => __awaiter2(this, void 0, void 0, function* () {
          if (dest instanceof _Node18UniversalStreamWrapper) {
            dest._error(error2);
          } else if (dest instanceof WritableStream) {
            const writer = dest.getWriter();
            writer.abort(error2);
          } else {
            dest.destroy(error2);
          }
        }));
        this._startReading();
        return dest;
      }
      pipeTo(dest) {
        return this.pipe(dest);
      }
      unpipe(dest) {
        this.off("data", (chunk) => __awaiter2(this, void 0, void 0, function* () {
          if (dest instanceof _Node18UniversalStreamWrapper) {
            dest._write(chunk);
          } else if (dest instanceof WritableStream) {
            const writer = dest.getWriter();
            writer.write(chunk).then(() => writer.releaseLock());
          } else {
            dest.write(chunk);
          }
        }));
        this.off("end", () => __awaiter2(this, void 0, void 0, function* () {
          if (dest instanceof _Node18UniversalStreamWrapper) {
            dest._end();
          } else if (dest instanceof WritableStream) {
            const writer = dest.getWriter();
            writer.close();
          } else {
            dest.end();
          }
        }));
        this.off("error", (error2) => __awaiter2(this, void 0, void 0, function* () {
          if (dest instanceof _Node18UniversalStreamWrapper) {
            dest._error(error2);
          } else if (dest instanceof WritableStream) {
            const writer = dest.getWriter();
            writer.abort(error2);
          } else {
            dest.destroy(error2);
          }
        }));
      }
      destroy(error2) {
        this.reader.cancel(error2).then(() => {
          this._emit("close");
        }).catch((err) => {
          this._emit("error", err);
        });
      }
      pause() {
        this.paused = true;
        this._emit("pause");
      }
      resume() {
        if (this.paused) {
          this.paused = false;
          this._emit("resume");
          if (this.resumeCallback) {
            this.resumeCallback();
            this.resumeCallback = null;
          }
        }
      }
      get isPaused() {
        return this.paused;
      }
      read() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this.paused) {
            yield new Promise((resolve2) => {
              this.resumeCallback = resolve2;
            });
          }
          const { done, value } = yield this.reader.read();
          if (done) {
            return void 0;
          }
          return value;
        });
      }
      setEncoding(encoding) {
        this.encoding = encoding;
      }
      text() {
        return __awaiter2(this, void 0, void 0, function* () {
          const chunks = [];
          while (true) {
            const { done, value } = yield this.reader.read();
            if (done) {
              break;
            }
            if (value) {
              chunks.push(value);
            }
          }
          const decoder = new TextDecoder(this.encoding || "utf-8");
          return decoder.decode(yield new Blob(chunks).arrayBuffer());
        });
      }
      json() {
        return __awaiter2(this, void 0, void 0, function* () {
          const text = yield this.text();
          return JSON.parse(text);
        });
      }
      _write(chunk) {
        this._emit("data", chunk);
      }
      _end() {
        this._emit("end");
      }
      _error(error2) {
        this._emit("error", error2);
      }
      _emit(event, data) {
        if (this.events[event]) {
          for (const callback of this.events[event] || []) {
            callback(data);
          }
        }
      }
      _startReading() {
        return __awaiter2(this, void 0, void 0, function* () {
          try {
            this._emit("readable");
            while (true) {
              if (this.paused) {
                yield new Promise((resolve2) => {
                  this.resumeCallback = resolve2;
                });
              }
              const { done, value } = yield this.reader.read();
              if (done) {
                this._emit("end");
                this._emit("close");
                break;
              }
              if (value) {
                this._emit("data", value);
              }
            }
          } catch (error2) {
            this._emit("error", error2);
          }
        });
      }
      [Symbol.asyncIterator]() {
        return {
          next: () => __awaiter2(this, void 0, void 0, function* () {
            if (this.paused) {
              yield new Promise((resolve2) => {
                this.resumeCallback = resolve2;
              });
            }
            const { done, value } = yield this.reader.read();
            if (done) {
              return { done: true, value: void 0 };
            }
            return { done: false, value };
          }),
          [Symbol.asyncIterator]() {
            return this;
          }
        };
      }
    };
    exports2.Node18UniversalStreamWrapper = Node18UniversalStreamWrapper;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/stream-wrappers/UndiciStreamWrapper.js
var require_UndiciStreamWrapper = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/stream-wrappers/UndiciStreamWrapper.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UndiciStreamWrapper = void 0;
    var UndiciStreamWrapper = class _UndiciStreamWrapper {
      constructor(readableStream) {
        this.readableStream = readableStream;
        this.reader = this.readableStream.getReader();
        this.events = {
          data: [],
          end: [],
          error: [],
          readable: [],
          close: [],
          pause: [],
          resume: []
        };
        this.paused = false;
        this.resumeCallback = null;
        this.encoding = null;
      }
      on(event, callback) {
        var _a3;
        (_a3 = this.events[event]) === null || _a3 === void 0 ? void 0 : _a3.push(callback);
      }
      off(event, callback) {
        var _a3;
        this.events[event] = (_a3 = this.events[event]) === null || _a3 === void 0 ? void 0 : _a3.filter((cb) => cb !== callback);
      }
      pipe(dest) {
        this.on("data", (chunk) => {
          if (dest instanceof _UndiciStreamWrapper) {
            dest._write(chunk);
          } else {
            const writer = dest.getWriter();
            writer.write(chunk).then(() => writer.releaseLock());
          }
        });
        this.on("end", () => {
          if (dest instanceof _UndiciStreamWrapper) {
            dest._end();
          } else {
            const writer = dest.getWriter();
            writer.close();
          }
        });
        this.on("error", (error2) => {
          if (dest instanceof _UndiciStreamWrapper) {
            dest._error(error2);
          } else {
            const writer = dest.getWriter();
            writer.abort(error2);
          }
        });
        this._startReading();
        return dest;
      }
      pipeTo(dest) {
        return this.pipe(dest);
      }
      unpipe(dest) {
        this.off("data", (chunk) => {
          if (dest instanceof _UndiciStreamWrapper) {
            dest._write(chunk);
          } else {
            const writer = dest.getWriter();
            writer.write(chunk).then(() => writer.releaseLock());
          }
        });
        this.off("end", () => {
          if (dest instanceof _UndiciStreamWrapper) {
            dest._end();
          } else {
            const writer = dest.getWriter();
            writer.close();
          }
        });
        this.off("error", (error2) => {
          if (dest instanceof _UndiciStreamWrapper) {
            dest._error(error2);
          } else {
            const writer = dest.getWriter();
            writer.abort(error2);
          }
        });
      }
      destroy(error2) {
        this.reader.cancel(error2).then(() => {
          this._emit("close");
        }).catch((err) => {
          this._emit("error", err);
        });
      }
      pause() {
        this.paused = true;
        this._emit("pause");
      }
      resume() {
        if (this.paused) {
          this.paused = false;
          this._emit("resume");
          if (this.resumeCallback) {
            this.resumeCallback();
            this.resumeCallback = null;
          }
        }
      }
      get isPaused() {
        return this.paused;
      }
      read() {
        return __awaiter2(this, void 0, void 0, function* () {
          if (this.paused) {
            yield new Promise((resolve2) => {
              this.resumeCallback = resolve2;
            });
          }
          const { done, value } = yield this.reader.read();
          if (done) {
            return void 0;
          }
          return value;
        });
      }
      setEncoding(encoding) {
        this.encoding = encoding;
      }
      text() {
        return __awaiter2(this, void 0, void 0, function* () {
          const chunks = [];
          while (true) {
            const { done, value } = yield this.reader.read();
            if (done) {
              break;
            }
            if (value) {
              chunks.push(value);
            }
          }
          const decoder = new TextDecoder(this.encoding || "utf-8");
          return decoder.decode(yield new Blob(chunks).arrayBuffer());
        });
      }
      json() {
        return __awaiter2(this, void 0, void 0, function* () {
          const text = yield this.text();
          return JSON.parse(text);
        });
      }
      _write(chunk) {
        this._emit("data", chunk);
      }
      _end() {
        this._emit("end");
      }
      _error(error2) {
        this._emit("error", error2);
      }
      _emit(event, data) {
        if (this.events[event]) {
          for (const callback of this.events[event] || []) {
            callback(data);
          }
        }
      }
      _startReading() {
        return __awaiter2(this, void 0, void 0, function* () {
          try {
            this._emit("readable");
            while (true) {
              if (this.paused) {
                yield new Promise((resolve2) => {
                  this.resumeCallback = resolve2;
                });
              }
              const { done, value } = yield this.reader.read();
              if (done) {
                this._emit("end");
                this._emit("close");
                break;
              }
              if (value) {
                this._emit("data", value);
              }
            }
          } catch (error2) {
            this._emit("error", error2);
          }
        });
      }
      [Symbol.asyncIterator]() {
        return {
          next: () => __awaiter2(this, void 0, void 0, function* () {
            if (this.paused) {
              yield new Promise((resolve2) => {
                this.resumeCallback = resolve2;
              });
            }
            const { done, value } = yield this.reader.read();
            if (done) {
              return { done: true, value: void 0 };
            }
            return { done: false, value };
          }),
          [Symbol.asyncIterator]() {
            return this;
          }
        };
      }
    };
    exports2.UndiciStreamWrapper = UndiciStreamWrapper;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/stream-wrappers/NodePre18StreamWrapper.js
var require_NodePre18StreamWrapper = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/stream-wrappers/NodePre18StreamWrapper.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __asyncValues2 = exports2 && exports2.__asyncValues || function(o6) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m6 = o6[Symbol.asyncIterator], i6;
      return m6 ? m6.call(o6) : (o6 = typeof __values === "function" ? __values(o6) : o6[Symbol.iterator](), i6 = {}, verb("next"), verb("throw"), verb("return"), i6[Symbol.asyncIterator] = function() {
        return this;
      }, i6);
      function verb(n6) {
        i6[n6] = o6[n6] && function(v7) {
          return new Promise(function(resolve2, reject) {
            v7 = o6[n6](v7), settle(resolve2, reject, v7.done, v7.value);
          });
        };
      }
      function settle(resolve2, reject, d6, v7) {
        Promise.resolve(v7).then(function(v8) {
          resolve2({ value: v8, done: d6 });
        }, reject);
      }
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodePre18StreamWrapper = void 0;
    var NodePre18StreamWrapper = class {
      constructor(readableStream) {
        this.readableStream = readableStream;
      }
      on(event, callback) {
        this.readableStream.on(event, callback);
      }
      off(event, callback) {
        this.readableStream.off(event, callback);
      }
      pipe(dest) {
        this.readableStream.pipe(dest);
        return dest;
      }
      pipeTo(dest) {
        return this.pipe(dest);
      }
      unpipe(dest) {
        if (dest) {
          this.readableStream.unpipe(dest);
        } else {
          this.readableStream.unpipe();
        }
      }
      destroy(error2) {
        this.readableStream.destroy(error2);
      }
      pause() {
        this.readableStream.pause();
      }
      resume() {
        this.readableStream.resume();
      }
      get isPaused() {
        return this.readableStream.isPaused();
      }
      read() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve2, reject) => {
            const chunk = this.readableStream.read();
            if (chunk) {
              resolve2(chunk);
            } else {
              this.readableStream.once("readable", () => {
                const chunk2 = this.readableStream.read();
                resolve2(chunk2);
              });
              this.readableStream.once("error", reject);
            }
          });
        });
      }
      setEncoding(encoding) {
        this.readableStream.setEncoding(encoding);
        this.encoding = encoding;
      }
      text() {
        var e_1, _a3;
        return __awaiter2(this, void 0, void 0, function* () {
          const chunks = [];
          const encoder = new TextEncoder();
          this.readableStream.setEncoding(this.encoding || "utf-8");
          try {
            for (var _b = __asyncValues2(this.readableStream), _c; _c = yield _b.next(), !_c.done; ) {
              const chunk = _c.value;
              chunks.push(encoder.encode(chunk));
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a3 = _b.return))
                yield _a3.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          const decoder = new TextDecoder(this.encoding || "utf-8");
          return decoder.decode(Buffer.concat(chunks));
        });
      }
      json() {
        return __awaiter2(this, void 0, void 0, function* () {
          const text = yield this.text();
          return JSON.parse(text);
        });
      }
      [Symbol.asyncIterator]() {
        const readableStream = this.readableStream;
        const iterator = readableStream[Symbol.asyncIterator]();
        return {
          next() {
            return __awaiter2(this, void 0, void 0, function* () {
              const { value, done } = yield iterator.next();
              return { value, done };
            });
          },
          [Symbol.asyncIterator]() {
            return this;
          }
        };
      }
    };
    exports2.NodePre18StreamWrapper = NodePre18StreamWrapper;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/stream-wrappers/chooseStreamWrapper.js
var require_chooseStreamWrapper = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/stream-wrappers/chooseStreamWrapper.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chooseStreamWrapper = void 0;
    var runtime_1 = require_runtime4();
    function chooseStreamWrapper(responseBody) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (runtime_1.RUNTIME.type === "node" && runtime_1.RUNTIME.parsedVersion != null && runtime_1.RUNTIME.parsedVersion >= 18) {
          return new (yield Promise.resolve().then(() => __importStar2(require_Node18UniversalStreamWrapper()))).Node18UniversalStreamWrapper(responseBody);
        } else if (runtime_1.RUNTIME.type !== "node" && typeof fetch === "function") {
          return new (yield Promise.resolve().then(() => __importStar2(require_UndiciStreamWrapper()))).UndiciStreamWrapper(responseBody);
        } else {
          return new (yield Promise.resolve().then(() => __importStar2(require_NodePre18StreamWrapper()))).NodePre18StreamWrapper(responseBody);
        }
      });
    }
    exports2.chooseStreamWrapper = chooseStreamWrapper;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/getResponseBody.js
var require_getResponseBody = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/getResponseBody.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResponseBody = void 0;
    var chooseStreamWrapper_1 = require_chooseStreamWrapper();
    function getResponseBody(response, responseType) {
      return __awaiter2(this, void 0, void 0, function* () {
        if (response.body != null && responseType === "blob") {
          return yield response.blob();
        } else if (response.body != null && responseType === "sse") {
          return response.body;
        } else if (response.body != null && responseType === "streaming") {
          return (0, chooseStreamWrapper_1.chooseStreamWrapper)(response.body);
        } else if (response.body != null && responseType === "text") {
          return yield response.text();
        } else {
          const text = yield response.text();
          if (text.length > 0) {
            try {
              let responseBody = JSON.parse(text);
              return responseBody;
            } catch (err) {
              return {
                ok: false,
                error: {
                  reason: "non-json",
                  statusCode: response.status,
                  rawBody: text
                }
              };
            }
          } else {
            return void 0;
          }
        }
      });
    }
    exports2.getResponseBody = getResponseBody;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/signals.js
var require_signals = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/signals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.anySignal = exports2.getTimeoutSignal = void 0;
    var TIMEOUT = "timeout";
    function getTimeoutSignal(timeoutMs) {
      const controller = new AbortController();
      const abortId = setTimeout(() => controller.abort(TIMEOUT), timeoutMs);
      return { signal: controller.signal, abortId };
    }
    exports2.getTimeoutSignal = getTimeoutSignal;
    function anySignal(...args) {
      const signals = args.length === 1 && Array.isArray(args[0]) ? args[0] : args;
      const controller = new AbortController();
      for (const signal of signals) {
        if (signal.aborted) {
          controller.abort(signal === null || signal === void 0 ? void 0 : signal.reason);
          break;
        }
        signal.addEventListener("abort", () => controller.abort(signal === null || signal === void 0 ? void 0 : signal.reason), {
          signal: controller.signal
        });
      }
      return controller.signal;
    }
    exports2.anySignal = anySignal;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/makeRequest.js
var require_makeRequest = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/makeRequest.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.makeRequest = void 0;
    var signals_1 = require_signals();
    var makeRequest2 = (fetchFn, url, method, headers, requestBody, timeoutMs, abortSignal, withCredentials, duplex) => __awaiter2(void 0, void 0, void 0, function* () {
      const signals = [];
      let timeoutAbortId = void 0;
      if (timeoutMs != null) {
        const { signal, abortId } = (0, signals_1.getTimeoutSignal)(timeoutMs);
        timeoutAbortId = abortId;
        signals.push(signal);
      }
      if (abortSignal != null) {
        signals.push(abortSignal);
      }
      let newSignals = (0, signals_1.anySignal)(signals);
      const response = yield fetchFn(url, {
        method,
        headers,
        body: requestBody,
        signal: newSignals,
        credentials: withCredentials ? "include" : void 0,
        // @ts-ignore
        duplex
      });
      if (timeoutAbortId != null) {
        clearTimeout(timeoutAbortId);
      }
      return response;
    });
    exports2.makeRequest = makeRequest2;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/requestWithRetries.js
var require_requestWithRetries = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/requestWithRetries.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requestWithRetries = void 0;
    var INITIAL_RETRY_DELAY = 1;
    var MAX_RETRY_DELAY = 60;
    var DEFAULT_MAX_RETRIES2 = 2;
    function requestWithRetries(requestFn, maxRetries = DEFAULT_MAX_RETRIES2) {
      return __awaiter2(this, void 0, void 0, function* () {
        let response = yield requestFn();
        for (let i6 = 0; i6 < maxRetries; ++i6) {
          if ([408, 409, 429].includes(response.status) || response.status >= 500) {
            const delay = Math.min(INITIAL_RETRY_DELAY * Math.pow(2, i6), MAX_RETRY_DELAY);
            yield new Promise((resolve2) => setTimeout(resolve2, delay));
            response = yield requestFn();
          } else {
            break;
          }
        }
        return response;
      });
    }
    exports2.requestWithRetries = requestWithRetries;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/Fetcher.js
var require_Fetcher2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/Fetcher.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fetcher = exports2.fetcherImpl = void 0;
    var createRequestUrl_1 = require_createRequestUrl();
    var getFetchFn_1 = require_getFetchFn();
    var getRequestBody_1 = require_getRequestBody();
    var getResponseBody_1 = require_getResponseBody();
    var makeRequest_1 = require_makeRequest();
    var requestWithRetries_1 = require_requestWithRetries();
    function fetcherImpl(args) {
      return __awaiter2(this, void 0, void 0, function* () {
        const headers = {};
        if (args.body !== void 0 && args.contentType != null) {
          headers["Content-Type"] = args.contentType;
        }
        if (args.headers != null) {
          for (const [key, value] of Object.entries(args.headers)) {
            if (value != null) {
              headers[key] = value;
            }
          }
        }
        const url = (0, createRequestUrl_1.createRequestUrl)(args.url, args.queryParameters);
        let requestBody = yield (0, getRequestBody_1.getRequestBody)({
          body: args.body,
          type: args.requestType === "json" ? "json" : "other"
        });
        const fetchFn = yield (0, getFetchFn_1.getFetchFn)();
        try {
          const response = yield (0, requestWithRetries_1.requestWithRetries)(() => __awaiter2(this, void 0, void 0, function* () {
            return (0, makeRequest_1.makeRequest)(fetchFn, url, args.method, headers, requestBody, args.timeoutMs, args.abortSignal, args.withCredentials, args.duplex);
          }), args.maxRetries);
          let responseBody = yield (0, getResponseBody_1.getResponseBody)(response, args.responseType);
          if (response.status >= 200 && response.status < 400) {
            return {
              ok: true,
              body: responseBody,
              headers: response.headers
            };
          } else {
            return {
              ok: false,
              error: {
                reason: "status-code",
                statusCode: response.status,
                body: responseBody
              }
            };
          }
        } catch (error2) {
          if (args.abortSignal != null && args.abortSignal.aborted) {
            return {
              ok: false,
              error: {
                reason: "unknown",
                errorMessage: "The user aborted a request"
              }
            };
          } else if (error2 instanceof Error && error2.name === "AbortError") {
            return {
              ok: false,
              error: {
                reason: "timeout"
              }
            };
          } else if (error2 instanceof Error) {
            return {
              ok: false,
              error: {
                reason: "unknown",
                errorMessage: error2.message
              }
            };
          }
          return {
            ok: false,
            error: {
              reason: "unknown",
              errorMessage: JSON.stringify(error2)
            }
          };
        }
      });
    }
    exports2.fetcherImpl = fetcherImpl;
    exports2.fetcher = fetcherImpl;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/getHeader.js
var require_getHeader2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/getHeader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHeader = void 0;
    function getHeader(headers, header) {
      for (const [headerKey, headerValue] of Object.entries(headers)) {
        if (headerKey.toLowerCase() === header.toLowerCase()) {
          return headerValue;
        }
      }
      return void 0;
    }
    exports2.getHeader = getHeader;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/Supplier.js
var require_Supplier2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/Supplier.js"(exports2) {
    "use strict";
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Supplier = void 0;
    exports2.Supplier = {
      get: (supplier) => __awaiter2(void 0, void 0, void 0, function* () {
        if (typeof supplier === "function") {
          return supplier();
        } else {
          return supplier;
        }
      })
    };
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/index.js
var require_fetcher2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/fetcher/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Supplier = exports2.getHeader = exports2.fetcher = void 0;
    var Fetcher_1 = require_Fetcher2();
    Object.defineProperty(exports2, "fetcher", { enumerable: true, get: function() {
      return Fetcher_1.fetcher;
    } });
    var getHeader_1 = require_getHeader2();
    Object.defineProperty(exports2, "getHeader", { enumerable: true, get: function() {
      return getHeader_1.getHeader;
    } });
    var Supplier_1 = require_Supplier2();
    Object.defineProperty(exports2, "Supplier", { enumerable: true, get: function() {
      return Supplier_1.Supplier;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/auth/BasicAuth.js
var require_BasicAuth2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/auth/BasicAuth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BasicAuth = void 0;
    var js_base64_1 = require_base64();
    var BASIC_AUTH_HEADER_PREFIX = /^Basic /i;
    exports2.BasicAuth = {
      toAuthorizationHeader: (basicAuth) => {
        if (basicAuth == null) {
          return void 0;
        }
        const token = js_base64_1.Base64.encode(`${basicAuth.username}:${basicAuth.password}`);
        return `Basic ${token}`;
      },
      fromAuthorizationHeader: (header) => {
        const credentials = header.replace(BASIC_AUTH_HEADER_PREFIX, "");
        const decoded = js_base64_1.Base64.decode(credentials);
        const [username, password] = decoded.split(":", 2);
        if (username == null || password == null) {
          throw new Error("Invalid basic auth");
        }
        return {
          username,
          password
        };
      }
    };
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/auth/BearerToken.js
var require_BearerToken2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/auth/BearerToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BearerToken = void 0;
    var BEARER_AUTH_HEADER_PREFIX = /^Bearer /i;
    exports2.BearerToken = {
      toAuthorizationHeader: (token) => {
        if (token == null) {
          return void 0;
        }
        return `Bearer ${token}`;
      },
      fromAuthorizationHeader: (header) => {
        return header.replace(BEARER_AUTH_HEADER_PREFIX, "").trim();
      }
    };
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/auth/index.js
var require_auth2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/auth/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BearerToken = exports2.BasicAuth = void 0;
    var BasicAuth_1 = require_BasicAuth2();
    Object.defineProperty(exports2, "BasicAuth", { enumerable: true, get: function() {
      return BasicAuth_1.BasicAuth;
    } });
    var BearerToken_1 = require_BearerToken2();
    Object.defineProperty(exports2, "BearerToken", { enumerable: true, get: function() {
      return BearerToken_1.BearerToken;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/Schema.js
var require_Schema2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/Schema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SchemaType = void 0;
    exports2.SchemaType = {
      DATE: "date",
      ENUM: "enum",
      LIST: "list",
      STRING_LITERAL: "stringLiteral",
      BOOLEAN_LITERAL: "booleanLiteral",
      OBJECT: "object",
      ANY: "any",
      BOOLEAN: "boolean",
      NUMBER: "number",
      STRING: "string",
      UNKNOWN: "unknown",
      RECORD: "record",
      SET: "set",
      UNION: "union",
      UNDISCRIMINATED_UNION: "undiscriminatedUnion",
      OPTIONAL: "optional"
    };
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/getErrorMessageForIncorrectType.js
var require_getErrorMessageForIncorrectType2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/getErrorMessageForIncorrectType.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getErrorMessageForIncorrectType = void 0;
    function getErrorMessageForIncorrectType(value, expectedType) {
      return `Expected ${expectedType}. Received ${getTypeAsString(value)}.`;
    }
    exports2.getErrorMessageForIncorrectType = getErrorMessageForIncorrectType;
    function getTypeAsString(value) {
      if (Array.isArray(value)) {
        return "list";
      }
      if (value === null) {
        return "null";
      }
      switch (typeof value) {
        case "string":
          return `"${value}"`;
        case "number":
        case "boolean":
        case "undefined":
          return `${value}`;
      }
      return typeof value;
    }
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/maybeSkipValidation.js
var require_maybeSkipValidation2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/maybeSkipValidation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.maybeSkipValidation = void 0;
    function maybeSkipValidation(schema) {
      return Object.assign(Object.assign({}, schema), { json: transformAndMaybeSkipValidation(schema.json), parse: transformAndMaybeSkipValidation(schema.parse) });
    }
    exports2.maybeSkipValidation = maybeSkipValidation;
    function transformAndMaybeSkipValidation(transform) {
      return (value, opts) => {
        const transformed = transform(value, opts);
        const { skipValidation = false } = opts !== null && opts !== void 0 ? opts : {};
        if (!transformed.ok && skipValidation) {
          console.warn([
            "Failed to validate.",
            ...transformed.errors.map((error2) => "  - " + (error2.path.length > 0 ? `${error2.path.join(".")}: ${error2.message}` : error2.message))
          ].join("\n"));
          return {
            ok: true,
            value
          };
        } else {
          return transformed;
        }
      };
    }
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/schema-utils/stringifyValidationErrors.js
var require_stringifyValidationErrors2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/schema-utils/stringifyValidationErrors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringifyValidationError = void 0;
    function stringifyValidationError(error2) {
      if (error2.path.length === 0) {
        return error2.message;
      }
      return `${error2.path.join(" -> ")}: ${error2.message}`;
    }
    exports2.stringifyValidationError = stringifyValidationError;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/schema-utils/JsonError.js
var require_JsonError2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/schema-utils/JsonError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JsonError = void 0;
    var stringifyValidationErrors_1 = require_stringifyValidationErrors2();
    var JsonError = class _JsonError extends Error {
      constructor(errors2) {
        super(errors2.map(stringifyValidationErrors_1.stringifyValidationError).join("; "));
        this.errors = errors2;
        Object.setPrototypeOf(this, _JsonError.prototype);
      }
    };
    exports2.JsonError = JsonError;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/schema-utils/ParseError.js
var require_ParseError2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/schema-utils/ParseError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ParseError = void 0;
    var stringifyValidationErrors_1 = require_stringifyValidationErrors2();
    var ParseError = class _ParseError extends Error {
      constructor(errors2) {
        super(errors2.map(stringifyValidationErrors_1.stringifyValidationError).join("; "));
        this.errors = errors2;
        Object.setPrototypeOf(this, _ParseError.prototype);
      }
    };
    exports2.ParseError = ParseError;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/schema-utils/getSchemaUtils.js
var require_getSchemaUtils2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/schema-utils/getSchemaUtils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transform = exports2.optional = exports2.getSchemaUtils = void 0;
    var Schema_1 = require_Schema2();
    var JsonError_1 = require_JsonError2();
    var ParseError_1 = require_ParseError2();
    function getSchemaUtils(schema) {
      return {
        optional: () => optional(schema),
        transform: (transformer) => transform(schema, transformer),
        parseOrThrow: (raw, opts) => {
          const parsed = schema.parse(raw, opts);
          if (parsed.ok) {
            return parsed.value;
          }
          throw new ParseError_1.ParseError(parsed.errors);
        },
        jsonOrThrow: (parsed, opts) => {
          const raw = schema.json(parsed, opts);
          if (raw.ok) {
            return raw.value;
          }
          throw new JsonError_1.JsonError(raw.errors);
        }
      };
    }
    exports2.getSchemaUtils = getSchemaUtils;
    function optional(schema) {
      const baseSchema = {
        parse: (raw, opts) => {
          if (raw == null) {
            return {
              ok: true,
              value: void 0
            };
          }
          return schema.parse(raw, opts);
        },
        json: (parsed, opts) => {
          if ((opts === null || opts === void 0 ? void 0 : opts.omitUndefined) && parsed === void 0) {
            return {
              ok: true,
              value: void 0
            };
          }
          if (parsed == null) {
            return {
              ok: true,
              value: null
            };
          }
          return schema.json(parsed, opts);
        },
        getType: () => Schema_1.SchemaType.OPTIONAL
      };
      return Object.assign(Object.assign({}, baseSchema), getSchemaUtils(baseSchema));
    }
    exports2.optional = optional;
    function transform(schema, transformer) {
      const baseSchema = {
        parse: (raw, opts) => {
          const parsed = schema.parse(raw, opts);
          if (!parsed.ok) {
            return parsed;
          }
          return {
            ok: true,
            value: transformer.transform(parsed.value)
          };
        },
        json: (transformed, opts) => {
          const parsed = transformer.untransform(transformed);
          return schema.json(parsed, opts);
        },
        getType: () => schema.getType()
      };
      return Object.assign(Object.assign({}, baseSchema), getSchemaUtils(baseSchema));
    }
    exports2.transform = transform;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/schema-utils/index.js
var require_schema_utils2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/schema-utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ParseError = exports2.JsonError = exports2.transform = exports2.optional = exports2.getSchemaUtils = void 0;
    var getSchemaUtils_1 = require_getSchemaUtils2();
    Object.defineProperty(exports2, "getSchemaUtils", { enumerable: true, get: function() {
      return getSchemaUtils_1.getSchemaUtils;
    } });
    Object.defineProperty(exports2, "optional", { enumerable: true, get: function() {
      return getSchemaUtils_1.optional;
    } });
    Object.defineProperty(exports2, "transform", { enumerable: true, get: function() {
      return getSchemaUtils_1.transform;
    } });
    var JsonError_1 = require_JsonError2();
    Object.defineProperty(exports2, "JsonError", { enumerable: true, get: function() {
      return JsonError_1.JsonError;
    } });
    var ParseError_1 = require_ParseError2();
    Object.defineProperty(exports2, "ParseError", { enumerable: true, get: function() {
      return ParseError_1.ParseError;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/date/date.js
var require_date3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/date/date.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.date = void 0;
    var Schema_1 = require_Schema2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    var maybeSkipValidation_1 = require_maybeSkipValidation2();
    var schema_utils_1 = require_schema_utils2();
    var ISO_8601_REGEX = /^([+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([.,]\d+(?!:))?)?(\17[0-5]\d([.,]\d+)?)?([zZ]|([+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
    function date() {
      const baseSchema = {
        parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
          if (typeof raw !== "string") {
            return {
              ok: false,
              errors: [
                {
                  path: breadcrumbsPrefix,
                  message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(raw, "string")
                }
              ]
            };
          }
          if (!ISO_8601_REGEX.test(raw)) {
            return {
              ok: false,
              errors: [
                {
                  path: breadcrumbsPrefix,
                  message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(raw, "ISO 8601 date string")
                }
              ]
            };
          }
          return {
            ok: true,
            value: new Date(raw)
          };
        },
        json: (date2, { breadcrumbsPrefix = [] } = {}) => {
          if (date2 instanceof Date) {
            return {
              ok: true,
              value: date2.toISOString()
            };
          } else {
            return {
              ok: false,
              errors: [
                {
                  path: breadcrumbsPrefix,
                  message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(date2, "Date object")
                }
              ]
            };
          }
        },
        getType: () => Schema_1.SchemaType.DATE
      };
      return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.date = date;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/date/index.js
var require_date4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/date/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.date = void 0;
    var date_1 = require_date3();
    Object.defineProperty(exports2, "date", { enumerable: true, get: function() {
      return date_1.date;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/createIdentitySchemaCreator.js
var require_createIdentitySchemaCreator2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/createIdentitySchemaCreator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createIdentitySchemaCreator = void 0;
    var schema_utils_1 = require_schema_utils2();
    var maybeSkipValidation_1 = require_maybeSkipValidation2();
    function createIdentitySchemaCreator(schemaType, validate) {
      return () => {
        const baseSchema = {
          parse: validate,
          json: validate,
          getType: () => schemaType
        };
        return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
      };
    }
    exports2.createIdentitySchemaCreator = createIdentitySchemaCreator;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/enum/enum.js
var require_enum3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/enum/enum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.enum_ = void 0;
    var Schema_1 = require_Schema2();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    function enum_(values) {
      const validValues = new Set(values);
      const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.ENUM, (value, { allowUnrecognizedEnumValues, breadcrumbsPrefix = [] } = {}) => {
        if (typeof value !== "string") {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "string")
              }
            ]
          };
        }
        if (!validValues.has(value) && !allowUnrecognizedEnumValues) {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "enum")
              }
            ]
          };
        }
        return {
          ok: true,
          value
        };
      });
      return schemaCreator();
    }
    exports2.enum_ = enum_;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/enum/index.js
var require_enum4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/enum/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.enum_ = void 0;
    var enum_1 = require_enum3();
    Object.defineProperty(exports2, "enum_", { enumerable: true, get: function() {
      return enum_1.enum_;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/lazy/lazy.js
var require_lazy3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/lazy/lazy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getMemoizedSchema = exports2.constructLazyBaseSchema = exports2.lazy = void 0;
    var schema_utils_1 = require_schema_utils2();
    function lazy(getter) {
      const baseSchema = constructLazyBaseSchema(getter);
      return Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.lazy = lazy;
    function constructLazyBaseSchema(getter) {
      return {
        parse: (raw, opts) => getMemoizedSchema(getter).parse(raw, opts),
        json: (parsed, opts) => getMemoizedSchema(getter).json(parsed, opts),
        getType: () => getMemoizedSchema(getter).getType()
      };
    }
    exports2.constructLazyBaseSchema = constructLazyBaseSchema;
    function getMemoizedSchema(getter) {
      const castedGetter = getter;
      if (castedGetter.__zurg_memoized == null) {
        castedGetter.__zurg_memoized = getter();
      }
      return castedGetter.__zurg_memoized;
    }
    exports2.getMemoizedSchema = getMemoizedSchema;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/entries.js
var require_entries2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/entries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.entries = void 0;
    function entries(object) {
      return Object.entries(object);
    }
    exports2.entries = entries;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/filterObject.js
var require_filterObject2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/filterObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filterObject = void 0;
    function filterObject(obj, keysToInclude) {
      const keysToIncludeSet = new Set(keysToInclude);
      return Object.entries(obj).reduce((acc, [key, value]) => {
        if (keysToIncludeSet.has(key)) {
          acc[key] = value;
        }
        return acc;
      }, {});
    }
    exports2.filterObject = filterObject;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/isPlainObject.js
var require_isPlainObject2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/isPlainObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isPlainObject = void 0;
    function isPlainObject3(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      if (Object.getPrototypeOf(value) === null) {
        return true;
      }
      let proto = value;
      while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
      }
      return Object.getPrototypeOf(value) === proto;
    }
    exports2.isPlainObject = isPlainObject3;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/keys.js
var require_keys2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/keys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.keys = void 0;
    function keys(object) {
      return Object.keys(object);
    }
    exports2.keys = keys;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/partition.js
var require_partition2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/utils/partition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.partition = void 0;
    function partition3(items, predicate) {
      const trueItems = [], falseItems = [];
      for (const item of items) {
        if (predicate(item)) {
          trueItems.push(item);
        } else {
          falseItems.push(item);
        }
      }
      return [trueItems, falseItems];
    }
    exports2.partition = partition3;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object-like/getObjectLikeUtils.js
var require_getObjectLikeUtils2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object-like/getObjectLikeUtils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withParsedProperties = exports2.getObjectLikeUtils = void 0;
    var filterObject_1 = require_filterObject2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    var isPlainObject_1 = require_isPlainObject2();
    var schema_utils_1 = require_schema_utils2();
    function getObjectLikeUtils(schema) {
      return {
        withParsedProperties: (properties) => withParsedProperties(schema, properties)
      };
    }
    exports2.getObjectLikeUtils = getObjectLikeUtils;
    function withParsedProperties(objectLike, properties) {
      const objectSchema = {
        parse: (raw, opts) => {
          const parsedObject = objectLike.parse(raw, opts);
          if (!parsedObject.ok) {
            return parsedObject;
          }
          const additionalProperties = Object.entries(properties).reduce((processed, [key, value]) => {
            return Object.assign(Object.assign({}, processed), { [key]: typeof value === "function" ? value(parsedObject.value) : value });
          }, {});
          return {
            ok: true,
            value: Object.assign(Object.assign({}, parsedObject.value), additionalProperties)
          };
        },
        json: (parsed, opts) => {
          var _a3;
          if (!(0, isPlainObject_1.isPlainObject)(parsed)) {
            return {
              ok: false,
              errors: [
                {
                  path: (_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [],
                  message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(parsed, "object")
                }
              ]
            };
          }
          const addedPropertyKeys = new Set(Object.keys(properties));
          const parsedWithoutAddedProperties = (0, filterObject_1.filterObject)(parsed, Object.keys(parsed).filter((key) => !addedPropertyKeys.has(key)));
          return objectLike.json(parsedWithoutAddedProperties, opts);
        },
        getType: () => objectLike.getType()
      };
      return Object.assign(Object.assign(Object.assign({}, objectSchema), (0, schema_utils_1.getSchemaUtils)(objectSchema)), getObjectLikeUtils(objectSchema));
    }
    exports2.withParsedProperties = withParsedProperties;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object-like/index.js
var require_object_like2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object-like/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.withParsedProperties = exports2.getObjectLikeUtils = void 0;
    var getObjectLikeUtils_1 = require_getObjectLikeUtils2();
    Object.defineProperty(exports2, "getObjectLikeUtils", { enumerable: true, get: function() {
      return getObjectLikeUtils_1.getObjectLikeUtils;
    } });
    Object.defineProperty(exports2, "withParsedProperties", { enumerable: true, get: function() {
      return getObjectLikeUtils_1.withParsedProperties;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object/property.js
var require_property2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object/property.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isProperty = exports2.property = void 0;
    function property(rawKey, valueSchema) {
      return {
        rawKey,
        valueSchema,
        isProperty: true
      };
    }
    exports2.property = property;
    function isProperty(maybeProperty) {
      return maybeProperty.isProperty;
    }
    exports2.isProperty = isProperty;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object/object.js
var require_object3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object/object.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getObjectUtils = exports2.object = void 0;
    var Schema_1 = require_Schema2();
    var entries_1 = require_entries2();
    var filterObject_1 = require_filterObject2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    var isPlainObject_1 = require_isPlainObject2();
    var keys_1 = require_keys2();
    var maybeSkipValidation_1 = require_maybeSkipValidation2();
    var partition_1 = require_partition2();
    var object_like_1 = require_object_like2();
    var schema_utils_1 = require_schema_utils2();
    var property_1 = require_property2();
    function object(schemas) {
      const baseSchema = {
        _getRawProperties: () => Object.entries(schemas).map(([parsedKey, propertySchema]) => (0, property_1.isProperty)(propertySchema) ? propertySchema.rawKey : parsedKey),
        _getParsedProperties: () => (0, keys_1.keys)(schemas),
        parse: (raw, opts) => {
          const rawKeyToProperty = {};
          const requiredKeys = [];
          for (const [parsedKey, schemaOrObjectProperty] of (0, entries_1.entries)(schemas)) {
            const rawKey = (0, property_1.isProperty)(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;
            const valueSchema = (0, property_1.isProperty)(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
            const property = {
              rawKey,
              parsedKey,
              valueSchema
            };
            rawKeyToProperty[rawKey] = property;
            if (isSchemaRequired(valueSchema)) {
              requiredKeys.push(rawKey);
            }
          }
          return validateAndTransformObject({
            value: raw,
            requiredKeys,
            getProperty: (rawKey) => {
              const property = rawKeyToProperty[rawKey];
              if (property == null) {
                return void 0;
              }
              return {
                transformedKey: property.parsedKey,
                transform: (propertyValue) => {
                  var _a3;
                  return property.valueSchema.parse(propertyValue, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], rawKey] }));
                }
              };
            },
            unrecognizedObjectKeys: opts === null || opts === void 0 ? void 0 : opts.unrecognizedObjectKeys,
            skipValidation: opts === null || opts === void 0 ? void 0 : opts.skipValidation,
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix,
            omitUndefined: opts === null || opts === void 0 ? void 0 : opts.omitUndefined
          });
        },
        json: (parsed, opts) => {
          const requiredKeys = [];
          for (const [parsedKey, schemaOrObjectProperty] of (0, entries_1.entries)(schemas)) {
            const valueSchema = (0, property_1.isProperty)(schemaOrObjectProperty) ? schemaOrObjectProperty.valueSchema : schemaOrObjectProperty;
            if (isSchemaRequired(valueSchema)) {
              requiredKeys.push(parsedKey);
            }
          }
          return validateAndTransformObject({
            value: parsed,
            requiredKeys,
            getProperty: (parsedKey) => {
              const property = schemas[parsedKey];
              if (property == null) {
                return void 0;
              }
              if ((0, property_1.isProperty)(property)) {
                return {
                  transformedKey: property.rawKey,
                  transform: (propertyValue) => {
                    var _a3;
                    return property.valueSchema.json(propertyValue, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], parsedKey] }));
                  }
                };
              } else {
                return {
                  transformedKey: parsedKey,
                  transform: (propertyValue) => {
                    var _a3;
                    return property.json(propertyValue, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], parsedKey] }));
                  }
                };
              }
            },
            unrecognizedObjectKeys: opts === null || opts === void 0 ? void 0 : opts.unrecognizedObjectKeys,
            skipValidation: opts === null || opts === void 0 ? void 0 : opts.skipValidation,
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix,
            omitUndefined: opts === null || opts === void 0 ? void 0 : opts.omitUndefined
          });
        },
        getType: () => Schema_1.SchemaType.OBJECT
      };
      return Object.assign(Object.assign(Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
    }
    exports2.object = object;
    function validateAndTransformObject({ value, requiredKeys, getProperty, unrecognizedObjectKeys = "fail", skipValidation = false, breadcrumbsPrefix = [] }) {
      if (!(0, isPlainObject_1.isPlainObject)(value)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "object")
            }
          ]
        };
      }
      const missingRequiredKeys = new Set(requiredKeys);
      const errors2 = [];
      const transformed = {};
      for (const [preTransformedKey, preTransformedItemValue] of Object.entries(value)) {
        const property = getProperty(preTransformedKey);
        if (property != null) {
          missingRequiredKeys.delete(preTransformedKey);
          const value2 = property.transform(preTransformedItemValue);
          if (value2.ok) {
            transformed[property.transformedKey] = value2.value;
          } else {
            transformed[preTransformedKey] = preTransformedItemValue;
            errors2.push(...value2.errors);
          }
        } else {
          switch (unrecognizedObjectKeys) {
            case "fail":
              errors2.push({
                path: [...breadcrumbsPrefix, preTransformedKey],
                message: `Unexpected key "${preTransformedKey}"`
              });
              break;
            case "strip":
              break;
            case "passthrough":
              transformed[preTransformedKey] = preTransformedItemValue;
              break;
          }
        }
      }
      errors2.push(...requiredKeys.filter((key) => missingRequiredKeys.has(key)).map((key) => ({
        path: breadcrumbsPrefix,
        message: `Missing required key "${key}"`
      })));
      if (errors2.length === 0 || skipValidation) {
        return {
          ok: true,
          value: transformed
        };
      } else {
        return {
          ok: false,
          errors: errors2
        };
      }
    }
    function getObjectUtils(schema) {
      return {
        extend: (extension) => {
          const baseSchema = {
            _getParsedProperties: () => [...schema._getParsedProperties(), ...extension._getParsedProperties()],
            _getRawProperties: () => [...schema._getRawProperties(), ...extension._getRawProperties()],
            parse: (raw, opts) => {
              return validateAndTransformExtendedObject({
                extensionKeys: extension._getRawProperties(),
                value: raw,
                transformBase: (rawBase) => schema.parse(rawBase, opts),
                transformExtension: (rawExtension) => extension.parse(rawExtension, opts)
              });
            },
            json: (parsed, opts) => {
              return validateAndTransformExtendedObject({
                extensionKeys: extension._getParsedProperties(),
                value: parsed,
                transformBase: (parsedBase) => schema.json(parsedBase, opts),
                transformExtension: (parsedExtension) => extension.json(parsedExtension, opts)
              });
            },
            getType: () => Schema_1.SchemaType.OBJECT
          };
          return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
        }
      };
    }
    exports2.getObjectUtils = getObjectUtils;
    function validateAndTransformExtendedObject({ extensionKeys, value, transformBase, transformExtension }) {
      const extensionPropertiesSet = new Set(extensionKeys);
      const [extensionProperties, baseProperties] = (0, partition_1.partition)((0, keys_1.keys)(value), (key) => extensionPropertiesSet.has(key));
      const transformedBase = transformBase((0, filterObject_1.filterObject)(value, baseProperties));
      const transformedExtension = transformExtension((0, filterObject_1.filterObject)(value, extensionProperties));
      if (transformedBase.ok && transformedExtension.ok) {
        return {
          ok: true,
          value: Object.assign(Object.assign({}, transformedBase.value), transformedExtension.value)
        };
      } else {
        return {
          ok: false,
          errors: [
            ...transformedBase.ok ? [] : transformedBase.errors,
            ...transformedExtension.ok ? [] : transformedExtension.errors
          ]
        };
      }
    }
    function isSchemaRequired(schema) {
      return !isSchemaOptional(schema);
    }
    function isSchemaOptional(schema) {
      switch (schema.getType()) {
        case Schema_1.SchemaType.ANY:
        case Schema_1.SchemaType.UNKNOWN:
        case Schema_1.SchemaType.OPTIONAL:
          return true;
        default:
          return false;
      }
    }
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object/objectWithoutOptionalProperties.js
var require_objectWithoutOptionalProperties2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object/objectWithoutOptionalProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.objectWithoutOptionalProperties = void 0;
    var object_1 = require_object3();
    function objectWithoutOptionalProperties(schemas) {
      return (0, object_1.object)(schemas);
    }
    exports2.objectWithoutOptionalProperties = objectWithoutOptionalProperties;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object/index.js
var require_object4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/object/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.property = exports2.isProperty = exports2.objectWithoutOptionalProperties = exports2.object = exports2.getObjectUtils = void 0;
    var object_1 = require_object3();
    Object.defineProperty(exports2, "getObjectUtils", { enumerable: true, get: function() {
      return object_1.getObjectUtils;
    } });
    Object.defineProperty(exports2, "object", { enumerable: true, get: function() {
      return object_1.object;
    } });
    var objectWithoutOptionalProperties_1 = require_objectWithoutOptionalProperties2();
    Object.defineProperty(exports2, "objectWithoutOptionalProperties", { enumerable: true, get: function() {
      return objectWithoutOptionalProperties_1.objectWithoutOptionalProperties;
    } });
    var property_1 = require_property2();
    Object.defineProperty(exports2, "isProperty", { enumerable: true, get: function() {
      return property_1.isProperty;
    } });
    Object.defineProperty(exports2, "property", { enumerable: true, get: function() {
      return property_1.property;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/lazy/lazyObject.js
var require_lazyObject2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/lazy/lazyObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lazyObject = void 0;
    var object_1 = require_object4();
    var object_like_1 = require_object_like2();
    var schema_utils_1 = require_schema_utils2();
    var lazy_1 = require_lazy3();
    function lazyObject(getter) {
      const baseSchema = Object.assign(Object.assign({}, (0, lazy_1.constructLazyBaseSchema)(getter)), { _getRawProperties: () => (0, lazy_1.getMemoizedSchema)(getter)._getRawProperties(), _getParsedProperties: () => (0, lazy_1.getMemoizedSchema)(getter)._getParsedProperties() });
      return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), (0, object_1.getObjectUtils)(baseSchema));
    }
    exports2.lazyObject = lazyObject;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/lazy/index.js
var require_lazy4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/lazy/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.lazyObject = exports2.lazy = void 0;
    var lazy_1 = require_lazy3();
    Object.defineProperty(exports2, "lazy", { enumerable: true, get: function() {
      return lazy_1.lazy;
    } });
    var lazyObject_1 = require_lazyObject2();
    Object.defineProperty(exports2, "lazyObject", { enumerable: true, get: function() {
      return lazyObject_1.lazyObject;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/list/list.js
var require_list3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/list/list.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.list = void 0;
    var Schema_1 = require_Schema2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    var maybeSkipValidation_1 = require_maybeSkipValidation2();
    var schema_utils_1 = require_schema_utils2();
    function list(schema) {
      const baseSchema = {
        parse: (raw, opts) => validateAndTransformArray(raw, (item, index2) => {
          var _a3;
          return schema.parse(item, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `[${index2}]`] }));
        }),
        json: (parsed, opts) => validateAndTransformArray(parsed, (item, index2) => {
          var _a3;
          return schema.json(item, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `[${index2}]`] }));
        }),
        getType: () => Schema_1.SchemaType.LIST
      };
      return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.list = list;
    function validateAndTransformArray(value, transformItem) {
      if (!Array.isArray(value)) {
        return {
          ok: false,
          errors: [
            {
              message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "list"),
              path: []
            }
          ]
        };
      }
      const maybeValidItems = value.map((item, index2) => transformItem(item, index2));
      return maybeValidItems.reduce((acc, item) => {
        if (acc.ok && item.ok) {
          return {
            ok: true,
            value: [...acc.value, item.value]
          };
        }
        const errors2 = [];
        if (!acc.ok) {
          errors2.push(...acc.errors);
        }
        if (!item.ok) {
          errors2.push(...item.errors);
        }
        return {
          ok: false,
          errors: errors2
        };
      }, { ok: true, value: [] });
    }
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/list/index.js
var require_list4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/list/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.list = void 0;
    var list_1 = require_list3();
    Object.defineProperty(exports2, "list", { enumerable: true, get: function() {
      return list_1.list;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/literals/stringLiteral.js
var require_stringLiteral2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/literals/stringLiteral.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringLiteral = void 0;
    var Schema_1 = require_Schema2();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    function stringLiteral(literal) {
      const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.STRING_LITERAL, (value, { breadcrumbsPrefix = [] } = {}) => {
        if (value === literal) {
          return {
            ok: true,
            value: literal
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, `"${literal}"`)
              }
            ]
          };
        }
      });
      return schemaCreator();
    }
    exports2.stringLiteral = stringLiteral;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/literals/booleanLiteral.js
var require_booleanLiteral2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/literals/booleanLiteral.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanLiteral = void 0;
    var Schema_1 = require_Schema2();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    function booleanLiteral(literal) {
      const schemaCreator = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.BOOLEAN_LITERAL, (value, { breadcrumbsPrefix = [] } = {}) => {
        if (value === literal) {
          return {
            ok: true,
            value: literal
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: breadcrumbsPrefix,
                message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, `${literal.toString()}`)
              }
            ]
          };
        }
      });
      return schemaCreator();
    }
    exports2.booleanLiteral = booleanLiteral;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/literals/index.js
var require_literals2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/literals/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanLiteral = exports2.stringLiteral = void 0;
    var stringLiteral_1 = require_stringLiteral2();
    Object.defineProperty(exports2, "stringLiteral", { enumerable: true, get: function() {
      return stringLiteral_1.stringLiteral;
    } });
    var booleanLiteral_1 = require_booleanLiteral2();
    Object.defineProperty(exports2, "booleanLiteral", { enumerable: true, get: function() {
      return booleanLiteral_1.booleanLiteral;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/any.js
var require_any2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/any.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.any = void 0;
    var Schema_1 = require_Schema2();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator2();
    exports2.any = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.ANY, (value) => ({ ok: true, value }));
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/boolean.js
var require_boolean2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/boolean.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.boolean = void 0;
    var Schema_1 = require_Schema2();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    exports2.boolean = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.BOOLEAN, (value, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof value === "boolean") {
        return {
          ok: true,
          value
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "boolean")
            }
          ]
        };
      }
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/number.js
var require_number2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/number.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.number = void 0;
    var Schema_1 = require_Schema2();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    exports2.number = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.NUMBER, (value, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof value === "number") {
        return {
          ok: true,
          value
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "number")
            }
          ]
        };
      }
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/string.js
var require_string2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/string.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.string = void 0;
    var Schema_1 = require_Schema2();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    exports2.string = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.STRING, (value, { breadcrumbsPrefix = [] } = {}) => {
      if (typeof value === "string") {
        return {
          ok: true,
          value
        };
      } else {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "string")
            }
          ]
        };
      }
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/unknown.js
var require_unknown2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/unknown.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unknown = void 0;
    var Schema_1 = require_Schema2();
    var createIdentitySchemaCreator_1 = require_createIdentitySchemaCreator2();
    exports2.unknown = (0, createIdentitySchemaCreator_1.createIdentitySchemaCreator)(Schema_1.SchemaType.UNKNOWN, (value) => ({ ok: true, value }));
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/index.js
var require_primitives2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/primitives/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.unknown = exports2.string = exports2.number = exports2.boolean = exports2.any = void 0;
    var any_1 = require_any2();
    Object.defineProperty(exports2, "any", { enumerable: true, get: function() {
      return any_1.any;
    } });
    var boolean_1 = require_boolean2();
    Object.defineProperty(exports2, "boolean", { enumerable: true, get: function() {
      return boolean_1.boolean;
    } });
    var number_1 = require_number2();
    Object.defineProperty(exports2, "number", { enumerable: true, get: function() {
      return number_1.number;
    } });
    var string_1 = require_string2();
    Object.defineProperty(exports2, "string", { enumerable: true, get: function() {
      return string_1.string;
    } });
    var unknown_1 = require_unknown2();
    Object.defineProperty(exports2, "unknown", { enumerable: true, get: function() {
      return unknown_1.unknown;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/record/record.js
var require_record3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/record/record.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.record = void 0;
    var Schema_1 = require_Schema2();
    var entries_1 = require_entries2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    var isPlainObject_1 = require_isPlainObject2();
    var maybeSkipValidation_1 = require_maybeSkipValidation2();
    var schema_utils_1 = require_schema_utils2();
    function record(keySchema, valueSchema) {
      const baseSchema = {
        parse: (raw, opts) => {
          return validateAndTransformRecord({
            value: raw,
            isKeyNumeric: keySchema.getType() === Schema_1.SchemaType.NUMBER,
            transformKey: (key) => {
              var _a3;
              return keySchema.parse(key, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `${key} (key)`] }));
            },
            transformValue: (value, key) => {
              var _a3;
              return valueSchema.parse(value, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `${key}`] }));
            },
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix
          });
        },
        json: (parsed, opts) => {
          return validateAndTransformRecord({
            value: parsed,
            isKeyNumeric: keySchema.getType() === Schema_1.SchemaType.NUMBER,
            transformKey: (key) => {
              var _a3;
              return keySchema.json(key, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `${key} (key)`] }));
            },
            transformValue: (value, key) => {
              var _a3;
              return valueSchema.json(value, Object.assign(Object.assign({}, opts), { breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], `${key}`] }));
            },
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix
          });
        },
        getType: () => Schema_1.SchemaType.RECORD
      };
      return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.record = record;
    function validateAndTransformRecord({ value, isKeyNumeric, transformKey, transformValue, breadcrumbsPrefix = [] }) {
      if (!(0, isPlainObject_1.isPlainObject)(value)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "object")
            }
          ]
        };
      }
      return (0, entries_1.entries)(value).reduce((accPromise, [stringKey, value2]) => {
        if (value2 == null) {
          return accPromise;
        }
        const acc = accPromise;
        let key = stringKey;
        if (isKeyNumeric) {
          const numberKey = stringKey.length > 0 ? Number(stringKey) : NaN;
          if (!isNaN(numberKey)) {
            key = numberKey;
          }
        }
        const transformedKey = transformKey(key);
        const transformedValue = transformValue(value2, key);
        if (acc.ok && transformedKey.ok && transformedValue.ok) {
          return {
            ok: true,
            value: Object.assign(Object.assign({}, acc.value), { [transformedKey.value]: transformedValue.value })
          };
        }
        const errors2 = [];
        if (!acc.ok) {
          errors2.push(...acc.errors);
        }
        if (!transformedKey.ok) {
          errors2.push(...transformedKey.errors);
        }
        if (!transformedValue.ok) {
          errors2.push(...transformedValue.errors);
        }
        return {
          ok: false,
          errors: errors2
        };
      }, { ok: true, value: {} });
    }
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/record/index.js
var require_record4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/record/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.record = void 0;
    var record_1 = require_record3();
    Object.defineProperty(exports2, "record", { enumerable: true, get: function() {
      return record_1.record;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/set/set.js
var require_set3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/set/set.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.set = void 0;
    var Schema_1 = require_Schema2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    var maybeSkipValidation_1 = require_maybeSkipValidation2();
    var list_1 = require_list4();
    var schema_utils_1 = require_schema_utils2();
    function set(schema) {
      const listSchema = (0, list_1.list)(schema);
      const baseSchema = {
        parse: (raw, opts) => {
          const parsedList = listSchema.parse(raw, opts);
          if (parsedList.ok) {
            return {
              ok: true,
              value: new Set(parsedList.value)
            };
          } else {
            return parsedList;
          }
        },
        json: (parsed, opts) => {
          var _a3;
          if (!(parsed instanceof Set)) {
            return {
              ok: false,
              errors: [
                {
                  path: (_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [],
                  message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(parsed, "Set")
                }
              ]
            };
          }
          const jsonList = listSchema.json([...parsed], opts);
          return jsonList;
        },
        getType: () => Schema_1.SchemaType.SET
      };
      return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.set = set;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/set/index.js
var require_set4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/set/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.set = void 0;
    var set_1 = require_set3();
    Object.defineProperty(exports2, "set", { enumerable: true, get: function() {
      return set_1.set;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.js
var require_undiscriminatedUnion2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.undiscriminatedUnion = void 0;
    var Schema_1 = require_Schema2();
    var maybeSkipValidation_1 = require_maybeSkipValidation2();
    var schema_utils_1 = require_schema_utils2();
    function undiscriminatedUnion(schemas) {
      const baseSchema = {
        parse: (raw, opts) => {
          return validateAndTransformUndiscriminatedUnion((schema, opts2) => schema.parse(raw, opts2), schemas, opts);
        },
        json: (parsed, opts) => {
          return validateAndTransformUndiscriminatedUnion((schema, opts2) => schema.json(parsed, opts2), schemas, opts);
        },
        getType: () => Schema_1.SchemaType.UNDISCRIMINATED_UNION
      };
      return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
    }
    exports2.undiscriminatedUnion = undiscriminatedUnion;
    function validateAndTransformUndiscriminatedUnion(transform, schemas, opts) {
      const errors2 = [];
      for (const [index2, schema] of schemas.entries()) {
        const transformed = transform(schema, Object.assign(Object.assign({}, opts), { skipValidation: false }));
        if (transformed.ok) {
          return transformed;
        } else {
          for (const error2 of transformed.errors) {
            errors2.push({
              path: error2.path,
              message: `[Variant ${index2}] ${error2.message}`
            });
          }
        }
      }
      return {
        ok: false,
        errors: errors2
      };
    }
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/undiscriminated-union/index.js
var require_undiscriminated_union2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/undiscriminated-union/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.undiscriminatedUnion = void 0;
    var undiscriminatedUnion_1 = require_undiscriminatedUnion2();
    Object.defineProperty(exports2, "undiscriminatedUnion", { enumerable: true, get: function() {
      return undiscriminatedUnion_1.undiscriminatedUnion;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/union/discriminant.js
var require_discriminant2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/union/discriminant.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.discriminant = void 0;
    function discriminant(parsedDiscriminant, rawDiscriminant) {
      return {
        parsedDiscriminant,
        rawDiscriminant
      };
    }
    exports2.discriminant = discriminant;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/union/union.js
var require_union3 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/union/union.js"(exports2) {
    "use strict";
    var __rest2 = exports2 && exports2.__rest || function(s6, e6) {
      var t6 = {};
      for (var p6 in s6)
        if (Object.prototype.hasOwnProperty.call(s6, p6) && e6.indexOf(p6) < 0)
          t6[p6] = s6[p6];
      if (s6 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i6 = 0, p6 = Object.getOwnPropertySymbols(s6); i6 < p6.length; i6++) {
          if (e6.indexOf(p6[i6]) < 0 && Object.prototype.propertyIsEnumerable.call(s6, p6[i6]))
            t6[p6[i6]] = s6[p6[i6]];
        }
      return t6;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.union = void 0;
    var Schema_1 = require_Schema2();
    var getErrorMessageForIncorrectType_1 = require_getErrorMessageForIncorrectType2();
    var isPlainObject_1 = require_isPlainObject2();
    var keys_1 = require_keys2();
    var maybeSkipValidation_1 = require_maybeSkipValidation2();
    var enum_1 = require_enum4();
    var object_like_1 = require_object_like2();
    var schema_utils_1 = require_schema_utils2();
    function union(discriminant, union2) {
      const rawDiscriminant = typeof discriminant === "string" ? discriminant : discriminant.rawDiscriminant;
      const parsedDiscriminant = typeof discriminant === "string" ? discriminant : discriminant.parsedDiscriminant;
      const discriminantValueSchema = (0, enum_1.enum_)((0, keys_1.keys)(union2));
      const baseSchema = {
        parse: (raw, opts) => {
          return transformAndValidateUnion({
            value: raw,
            discriminant: rawDiscriminant,
            transformedDiscriminant: parsedDiscriminant,
            transformDiscriminantValue: (discriminantValue) => {
              var _a3;
              return discriminantValueSchema.parse(discriminantValue, {
                allowUnrecognizedEnumValues: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
                breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], rawDiscriminant]
              });
            },
            getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
            allowUnrecognizedUnionMembers: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
            transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.parse(additionalProperties, opts),
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix
          });
        },
        json: (parsed, opts) => {
          return transformAndValidateUnion({
            value: parsed,
            discriminant: parsedDiscriminant,
            transformedDiscriminant: rawDiscriminant,
            transformDiscriminantValue: (discriminantValue) => {
              var _a3;
              return discriminantValueSchema.json(discriminantValue, {
                allowUnrecognizedEnumValues: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
                breadcrumbsPrefix: [...(_a3 = opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix) !== null && _a3 !== void 0 ? _a3 : [], parsedDiscriminant]
              });
            },
            getAdditionalPropertiesSchema: (discriminantValue) => union2[discriminantValue],
            allowUnrecognizedUnionMembers: opts === null || opts === void 0 ? void 0 : opts.allowUnrecognizedUnionMembers,
            transformAdditionalProperties: (additionalProperties, additionalPropertiesSchema) => additionalPropertiesSchema.json(additionalProperties, opts),
            breadcrumbsPrefix: opts === null || opts === void 0 ? void 0 : opts.breadcrumbsPrefix
          });
        },
        getType: () => Schema_1.SchemaType.UNION
      };
      return Object.assign(Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema));
    }
    exports2.union = union;
    function transformAndValidateUnion({ value, discriminant, transformedDiscriminant, transformDiscriminantValue, getAdditionalPropertiesSchema, allowUnrecognizedUnionMembers = false, transformAdditionalProperties, breadcrumbsPrefix = [] }) {
      if (!(0, isPlainObject_1.isPlainObject)(value)) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: (0, getErrorMessageForIncorrectType_1.getErrorMessageForIncorrectType)(value, "object")
            }
          ]
        };
      }
      const _a3 = value, _b = discriminant, discriminantValue = _a3[_b], additionalProperties = __rest2(_a3, [typeof _b === "symbol" ? _b : _b + ""]);
      if (discriminantValue == null) {
        return {
          ok: false,
          errors: [
            {
              path: breadcrumbsPrefix,
              message: `Missing discriminant ("${discriminant}")`
            }
          ]
        };
      }
      const transformedDiscriminantValue = transformDiscriminantValue(discriminantValue);
      if (!transformedDiscriminantValue.ok) {
        return {
          ok: false,
          errors: transformedDiscriminantValue.errors
        };
      }
      const additionalPropertiesSchema = getAdditionalPropertiesSchema(transformedDiscriminantValue.value);
      if (additionalPropertiesSchema == null) {
        if (allowUnrecognizedUnionMembers) {
          return {
            ok: true,
            value: Object.assign({ [transformedDiscriminant]: transformedDiscriminantValue.value }, additionalProperties)
          };
        } else {
          return {
            ok: false,
            errors: [
              {
                path: [...breadcrumbsPrefix, discriminant],
                message: "Unexpected discriminant value"
              }
            ]
          };
        }
      }
      const transformedAdditionalProperties = transformAdditionalProperties(additionalProperties, additionalPropertiesSchema);
      if (!transformedAdditionalProperties.ok) {
        return transformedAdditionalProperties;
      }
      return {
        ok: true,
        value: Object.assign({ [transformedDiscriminant]: discriminantValue }, transformedAdditionalProperties.value)
      };
    }
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/union/index.js
var require_union4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/union/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.union = exports2.discriminant = void 0;
    var discriminant_1 = require_discriminant2();
    Object.defineProperty(exports2, "discriminant", { enumerable: true, get: function() {
      return discriminant_1.discriminant;
    } });
    var union_1 = require_union3();
    Object.defineProperty(exports2, "union", { enumerable: true, get: function() {
      return union_1.union;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/index.js
var require_builders2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/builders/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_date4(), exports2);
    __exportStar2(require_enum4(), exports2);
    __exportStar2(require_lazy4(), exports2);
    __exportStar2(require_list4(), exports2);
    __exportStar2(require_literals2(), exports2);
    __exportStar2(require_object4(), exports2);
    __exportStar2(require_object_like2(), exports2);
    __exportStar2(require_primitives2(), exports2);
    __exportStar2(require_record4(), exports2);
    __exportStar2(require_schema_utils2(), exports2);
    __exportStar2(require_set4(), exports2);
    __exportStar2(require_undiscriminated_union2(), exports2);
    __exportStar2(require_union4(), exports2);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/index.js
var require_schemas2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/schemas/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_builders2(), exports2);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/index.js
var require_core2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/core/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serialization = void 0;
    __exportStar2(require_fetcher2(), exports2);
    __exportStar2(require_auth2(), exports2);
    __exportStar2(require_runtime4(), exports2);
    exports2.serialization = __importStar2(require_schemas2());
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/EmbedRequestInput.js
var require_EmbedRequestInput2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/EmbedRequestInput.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedRequestInput = void 0;
    var core = __importStar2(require_core2());
    exports2.EmbedRequestInput = core.serialization.undiscriminatedUnion([
      core.serialization.string(),
      core.serialization.list(core.serialization.string())
    ]);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/EmbedRequestInputType.js
var require_EmbedRequestInputType2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/EmbedRequestInputType.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedRequestInputType = void 0;
    var core = __importStar2(require_core2());
    exports2.EmbedRequestInputType = core.serialization.enum_(["query", "document"]);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/EmbedResponseDataItem.js
var require_EmbedResponseDataItem2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/EmbedResponseDataItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedResponseDataItem = void 0;
    var core = __importStar2(require_core2());
    exports2.EmbedResponseDataItem = core.serialization.object({
      object: core.serialization.string().optional(),
      embedding: core.serialization.list(core.serialization.number()).optional(),
      index: core.serialization.number().optional()
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/EmbedResponseUsage.js
var require_EmbedResponseUsage2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/EmbedResponseUsage.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedResponseUsage = void 0;
    var core = __importStar2(require_core2());
    exports2.EmbedResponseUsage = core.serialization.object({
      totalTokens: core.serialization.property("total_tokens", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/EmbedResponse.js
var require_EmbedResponse4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/EmbedResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedResponse = void 0;
    var core = __importStar2(require_core2());
    var EmbedResponseDataItem_1 = require_EmbedResponseDataItem2();
    var EmbedResponseUsage_1 = require_EmbedResponseUsage2();
    exports2.EmbedResponse = core.serialization.object({
      object: core.serialization.string().optional(),
      data: core.serialization.list(EmbedResponseDataItem_1.EmbedResponseDataItem).optional(),
      model: core.serialization.string().optional(),
      usage: EmbedResponseUsage_1.EmbedResponseUsage.optional()
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/RerankResponseDataItem.js
var require_RerankResponseDataItem2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/RerankResponseDataItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankResponseDataItem = void 0;
    var core = __importStar2(require_core2());
    exports2.RerankResponseDataItem = core.serialization.object({
      index: core.serialization.number().optional(),
      relevanceScore: core.serialization.property("relevance_score", core.serialization.number().optional()),
      document: core.serialization.string().optional()
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/RerankResponseUsage.js
var require_RerankResponseUsage2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/RerankResponseUsage.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankResponseUsage = void 0;
    var core = __importStar2(require_core2());
    exports2.RerankResponseUsage = core.serialization.object({
      totalTokens: core.serialization.property("total_tokens", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/RerankResponse.js
var require_RerankResponse4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/RerankResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankResponse = void 0;
    var core = __importStar2(require_core2());
    var RerankResponseDataItem_1 = require_RerankResponseDataItem2();
    var RerankResponseUsage_1 = require_RerankResponseUsage2();
    exports2.RerankResponse = core.serialization.object({
      object: core.serialization.string().optional(),
      data: core.serialization.list(RerankResponseDataItem_1.RerankResponseDataItem).optional(),
      model: core.serialization.string().optional(),
      usage: RerankResponseUsage_1.RerankResponseUsage.optional()
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedRequestInputsItemContentItem.js
var require_MultimodalEmbedRequestInputsItemContentItem2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedRequestInputsItemContentItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultimodalEmbedRequestInputsItemContentItem = void 0;
    var core = __importStar2(require_core2());
    exports2.MultimodalEmbedRequestInputsItemContentItem = core.serialization.object({
      type: core.serialization.string(),
      text: core.serialization.string().optional(),
      imageBase64: core.serialization.property("image_base64", core.serialization.string().optional()),
      imageUrl: core.serialization.property("image_url", core.serialization.string().optional())
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedRequestInputsItem.js
var require_MultimodalEmbedRequestInputsItem2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedRequestInputsItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultimodalEmbedRequestInputsItem = void 0;
    var core = __importStar2(require_core2());
    var MultimodalEmbedRequestInputsItemContentItem_1 = require_MultimodalEmbedRequestInputsItemContentItem2();
    exports2.MultimodalEmbedRequestInputsItem = core.serialization.object({
      content: core.serialization.list(MultimodalEmbedRequestInputsItemContentItem_1.MultimodalEmbedRequestInputsItemContentItem).optional()
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedRequestInputType.js
var require_MultimodalEmbedRequestInputType2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedRequestInputType.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultimodalEmbedRequestInputType = void 0;
    var core = __importStar2(require_core2());
    exports2.MultimodalEmbedRequestInputType = core.serialization.enum_(["query", "document"]);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedResponseDataItem.js
var require_MultimodalEmbedResponseDataItem2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedResponseDataItem.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultimodalEmbedResponseDataItem = void 0;
    var core = __importStar2(require_core2());
    exports2.MultimodalEmbedResponseDataItem = core.serialization.object({
      object: core.serialization.string().optional(),
      embedding: core.serialization.list(core.serialization.number()).optional(),
      index: core.serialization.number().optional()
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedResponseUsage.js
var require_MultimodalEmbedResponseUsage2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedResponseUsage.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultimodalEmbedResponseUsage = void 0;
    var core = __importStar2(require_core2());
    exports2.MultimodalEmbedResponseUsage = core.serialization.object({
      totalTokens: core.serialization.property("total_tokens", core.serialization.number().optional())
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedResponse.js
var require_MultimodalEmbedResponse2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/MultimodalEmbedResponse.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultimodalEmbedResponse = void 0;
    var core = __importStar2(require_core2());
    var MultimodalEmbedResponseDataItem_1 = require_MultimodalEmbedResponseDataItem2();
    var MultimodalEmbedResponseUsage_1 = require_MultimodalEmbedResponseUsage2();
    exports2.MultimodalEmbedResponse = core.serialization.object({
      object: core.serialization.string().optional(),
      data: core.serialization.list(MultimodalEmbedResponseDataItem_1.MultimodalEmbedResponseDataItem).optional(),
      model: core.serialization.string().optional(),
      usage: MultimodalEmbedResponseUsage_1.MultimodalEmbedResponseUsage.optional()
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/index.js
var require_types10 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/types/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_EmbedRequestInput2(), exports2);
    __exportStar2(require_EmbedRequestInputType2(), exports2);
    __exportStar2(require_EmbedResponseDataItem2(), exports2);
    __exportStar2(require_EmbedResponseUsage2(), exports2);
    __exportStar2(require_EmbedResponse4(), exports2);
    __exportStar2(require_RerankResponseDataItem2(), exports2);
    __exportStar2(require_RerankResponseUsage2(), exports2);
    __exportStar2(require_RerankResponse4(), exports2);
    __exportStar2(require_MultimodalEmbedRequestInputsItemContentItem2(), exports2);
    __exportStar2(require_MultimodalEmbedRequestInputsItem2(), exports2);
    __exportStar2(require_MultimodalEmbedRequestInputType2(), exports2);
    __exportStar2(require_MultimodalEmbedResponseDataItem2(), exports2);
    __exportStar2(require_MultimodalEmbedResponseUsage2(), exports2);
    __exportStar2(require_MultimodalEmbedResponse2(), exports2);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/client/requests/EmbedRequest.js
var require_EmbedRequest2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/client/requests/EmbedRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EmbedRequest = void 0;
    var core = __importStar2(require_core2());
    var EmbedRequestInput_1 = require_EmbedRequestInput2();
    var EmbedRequestInputType_1 = require_EmbedRequestInputType2();
    exports2.EmbedRequest = core.serialization.object({
      input: EmbedRequestInput_1.EmbedRequestInput,
      model: core.serialization.string(),
      inputType: core.serialization.property("input_type", EmbedRequestInputType_1.EmbedRequestInputType.optional()),
      truncation: core.serialization.boolean().optional(),
      encodingFormat: core.serialization.property("encoding_format", core.serialization.stringLiteral("base64").optional())
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/client/requests/RerankRequest.js
var require_RerankRequest2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/client/requests/RerankRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RerankRequest = void 0;
    var core = __importStar2(require_core2());
    exports2.RerankRequest = core.serialization.object({
      query: core.serialization.string(),
      documents: core.serialization.list(core.serialization.string()),
      model: core.serialization.string(),
      topK: core.serialization.property("top_k", core.serialization.number().optional()),
      returnDocuments: core.serialization.property("return_documents", core.serialization.boolean().optional()),
      truncation: core.serialization.boolean().optional()
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/client/requests/MultimodalEmbedRequest.js
var require_MultimodalEmbedRequest = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/client/requests/MultimodalEmbedRequest.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultimodalEmbedRequest = void 0;
    var core = __importStar2(require_core2());
    var MultimodalEmbedRequestInputsItem_1 = require_MultimodalEmbedRequestInputsItem2();
    var MultimodalEmbedRequestInputType_1 = require_MultimodalEmbedRequestInputType2();
    exports2.MultimodalEmbedRequest = core.serialization.object({
      inputs: core.serialization.list(MultimodalEmbedRequestInputsItem_1.MultimodalEmbedRequestInputsItem),
      model: core.serialization.string(),
      inputType: core.serialization.property("input_type", MultimodalEmbedRequestInputType_1.MultimodalEmbedRequestInputType.optional()),
      truncation: core.serialization.boolean().optional(),
      encodingFormat: core.serialization.property("encoding_format", core.serialization.stringLiteral("base64").optional())
    });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/client/requests/index.js
var require_requests12 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/client/requests/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultimodalEmbedRequest = exports2.RerankRequest = exports2.EmbedRequest = void 0;
    var EmbedRequest_1 = require_EmbedRequest2();
    Object.defineProperty(exports2, "EmbedRequest", { enumerable: true, get: function() {
      return EmbedRequest_1.EmbedRequest;
    } });
    var RerankRequest_1 = require_RerankRequest2();
    Object.defineProperty(exports2, "RerankRequest", { enumerable: true, get: function() {
      return RerankRequest_1.RerankRequest;
    } });
    var MultimodalEmbedRequest_1 = require_MultimodalEmbedRequest();
    Object.defineProperty(exports2, "MultimodalEmbedRequest", { enumerable: true, get: function() {
      return MultimodalEmbedRequest_1.MultimodalEmbedRequest;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/client/index.js
var require_client13 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/client/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_requests12(), exports2);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/index.js
var require_serialization2 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/serialization/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __exportStar2 = exports2 && exports2.__exportStar || function(m6, exports3) {
      for (var p6 in m6)
        if (p6 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p6))
          __createBinding2(exports3, m6, p6);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar2(require_types10(), exports2);
    __exportStar2(require_client13(), exports2);
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/errors/VoyageAIError.js
var require_VoyageAIError = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/errors/VoyageAIError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VoyageAIError = void 0;
    var VoyageAIError = class _VoyageAIError extends Error {
      constructor({ message, statusCode, body }) {
        super(buildMessage({ message, statusCode, body }));
        Object.setPrototypeOf(this, _VoyageAIError.prototype);
        if (statusCode != null) {
          this.statusCode = statusCode;
        }
        if (body !== void 0) {
          this.body = body;
        }
      }
    };
    exports2.VoyageAIError = VoyageAIError;
    function buildMessage({ message, statusCode, body }) {
      let lines = [];
      if (message != null) {
        lines.push(message);
      }
      if (statusCode != null) {
        lines.push(`Status code: ${statusCode.toString()}`);
      }
      if (body != null) {
        lines.push(`Body: ${JSON.stringify(body, void 0, 2)}`);
      }
      return lines.join("\n");
    }
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/errors/VoyageAITimeoutError.js
var require_VoyageAITimeoutError = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/errors/VoyageAITimeoutError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VoyageAITimeoutError = void 0;
    var VoyageAITimeoutError = class _VoyageAITimeoutError extends Error {
      constructor() {
        super("Timeout");
        Object.setPrototypeOf(this, _VoyageAITimeoutError.prototype);
      }
    };
    exports2.VoyageAITimeoutError = VoyageAITimeoutError;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/errors/index.js
var require_errors4 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/errors/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VoyageAITimeoutError = exports2.VoyageAIError = void 0;
    var VoyageAIError_1 = require_VoyageAIError();
    Object.defineProperty(exports2, "VoyageAIError", { enumerable: true, get: function() {
      return VoyageAIError_1.VoyageAIError;
    } });
    var VoyageAITimeoutError_1 = require_VoyageAITimeoutError();
    Object.defineProperty(exports2, "VoyageAITimeoutError", { enumerable: true, get: function() {
      return VoyageAITimeoutError_1.VoyageAITimeoutError;
    } });
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/Client.js
var require_Client7 = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/Client.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter2 = exports2 && exports2.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve2, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e6) {
            reject(e6);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e6) {
            reject(e6);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VoyageAIClient = void 0;
    var environments = __importStar2(require_environments2());
    var core = __importStar2(require_core2());
    var serializers = __importStar2(require_serialization2());
    var url_join_1 = __importDefault2(require_url_join());
    var errors2 = __importStar2(require_errors4());
    var VoyageAIClient = class {
      constructor(_options = {}) {
        this._options = _options;
      }
      /**
       * Voyage embedding endpoint receives as input a string (or a list of strings) and other arguments such as the preferred model name, and returns a response containing a list of embeddings.
       *
       * @param {VoyageAI.EmbedRequest} request
       * @param {VoyageAIClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @example
       *     await client.embed({
       *         input: "input",
       *         model: "model"
       *     })
       */
      embed(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.VoyageAIEnvironment.Default, "embeddings"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "voyageai",
              "X-Fern-SDK-Version": "0.0.3-1",
              "User-Agent": "voyageai/0.0.3-1",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.EmbedRequest.jsonOrThrow(request2, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return serializers.EmbedResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            throw new errors2.VoyageAIError({
              statusCode: _response.error.statusCode,
              body: _response.error.body
            });
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.VoyageAIError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.VoyageAITimeoutError();
            case "unknown":
              throw new errors2.VoyageAIError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * Voyage reranker endpoint receives as input a query, a list of documents, and other arguments such as the model name, and returns a response containing the reranking results.
       *
       * @param {VoyageAI.RerankRequest} request
       * @param {VoyageAIClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @example
       *     await client.rerank({
       *         query: "query",
       *         documents: ["documents"],
       *         model: "model"
       *     })
       */
      rerank(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.VoyageAIEnvironment.Default, "rerank"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "voyageai",
              "X-Fern-SDK-Version": "0.0.3-1",
              "User-Agent": "voyageai/0.0.3-1",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.RerankRequest.jsonOrThrow(request2, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return serializers.RerankResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            throw new errors2.VoyageAIError({
              statusCode: _response.error.statusCode,
              body: _response.error.body
            });
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.VoyageAIError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.VoyageAITimeoutError();
            case "unknown":
              throw new errors2.VoyageAIError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      /**
       * The Voyage multimodal embedding endpoint returns vector representations for a given list of multimodal inputs consisting of text, images, or an interleaving of both modalities.
       *
       * @param {VoyageAI.MultimodalEmbedRequest} request
       * @param {VoyageAIClient.RequestOptions} requestOptions - Request-specific configuration.
       *
       * @example
       *     await client.multimodalEmbed({
       *         inputs: [{}],
       *         model: "model"
       *     })
       */
      multimodalEmbed(request2, requestOptions) {
        var _a3, _b;
        return __awaiter2(this, void 0, void 0, function* () {
          const _response = yield ((_a3 = this._options.fetcher) !== null && _a3 !== void 0 ? _a3 : core.fetcher)({
            url: (0, url_join_1.default)((_b = yield core.Supplier.get(this._options.environment)) !== null && _b !== void 0 ? _b : environments.VoyageAIEnvironment.Default, "multimodalembeddings"),
            method: "POST",
            headers: {
              Authorization: yield this._getAuthorizationHeader(),
              "X-Fern-Language": "JavaScript",
              "X-Fern-SDK-Name": "voyageai",
              "X-Fern-SDK-Version": "0.0.3-1",
              "User-Agent": "voyageai/0.0.3-1",
              "X-Fern-Runtime": core.RUNTIME.type,
              "X-Fern-Runtime-Version": core.RUNTIME.version
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.MultimodalEmbedRequest.jsonOrThrow(request2, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1e3 : 6e4,
            maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
            abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal
          });
          if (_response.ok) {
            return serializers.MultimodalEmbedResponse.parseOrThrow(_response.body, {
              unrecognizedObjectKeys: "passthrough",
              allowUnrecognizedUnionMembers: true,
              allowUnrecognizedEnumValues: true,
              skipValidation: true,
              breadcrumbsPrefix: ["response"]
            });
          }
          if (_response.error.reason === "status-code") {
            throw new errors2.VoyageAIError({
              statusCode: _response.error.statusCode,
              body: _response.error.body
            });
          }
          switch (_response.error.reason) {
            case "non-json":
              throw new errors2.VoyageAIError({
                statusCode: _response.error.statusCode,
                body: _response.error.rawBody
              });
            case "timeout":
              throw new errors2.VoyageAITimeoutError();
            case "unknown":
              throw new errors2.VoyageAIError({
                message: _response.error.errorMessage
              });
          }
        });
      }
      _getAuthorizationHeader() {
        var _a3;
        return __awaiter2(this, void 0, void 0, function* () {
          const bearer = (_a3 = yield core.Supplier.get(this._options.apiKey)) !== null && _a3 !== void 0 ? _a3 : process === null || process === void 0 ? void 0 : process.env["VOYAGE_API_KEY"];
          if (bearer == null) {
            throw new errors2.VoyageAIError({
              message: "Please specify VOYAGE_API_KEY when instantiating the client."
            });
          }
          return `Bearer ${bearer}`;
        });
      }
    };
    exports2.VoyageAIClient = VoyageAIClient;
  }
});

// ../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/index.js
var require_voyageai = __commonJS({
  "../../node_modules/.pnpm/voyageai@0.0.3-1/node_modules/voyageai/index.js"(exports2) {
    "use strict";
    var __createBinding2 = exports2 && exports2.__createBinding || (Object.create ? function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      var desc = Object.getOwnPropertyDescriptor(m6, k6);
      if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m6[k6];
        } };
      }
      Object.defineProperty(o6, k22, desc);
    } : function(o6, m6, k6, k22) {
      if (k22 === void 0)
        k22 = k6;
      o6[k22] = m6[k6];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o6, v7) {
      Object.defineProperty(o6, "default", { enumerable: true, value: v7 });
    } : function(o6, v7) {
      o6["default"] = v7;
    });
    var __importStar2 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k6 in mod)
          if (k6 !== "default" && Object.prototype.hasOwnProperty.call(mod, k6))
            __createBinding2(result, mod, k6);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.VoyageAITimeoutError = exports2.VoyageAIError = exports2.VoyageAIEnvironment = exports2.VoyageAIClient = exports2.VoyageAI = void 0;
    exports2.VoyageAI = __importStar2(require_api2());
    var Client_1 = require_Client7();
    Object.defineProperty(exports2, "VoyageAIClient", { enumerable: true, get: function() {
      return Client_1.VoyageAIClient;
    } });
    var environments_1 = require_environments2();
    Object.defineProperty(exports2, "VoyageAIEnvironment", { enumerable: true, get: function() {
      return environments_1.VoyageAIEnvironment;
    } });
    var errors_1 = require_errors4();
    Object.defineProperty(exports2, "VoyageAIError", { enumerable: true, get: function() {
      return errors_1.VoyageAIError;
    } });
    Object.defineProperty(exports2, "VoyageAITimeoutError", { enumerable: true, get: function() {
      return errors_1.VoyageAITimeoutError;
    } });
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AdminClient: () => AdminClient,
  ChromaClient: () => ChromaClient,
  ChromaClientError: () => ChromaClientError,
  ChromaConnectionError: () => ChromaConnectionError,
  ChromaError: () => ChromaError,
  ChromaForbiddenError: () => ChromaForbiddenError,
  ChromaNotFoundError: () => ChromaNotFoundError,
  ChromaServerError: () => ChromaServerError,
  ChromaUnauthorizedError: () => ChromaUnauthorizedError,
  ChromaUniqueError: () => ChromaUniqueError,
  ChromaValueError: () => ChromaValueError,
  CloudClient: () => CloudClient,
  CohereEmbeddingFunction: () => CohereEmbeddingFunction,
  Collection: () => Collection,
  DefaultEmbeddingFunction: () => DefaultEmbeddingFunction,
  GoogleGenerativeAiEmbeddingFunction: () => GoogleGenerativeAiEmbeddingFunction,
  HuggingFaceEmbeddingServerFunction: () => HuggingFaceEmbeddingServerFunction,
  IncludeEnum: () => IncludeEnum,
  InvalidArgumentError: () => InvalidArgumentError,
  InvalidCollectionError: () => InvalidCollectionError,
  JinaEmbeddingFunction: () => JinaEmbeddingFunction,
  OllamaEmbeddingFunction: () => OllamaEmbeddingFunction,
  OpenAIEmbeddingFunction: () => OpenAIEmbeddingFunction,
  TransformersEmbeddingFunction: () => TransformersEmbeddingFunction,
  VoyageAIEmbeddingFunction: () => VoyageAIEmbeddingFunction,
  createErrorByType: () => createErrorByType
});
module.exports = __toCommonJS(src_exports);

// ../chromadb-core/src/generated/runtime.ts
var import_isomorphic_fetch = __toESM(require_fetch_npm_node(), 1);
var defaultFetch = fetch;
var BASE_PATH = "";
var BaseAPI = class {
  constructor(configuration, basePath = BASE_PATH, fetch5 = defaultFetch) {
    this.basePath = basePath;
    this.fetch = fetch5;
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
};
var RequiredError = class _RequiredError extends Error {
  constructor(field, msg) {
    super(msg);
    this.field = field;
    Object.setPrototypeOf(this, _RequiredError.prototype);
    this.name = "RequiredError";
  }
};

// ../chromadb-core/src/generated/api.ts
var ApiApiFetchParamCreator = function(configuration) {
  return {
    /**
     * @summary Add
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {Api.AddRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    add(tenant, databaseName, collectionId, request2, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling add.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling add.");
      }
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling add.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling add.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/add`.replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName))).replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Add V1
     * @param {string} collectionId
     * @param {Api.AddV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    addV1(collectionId, request2, options = {}) {
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling addV1.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling addV1.");
      }
      let localVarPath = `/api/v1/collections/{collection_id}/add`.replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Delete
     * @param {string} collectionId
     * @param {string} tenant
     * @param {string} databaseName
     * @param {Api.ADeleteRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    aDelete(collectionId, tenant, databaseName, request2, options = {}) {
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling aDelete.");
      }
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling aDelete.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling aDelete.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling aDelete.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/delete`.replace("{collection_id}", encodeURIComponent(String(collectionId))).replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get
     * @param {string} collectionId
     * @param {string} tenant
     * @param {string} databaseName
     * @param {Api.AGetRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    aGet(collectionId, tenant, databaseName, request2, options = {}) {
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling aGet.");
      }
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling aGet.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling aGet.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling aGet.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/get`.replace("{collection_id}", encodeURIComponent(String(collectionId))).replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Count
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    count(tenant, databaseName, collectionId, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling count.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling count.");
      }
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling count.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/count`.replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName))).replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Count Collections
     * @param {string} tenant
     * @param {string} databaseName
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    countCollections(tenant, databaseName, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling countCollections.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling countCollections.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections_count`.replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Count Collections V1
     * @param {string} [tenant]
     * @param {string} [database]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    countCollectionsV1(tenant, database, options = {}) {
      let localVarPath = `/api/v1/count_collections`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      if (tenant !== void 0) {
        localVarQueryParameter.append("tenant", String(tenant));
      }
      if (database !== void 0) {
        localVarQueryParameter.append("database", String(database));
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Count V1
     * @param {string} collectionId
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    countV1(collectionId, options = {}) {
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling countV1.");
      }
      let localVarPath = `/api/v1/collections/{collection_id}/count`.replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Create Collection
     * @param {string} tenant
     * @param {string} databaseName
     * @param {Api.CreateCollectionRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(tenant, databaseName, request2, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling createCollection.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling createCollection.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling createCollection.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections`.replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Create Collection V1
     * @param {string} [tenant]
     * @param {string} [database]
     * @param {Api.CreateCollectionV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollectionV1(tenant, database, request2, options = {}) {
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling createCollectionV1.");
      }
      let localVarPath = `/api/v1/collections`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      if (tenant !== void 0) {
        localVarQueryParameter.append("tenant", String(tenant));
      }
      if (database !== void 0) {
        localVarQueryParameter.append("database", String(database));
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Create Database
     * @param {string} tenant
     * @param {Api.CreateDatabaseRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabase(tenant, request2, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling createDatabase.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling createDatabase.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases`.replace("{tenant}", encodeURIComponent(String(tenant)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Create Database V1
     * @param {string} [tenant]
     * @param {Api.CreateDatabaseV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseV1(tenant, request2, options = {}) {
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling createDatabaseV1.");
      }
      let localVarPath = `/api/v1/databases`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      if (tenant !== void 0) {
        localVarQueryParameter.append("tenant", String(tenant));
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Create Tenant
     * @param {Api.CreateTenantRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant(request2, options = {}) {
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling createTenant.");
      }
      let localVarPath = `/api/v2/tenants`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Create Tenant V1
     * @param {Api.CreateTenantV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantV1(request2, options = {}) {
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling createTenantV1.");
      }
      let localVarPath = `/api/v1/tenants`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Delete Collection
     * @param {string} collectionName
     * @param {string} tenant
     * @param {string} databaseName
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection(collectionName, tenant, databaseName, options = {}) {
      if (collectionName === null || collectionName === void 0) {
        throw new RequiredError("collectionName", "Required parameter collectionName was null or undefined when calling deleteCollection.");
      }
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling deleteCollection.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling deleteCollection.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_name}`.replace("{collection_name}", encodeURIComponent(String(collectionName))).replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "DELETE" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Delete Collection V1
     * @param {string} collectionName
     * @param {string} [tenant]
     * @param {string} [database]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollectionV1(collectionName, tenant, database, options = {}) {
      if (collectionName === null || collectionName === void 0) {
        throw new RequiredError("collectionName", "Required parameter collectionName was null or undefined when calling deleteCollectionV1.");
      }
      let localVarPath = `/api/v1/collections/{collection_name}`.replace("{collection_name}", encodeURIComponent(String(collectionName)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "DELETE" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      if (tenant !== void 0) {
        localVarQueryParameter.append("tenant", String(tenant));
      }
      if (database !== void 0) {
        localVarQueryParameter.append("database", String(database));
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Delete Database
     * @param {string} databaseName
     * @param {string} tenant
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabase(databaseName, tenant, options = {}) {
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling deleteDatabase.");
      }
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling deleteDatabase.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}`.replace("{database_name}", encodeURIComponent(String(databaseName))).replace("{tenant}", encodeURIComponent(String(tenant)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "DELETE" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Delete V1
     * @param {string} collectionId
     * @param {Api.DeleteV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteV1(collectionId, request2, options = {}) {
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling deleteV1.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling deleteV1.");
      }
      let localVarPath = `/api/v1/collections/{collection_id}/delete`.replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get Collection
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionName
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(tenant, databaseName, collectionName, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling getCollection.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling getCollection.");
      }
      if (collectionName === null || collectionName === void 0) {
        throw new RequiredError("collectionName", "Required parameter collectionName was null or undefined when calling getCollection.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_name}`.replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName))).replace("{collection_name}", encodeURIComponent(String(collectionName)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get Collection V1
     * @param {string} collectionName
     * @param {string} [tenant]
     * @param {string} [database]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionV1(collectionName, tenant, database, options = {}) {
      if (collectionName === null || collectionName === void 0) {
        throw new RequiredError("collectionName", "Required parameter collectionName was null or undefined when calling getCollectionV1.");
      }
      let localVarPath = `/api/v1/collections/{collection_name}`.replace("{collection_name}", encodeURIComponent(String(collectionName)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      if (tenant !== void 0) {
        localVarQueryParameter.append("tenant", String(tenant));
      }
      if (database !== void 0) {
        localVarQueryParameter.append("database", String(database));
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get Database
     * @param {string} databaseName
     * @param {string} tenant
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabase(databaseName, tenant, options = {}) {
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling getDatabase.");
      }
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling getDatabase.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}`.replace("{database_name}", encodeURIComponent(String(databaseName))).replace("{tenant}", encodeURIComponent(String(tenant)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get Database V1
     * @param {string} database
     * @param {string} [tenant]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseV1(database, tenant, options = {}) {
      if (database === null || database === void 0) {
        throw new RequiredError("database", "Required parameter database was null or undefined when calling getDatabaseV1.");
      }
      let localVarPath = `/api/v1/databases/{database}`.replace("{database}", encodeURIComponent(String(database)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      if (tenant !== void 0) {
        localVarQueryParameter.append("tenant", String(tenant));
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get Nearest Neighbors
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {Api.GetNearestNeighborsRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNearestNeighbors(tenant, databaseName, collectionId, request2, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling getNearestNeighbors.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling getNearestNeighbors.");
      }
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling getNearestNeighbors.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling getNearestNeighbors.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/query`.replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName))).replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get Nearest Neighbors V1
     * @param {string} collectionId
     * @param {Api.GetNearestNeighborsV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNearestNeighborsV1(collectionId, request2, options = {}) {
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling getNearestNeighborsV1.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling getNearestNeighborsV1.");
      }
      let localVarPath = `/api/v1/collections/{collection_id}/query`.replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get Tenant
     * @param {string} tenant
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant(tenant, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling getTenant.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}`.replace("{tenant}", encodeURIComponent(String(tenant)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get Tenant V1
     * @param {string} tenant
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantV1(tenant, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling getTenantV1.");
      }
      let localVarPath = `/api/v1/tenants/{tenant}`.replace("{tenant}", encodeURIComponent(String(tenant)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get User Identity
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserIdentity(options = {}) {
      let localVarPath = `/api/v2/auth/identity`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Root
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV11(options = {}) {
      let localVarPath = `/api/v1`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Get V1
     * @param {string} collectionId
     * @param {Api.GetV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV12(collectionId, request2, options = {}) {
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling getV12.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling getV12.");
      }
      let localVarPath = `/api/v1/collections/{collection_id}/get`.replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Heartbeat
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV1Heartbeat(options = {}) {
      let localVarPath = `/api/v1/heartbeat`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Pre Flight Checks
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV1PreFlightChecks(options = {}) {
      let localVarPath = `/api/v1/pre-flight-checks`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Version
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV1Version(options = {}) {
      let localVarPath = `/api/v1/version`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Root
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV2(options = {}) {
      let localVarPath = `/api/v2`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Heartbeat
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV2Heartbeat(options = {}) {
      let localVarPath = `/api/v2/heartbeat`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Pre Flight Checks
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV2PreFlightChecks(options = {}) {
      let localVarPath = `/api/v2/pre-flight-checks`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Version
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV2Version(options = {}) {
      let localVarPath = `/api/v2/version`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary List Collections
     * @param {string} tenant
     * @param {string} databaseName
     * @param {number | null} [limit]
     * @param {number | null} [offset]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections(tenant, databaseName, limit, offset, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling listCollections.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling listCollections.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections`.replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      if (limit !== void 0) {
        localVarQueryParameter.append("limit", String(limit));
      }
      if (offset !== void 0) {
        localVarQueryParameter.append("offset", String(offset));
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary List Collections V1
     * @param {number | null} [limit]
     * @param {number | null} [offset]
     * @param {string} [tenant]
     * @param {string} [database]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollectionsV1(limit, offset, tenant, database, options = {}) {
      let localVarPath = `/api/v1/collections`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      if (limit !== void 0) {
        localVarQueryParameter.append("limit", String(limit));
      }
      if (offset !== void 0) {
        localVarQueryParameter.append("offset", String(offset));
      }
      if (tenant !== void 0) {
        localVarQueryParameter.append("tenant", String(tenant));
      }
      if (database !== void 0) {
        localVarQueryParameter.append("database", String(database));
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary List Databases
     * @param {string} tenant
     * @param {number | null} [limit]
     * @param {number | null} [offset]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabases(tenant, limit, offset, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling listDatabases.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases`.replace("{tenant}", encodeURIComponent(String(tenant)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "GET" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      if (limit !== void 0) {
        localVarQueryParameter.append("limit", String(limit));
      }
      if (offset !== void 0) {
        localVarQueryParameter.append("offset", String(offset));
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Reset
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV1Reset(options = {}) {
      let localVarPath = `/api/v1/reset`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Reset
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV2Reset(options = {}) {
      let localVarPath = `/api/v2/reset`;
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarRequestOptions.headers = localVarHeaderParameter;
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Update
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {Api.UpdateRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(tenant, databaseName, collectionId, request2, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling update.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling update.");
      }
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling update.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling update.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/update`.replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName))).replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Update Collection
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {Api.UpdateCollectionRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollection(tenant, databaseName, collectionId, request2, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling updateCollection.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling updateCollection.");
      }
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling updateCollection.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling updateCollection.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}`.replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName))).replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Update Collection V1
     * @param {string} collectionId
     * @param {Api.UpdateCollectionV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollectionV1(collectionId, request2, options = {}) {
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling updateCollectionV1.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling updateCollectionV1.");
      }
      let localVarPath = `/api/v1/collections/{collection_id}`.replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "PUT" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Update V1
     * @param {string} collectionId
     * @param {Api.UpdateV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateV1(collectionId, request2, options = {}) {
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling updateV1.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling updateV1.");
      }
      let localVarPath = `/api/v1/collections/{collection_id}/update`.replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Upsert
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {Api.UpsertRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsert(tenant, databaseName, collectionId, request2, options = {}) {
      if (tenant === null || tenant === void 0) {
        throw new RequiredError("tenant", "Required parameter tenant was null or undefined when calling upsert.");
      }
      if (databaseName === null || databaseName === void 0) {
        throw new RequiredError("databaseName", "Required parameter databaseName was null or undefined when calling upsert.");
      }
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling upsert.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling upsert.");
      }
      let localVarPath = `/api/v2/tenants/{tenant}/databases/{database_name}/collections/{collection_id}/upsert`.replace("{tenant}", encodeURIComponent(String(tenant))).replace("{database_name}", encodeURIComponent(String(databaseName))).replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    },
    /**
     * @summary Upsert V1
     * @param {string} collectionId
     * @param {Api.UpsertV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsertV1(collectionId, request2, options = {}) {
      if (collectionId === null || collectionId === void 0) {
        throw new RequiredError("collectionId", "Required parameter collectionId was null or undefined when calling upsertV1.");
      }
      if (request2 === null || request2 === void 0) {
        throw new RequiredError("request", "Required parameter request was null or undefined when calling upsertV1.");
      }
      let localVarPath = `/api/v1/collections/{collection_id}/upsert`.replace("{collection_id}", encodeURIComponent(String(collectionId)));
      const localVarPathQueryStart = localVarPath.indexOf("?");
      const localVarRequestOptions = Object.assign({ method: "POST" }, options);
      const localVarHeaderParameter = options.headers ? new Headers(options.headers) : new Headers();
      const localVarQueryParameter = new URLSearchParams(localVarPathQueryStart !== -1 ? localVarPath.substring(localVarPathQueryStart + 1) : "");
      if (localVarPathQueryStart !== -1) {
        localVarPath = localVarPath.substring(0, localVarPathQueryStart);
      }
      localVarHeaderParameter.set("Content-Type", "application/json");
      localVarRequestOptions.headers = localVarHeaderParameter;
      if (request2 !== void 0) {
        localVarRequestOptions.body = JSON.stringify(request2 || {});
      }
      const localVarQueryParameterString = localVarQueryParameter.toString();
      if (localVarQueryParameterString) {
        localVarPath += "?" + localVarQueryParameterString;
      }
      return {
        url: localVarPath,
        options: localVarRequestOptions
      };
    }
  };
};
var ApiApiFp = function(configuration) {
  return {
    /**
     * @summary Add
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {Api.AddRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    add(tenant, databaseName, collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).add(tenant, databaseName, collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 201) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Add V1
     * @param {string} collectionId
     * @param {Api.AddV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    addV1(collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).addV1(collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 201) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Delete
     * @param {string} collectionId
     * @param {string} tenant
     * @param {string} databaseName
     * @param {Api.ADeleteRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    aDelete(collectionId, tenant, databaseName, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).aDelete(collectionId, tenant, databaseName, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get
     * @param {string} collectionId
     * @param {string} tenant
     * @param {string} databaseName
     * @param {Api.AGetRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    aGet(collectionId, tenant, databaseName, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).aGet(collectionId, tenant, databaseName, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Count
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    count(tenant, databaseName, collectionId, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).count(tenant, databaseName, collectionId, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Count Collections
     * @param {string} tenant
     * @param {string} databaseName
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    countCollections(tenant, databaseName, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).countCollections(tenant, databaseName, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Count Collections V1
     * @param {string} [tenant]
     * @param {string} [database]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    countCollectionsV1(tenant, database, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).countCollectionsV1(tenant, database, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Count V1
     * @param {string} collectionId
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    countV1(collectionId, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).countV1(collectionId, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Create Collection
     * @param {string} tenant
     * @param {string} databaseName
     * @param {Api.CreateCollectionRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollection(tenant, databaseName, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).createCollection(tenant, databaseName, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Create Collection V1
     * @param {string} [tenant]
     * @param {string} [database]
     * @param {Api.CreateCollectionV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCollectionV1(tenant, database, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).createCollectionV1(tenant, database, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Create Database
     * @param {string} tenant
     * @param {Api.CreateDatabaseRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabase(tenant, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).createDatabase(tenant, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Create Database V1
     * @param {string} [tenant]
     * @param {Api.CreateDatabaseV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDatabaseV1(tenant, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).createDatabaseV1(tenant, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Create Tenant
     * @param {Api.CreateTenantRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant(request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).createTenant(request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Create Tenant V1
     * @param {Api.CreateTenantV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenantV1(request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).createTenantV1(request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Delete Collection
     * @param {string} collectionName
     * @param {string} tenant
     * @param {string} databaseName
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollection(collectionName, tenant, databaseName, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).deleteCollection(collectionName, tenant, databaseName, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Delete Collection V1
     * @param {string} collectionName
     * @param {string} [tenant]
     * @param {string} [database]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollectionV1(collectionName, tenant, database, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).deleteCollectionV1(collectionName, tenant, database, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Delete Database
     * @param {string} databaseName
     * @param {string} tenant
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDatabase(databaseName, tenant, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).deleteDatabase(databaseName, tenant, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Delete V1
     * @param {string} collectionId
     * @param {Api.DeleteV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteV1(collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).deleteV1(collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get Collection
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionName
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollection(tenant, databaseName, collectionName, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getCollection(tenant, databaseName, collectionName, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get Collection V1
     * @param {string} collectionName
     * @param {string} [tenant]
     * @param {string} [database]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionV1(collectionName, tenant, database, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getCollectionV1(collectionName, tenant, database, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get Database
     * @param {string} databaseName
     * @param {string} tenant
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabase(databaseName, tenant, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getDatabase(databaseName, tenant, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get Database V1
     * @param {string} database
     * @param {string} [tenant]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDatabaseV1(database, tenant, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getDatabaseV1(database, tenant, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get Nearest Neighbors
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {Api.GetNearestNeighborsRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNearestNeighbors(tenant, databaseName, collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getNearestNeighbors(tenant, databaseName, collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get Nearest Neighbors V1
     * @param {string} collectionId
     * @param {Api.GetNearestNeighborsV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNearestNeighborsV1(collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getNearestNeighborsV1(collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get Tenant
     * @param {string} tenant
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant(tenant, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getTenant(tenant, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get Tenant V1
     * @param {string} tenant
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantV1(tenant, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getTenantV1(tenant, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get User Identity
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserIdentity(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getUserIdentity(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Root
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV11(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV11(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Get V1
     * @param {string} collectionId
     * @param {Api.GetV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV12(collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV12(collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Heartbeat
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV1Heartbeat(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV1Heartbeat(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Pre Flight Checks
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV1PreFlightChecks(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV1PreFlightChecks(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Version
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV1Version(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV1Version(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Root
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV2(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV2(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Heartbeat
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV2Heartbeat(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV2Heartbeat(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Pre Flight Checks
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV2PreFlightChecks(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV2PreFlightChecks(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Version
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    getV2Version(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).getV2Version(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary List Collections
     * @param {string} tenant
     * @param {string} databaseName
     * @param {number | null} [limit]
     * @param {number | null} [offset]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollections(tenant, databaseName, limit, offset, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).listCollections(tenant, databaseName, limit, offset, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary List Collections V1
     * @param {number | null} [limit]
     * @param {number | null} [offset]
     * @param {string} [tenant]
     * @param {string} [database]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCollectionsV1(limit, offset, tenant, database, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).listCollectionsV1(limit, offset, tenant, database, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary List Databases
     * @param {string} tenant
     * @param {number | null} [limit]
     * @param {number | null} [offset]
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDatabases(tenant, limit, offset, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).listDatabases(tenant, limit, offset, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Reset
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV1Reset(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).postV1Reset(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Reset
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    postV2Reset(options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).postV2Reset(options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Update
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {Api.UpdateRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(tenant, databaseName, collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).update(tenant, databaseName, collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Update Collection
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {Api.UpdateCollectionRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollection(tenant, databaseName, collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).updateCollection(tenant, databaseName, collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Update Collection V1
     * @param {string} collectionId
     * @param {Api.UpdateCollectionV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCollectionV1(collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).updateCollectionV1(collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Update V1
     * @param {string} collectionId
     * @param {Api.UpdateV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateV1(collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).updateV1(collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Upsert
     * @param {string} tenant
     * @param {string} databaseName
     * @param {string} collectionId
     * @param {Api.UpsertRequest} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsert(tenant, databaseName, collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).upsert(tenant, databaseName, collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    },
    /**
     * @summary Upsert V1
     * @param {string} collectionId
     * @param {Api.UpsertV1Request} request
     * @param {RequestInit} [options] Override http request option.
     * @throws {RequiredError}
     */
    upsertV1(collectionId, request2, options) {
      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).upsertV1(collectionId, request2, options);
      return (fetch5 = defaultFetch, basePath = BASE_PATH) => {
        return fetch5(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          const contentType = response.headers.get("Content-Type");
          const mimeType = contentType ? contentType.replace(/;.*/, "") : void 0;
          if (response.status === 200) {
            if (mimeType === "application/json") {
              return response.json();
            }
            throw response;
          }
          if (response.status === 422) {
            if (mimeType === "application/json") {
              throw response;
            }
            throw response;
          }
          throw response;
        });
      };
    }
  };
};
var ApiApi = class extends BaseAPI {
  /**
   * @summary Add
   * @param {string} tenant
   * @param {string} databaseName
   * @param {string} collectionId
   * @param {Api.AddRequest} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  add(tenant, databaseName, collectionId, request2, options) {
    return ApiApiFp(this.configuration).add(tenant, databaseName, collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Add V1
   * @param {string} collectionId
   * @param {Api.AddV1Request} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  addV1(collectionId, request2, options) {
    return ApiApiFp(this.configuration).addV1(collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Delete
   * @param {string} collectionId
   * @param {string} tenant
   * @param {string} databaseName
   * @param {Api.ADeleteRequest} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  aDelete(collectionId, tenant, databaseName, request2, options) {
    return ApiApiFp(this.configuration).aDelete(collectionId, tenant, databaseName, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get
   * @param {string} collectionId
   * @param {string} tenant
   * @param {string} databaseName
   * @param {Api.AGetRequest} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  aGet(collectionId, tenant, databaseName, request2, options) {
    return ApiApiFp(this.configuration).aGet(collectionId, tenant, databaseName, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Count
   * @param {string} tenant
   * @param {string} databaseName
   * @param {string} collectionId
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  count(tenant, databaseName, collectionId, options) {
    return ApiApiFp(this.configuration).count(tenant, databaseName, collectionId, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Count Collections
   * @param {string} tenant
   * @param {string} databaseName
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  countCollections(tenant, databaseName, options) {
    return ApiApiFp(this.configuration).countCollections(tenant, databaseName, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Count Collections V1
   * @param {string} [tenant]
   * @param {string} [database]
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  countCollectionsV1(tenant, database, options) {
    return ApiApiFp(this.configuration).countCollectionsV1(tenant, database, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Count V1
   * @param {string} collectionId
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  countV1(collectionId, options) {
    return ApiApiFp(this.configuration).countV1(collectionId, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Create Collection
   * @param {string} tenant
   * @param {string} databaseName
   * @param {Api.CreateCollectionRequest} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  createCollection(tenant, databaseName, request2, options) {
    return ApiApiFp(this.configuration).createCollection(tenant, databaseName, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Create Collection V1
   * @param {string} [tenant]
   * @param {string} [database]
   * @param {Api.CreateCollectionV1Request} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  createCollectionV1(tenant, database, request2, options) {
    return ApiApiFp(this.configuration).createCollectionV1(tenant, database, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Create Database
   * @param {string} tenant
   * @param {Api.CreateDatabaseRequest} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  createDatabase(tenant, request2, options) {
    return ApiApiFp(this.configuration).createDatabase(tenant, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Create Database V1
   * @param {string} [tenant]
   * @param {Api.CreateDatabaseV1Request} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  createDatabaseV1(tenant, request2, options) {
    return ApiApiFp(this.configuration).createDatabaseV1(tenant, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Create Tenant
   * @param {Api.CreateTenantRequest} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  createTenant(request2, options) {
    return ApiApiFp(this.configuration).createTenant(request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Create Tenant V1
   * @param {Api.CreateTenantV1Request} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  createTenantV1(request2, options) {
    return ApiApiFp(this.configuration).createTenantV1(request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Delete Collection
   * @param {string} collectionName
   * @param {string} tenant
   * @param {string} databaseName
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  deleteCollection(collectionName, tenant, databaseName, options) {
    return ApiApiFp(this.configuration).deleteCollection(collectionName, tenant, databaseName, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Delete Collection V1
   * @param {string} collectionName
   * @param {string} [tenant]
   * @param {string} [database]
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  deleteCollectionV1(collectionName, tenant, database, options) {
    return ApiApiFp(this.configuration).deleteCollectionV1(collectionName, tenant, database, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Delete Database
   * @param {string} databaseName
   * @param {string} tenant
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  deleteDatabase(databaseName, tenant, options) {
    return ApiApiFp(this.configuration).deleteDatabase(databaseName, tenant, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Delete V1
   * @param {string} collectionId
   * @param {Api.DeleteV1Request} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  deleteV1(collectionId, request2, options) {
    return ApiApiFp(this.configuration).deleteV1(collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get Collection
   * @param {string} tenant
   * @param {string} databaseName
   * @param {string} collectionName
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getCollection(tenant, databaseName, collectionName, options) {
    return ApiApiFp(this.configuration).getCollection(tenant, databaseName, collectionName, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get Collection V1
   * @param {string} collectionName
   * @param {string} [tenant]
   * @param {string} [database]
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getCollectionV1(collectionName, tenant, database, options) {
    return ApiApiFp(this.configuration).getCollectionV1(collectionName, tenant, database, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get Database
   * @param {string} databaseName
   * @param {string} tenant
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getDatabase(databaseName, tenant, options) {
    return ApiApiFp(this.configuration).getDatabase(databaseName, tenant, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get Database V1
   * @param {string} database
   * @param {string} [tenant]
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getDatabaseV1(database, tenant, options) {
    return ApiApiFp(this.configuration).getDatabaseV1(database, tenant, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get Nearest Neighbors
   * @param {string} tenant
   * @param {string} databaseName
   * @param {string} collectionId
   * @param {Api.GetNearestNeighborsRequest} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getNearestNeighbors(tenant, databaseName, collectionId, request2, options) {
    return ApiApiFp(this.configuration).getNearestNeighbors(tenant, databaseName, collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get Nearest Neighbors V1
   * @param {string} collectionId
   * @param {Api.GetNearestNeighborsV1Request} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getNearestNeighborsV1(collectionId, request2, options) {
    return ApiApiFp(this.configuration).getNearestNeighborsV1(collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get Tenant
   * @param {string} tenant
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getTenant(tenant, options) {
    return ApiApiFp(this.configuration).getTenant(tenant, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get Tenant V1
   * @param {string} tenant
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getTenantV1(tenant, options) {
    return ApiApiFp(this.configuration).getTenantV1(tenant, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get User Identity
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getUserIdentity(options) {
    return ApiApiFp(this.configuration).getUserIdentity(options)(this.fetch, this.basePath);
  }
  /**
   * @summary Root
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getV11(options) {
    return ApiApiFp(this.configuration).getV11(options)(this.fetch, this.basePath);
  }
  /**
   * @summary Get V1
   * @param {string} collectionId
   * @param {Api.GetV1Request} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getV12(collectionId, request2, options) {
    return ApiApiFp(this.configuration).getV12(collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Heartbeat
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getV1Heartbeat(options) {
    return ApiApiFp(this.configuration).getV1Heartbeat(options)(this.fetch, this.basePath);
  }
  /**
   * @summary Pre Flight Checks
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getV1PreFlightChecks(options) {
    return ApiApiFp(this.configuration).getV1PreFlightChecks(options)(this.fetch, this.basePath);
  }
  /**
   * @summary Version
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getV1Version(options) {
    return ApiApiFp(this.configuration).getV1Version(options)(this.fetch, this.basePath);
  }
  /**
   * @summary Root
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getV2(options) {
    return ApiApiFp(this.configuration).getV2(options)(this.fetch, this.basePath);
  }
  /**
   * @summary Heartbeat
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getV2Heartbeat(options) {
    return ApiApiFp(this.configuration).getV2Heartbeat(options)(this.fetch, this.basePath);
  }
  /**
   * @summary Pre Flight Checks
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getV2PreFlightChecks(options) {
    return ApiApiFp(this.configuration).getV2PreFlightChecks(options)(this.fetch, this.basePath);
  }
  /**
   * @summary Version
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  getV2Version(options) {
    return ApiApiFp(this.configuration).getV2Version(options)(this.fetch, this.basePath);
  }
  /**
   * @summary List Collections
   * @param {string} tenant
   * @param {string} databaseName
   * @param {number | null} [limit]
   * @param {number | null} [offset]
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  listCollections(tenant, databaseName, limit, offset, options) {
    return ApiApiFp(this.configuration).listCollections(tenant, databaseName, limit, offset, options)(this.fetch, this.basePath);
  }
  /**
   * @summary List Collections V1
   * @param {number | null} [limit]
   * @param {number | null} [offset]
   * @param {string} [tenant]
   * @param {string} [database]
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  listCollectionsV1(limit, offset, tenant, database, options) {
    return ApiApiFp(this.configuration).listCollectionsV1(limit, offset, tenant, database, options)(this.fetch, this.basePath);
  }
  /**
   * @summary List Databases
   * @param {string} tenant
   * @param {number | null} [limit]
   * @param {number | null} [offset]
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  listDatabases(tenant, limit, offset, options) {
    return ApiApiFp(this.configuration).listDatabases(tenant, limit, offset, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Reset
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  postV1Reset(options) {
    return ApiApiFp(this.configuration).postV1Reset(options)(this.fetch, this.basePath);
  }
  /**
   * @summary Reset
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  postV2Reset(options) {
    return ApiApiFp(this.configuration).postV2Reset(options)(this.fetch, this.basePath);
  }
  /**
   * @summary Update
   * @param {string} tenant
   * @param {string} databaseName
   * @param {string} collectionId
   * @param {Api.UpdateRequest} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  update(tenant, databaseName, collectionId, request2, options) {
    return ApiApiFp(this.configuration).update(tenant, databaseName, collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Update Collection
   * @param {string} tenant
   * @param {string} databaseName
   * @param {string} collectionId
   * @param {Api.UpdateCollectionRequest} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  updateCollection(tenant, databaseName, collectionId, request2, options) {
    return ApiApiFp(this.configuration).updateCollection(tenant, databaseName, collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Update Collection V1
   * @param {string} collectionId
   * @param {Api.UpdateCollectionV1Request} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  updateCollectionV1(collectionId, request2, options) {
    return ApiApiFp(this.configuration).updateCollectionV1(collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Update V1
   * @param {string} collectionId
   * @param {Api.UpdateV1Request} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  updateV1(collectionId, request2, options) {
    return ApiApiFp(this.configuration).updateV1(collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Upsert
   * @param {string} tenant
   * @param {string} databaseName
   * @param {string} collectionId
   * @param {Api.UpsertRequest} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  upsert(tenant, databaseName, collectionId, request2, options) {
    return ApiApiFp(this.configuration).upsert(tenant, databaseName, collectionId, request2, options)(this.fetch, this.basePath);
  }
  /**
   * @summary Upsert V1
   * @param {string} collectionId
   * @param {Api.UpsertV1Request} request
   * @param {RequestInit} [options] Override http request option.
   * @throws {RequiredError}
   */
  upsertV1(collectionId, request2, options) {
    return ApiApiFp(this.configuration).upsertV1(collectionId, request2, options)(this.fetch, this.basePath);
  }
};

// ../chromadb-core/src/generated/models.ts
var Api;
((Api2) => {
  let IncludeEnum2;
  ((IncludeEnum3) => {
    IncludeEnum3["Documents"] = "documents";
    IncludeEnum3["Embeddings"] = "embeddings";
    IncludeEnum3["Metadatas"] = "metadatas";
    IncludeEnum3["Distances"] = "distances";
    IncludeEnum3["Uris"] = "uris";
    IncludeEnum3["Data"] = "data";
  })(IncludeEnum2 = Api2.IncludeEnum || (Api2.IncludeEnum = {}));
})(Api || (Api = {}));

// ../chromadb-core/src/generated/configuration.ts
var Configuration = class {
  constructor(param = {}) {
    this.apiKey = param.apiKey;
    this.username = param.username;
    this.password = param.password;
    this.authorization = param.authorization;
    this.basePath = param.basePath;
  }
};

// ../chromadb-core/src/Errors.ts
var ChromaError = class extends Error {
  constructor(name, message, cause) {
    super(message);
    this.cause = cause;
    this.name = name;
  }
};
var ChromaConnectionError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaConnectionError";
  }
};
var ChromaServerError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaServerError";
  }
};
var ChromaClientError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaClientError";
  }
};
var ChromaUnauthorizedError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaAuthError";
  }
};
var ChromaForbiddenError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaForbiddenError";
  }
};
var ChromaNotFoundError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaNotFoundError";
  }
};
var ChromaValueError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaValueError";
  }
};
var InvalidCollectionError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "InvalidCollectionError";
  }
};
var InvalidArgumentError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "InvalidArgumentError";
  }
};
var ChromaUniqueError = class extends Error {
  constructor(message, cause) {
    super(message);
    this.cause = cause;
    this.name = "ChromaUniqueError";
  }
};
function createErrorByType(type, message) {
  switch (type) {
    case "InvalidCollection":
      return new InvalidCollectionError(message);
    case "InvalidArgumentError":
      return new InvalidArgumentError(message);
    default:
      return void 0;
  }
}

// ../chromadb-core/src/Collection.ts
var Collection = class {
  /**
   * @ignore
   */
  constructor(name, id, client, embeddingFunction, metadata) {
    this.name = name;
    this.id = id;
    this.metadata = metadata;
    this.client = client;
    this.embeddingFunction = embeddingFunction;
  }
  /**
   * Add items to the collection
   * @param {Object} params - The parameters for the query.
   * @param {ID | IDs} [params.ids] - IDs of the items to add.
   * @param {Embedding | Embeddings} [params.embeddings] - Optional embeddings of the items to add.
   * @param {Metadata | Metadatas} [params.metadatas] - Optional metadata of the items to add.
   * @param {Document | Documents} [params.documents] - Optional documents of the items to add.
   * @returns {Promise<AddResponse>} - The response from the API. True if successful.
   *
   * @example
   * ```typescript
   * const response = await collection.add({
   *   ids: ["id1", "id2"],
   *   embeddings: [[1, 2, 3], [4, 5, 6]],
   *   metadatas: [{ "key": "value" }, { "key": "value" }],
   *   documents: ["document1", "document2"]
   * });
   * ```
   */
  async add(params) {
    await this.client.init();
    await this.client.api.add(
      this.client.tenant,
      this.client.database,
      this.id,
      // TODO: For some reason the auto generated code requires metadata to be defined here.
      await prepareRecordRequest(
        params,
        this.embeddingFunction
      ),
      this.client.api.options
    );
  }
  /**
   * Upsert items to the collection
   * @param {Object} params - The parameters for the query.
   * @param {ID | IDs} [params.ids] - IDs of the items to add.
   * @param {Embedding | Embeddings} [params.embeddings] - Optional embeddings of the items to add.
   * @param {Metadata | Metadatas} [params.metadatas] - Optional metadata of the items to add.
   * @param {Document | Documents} [params.documents] - Optional documents of the items to add.
   * @returns {Promise<void>}
   *
   * @example
   * ```typescript
   * const response = await collection.upsert({
   *   ids: ["id1", "id2"],
   *   embeddings: [[1, 2, 3], [4, 5, 6]],
   *   metadatas: [{ "key": "value" }, { "key": "value" }],
   *   documents: ["document1", "document2"],
   * });
   * ```
   */
  async upsert(params) {
    await this.client.init();
    await this.client.api.upsert(
      this.client.tenant,
      this.client.database,
      this.id,
      // TODO: For some reason the auto generated code requires metadata to be defined here.
      await prepareRecordRequest(
        params,
        this.embeddingFunction
      ),
      this.client.api.options
    );
  }
  /**
   * Count the number of items in the collection
   * @returns {Promise<number>} - The number of items in the collection.
   *
   * @example
   * ```typescript
   * const count = await collection.count();
   * ```
   */
  async count() {
    await this.client.init();
    return await this.client.api.count(
      this.client.tenant,
      this.client.database,
      this.id,
      this.client.api.options
    );
  }
  /**
   * Get items from the collection
   * @param {Object} params - The parameters for the query.
   * @param {ID | IDs} [params.ids] - Optional IDs of the items to get.
   * @param {Where} [params.where] - Optional where clause to filter items by.
   * @param {PositiveInteger} [params.limit] - Optional limit on the number of items to get.
   * @param {PositiveInteger} [params.offset] - Optional offset on the items to get.
   * @param {IncludeEnum[]} [params.include] - Optional list of items to include in the response.
   * @param {WhereDocument} [params.whereDocument] - Optional where clause to filter items by.
   * @returns {Promise<GetResponse>} - The response from the server.
   *
   * @example
   * ```typescript
   * const response = await collection.get({
   *   ids: ["id1", "id2"],
   *   where: { "key": "value" },
   *   limit: 10,
   *   offset: 0,
   *   include: ["embeddings", "metadatas", "documents"],
   *   whereDocument: { $contains: "value" },
   * });
   * ```
   */
  async get({
    ids,
    where,
    limit,
    offset,
    include,
    whereDocument
  } = {}) {
    await this.client.init();
    const idsArray = ids ? toArray(ids) : void 0;
    const resp = await this.client.api.aGet(
      this.id,
      this.client.tenant,
      this.client.database,
      {
        ids: idsArray,
        where,
        limit,
        offset,
        include,
        where_document: whereDocument
      },
      this.client.api.options
    );
    return resp;
  }
  /**
   * Update items in the collection
   * @param {Object} params - The parameters for the query.
   * @param {ID | IDs} [params.ids] - IDs of the items to add.
   * @param {Embedding | Embeddings} [params.embeddings] - Optional embeddings of the items to add.
   * @param {Metadata | Metadatas} [params.metadatas] - Optional metadata of the items to add.
   * @param {Document | Documents} [params.documents] - Optional documents of the items to add.
   * @returns {Promise<void>}
   *
   * @example
   * ```typescript
   * const response = await collection.update({
   *   ids: ["id1", "id2"],
   *   embeddings: [[1, 2, 3], [4, 5, 6]],
   *   metadatas: [{ "key": "value" }, { "key": "value" }],
   *   documents: ["document1", "document2"],
   * });
   * ```
   */
  async update(params) {
    await this.client.init();
    await this.client.api.update(
      this.client.tenant,
      this.client.database,
      this.id,
      await prepareRecordRequest(params, this.embeddingFunction, true),
      this.client.api.options
    );
  }
  /**
   * Performs a query on the collection using the specified parameters.
   *
   * @param {Object} params - The parameters for the query.
   * @param {Embedding | Embeddings} [params.queryEmbeddings] - Optional query embeddings to use for the search.
   * @param {PositiveInteger} [params.nResults] - Optional number of results to return (default is 10).
   * @param {Where} [params.where] - Optional query condition to filter results based on metadata values.
   * @param {string | string[]} [params.queryTexts] - Optional query text(s) to search for in the collection.
   * @param {WhereDocument} [params.whereDocument] - Optional query condition to filter results based on document content.
   * @param {IncludeEnum[]} [params.include] - Optional array of fields to include in the result, such as "metadata" and "document".
   *
   * @returns {Promise<QueryResponse>} A promise that resolves to the query results.
   * @throws {Error} If there is an issue executing the query.
   * @example
   * // Query the collection using embeddings
   * const results = await collection.query({
   *   queryEmbeddings: [[0.1, 0.2, ...], ...],
   *   nResults: 10,
   *   where: {"name": {"$eq": "John Doe"}},
   *   include: ["metadata", "document"]
   * });
   * @example
   * ```js
   * // Query the collection using query text
   * const results = await collection.query({
   *   queryTexts: "some text",
   *   nResults: 10,
   *   where: {"name": {"$eq": "John Doe"}},
   *   include: ["metadata", "document"]
   * });
   * ```
   *
   */
  async query({
    nResults = 10,
    where,
    whereDocument,
    include,
    queryTexts,
    queryEmbeddings
  }) {
    if (queryTexts && queryEmbeddings || !queryTexts && !queryEmbeddings) {
      throw new Error(
        "You must supply exactly one of queryTexts or queryEmbeddings."
      );
    }
    await this.client.init();
    const arrayQueryEmbeddings = queryTexts !== void 0 ? await this.embeddingFunction.generate(toArray(queryTexts)) : toArrayOfArrays(queryEmbeddings);
    return await this.client.api.getNearestNeighbors(
      this.client.tenant,
      this.client.database,
      this.id,
      {
        query_embeddings: arrayQueryEmbeddings,
        where,
        n_results: nResults,
        where_document: whereDocument,
        include
      },
      this.client.api.options
    );
  }
  /**
   * Modify the collection name or metadata
   * @param {Object} params - The parameters for the query.
   * @param {string} [params.name] - Optional new name for the collection.
   * @param {CollectionMetadata} [params.metadata] - Optional new metadata for the collection.
   * @returns {Promise<void>} - The response from the API.
   *
   * @example
   * ```typescript
   * const response = await client.updateCollection({
   *   name: "new name",
   *   metadata: { "key": "value" },
   * });
   * ```
   */
  async modify({
    name,
    metadata
  }) {
    await this.client.init();
    return this.client.api.updateCollection(
      this.client.tenant,
      this.client.database,
      this.id,
      {
        new_name: name,
        new_metadata: metadata
      },
      this.client.api.options
    ).then(() => {
      if (name !== void 0) {
        this.name = name;
      }
      if (metadata !== void 0) {
        this.metadata = metadata;
      }
      return {
        name: this.name,
        metadata: this.metadata
      };
    });
  }
  /**
   * Peek inside the collection
   * @param {Object} params - The parameters for the query.
   * @param {PositiveInteger} [params.limit] - Optional number of results to return (default is 10).
   * @returns {Promise<GetResponse>} A promise that resolves to the query results.
   * @throws {Error} If there is an issue executing the query.
   *
   * @example
   * ```typescript
   * const results = await collection.peek({
   *   limit: 10
   * });
   * ```
   */
  async peek({ limit = 10 } = {}) {
    await this.client.init();
    return await this.client.api.aGet(
      this.id,
      this.client.tenant,
      this.client.database,
      {
        limit
      },
      this.client.api.options
    );
  }
  /**
   * Deletes items from the collection.
   * @param {Object} params - The parameters for deleting items from the collection.
   * @param {ID | IDs} [params.ids] - Optional ID or array of IDs of items to delete.
   * @param {Where} [params.where] - Optional query condition to filter items to delete based on metadata values.
   * @param {WhereDocument} [params.whereDocument] - Optional query condition to filter items to delete based on document content.
   * @returns {Promise<string[]>} A promise that resolves to the IDs of the deleted items.
   * @throws {Error} If there is an issue deleting items from the collection.
   *
   * @example
   * ```typescript
   * const results = await collection.delete({
   *   ids: "some_id",
   *   where: {"name": {"$eq": "John Doe"}},
   *   whereDocument: {"$contains":"search_string"}
   * });
   * ```
   */
  async delete({
    ids,
    where,
    whereDocument
  } = {}) {
    await this.client.init();
    let idsArray = void 0;
    if (ids !== void 0)
      idsArray = toArray(ids);
    await this.client.api.aDelete(
      this.id,
      this.client.tenant,
      this.client.database,
      { ids: idsArray, where, where_document: whereDocument },
      this.client.api.options
    );
  }
};

// ../chromadb-core/src/utils.ts
function toArray(obj) {
  if (Array.isArray(obj)) {
    return obj;
  } else {
    return [obj];
  }
}
function toArrayOfArrays(obj) {
  if (obj.length === 0) {
    return [];
  }
  if (Array.isArray(obj[0])) {
    return obj;
  }
  if (obj[0] && typeof obj[0][Symbol.iterator] === "function") {
    return obj.map((el) => Array.from(el));
  }
  return [obj];
}
async function validateTenantDatabase(adminClient, tenant, database) {
  try {
    await adminClient.getTenant({ name: tenant });
  } catch (error2) {
    if (error2 instanceof ChromaConnectionError) {
      throw error2;
    }
    throw new Error(
      `Could not connect to tenant ${tenant}. Are you sure it exists? Underlying error:
${error2}`
    );
  }
  try {
    await adminClient.getDatabase({ name: database, tenantName: tenant });
  } catch (error2) {
    if (error2 instanceof ChromaConnectionError) {
      throw error2;
    }
    throw new Error(
      `Could not connect to database ${database} for tenant ${tenant}. Are you sure it exists? Underlying error:
${error2}`
    );
  }
}
function arrayifyParams(params) {
  return {
    ids: toArray(params.ids),
    embeddings: params.embeddings ? toArrayOfArrays(params.embeddings) : void 0,
    metadatas: params.metadatas ? toArray(params.metadatas) : void 0,
    documents: params.documents ? toArray(params.documents) : void 0
  };
}
async function prepareRecordRequest(reqParams, embeddingFunction, update) {
  const { ids, embeddings, metadatas, documents } = arrayifyParams(reqParams);
  if (!embeddings && !documents && !update) {
    throw new Error("embeddings and documents cannot both be undefined");
  }
  const embeddingsArray = embeddings ? embeddings : documents ? await embeddingFunction.generate(documents) : void 0;
  if (!embeddingsArray && !update) {
    throw new Error("Failed to generate embeddings for your request.");
  }
  for (let i6 = 0; i6 < ids.length; i6 += 1) {
    if (typeof ids[i6] !== "string") {
      throw new Error(
        `Expected ids to be strings, found ${typeof ids[i6]} at index ${i6}`
      );
    }
  }
  if (embeddingsArray !== void 0 && ids.length !== embeddingsArray.length || metadatas !== void 0 && ids.length !== metadatas.length || documents !== void 0 && ids.length !== documents.length) {
    throw new Error(
      "ids, embeddings, metadatas, and documents must all be the same length"
    );
  }
  const uniqueIds = new Set(ids);
  if (uniqueIds.size !== ids.length) {
    const duplicateIds = ids.filter(
      (item, index2) => ids.indexOf(item) !== index2
    );
    throw new Error(
      `ID's must be unique, found duplicates for: ${duplicateIds}`
    );
  }
  return {
    ids,
    metadatas,
    documents,
    embeddings: embeddingsArray
  };
}
function wrapCollection(api, collection) {
  return new Collection(
    collection.name,
    collection.id,
    api,
    collection.embeddingFunction,
    collection.metadata
  );
}

// ../chromadb-core/src/auth.ts
var tokenHeaderTypeToHeaderKey = (headerType) => {
  if (headerType === "AUTHORIZATION") {
    return "Authorization";
  } else {
    return "X-Chroma-Token";
  }
};
var base64Encode = (str2) => {
  return Buffer.from(str2).toString("base64");
};
var BasicAuthClientProvider = class {
  /**
   * Creates a new BasicAuthClientProvider.
   * @param textCredentials - The credentials for the authentication provider. Must be of the form "username:password". If not supplied, the environment variable CHROMA_CLIENT_AUTH_CREDENTIALS will be used.
   * @throws {Error} If neither credentials provider or text credentials are supplied.
   */
  constructor(textCredentials) {
    const creds = textCredentials ?? process.env.CHROMA_CLIENT_AUTH_CREDENTIALS;
    if (creds === void 0) {
      throw new Error(
        "Credentials must be supplied via environment variable (CHROMA_CLIENT_AUTH_CREDENTIALS) or passed in as configuration."
      );
    }
    this.credentials = {
      Authorization: "Basic " + base64Encode(creds)
    };
  }
  authenticate() {
    return this.credentials;
  }
};
var TokenAuthClientProvider = class {
  constructor(textCredentials, headerType = "AUTHORIZATION") {
    const creds = textCredentials ?? process.env.CHROMA_CLIENT_AUTH_CREDENTIALS;
    if (creds === void 0) {
      throw new Error(
        "Credentials must be supplied via environment variable (CHROMA_CLIENT_AUTH_CREDENTIALS) or passed in as configuration."
      );
    }
    const headerKey = tokenHeaderTypeToHeaderKey(headerType);
    const headerVal = headerType === "AUTHORIZATION" ? `Bearer ${creds}` : creds;
    this.credentials = {};
    this.credentials[headerKey] = headerVal;
  }
  authenticate() {
    return this.credentials;
  }
};
var authOptionsToAuthProvider = (auth) => {
  if (auth.provider === void 0) {
    throw new Error("Auth provider not specified");
  }
  if (auth.credentials === void 0) {
    throw new Error("Auth credentials not specified");
  }
  switch (auth.provider) {
    case "basic":
      return new BasicAuthClientProvider(auth.credentials);
    case "token":
      return new TokenAuthClientProvider(
        auth.credentials,
        auth.tokenHeaderType
      );
      break;
    default:
      throw new Error("Invalid auth provider");
  }
};

// ../chromadb-core/src/ChromaFetch.ts
function isOfflineError(error2) {
  return Boolean(
    (error2?.name === "TypeError" || error2?.name === "FetchError") && (error2.message?.includes("fetch failed") || error2.message?.includes("Failed to fetch") || error2.message?.includes("ENOTFOUND"))
  );
}
function parseServerError(error2) {
  const regex = /(\w+)\('(.+)'\)/;
  const match = error2?.match(regex);
  if (match) {
    const [, name, message] = match;
    switch (name) {
      case "ValueError":
        return new ChromaValueError(message);
      default:
        return new ChromaError(name, message);
    }
  }
  return new ChromaServerError(
    "The server encountered an error while handling the request."
  );
}
var chromaFetch = async (input, init) => {
  try {
    const resp = await fetch(input, init);
    const clonedResp = resp.clone();
    const respBody = await clonedResp.json();
    if (!clonedResp.ok) {
      const error2 = createErrorByType(respBody?.error, respBody?.message);
      if (error2) {
        throw error2;
      }
      switch (resp.status) {
        case 400:
          throw new ChromaClientError(
            `Bad request to ${input} with status: ${resp.statusText}`
          );
        case 401:
          throw new ChromaUnauthorizedError(`Unauthorized`);
        case 403:
          throw new ChromaForbiddenError(
            `You do not have permission to access the requested resource.`
          );
        case 404:
          throw new ChromaNotFoundError(
            `The requested resource could not be found: ${input}`
          );
        case 409:
          throw new ChromaUniqueError("The resource already exists");
        case 500:
          throw parseServerError(respBody?.error);
        case 502:
        case 503:
        case 504:
          throw new ChromaConnectionError(
            `Unable to connect to the chromadb server. Please try again later.`
          );
      }
      throw new Error(
        `Failed to fetch ${input} with status ${resp.status}: ${resp.statusText}`
      );
    }
    if (respBody?.error) {
      throw parseServerError(respBody.error);
    }
    return resp;
  } catch (error2) {
    if (isOfflineError(error2)) {
      throw new ChromaConnectionError(
        "Failed to connect to chromadb. Make sure your server is running and try again. If you are running from a browser, make sure that your chromadb instance is configured to allow requests from the current origin using the CHROMA_SERVER_CORS_ALLOW_ORIGINS environment variable.",
        error2
      );
    }
    throw error2;
  }
};

// ../chromadb-core/src/AdminClient.ts
var DEFAULT_TENANT = "default_tenant";
var DEFAULT_DATABASE = "default_database";
var AdminClient = class {
  /**
   * Creates a new AdminClient instance.
   * @param {Object} params - The parameters for creating a new client
   * @param {string} [params.path] - The base path for the Chroma API.
   * @returns {AdminClient} A new AdminClient instance.
   *
   * @example
   * ```typescript
   * const client = new AdminClient({
   *   path: "http://localhost:8000"
   * });
   * ```
   */
  constructor({
    path,
    fetchOptions,
    auth,
    tenant = DEFAULT_TENANT,
    database = DEFAULT_DATABASE
  } = {}) {
    this.tenant = DEFAULT_TENANT;
    this.database = DEFAULT_DATABASE;
    if (path === void 0)
      path = "http://localhost:8000";
    this.tenant = tenant;
    this.database = database;
    this.authProvider = void 0;
    const apiConfig = new Configuration({
      basePath: path
    });
    this.api = new ApiApi(apiConfig, void 0, chromaFetch);
    this.api.options = fetchOptions ?? {};
    if (auth !== void 0) {
      this.authProvider = authOptionsToAuthProvider(auth);
      this.api.options.headers = {
        ...this.api.options.headers,
        ...this.authProvider.authenticate()
      };
    }
  }
  /**
   * Sets the tenant and database for the client.
   *
   * @param {Object} params - The parameters for setting tenant and database.
   * @param {string} params.tenant - The name of the tenant.
   * @param {string} params.database - The name of the database.
   *
   * @returns {Promise<void>} A promise that returns nothing
   * @throws {Error} Any issues
   *
   * @example
   * ```typescript
   * await adminClient.setTenant({
   *   tenant: "my_tenant",
   *   database: "my_database",
   * });
   * ```
   */
  async setTenant({
    tenant = DEFAULT_TENANT,
    database = DEFAULT_DATABASE
  }) {
    await validateTenantDatabase(this, tenant, database);
    this.tenant = tenant;
    this.database = database;
  }
  /**
   * Sets the database for the client.
   *
   * @param {Object} params - The parameters for setting the database.
   * @param {string} params.database - The name of the database.
   *
   * @returns {Promise<void>} A promise that returns nothing
   * @throws {Error} Any issues
   *
   * @example
   * ```typescript
   * await adminClient.setDatabase({
   *   database: "my_database",
   * });
   * ```
   */
  async setDatabase({
    database = DEFAULT_DATABASE
  }) {
    await validateTenantDatabase(this, this.tenant, database);
    this.database = database;
  }
  /**
   * Creates a new tenant with the specified properties.
   *
   * @param {Object} params - The parameters for creating a new tenant.
   * @param {string} params.name - The name of the tenant.
   *
   * @returns {Promise<Tenant>} A promise that resolves to the created tenant.
   * @throws {Error} If there is an issue creating the tenant.
   *
   * @example
   * ```typescript
   * await adminClient.createTenant({
   *   name: "my_tenant",
   * });
   * ```
   */
  async createTenant({ name }) {
    await this.api.createTenant({ name }, this.api.options);
    return { name };
  }
  /**
   * Gets a tenant with the specified properties.
   *
   * @param {Object} params - The parameters for getting a tenant.
   * @param {string} params.name - The name of the tenant.
   *
   * @returns {Promise<Tenant>} A promise that resolves to the tenant.
   * @throws {Error} If there is an issue getting the tenant.
   *
   * @example
   * ```typescript
   * await adminClient.getTenant({
   *   name: "my_tenant",
   * });
   * ```
   */
  async getTenant({ name }) {
    const getTenant = await this.api.getTenant(
      name,
      this.api.options
    );
    return { name: getTenant.name };
  }
  /**
   * Creates a new database with the specified properties.
   *
   * @param {Object} params - The parameters for creating a new database.
   * @param {string} params.name - The name of the database.
   * @param {string} params.tenantName - The name of the tenant.
   *
   * @returns {Promise<Database>} A promise that resolves to the created database.
   * @throws {Error} If there is an issue creating the database.
   *
   * @example
   * ```typescript
   * await adminClient.createDatabase({
   *   name: "my_database",
   *   tenantName: "my_tenant",
   * });
   * ```
   */
  async createDatabase({
    name,
    tenantName
  }) {
    await this.api.createDatabase(tenantName, { name }, this.api.options);
    return { name };
  }
  /**
   * Gets a database with the specified properties.
   *
   * @param {Object} params - The parameters for getting a database.
   * @param {string} params.name - The name of the database.
   * @param {string} params.tenantName - The name of the tenant.
   *
   * @returns {Promise<Database>} A promise that resolves to the database.
   * @throws {Error} If there is an issue getting the database.
   *
   * @example
   * ```typescript
   * await adminClient.getDatabase({
   *   name: "my_database",
   *   tenantName: "my_tenant",
   * });
   * ```
   */
  async getDatabase({
    name,
    tenantName
  }) {
    const result = await this.api.getDatabase(
      name,
      tenantName,
      this.api.options
    );
    return result;
  }
  /**
   * Deletes a database.
   *
   * @param {Object} params - The parameters for deleting a database.
   * @param {string} params.name - The name of the database.
   * @param {string} params.tenantName - The name of the tenant.
   *
   * @returns {Promise<void>} A promise that returns nothing.
   * @throws {Error} If there is an issue deleting the database.
   */
  async deleteDatabase({
    name,
    tenantName
  }) {
    await this.api.deleteDatabase(name, tenantName, this.api.options);
  }
  /**
   * Lists database for a specific tenant.
   *
   * @param {Object} params - The parameters for listing databases.
   * @param {number} [params.limit] - The maximum number of databases to return.
   * @param {number} [params.offset] - The number of databases to skip.
   *
   * @returns {Promise<Database[]>} A promise that resolves to a list of databases.
   * @throws {Error} If there is an issue listing the databases.
   */
  async listDatabases({
    limit,
    offset,
    tenantName
  }) {
    return await this.api.listDatabases(
      tenantName,
      limit,
      offset,
      this.api.options
    );
  }
};

// ../chromadb-core/src/embeddings/DefaultEmbeddingFunction.ts
var TransformersApi;
var DefaultEmbeddingFunction = class _DefaultEmbeddingFunction {
  /**
   * DefaultEmbeddingFunction constructor.
   * @param options The configuration options.
   * @param options.model The model to use to calculate embeddings. Defaults to 'Xenova/all-MiniLM-L6-v2', which is an ONNX port of `sentence-transformers/all-MiniLM-L6-v2`.
   * @param options.revision The specific model version to use (can be a branch, tag name, or commit id). Defaults to 'main'.
   * @param options.quantized Whether to load the 8-bit quantized version of the model. Defaults to `false`.
   * @param options.progress_callback If specified, this function will be called during model construction, to provide the user with progress updates.
   */
  constructor({
    model = "Xenova/all-MiniLM-L6-v2",
    revision = "main",
    quantized = false,
    progress_callback = null
  } = {}) {
    this.name = "default";
    this.model = model;
    this.revision = revision;
    this.quantized = quantized;
    this.progress_callback = progress_callback;
  }
  async generate(texts) {
    await this.loadClient();
    this.pipelinePromise = new Promise(async (resolve2, reject) => {
      try {
        const pipeline = this.transformersApi;
        const quantized = this.quantized;
        const revision = this.revision;
        const progress_callback = this.progress_callback;
        resolve2(
          await pipeline("feature-extraction", this.model, {
            quantized,
            revision,
            progress_callback
          })
        );
      } catch (e6) {
        reject(e6);
      }
    });
    let pipe = await this.pipelinePromise;
    let output = await pipe(texts, { pooling: "mean", normalize: true });
    return output.tolist();
  }
  getConfig() {
    return {
      model_name: this.model,
      revision: this.revision,
      quantized: this.quantized
    };
  }
  buildFromConfig(config) {
    return new _DefaultEmbeddingFunction({
      model: config.model_name,
      revision: config.revision,
      quantized: config.quantized
    });
  }
  validateConfigUpdate(oldConfig, newConfig) {
    if (oldConfig.model_name !== newConfig.model_name) {
      throw new Error(
        "DefaultEmbeddingFunction model_name cannot be changed after initialization."
      );
    }
  }
  async loadClient() {
    if (this.transformersApi)
      return;
    try {
      let { pipeline } = await _DefaultEmbeddingFunction.import();
      TransformersApi = pipeline;
    } catch (_a3) {
      if (_a3.code === "MODULE_NOT_FOUND") {
        throw new Error(
          "Please install the chromadb-default-embed package to use the DefaultEmbeddingFunction, `npm install chromadb-default-embed`"
        );
      }
      throw _a3;
    }
    this.transformersApi = TransformersApi;
  }
  /** @ignore */
  static async import() {
    try {
      const { pipeline } = await import("chromadb-default-embed");
      return { pipeline };
    } catch (e6) {
      throw new Error(
        "Please install chromadb-default-embed as a dependency with, e.g. `npm install chromadb-default-embed`"
      );
    }
  }
};

// ../chromadb-core/src/ChromaClient.ts
var DEFAULT_TENANT2 = "default_tenant";
var DEFAULT_DATABASE2 = "default_database";
var ChromaClient = class {
  /**
   * Creates a new ChromaClient instance.
   * @param {Object} params - The parameters for creating a new client
   * @param {string} [params.path] - The base path for the Chroma API.
   * @returns {ChromaClient} A new ChromaClient instance.
   *
   * @example
   * ```typescript
   * const client = new ChromaClient({
   *   path: "http://localhost:8000"
   * });
   * ```
   */
  constructor({
    path = "http://localhost:8000",
    fetchOptions,
    auth,
    tenant = DEFAULT_TENANT2,
    database = DEFAULT_DATABASE2
  } = {}) {
    this.tenant = tenant;
    this.database = database;
    this.authProvider = void 0;
    const apiConfig = new Configuration({
      basePath: path
    });
    this.api = new ApiApi(apiConfig, void 0, chromaFetch);
    this.api.options = fetchOptions ?? {};
    if (auth !== void 0) {
      this.authProvider = authOptionsToAuthProvider(auth);
      this.api.options.headers = {
        ...this.api.options.headers,
        ...this.authProvider.authenticate()
      };
    }
    this._adminClient = new AdminClient({
      path,
      fetchOptions,
      auth,
      tenant,
      database
    });
  }
  /** @ignore */
  async init() {
    if (!this._initPromise) {
      if (this.authProvider !== void 0) {
        await this.getUserIdentity();
      }
      this._initPromise = validateTenantDatabase(
        this._adminClient,
        this.tenant,
        this.database
      );
    }
    return this._initPromise;
  }
  /**
   * Tries to set the tenant and database for the client.
   *
   * @returns {Promise<void>} A promise that resolves when the tenant/database is resolved.
   * @throws {Error} If there is an issue resolving the tenant and database.
   *
   */
  async getUserIdentity() {
    const user_identity = await this.api.getUserIdentity(
      this.api.options
    );
    const user_tenant = user_identity.tenant;
    const user_databases = user_identity.databases;
    if (user_tenant !== null && user_tenant !== void 0 && user_tenant !== "*" && this.tenant == DEFAULT_TENANT2) {
      this.tenant = user_tenant;
    }
    if (user_databases !== null && user_databases !== void 0 && user_databases.length == 1 && user_databases[0] !== "*" && this.database == DEFAULT_DATABASE2) {
      this.database = user_databases[0];
    }
  }
  /**
   * Resets the state of the object by making an API call to the reset endpoint.
   *
   * @returns {Promise<boolean>} A promise that resolves when the reset operation is complete.
   * @throws {ChromaConnectionError} If the client is unable to connect to the server.
   * @throws {ChromaServerError} If the server experienced an error while the state.
   *
   * @example
   * ```typescript
   * await client.reset();
   * ```
   */
  async reset() {
    await this.init();
    return await this.api.postV2Reset(this.api.options);
  }
  /**
   * Returns the version of the Chroma API.
   * @returns {Promise<string>} A promise that resolves to the version of the Chroma API.
   * @throws {ChromaConnectionError} If the client is unable to connect to the server.
   *
   * @example
   * ```typescript
   * const version = await client.version();
   * ```
   */
  async version() {
    return await this.api.getV2Version(this.api.options);
  }
  /**
   * Returns a heartbeat from the Chroma API.
   * @returns {Promise<number>} A promise that resolves to the heartbeat from the Chroma API.
   * @throws {ChromaConnectionError} If the client is unable to connect to the server.
   *
   * @example
   * ```typescript
   * const heartbeat = await client.heartbeat();
   * ```
   */
  async heartbeat() {
    const response = await this.api.getV2Heartbeat(this.api.options);
    return response["nanosecond heartbeat"];
  }
  /**
   * Creates a new collection with the specified properties.
   *
   * @param {Object} params - The parameters for creating a new collection.
   * @param {string} params.name - The name of the collection.
   * @param {CollectionMetadata} [params.metadata] - Optional metadata associated with the collection.
   * @param {IEmbeddingFunction} [params.embeddingFunction] - Optional custom embedding function for the collection.
   *
   * @returns {Promise<Collection>} A promise that resolves to the created collection.
   * @throws {ChromaConnectionError} If the client is unable to connect to the server.
   * @throws {ChromaServerError} If there is an issue creating the collection.
   *
   * @example
   * ```typescript
   * const collection = await client.createCollection({
   *   name: "my_collection",
   *   metadata: {
   *     "description": "My first collection"
   *   }
   * });
   * ```
   */
  async createCollection({
    name,
    metadata,
    embeddingFunction = new DefaultEmbeddingFunction()
  }) {
    await this.init();
    const newCollection = await this.api.createCollection(
      this.tenant,
      this.database,
      {
        name,
        // @ts-ignore: we need to generate the client libraries again
        configuration: null,
        //TODO: Configuration type in JavaScript
        metadata
      },
      this.api.options
    );
    return wrapCollection(this, {
      name: newCollection.name,
      id: newCollection.id,
      metadata: newCollection.metadata,
      embeddingFunction
    });
  }
  /**
   * Gets or creates a collection with the specified properties.
   *
   * @param {Object} params - The parameters for creating a new collection.
   * @param {string} params.name - The name of the collection.
   * @param {CollectionMetadata} [params.metadata] - Optional metadata associated with the collection.
   * @param {IEmbeddingFunction} [params.embeddingFunction] - Optional custom embedding function for the collection.
   *
   * @returns {Promise<Collection>} A promise that resolves to the got or created collection.
   * @throws {Error} If there is an issue getting or creating the collection.
   *
   * @example
   * ```typescript
   * const collection = await client.getOrCreateCollection({
   *   name: "my_collection",
   *   metadata: {
   *     "description": "My first collection"
   *   }
   * });
   * ```
   */
  async getOrCreateCollection({
    name,
    metadata,
    embeddingFunction = new DefaultEmbeddingFunction()
  }) {
    await this.init();
    const newCollection = await this.api.createCollection(
      this.tenant,
      this.database,
      {
        name,
        // @ts-ignore: we need to generate the client libraries again
        configuration: null,
        //TODO: Configuration type in JavaScript
        metadata,
        get_or_create: true
      },
      this.api.options
    );
    return wrapCollection(this, {
      name: newCollection.name,
      id: newCollection.id,
      metadata: newCollection.metadata,
      embeddingFunction
    });
  }
  /**
   * Get all collection names.
   *
   * @returns {Promise<string[]>} A promise that resolves to a list of collection names.
   * @param {PositiveInteger} [params.limit] - Optional limit on the number of items to get.
   * @param {PositiveInteger} [params.offset] - Optional offset on the items to get.
   * @throws {Error} If there is an issue listing the collections.
   *
   * @example
   * ```typescript
   * const collections = await client.listCollections({
   *     limit: 10,
   *     offset: 0,
   * });
   * ```
   */
  async listCollections({ limit, offset } = {}) {
    await this.init();
    const collections = await this.api.listCollections(
      this.tenant,
      this.database,
      limit,
      offset,
      this.api.options
    );
    return collections.map((collection) => collection.name);
  }
  /**
   * List collection names, IDs, and metadata.
   *
   * @param {PositiveInteger} [params.limit] - Optional limit on the number of items to get.
   * @param {PositiveInteger} [params.offset] - Optional offset on the items to get.
   * @throws {Error} If there is an issue listing the collections.
   * @returns {Promise<{ name: string, id: string, metadata?: CollectionMetadata }[]>} A promise that resolves to a list of collection names, IDs, and metadata.
   *
   * @example
   * ```typescript
   * const collections = await client.listCollectionsAndMetadata({
   *    limit: 10,
   *    offset: 0,
   * });
   */
  async listCollectionsAndMetadata({
    limit,
    offset
  } = {}) {
    await this.init();
    return await this.api.listCollections(
      this.tenant,
      this.database,
      limit,
      offset,
      this.api.options
    );
  }
  /**
   * Counts all collections.
   *
   * @returns {Promise<number>} A promise that resolves to the number of collections.
   * @throws {Error} If there is an issue counting the collections.
   *
   * @example
   * ```typescript
   * const collections = await client.countCollections();
   * ```
   */
  async countCollections() {
    await this.init();
    return await this.api.countCollections(
      this.tenant,
      this.database,
      this.api.options
    );
  }
  /**
   * Gets a collection with the specified name.
   * @param {Object} params - The parameters for getting a collection.
   * @param {string} params.name - The name of the collection.
   * @param {IEmbeddingFunction} [params.embeddingFunction] - Optional custom embedding function for the collection.
   * @returns {Promise<Collection>} A promise that resolves to the collection.
   * @throws {Error} If there is an issue getting the collection.
   *
   * @example
   * ```typescript
   * const collection = await client.getCollection({
   *   name: "my_collection"
   * });
   * ```
   */
  async getCollection({
    name,
    embeddingFunction
  }) {
    await this.init();
    const response = await this.api.getCollection(
      this.tenant,
      this.database,
      name,
      this.api.options
    );
    return wrapCollection(this, {
      name: response.name,
      id: response.id,
      metadata: response.metadata,
      embeddingFunction
    });
  }
  /**
   * Deletes a collection with the specified name.
   * @param {Object} params - The parameters for deleting a collection.
   * @param {string} params.name - The name of the collection.
   * @returns {Promise<void>} A promise that resolves when the collection is deleted.
   * @throws {Error} If there is an issue deleting the collection.
   *
   * @example
   * ```typescript
   * await client.deleteCollection({
   *  name: "my_collection"
   * });
   * ```
   */
  async deleteCollection({ name }) {
    await this.init();
    await this.api.deleteCollection(
      name,
      this.tenant,
      this.database,
      this.api.options
    );
  }
};

// ../chromadb-core/src/CloudClient.ts
var CloudClient = class extends ChromaClient {
  constructor({
    apiKey,
    database,
    tenant,
    cloudHost,
    cloudPort
  }) {
    if (!apiKey) {
      apiKey = process.env.CHROMA_API_KEY;
    }
    if (!apiKey) {
      throw new Error("No API key provided");
    }
    cloudHost = cloudHost || "https://api.trychroma.com";
    cloudPort = cloudPort || "8000";
    const path = `${cloudHost}:${cloudPort}`;
    const auth = {
      provider: "token",
      credentials: apiKey,
      tokenHeaderType: "X_CHROMA_TOKEN"
    };
    return new ChromaClient({
      path,
      auth,
      database,
      tenant
    });
    super();
  }
};

// ../chromadb-core/src/embeddings/CohereEmbeddingFunction.ts
var CohereAISDK56 = class {
  constructor(configuration) {
    this.apiKey = configuration.apiKey;
  }
  async loadClient() {
    if (this.cohereClient)
      return;
    const { default: cohere } = await Promise.resolve().then(() => __toESM(require_cohere_ai(), 1));
    cohere.init(this.apiKey);
    this.cohereClient = cohere;
  }
  async createEmbedding(params) {
    await this.loadClient();
    return await this.cohereClient.embed({
      texts: params.input,
      model: params.model
    }).then((response) => {
      return response.body.embeddings;
    });
  }
};
var CohereAISDK7 = class {
  constructor(configuration) {
    this.apiKey = configuration.apiKey;
  }
  async loadClient() {
    if (this.cohereClient)
      return;
    const cohere = await Promise.resolve().then(() => __toESM(require_cohere_ai(), 1)).then((cohere2) => {
      return cohere2;
    });
    this.cohereClient = new cohere.CohereClient({
      token: this.apiKey
    });
  }
  async createEmbedding(params) {
    await this.loadClient();
    return await this.cohereClient.embed({ texts: params.input, model: params.model }).then((response) => {
      return response.embeddings;
    });
  }
};
var CohereEmbeddingFunction = class _CohereEmbeddingFunction {
  constructor({
    cohere_api_key,
    model = "large",
    cohere_api_key_env_var = "CHROMA_COHERE_API_KEY"
  }) {
    this.name = "cohere";
    this.model = model;
    const apiKey = cohere_api_key ?? process.env[cohere_api_key_env_var];
    if (!apiKey) {
      throw new Error(
        `Cohere API key is required. Please provide it in the constructor or set the environment variable ${cohere_api_key_env_var}.`
      );
    }
    this.apiKey = apiKey;
    this.apiKeyEnvVar = cohere_api_key_env_var;
  }
  async initCohereClient() {
    if (this.cohereAiApi)
      return;
    try {
      this.cohereAiApi = await Promise.resolve().then(() => __toESM(require_cohere_ai(), 1)).then((cohere) => {
        if (cohere.CohereClient) {
          return new CohereAISDK7({ apiKey: this.apiKey });
        } else {
          return new CohereAISDK56({ apiKey: this.apiKey });
        }
      });
    } catch (e6) {
      if (e6.code === "MODULE_NOT_FOUND") {
        throw new Error(
          "Please install the cohere-ai package to use the CohereEmbeddingFunction, `npm install -S cohere-ai`"
        );
      }
      throw e6;
    }
  }
  async generate(texts) {
    await this.initCohereClient();
    return await this.cohereAiApi.createEmbedding({
      model: this.model,
      input: texts
    });
  }
  buildFromConfig(config) {
    return new _CohereEmbeddingFunction({
      model: config.model_name,
      cohere_api_key_env_var: config.api_key_env_var
    });
  }
  getConfig() {
    return {
      model_name: this.model,
      api_key_env_var: this.apiKeyEnvVar
    };
  }
  validateConfigUpdate(oldConfig, newConfig) {
    if (oldConfig.model_name !== newConfig.model_name) {
      throw new Error(
        "CohereEmbeddingFunction model_name cannot be changed after initialization."
      );
    }
  }
  supportedSpaces() {
    if (this.model === "embed-english-v3.0") {
      return ["cosine", "l2", "inner_product"];
    }
    if (this.model === "embed-english-light-v3.0") {
      return ["cosine", "inner_product", "l2"];
    }
    if (this.model === "embed-english-v2.0") {
      return ["cosine"];
    }
    if (this.model === "embed-english-light-v2.0") {
      return ["cosine"];
    }
    if (this.model === "embed-multilingual-v3.0") {
      return ["cosine", "l2", "inner_product"];
    }
    if (this.model === "embed-multilingual-light-v3.0") {
      return ["cosine", "l2", "inner_product"];
    }
    if (this.model === "embed-multilingual-v2.0") {
      return ["inner_product"];
    }
    return ["cosine", "l2", "inner_product"];
  }
  defaultSpace() {
    if (this.model == "embed-multilingual-v2.0") {
      return "inner_product";
    }
    return "cosine";
  }
};

// ../chromadb-core/src/embeddings/GoogleGeminiEmbeddingFunction.ts
var googleGenAiApi;
var GoogleGenerativeAiEmbeddingFunction = class _GoogleGenerativeAiEmbeddingFunction {
  constructor({
    googleApiKey,
    model = "embedding-001",
    taskType = "RETRIEVAL_DOCUMENT",
    apiKeyEnvVar = "GOOGLE_API_KEY"
  }) {
    this.name = "google_generative_ai";
    const apiKey = googleApiKey ?? process.env[apiKeyEnvVar];
    if (!apiKey) {
      throw new Error(
        `Google API key is required. Please provide it in the constructor or set the environment variable ${apiKeyEnvVar}.`
      );
    }
    this.api_key = apiKey;
    this.api_key_env_var = apiKeyEnvVar;
    this.model = model;
    this.taskType = taskType;
  }
  async loadClient() {
    if (this.googleGenAiApi)
      return;
    try {
      const { googleGenAi } = await _GoogleGenerativeAiEmbeddingFunction.import();
      googleGenAiApi = googleGenAi;
      googleGenAiApi = new googleGenAiApi(this.api_key);
    } catch (_a3) {
      if (_a3.code === "MODULE_NOT_FOUND") {
        throw new Error(
          "Please install the @google/generative-ai package to use the GoogleGenerativeAiEmbeddingFunction, `npm install @google/generative-ai`"
        );
      }
      throw _a3;
    }
    this.googleGenAiApi = googleGenAiApi;
  }
  async generate(texts) {
    await this.loadClient();
    const model = this.googleGenAiApi.getGenerativeModel({ model: this.model });
    const response = await model.batchEmbedContents({
      requests: texts.map((t6) => ({
        content: { parts: [{ text: t6 }] },
        taskType: this.taskType
      }))
    });
    const embeddings = response.embeddings.map((e6) => e6.values);
    return embeddings;
  }
  /** @ignore */
  static async import() {
    try {
      const { GoogleGenerativeAI: GoogleGenerativeAI2 } = await Promise.resolve().then(() => (init_dist(), dist_exports));
      const googleGenAi = GoogleGenerativeAI2;
      return { googleGenAi };
    } catch (e6) {
      throw new Error(
        "Please install @google/generative-ai as a dependency with, e.g. `npm install @google/generative-ai`"
      );
    }
  }
  buildFromConfig(config) {
    return new _GoogleGenerativeAiEmbeddingFunction({
      model: config.model_name,
      apiKeyEnvVar: config.api_key_env_var
    });
  }
  getConfig() {
    return {
      api_key_env_var: this.api_key_env_var,
      model_name: this.model
    };
  }
  validateConfigUpdate(oldConfig, newConfig) {
    if (oldConfig.model_name !== newConfig.model_name) {
      throw new Error("The model name cannot be changed after initialization.");
    }
    if (oldConfig.taskType !== newConfig.taskType) {
      throw new Error("The task type cannot be changed after initialization.");
    }
  }
};

// ../chromadb-core/src/embeddings/HuggingFaceEmbeddingServerFunction.ts
var HuggingFaceEmbeddingServerFunction = class _HuggingFaceEmbeddingServerFunction {
  constructor({ url }) {
    this.name = "huggingface_server";
    this.url = url;
  }
  async generate(texts) {
    const response = await fetch(this.url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ inputs: texts })
    });
    if (!response.ok) {
      throw new Error(`Failed to generate embeddings: ${response.statusText}`);
    }
    const data = await response.json();
    return data;
  }
  buildFromConfig(config) {
    return new _HuggingFaceEmbeddingServerFunction(config);
  }
  toConfig() {
    return {
      url: this.url
    };
  }
  validateConfigUpdate(oldConfig, newConfig) {
    if (oldConfig.url !== newConfig.url) {
      throw new Error("Changing the URL is not allowed.");
    }
  }
};

// ../chromadb-core/src/embeddings/JinaEmbeddingFunction.ts
var JinaEmbeddingFunction = class _JinaEmbeddingFunction {
  constructor({
    jinaai_api_key,
    model_name = "jina-embeddings-v2-base-en",
    api_key_env_var = "JINAAI_API_KEY"
  }) {
    this.name = "jina";
    const apiKey = jinaai_api_key ?? process.env[api_key_env_var];
    if (!apiKey) {
      throw new Error(
        `Jina AI API key is required. Please provide it in the constructor or set the environment variable ${api_key_env_var}.`
      );
    }
    this.model_name = model_name;
    this.api_key_env_var = api_key_env_var;
    this.api_url = "https://api.jina.ai/v1/embeddings";
    this.headers = {
      Authorization: `Bearer ${jinaai_api_key}`,
      "Accept-Encoding": "identity",
      "Content-Type": "application/json"
    };
  }
  async generate(texts) {
    try {
      const response = await fetch(this.api_url, {
        method: "POST",
        headers: this.headers,
        body: JSON.stringify({
          input: texts,
          model: this.model_name
        })
      });
      const data = await response.json();
      if (!data || !data.data) {
        throw new Error(data.detail);
      }
      const embeddings = data.data;
      const sortedEmbeddings = embeddings.sort((a6, b6) => a6.index - b6.index);
      return sortedEmbeddings.map((result) => result.embedding);
    } catch (error2) {
      if (error2 instanceof Error) {
        throw new Error(`Error calling Jina AI API: ${error2.message}`);
      } else {
        throw new Error(`Error calling Jina AI API: ${error2}`);
      }
    }
  }
  buildFromConfig(config) {
    return new _JinaEmbeddingFunction({
      model_name: config.model_name,
      api_key_env_var: config.api_key_env_var
    });
  }
  getConfig() {
    return {
      api_key_env_var: this.api_key_env_var,
      model_name: this.model_name
    };
  }
};

// ../chromadb-core/src/embeddings/OllamaEmbeddingFunction.ts
var OllamaEmbeddingFunction = class _OllamaEmbeddingFunction {
  constructor({
    url = "http://localhost:11434",
    model = "chroma/all-minilm-l6-v2-f32"
  } = {}) {
    this.name = "ollama";
    if (url && url.endsWith("/api/embeddings")) {
      this.url = url.slice(0, -"/api/embeddings".length);
    } else {
      this.url = url;
    }
    this.model = model;
  }
  async initClient() {
    if (this.ollamaClient)
      return;
    try {
      const { ollama } = await _OllamaEmbeddingFunction.import();
      this.ollamaClient = new ollama.Ollama({ host: this.url });
    } catch (e6) {
      if (e6.code === "MODULE_NOT_FOUND") {
        throw new Error(
          "Please install the ollama package to use the OllamaEmbeddingFunction, `npm install -S ollama`"
        );
      }
      throw e6;
    }
  }
  /** @ignore */
  static async import() {
    try {
      const { ollama } = await Promise.resolve().then(() => (init_dist2(), dist_exports2)).then((m6) => ({ ollama: m6 }));
      return { ollama };
    } catch (e6) {
      throw new Error(
        "Please install Ollama as a dependency with, e.g. `npm install ollama`"
      );
    }
  }
  async generate(texts) {
    await this.initClient();
    return await this.ollamaClient.embed({
      model: this.model,
      input: texts
    }).then((response) => {
      return response.embeddings;
    });
  }
  buildFromConfig(config) {
    return new _OllamaEmbeddingFunction({
      url: config.url,
      model: config.model_name
    });
  }
  getConfig() {
    return {
      url: this.url,
      model_name: this.model
    };
  }
};

// ../chromadb-core/src/embeddings/OpenAIEmbeddingFunction.ts
var OpenAIApi;
var openAiVersion = null;
var openAiMajorVersion = null;
var OpenAIAPIv3 = class {
  constructor(configuration) {
    this.configuration = new OpenAIApi.Configuration({
      organization: configuration.organization,
      apiKey: configuration.apiKey
    });
    this.openai = new OpenAIApi.OpenAIApi(this.configuration);
  }
  async createEmbedding(params) {
    const embeddings = [];
    const response = await this.openai.createEmbedding({
      model: params.model,
      input: params.input
    }).catch((error2) => {
      throw error2;
    });
    const data = response.data["data"];
    for (let i6 = 0; i6 < data.length; i6 += 1) {
      embeddings.push(data[i6]["embedding"]);
    }
    return embeddings;
  }
};
var OpenAIAPIv4 = class {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.openai = new OpenAIApi({
      apiKey: this.apiKey
    });
  }
  async createEmbedding(params) {
    const embeddings = [];
    const response = await this.openai.embeddings.create(params);
    const data = response["data"];
    for (let i6 = 0; i6 < data.length; i6 += 1) {
      embeddings.push(data[i6]["embedding"]);
    }
    return embeddings;
  }
};
var OpenAIEmbeddingFunction = class _OpenAIEmbeddingFunction {
  constructor({
    openai_api_key,
    openai_model = "text-embedding-ada-002",
    openai_organization_id,
    openai_embedding_dimensions,
    openai_api_key_env_var = "OPENAI_API_KEY"
  }) {
    this.name = "openai";
    const apiKey = openai_api_key ?? process.env[openai_api_key_env_var];
    if (!apiKey) {
      throw new Error(
        `OpenAI API key is required. Please provide it in the constructor or set the environment variable ${openai_api_key_env_var}.`
      );
    }
    this.api_key = apiKey;
    this.org_id = openai_organization_id ?? "";
    this.model = openai_model;
    this.dimensions = openai_embedding_dimensions ?? 1536;
  }
  async loadClient() {
    if (this.openaiApi)
      return;
    try {
      const { openai, version: version2 } = await _OpenAIEmbeddingFunction.import();
      OpenAIApi = openai;
      let versionVar = version2;
      openAiVersion = versionVar.replace(/[^0-9.]/g, "");
      openAiMajorVersion = parseInt(openAiVersion.split(".")[0]);
    } catch (_a3) {
      if (_a3.code === "MODULE_NOT_FOUND") {
        throw new Error(
          "Please install the openai package to use the OpenAIEmbeddingFunction, e.g. `npm install openai`"
        );
      }
      throw _a3;
    }
    if (openAiMajorVersion > 3) {
      this.openaiApi = new OpenAIAPIv4(this.api_key);
    } else {
      this.openaiApi = new OpenAIAPIv3({
        organization: this.org_id,
        apiKey: this.api_key
      });
    }
  }
  async generate(texts) {
    await this.loadClient();
    return await this.openaiApi.createEmbedding({
      model: this.model,
      input: texts,
      dimensions: this.dimensions
    }).catch((error2) => {
      throw error2;
    });
  }
  /** @ignore */
  static async import() {
    try {
      const { default: openai } = await Promise.resolve().then(() => (init_openai(), openai_exports));
      const { VERSION: VERSION2 } = await Promise.resolve().then(() => (init_version(), version_exports));
      return { openai, version: VERSION2 };
    } catch (e6) {
      throw new Error(
        "Please install the openai package to use the OpenAIEmbeddingFunction, e.g. `npm install openai`"
      );
    }
  }
  buildFromConfig(config) {
    return new _OpenAIEmbeddingFunction({
      openai_api_key: config.api_key_env_var,
      openai_model: config.model_name,
      openai_organization_id: config.organization_id,
      openai_embedding_dimensions: config.dimensions
    });
  }
  getConfig() {
    return {
      api_key_env_var: this.api_key,
      model_name: this.model,
      organization_id: this.org_id,
      dimensions: this.dimensions ?? 1536
    };
  }
  validateConfigUpdate(oldConfig, newConfig) {
    if (oldConfig.model_name !== newConfig.model_name) {
      throw new Error("Cannot change model name.");
    }
  }
};

// ../chromadb-core/src/embeddings/TransformersEmbeddingFunction.ts
var TransformersApi2;
var TransformersEmbeddingFunction = class _TransformersEmbeddingFunction {
  /**
   * TransformersEmbeddingFunction constructor.
   * @param options The configuration options.
   * @param options.model The model to use to calculate embeddings. Defaults to 'Xenova/all-MiniLM-L6-v2', which is an ONNX port of `sentence-transformers/all-MiniLM-L6-v2`.
   * @param options.revision The specific model version to use (can be a branch, tag name, or commit id). Defaults to 'main'.
   * @param options.quantized Whether to load the 8-bit quantized version of the model. Defaults to `false`.
   * @param options.progress_callback If specified, this function will be called during model construction, to provide the user with progress updates.
   */
  constructor({
    model = "Xenova/all-MiniLM-L6-v2",
    revision = "main",
    quantized = false,
    progress_callback = null
  } = {}) {
    this.name = "transformers";
    this.model = model;
    this.revision = revision;
    this.quantized = quantized;
    this.progress_callback = progress_callback;
  }
  async generate(texts) {
    await this.loadClient();
    this.pipelinePromise = new Promise(async (resolve2, reject) => {
      try {
        const pipeline = this.transformersApi;
        const quantized = this.quantized;
        const revision = this.revision;
        const progress_callback = this.progress_callback;
        resolve2(
          await pipeline("feature-extraction", this.model, {
            quantized,
            revision,
            progress_callback
          })
        );
      } catch (e6) {
        reject(e6);
      }
    });
    let pipe = await this.pipelinePromise;
    let output = await pipe(texts, { pooling: "mean", normalize: true });
    return output.tolist();
  }
  async loadClient() {
    if (this.transformersApi)
      return;
    try {
      let { pipeline } = await _TransformersEmbeddingFunction.import();
      TransformersApi2 = pipeline;
    } catch (_a3) {
      if (_a3.code === "MODULE_NOT_FOUND") {
        throw new Error(
          "Please install the @xenova/transformers package to use the TransformersEmbeddingFunction, `npm install @xenova/transformers`"
        );
      }
      throw _a3;
    }
    this.transformersApi = TransformersApi2;
  }
  /** @ignore */
  static async import() {
    try {
      const { pipeline } = await import("@xenova/transformers");
      return { pipeline };
    } catch (e6) {
      throw new Error(
        "Please install @xenova/transformers as a dependency with, e.g. `npm install @xenova/transformers`"
      );
    }
  }
  buildFromConfig(config) {
    return new _TransformersEmbeddingFunction({
      model: config.model,
      revision: config.revision,
      quantized: config.quantized
    });
  }
  getConfig() {
    return {
      model: this.model,
      revision: this.revision,
      quantized: this.quantized
    };
  }
  validateConfigUpdate(oldConfig, newConfig) {
    if (oldConfig.model !== newConfig.model) {
      throw new Error("Cannot change the model of the embedding function.");
    }
    if (oldConfig.revision !== newConfig.revision) {
      throw new Error("Cannot change the revision of the embedding function.");
    }
    if (oldConfig.quantized !== newConfig.quantized) {
      throw new Error(
        "Cannot change the quantization of the embedding function."
      );
    }
  }
};

// ../chromadb-core/src/embeddings/VoyageAIEmbeddingFunction.ts
var VoyageAIAPI = class {
  constructor(configuration) {
    this.apiKey = configuration.apiKey;
  }
  async loadClient() {
    if (this.client)
      return;
    const voyageai = await Promise.resolve().then(() => __toESM(require_voyageai(), 1)).then((voyageai2) => {
      return voyageai2;
    });
    this.client = new voyageai.VoyageAIClient({
      apiKey: this.apiKey
    });
  }
  async createEmbedding(params) {
    await this.loadClient();
    return await this.client.embed({ input: params.input, model: params.model }).then((response) => {
      return response.data.map(
        (item) => item.embedding
      );
    });
  }
};
var VoyageAIEmbeddingFunction = class _VoyageAIEmbeddingFunction {
  constructor({
    api_key,
    model,
    api_key_env_var = "VOYAGE_API_KEY"
  }) {
    this.name = "voyageai";
    const apiKey = api_key ?? process.env[api_key_env_var];
    if (!apiKey) {
      throw new Error(
        `VoyageAI API key is required. Please provide it in the constructor or set the environment variable ${api_key_env_var}.`
      );
    }
    this.apiKey = apiKey;
    this.model = model;
  }
  async initClient() {
    if (this.voyageAiApi)
      return;
    try {
      this.voyageAiApi = await Promise.resolve().then(() => __toESM(require_voyageai(), 1)).then((voyageai) => {
        return new VoyageAIAPI({ apiKey: this.apiKey });
      });
    } catch (e6) {
      if (e6.code === "MODULE_NOT_FOUND") {
        throw new Error(
          "Please install the voyageai package to use the VoyageAIEmbeddingFunction, `npm install -S voyageai`"
        );
      }
      throw e6;
    }
  }
  async generate(texts) {
    await this.initClient();
    return await this.voyageAiApi.createEmbedding({
      model: this.model,
      input: texts
    });
  }
  buildFromConfig(config) {
    return new _VoyageAIEmbeddingFunction({
      api_key_env_var: config.api_key_env_var,
      model: config.model_name
    });
  }
  getConfig() {
    return {
      api_key_env_var: this.apiKey,
      model_name: this.model
    };
  }
  validateConfigUpdate(oldConfig, newConfig) {
    if (oldConfig.model_name !== newConfig.model_name) {
      throw new Error("Cannot change the model of the embedding function.");
    }
  }
};

// ../chromadb-core/src/types.ts
var IncludeEnum = /* @__PURE__ */ ((IncludeEnum2) => {
  IncludeEnum2["Documents"] = "documents";
  IncludeEnum2["Embeddings"] = "embeddings";
  IncludeEnum2["Metadatas"] = "metadatas";
  IncludeEnum2["Distances"] = "distances";
  return IncludeEnum2;
})(IncludeEnum || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AdminClient,
  ChromaClient,
  ChromaClientError,
  ChromaConnectionError,
  ChromaError,
  ChromaForbiddenError,
  ChromaNotFoundError,
  ChromaServerError,
  ChromaUnauthorizedError,
  ChromaUniqueError,
  ChromaValueError,
  CloudClient,
  CohereEmbeddingFunction,
  Collection,
  DefaultEmbeddingFunction,
  GoogleGenerativeAiEmbeddingFunction,
  HuggingFaceEmbeddingServerFunction,
  IncludeEnum,
  InvalidArgumentError,
  InvalidCollectionError,
  JinaEmbeddingFunction,
  OllamaEmbeddingFunction,
  OpenAIEmbeddingFunction,
  TransformersEmbeddingFunction,
  VoyageAIEmbeddingFunction,
  createErrorByType
});
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

formdata-node/lib/form-data.cjs:
  (*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank *)

mime-db/index.js:
  (*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   *)

mime-types/index.js:
  (*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

@google/generative-ai/dist/index.mjs:
  (**
   * @license
   * Copyright 2023 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

web-streams-polyfill/dist/ponyfill.mjs:
  (**
   * @license
   * web-streams-polyfill v4.0.0-beta.3
   * Copyright 2021 Mattias Buelens, Diwank Singh Tomer and other contributors.
   * This code is released under the MIT license.
   * SPDX-License-Identifier: MIT
   *)

formdata-node/lib/esm/blobHelpers.js:
  (*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank *)

formdata-node/lib/esm/Blob.js:
  (*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank *)

humanize-ms/index.js:
  (*!
   * humanize-ms - index.js
   * Copyright(c) 2014 dead_horse <dead_horse@qq.com>
   * MIT Licensed
   *)

web-streams-polyfill/dist/ponyfill.es2018.js:
  (**
   * @license
   * web-streams-polyfill v3.3.3
   * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.
   * This code is released under the MIT license.
   * SPDX-License-Identifier: MIT
   *)

node-domexception/index.js:
  (*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)
*/
//# sourceMappingURL=chromadb.cjs.map