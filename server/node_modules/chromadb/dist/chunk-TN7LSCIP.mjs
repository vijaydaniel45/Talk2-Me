import {
  getProfileName,
  init_dist_es as init_dist_es2,
  parseKnownFiles
} from "./chunk-4UDAOY2U.mjs";
import {
  CredentialsProviderError,
  init_dist_es
} from "./chunk-GN4I7XPH.mjs";
import {
  __esm
} from "./chunk-DANUECVT.mjs";

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js
var getValidatedProcessCredentials;
var init_getValidatedProcessCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js"() {
    "use strict";
    getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) },
        ...data.CredentialScope && { credentialScope: data.CredentialScope }
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js
import { exec } from "child_process";
import { promisify } from "util";
var resolveProcessCredentials;
var init_resolveProcessCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js"() {
    "use strict";
    init_dist_es();
    init_getValidatedProcessCredentials();
    resolveProcessCredentials = async (profileName, profiles, logger) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = promisify(exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return getValidatedProcessCredentials(profileName, data);
          } catch (error) {
            throw new CredentialsProviderError(error.message, { logger });
          }
        } else {
          throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger });
        }
      } else {
        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {
          logger
        });
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js
var fromProcess;
var init_fromProcess = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js"() {
    "use strict";
    init_dist_es2();
    init_resolveProcessCredentials();
    fromProcess = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-process - fromProcess");
      const profiles = await parseKnownFiles(init);
      return resolveProcessCredentials(getProfileName(init), profiles, init.logger);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/index.js
var init_dist_es3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.587.0/node_modules/@aws-sdk/credential-provider-process/dist-es/index.js"() {
    init_fromProcess();
  }
});

export {
  fromProcess,
  init_dist_es3 as init_dist_es
};
//# sourceMappingURL=chunk-TN7LSCIP.mjs.map