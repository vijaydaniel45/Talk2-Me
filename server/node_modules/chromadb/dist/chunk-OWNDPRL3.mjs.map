{"version":3,"sources":["../../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js"],"sourcesContent":["import { chain, CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName, logger) => {\n    const sourceProvidersMap = {\n        EcsContainer: async (options) => {\n            const { fromHttp } = await import(\"@aws-sdk/credential-provider-http\");\n            const { fromContainerMetadata } = await import(\"@smithy/credential-provider-imds\");\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is EcsContainer\");\n            return chain(fromHttp(options ?? {}), fromContainerMetadata(options));\n        },\n        Ec2InstanceMetadata: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata\");\n            const { fromInstanceMetadata } = await import(\"@smithy/credential-provider-imds\");\n            return fromInstanceMetadata(options);\n        },\n        Environment: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Environment\");\n            const { fromEnv } = await import(\"@aws-sdk/credential-provider-env\");\n            return fromEnv(options);\n        },\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });\n    }\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg, { profile = \"default\", logger } = {}) => {\n    return (Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.role_arn === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n        (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger })));\n};\nconst isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {\n    const withSourceProfile = typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\n    if (withSourceProfile) {\n        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);\n    }\n    return withSourceProfile;\n};\nconst isCredentialSourceProfile = (arg, { profile, logger }) => {\n    const withProviderProfile = typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\n    if (withProviderProfile) {\n        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);\n    }\n    return withProviderProfile;\n};\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)\");\n    const data = profiles[profileName];\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"@aws-sdk/client-sts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: options?.parentClientConfig,\n        }, options.clientPlugins);\n    }\n    const { source_profile } = data;\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), { logger: options.logger });\n    }\n    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, {\n            ...profiles,\n            [source_profile]: {\n                ...profiles[source_profile],\n                role_arn: data.role_arn ?? profiles[source_profile].role_arn,\n            },\n        }, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        })\n        : (await resolveCredentialSource(data.credential_source, profileName, options.logger)(options))();\n    const params = {\n        RoleArn: data.role_arn,\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n        ExternalId: data.external_id,\n        DurationSeconds: parseInt(data.duration_seconds || \"3600\", 10),\n    };\n    const { mfa_serial } = data;\n    if (mfa_serial) {\n        if (!options.mfaCodeProvider) {\n            throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });\n        }\n        params.SerialNumber = mfa_serial;\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n    }\n    const sourceCreds = await sourceCredsProvider;\n    return options.roleAssumer(sourceCreds, params);\n};\n","export const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})());\n","export const resolveSsoCredentials = async (profile, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n    })();\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","export const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1;\nexport const resolveStaticCredentials = (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveStaticCredentials\");\n    return Promise.resolve({\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        credentialScope: profile.aws_credential_scope,\n    });\n};\n","export const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})());\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, options);\n    }\n    throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini - fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName(init), profiles, init);\n};\n","export * from \"./fromIni\";\n"],"mappings":"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","names":["init_dist_es","init_dist_es","init_dist_es"]}