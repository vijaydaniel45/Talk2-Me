import {
  getProfileName,
  init_dist_es as init_dist_es2,
  parseKnownFiles
} from "./chunk-4UDAOY2U.mjs";
import {
  CredentialsProviderError,
  chain,
  init_dist_es
} from "./chunk-GN4I7XPH.mjs";
import {
  __esm
} from "./chunk-DANUECVT.mjs";

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js
var resolveCredentialSource;
var init_resolveCredentialSource = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js"() {
    "use strict";
    init_dist_es();
    resolveCredentialSource = (credentialSource, profileName, logger) => {
      const sourceProvidersMap = {
        EcsContainer: async (options) => {
          const { fromHttp } = await import("./dist-es-R5RI4HJ2.mjs");
          const { fromContainerMetadata } = await import("./dist-es-XVOMYAX5.mjs");
          logger?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer");
          return chain(fromHttp(options ?? {}), fromContainerMetadata(options));
        },
        Ec2InstanceMetadata: async (options) => {
          logger?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");
          const { fromInstanceMetadata } = await import("./dist-es-XVOMYAX5.mjs");
          return fromInstanceMetadata(options);
        },
        Environment: async (options) => {
          logger?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");
          const { fromEnv } = await import("./dist-es-WGZS6VAE.mjs");
          return fromEnv(options);
        }
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource];
      } else {
        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js
var isAssumeRoleProfile, isAssumeRoleWithSourceProfile, isCredentialSourceProfile, resolveAssumeRoleCredentials;
var init_resolveAssumeRoleCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js"() {
    "use strict";
    init_dist_es();
    init_dist_es2();
    init_resolveCredentialSource();
    init_resolveProfileData();
    isAssumeRoleProfile = (arg, { profile = "default", logger } = {}) => {
      return Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger }));
    };
    isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {
      const withSourceProfile = typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
      if (withSourceProfile) {
        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);
      }
      return withSourceProfile;
    };
    isCredentialSourceProfile = (arg, { profile, logger }) => {
      const withProviderProfile = typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
      if (withProviderProfile) {
        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);
      }
      return withProviderProfile;
    };
    resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      options.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        const { getDefaultRoleAssumer } = await import("./dist-es-BRLZJI5T.mjs");
        options.roleAssumer = getDefaultRoleAssumer({
          ...options.clientConfig,
          credentialProviderLogger: options.logger,
          parentClientConfig: options?.parentClientConfig
        }, options.clientPlugins);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${getProfileName(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), { logger: options.logger });
      }
      options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);
      const sourceCredsProvider = source_profile ? resolveProfileData(source_profile, {
        ...profiles,
        [source_profile]: {
          ...profiles[source_profile],
          role_arn: data.role_arn ?? profiles[source_profile].role_arn
        }
      }, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (await resolveCredentialSource(data.credential_source, profileName, options.logger)(options))();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id,
        DurationSeconds: parseInt(data.duration_seconds || "3600", 10)
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js
var isProcessProfile, resolveProcessCredentials;
var init_resolveProcessCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js"() {
    "use strict";
    isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    resolveProcessCredentials = async (options, profile) => import("./dist-es-UOH7UNI4.mjs").then(({ fromProcess }) => fromProcess({
      ...options,
      profile
    })());
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js
var resolveSsoCredentials, isSsoProfile;
var init_resolveSsoCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js"() {
    "use strict";
    resolveSsoCredentials = async (profile, options = {}) => {
      const { fromSSO } = await import("./dist-es-WLV6NB4C.mjs");
      return fromSSO({
        profile,
        logger: options.logger
      })();
    };
    isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js
var isStaticCredsProfile, resolveStaticCredentials;
var init_resolveStaticCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js"() {
    "use strict";
    isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    resolveStaticCredentials = (profile, options) => {
      options?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");
      return Promise.resolve({
        accessKeyId: profile.aws_access_key_id,
        secretAccessKey: profile.aws_secret_access_key,
        sessionToken: profile.aws_session_token,
        credentialScope: profile.aws_credential_scope
      });
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js
var isWebIdentityProfile, resolveWebIdentityCredentials;
var init_resolveWebIdentityCredentials = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js"() {
    "use strict";
    isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    resolveWebIdentityCredentials = async (profile, options) => import("./dist-es-62MHTGKQ.mjs").then(({ fromTokenFile }) => fromTokenFile({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,
      logger: options.logger,
      parentClientConfig: options.parentClientConfig
    })());
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js
var resolveProfileData;
var init_resolveProfileData = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js"() {
    "use strict";
    init_dist_es();
    init_resolveAssumeRoleCredentials();
    init_resolveProcessCredentials();
    init_resolveSsoCredentials();
    init_resolveStaticCredentials();
    init_resolveWebIdentityCredentials();
    resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {
        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);
      }
      if (isStaticCredsProfile(data)) {
        return resolveStaticCredentials(data, options);
      }
      if (isWebIdentityProfile(data)) {
        return resolveWebIdentityCredentials(data, options);
      }
      if (isProcessProfile(data)) {
        return resolveProcessCredentials(options, profileName);
      }
      if (isSsoProfile(data)) {
        return await resolveSsoCredentials(profileName, options);
      }
      throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js
var fromIni;
var init_fromIni = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js"() {
    "use strict";
    init_dist_es2();
    init_resolveProfileData();
    fromIni = (init = {}) => async () => {
      init.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");
      const profiles = await parseKnownFiles(init);
      return resolveProfileData(getProfileName(init), profiles, init);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js
var init_dist_es3 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-ini/dist-es/index.js"() {
    init_fromIni();
  }
});

export {
  fromIni,
  init_dist_es3 as init_dist_es
};
//# sourceMappingURL=chunk-OWNDPRL3.mjs.map