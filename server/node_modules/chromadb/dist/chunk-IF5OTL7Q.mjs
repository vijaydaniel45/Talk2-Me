import {
  getProfileName,
  init_dist_es as init_dist_es2,
  loadSharedConfigFiles
} from "./chunk-4UDAOY2U.mjs";
import {
  CredentialsProviderError,
  chain,
  fromStatic,
  init_dist_es,
  memoize
} from "./chunk-GN4I7XPH.mjs";
import {
  __esm
} from "./chunk-DANUECVT.mjs";

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/getSelectorName.js
function getSelectorName(functionString) {
  try {
    const constants = new Set(Array.from(functionString.match(/([A-Z_]){3,}/g) ?? []));
    constants.delete("CONFIG");
    constants.delete("CONFIG_PREFIX_SEPARATOR");
    constants.delete("ENV");
    return [...constants].join(", ");
  } catch (e) {
    return functionString;
  }
}
var init_getSelectorName = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/getSelectorName.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromEnv.js
var fromEnv;
var init_fromEnv = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromEnv.js"() {
    "use strict";
    init_dist_es();
    init_getSelectorName();
    fromEnv = (envVarSelector, logger) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new CredentialsProviderError(e.message || `Not found in ENV: ${getSelectorName(envVarSelector.toString())}`, { logger });
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js
var fromSharedConfigFiles;
var init_fromSharedConfigFiles = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromSharedConfigFiles.js"() {
    "use strict";
    init_dist_es();
    init_dist_es2();
    init_getSelectorName();
    fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = getProfileName(init);
      const { configFile, credentialsFile } = await loadSharedConfigFiles(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const cfgFile = preferredFile === "config" ? configFile : credentialsFile;
        const configValue = configSelector(mergedProfile, cfgFile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new CredentialsProviderError(e.message || `Not found in config files w/ profile [${profile}]: ${getSelectorName(configSelector.toString())}`, { logger: init.logger });
      }
    };
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromStatic.js
var isFunction, fromStatic2;
var init_fromStatic = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/fromStatic.js"() {
    "use strict";
    init_dist_es();
    isFunction = (func) => typeof func === "function";
    fromStatic2 = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : fromStatic(defaultValue);
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/configLoader.js
var loadConfig;
var init_configLoader = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/configLoader.js"() {
    "use strict";
    init_dist_es();
    init_fromEnv();
    init_fromSharedConfigFiles();
    init_fromStatic();
    loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => memoize(chain(fromEnv(environmentVariableSelector), fromSharedConfigFiles(configFileSelector, configuration), fromStatic2(defaultValue)));
  }
});

// ../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/index.js
var init_dist_es3 = __esm({
  "../../node_modules/.pnpm/@smithy+node-config-provider@3.1.1/node_modules/@smithy/node-config-provider/dist-es/index.js"() {
    "use strict";
    init_configLoader();
  }
});

// ../../node_modules/.pnpm/@smithy+querystring-parser@3.0.1/node_modules/@smithy/querystring-parser/dist-es/index.js
function parseQueryString(querystring) {
  const query = {};
  querystring = querystring.replace(/^\?/, "");
  if (querystring) {
    for (const pair of querystring.split("&")) {
      let [key, value = null] = pair.split("=");
      key = decodeURIComponent(key);
      if (value) {
        value = decodeURIComponent(value);
      }
      if (!(key in query)) {
        query[key] = value;
      } else if (Array.isArray(query[key])) {
        query[key].push(value);
      } else {
        query[key] = [query[key], value];
      }
    }
  }
  return query;
}
var init_dist_es4 = __esm({
  "../../node_modules/.pnpm/@smithy+querystring-parser@3.0.1/node_modules/@smithy/querystring-parser/dist-es/index.js"() {
    "use strict";
  }
});

// ../../node_modules/.pnpm/@smithy+url-parser@3.0.1/node_modules/@smithy/url-parser/dist-es/index.js
var parseUrl;
var init_dist_es5 = __esm({
  "../../node_modules/.pnpm/@smithy+url-parser@3.0.1/node_modules/@smithy/url-parser/dist-es/index.js"() {
    "use strict";
    init_dist_es4();
    parseUrl = (url) => {
      if (typeof url === "string") {
        return parseUrl(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = parseQueryString(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
  }
});

export {
  loadConfig,
  init_dist_es3 as init_dist_es,
  parseUrl,
  init_dist_es5 as init_dist_es2
};
//# sourceMappingURL=chunk-IF5OTL7Q.mjs.map