import {
  fromEnv,
  init_dist_es as init_dist_es3
} from "./chunk-VAJCYAXQ.mjs";
import {
  ENV_PROFILE,
  init_dist_es as init_dist_es2
} from "./chunk-4UDAOY2U.mjs";
import {
  CredentialsProviderError,
  chain,
  init_dist_es,
  memoize
} from "./chunk-GN4I7XPH.mjs";
import {
  __esm
} from "./chunk-DANUECVT.mjs";

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js
var ENV_IMDS_DISABLED, remoteProvider;
var init_remoteProvider = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js"() {
    "use strict";
    init_dist_es();
    ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    remoteProvider = async (init) => {
      const { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata } = await import("./dist-es-XVOMYAX5.mjs");
      if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {
        init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromHttp/fromContainerMetadata");
        const { fromHttp } = await import("./dist-es-R5RI4HJ2.mjs");
        return chain(fromHttp(init), fromContainerMetadata(init));
      }
      if (process.env[ENV_IMDS_DISABLED]) {
        return async () => {
          throw new CredentialsProviderError("EC2 Instance Metadata Service access disabled", { logger: init.logger });
        };
      }
      init.logger?.debug("@aws-sdk/credential-provider-node - remoteProvider::fromInstanceMetadata");
      return fromInstanceMetadata(init);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js
var defaultProvider, credentialsWillNeedRefresh, credentialsTreatedAsExpired;
var init_defaultProvider = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js"() {
    "use strict";
    init_dist_es3();
    init_dist_es();
    init_dist_es2();
    init_remoteProvider();
    defaultProvider = (init = {}) => memoize(chain(...init.profile || process.env[ENV_PROFILE] ? [] : [
      async () => {
        init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromEnv");
        return fromEnv(init)();
      }
    ], async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromSSO");
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        throw new CredentialsProviderError("Skipping SSO provider in default chain (inputs do not include SSO fields).", { logger: init.logger });
      }
      const { fromSSO } = await import("./dist-es-WLV6NB4C.mjs");
      return fromSSO(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromIni");
      const { fromIni } = await import("./dist-es-MHHI4RDX.mjs");
      return fromIni(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromProcess");
      const { fromProcess } = await import("./dist-es-UOH7UNI4.mjs");
      return fromProcess(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::fromTokenFile");
      const { fromTokenFile } = await import("./dist-es-62MHTGKQ.mjs");
      return fromTokenFile(init)();
    }, async () => {
      init.logger?.debug("@aws-sdk/credential-provider-node - defaultProvider::remoteProvider");
      return (await remoteProvider(init))();
    }, async () => {
      throw new CredentialsProviderError("Could not load credentials from any providers", {
        tryNextLink: false,
        logger: init.logger
      });
    }), credentialsTreatedAsExpired, credentialsWillNeedRefresh);
    credentialsWillNeedRefresh = (credentials) => credentials?.expiration !== void 0;
    credentialsTreatedAsExpired = (credentials) => credentials?.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/index.js
var init_dist_es4 = __esm({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.596.0_@aws-sdk+client-sso-oidc@3.596.0_@aws-sdk+client-sts@3.596.0/node_modules/@aws-sdk/credential-provider-node/dist-es/index.js"() {
    "use strict";
    init_defaultProvider();
  }
});

export {
  defaultProvider,
  init_dist_es4 as init_dist_es
};
//# sourceMappingURL=chunk-VXHP7JPX.mjs.map