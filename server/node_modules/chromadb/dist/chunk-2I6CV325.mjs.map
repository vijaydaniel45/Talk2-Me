{"version":3,"sources":["../../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js","../../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/constants.js","../../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js","../../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js","../../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js","../../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js","../../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js","../../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js","../../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/fromStatic.js","../../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/nodeProvider.js","../../../node_modules/.pnpm/@aws-sdk+token-providers@3.587.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/token-providers/dist-es/index.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/types.js","../../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.592.0_@aws-sdk+client-sso-oidc@3.596.0/node_modules/@aws-sdk/credential-provider-sso/dist-es/index.js"],"sourcesContent":["export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n","const ssoOidcClientsHash = {};\nexport const getSsoOidcClient = async (ssoRegion) => {\n    const { SSOOIDCClient } = await import(\"@aws-sdk/client-sso-oidc\");\n    if (ssoOidcClientsHash[ssoRegion]) {\n        return ssoOidcClientsHash[ssoRegion];\n    }\n    const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });\n    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;\n    return ssoOidcClient;\n};\n","import { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = async (ssoToken, ssoRegion) => {\n    const { CreateTokenCommand } = await import(\"@aws-sdk/client-sso-oidc\");\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { getSSOTokenFilepath } from \"@smithy/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@smithy/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/token-providers - fromSso\");\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nexport const fromStatic = ({ token, logger }) => async () => {\n    logger?.debug(\"@aws-sdk/token-providers - fromStatic\");\n    if (!token || !token.token) {\n        throw new TokenProviderError(`Please pass a valid token to fromStatic`, false);\n    }\n    return token;\n};\n","import { chain, memoize, TokenProviderError } from \"@smithy/property-provider\";\nimport { fromSso } from \"./fromSso\";\nexport const nodeProvider = (init = {}) => memoize(chain(fromSso(init), async () => {\n    throw new TokenProviderError(\"Could not load token from any providers\", false);\n}), (token) => token.expiration !== undefined && token.expiration.getTime() - Date.now() < 300000, (token) => token.expiration !== undefined);\n","export * from \"./fromSso\";\nexport * from \"./fromStatic\";\nexport * from \"./nodeProvider\";\n","import { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getSSOTokenFromFile } from \"@smithy/shared-ini-file-loader\";\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, profile, logger, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await import(\"./loadSso\");\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope } = {} } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration), credentialScope };\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const validateSsoProfile = (profile, logger) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, { tryNextLink: false, logger });\n    }\n    return profile;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-sso - fromSSO\");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = getProfileName(init);\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {\n                logger: init.logger,\n            });\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile, init.logger);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"', { tryNextLink: false, logger: init.logger });\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            profile: profileName,\n        });\n    }\n};\n","export {};\n","export * from \"./fromSSO\";\nexport * from \"./isSsoProfile\";\nexport * from \"./types\";\nexport * from \"./validateSsoProfile\";\n"],"mappings":"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","names":["init_dist_es","init_dist_es","init_dist_es","init_dist_es","init_dist_es","init_dist_es"]}